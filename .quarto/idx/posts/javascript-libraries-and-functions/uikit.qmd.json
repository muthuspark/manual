{"title":"UIkit - Documentation","markdown":{"yaml":{"title":"UIkit - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nUIkit can be installed via npm, yarn, or by downloading the pre-built files.  We recommend using npm or yarn for easier management of dependencies.\n\n**npm:**\n\n```bash\nnpm install uikit --save\n```\n\n**yarn:**\n\n```bash\nyarn add uikit\n```\n\nAfter installation, the UIkit CSS and JavaScript files will be available in your `node_modules` directory.  You can then import them into your project (see Basic Usage).  Alternatively, you can download the pre-built files from the official UIkit website and include them directly in your HTML.\n\n\n### Basic Usage\n\nOnce installed, include the necessary CSS and JavaScript files in your HTML.  The exact location depends on your project's setup, but typically you would place them within the `<head>` and before the closing `</body>` tag, respectively.\n\n**Using npm/yarn:**  After installation using the methods above, you will need to import the CSS and JS files into your application's entry point (e.g., `index.js` or `main.js`)  The import style will depend on your chosen bundler (Webpack, Parcel, Rollup etc.) but may resemble this (using ES6 modules):\n\n```javascript\nimport 'uikit/dist/css/uikit.min.css';\nimport UIkit from 'uikit';\nimport Icons from 'uikit/dist/js/uikit-icons';\n\nUIkit.use(Icons); // Load the icon library\n```\n\nIf you are using a CSS preprocessor like Sass, consider using a Sass-compatible version of UIkit for easier integration.\n\n\n**Using pre-built files:** Include the CSS and JS files directly in your HTML (replace `path/to/` with the actual path to your files):\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"path/to/uikit.min.css\" />\n</head>\n<body>\n  <script src=\"path/to/uikit.min.js\"></script>\n  <script src=\"path/to/uikit-icons.min.js\"></script> </body>\n```\n\n\n### Setting up your project\n\nBefore you start using UIkit, ensure you have a basic HTML project structure.  This might involve creating a simple `index.html` file and including any necessary JavaScript files for your application's logic.  UIkit doesn't enforce a specific project structure, but a well-organized project is recommended for maintainability. For example a basic project structure could look like this:\n\n```\nmy-project/\n├── index.html\n├── src/\n│   └── index.js\n└── node_modules/\n```\n\nRemember to adjust file paths and imports according to your project’s setup and preferred method of development.\n\n\n### First component example\n\nLet's create a simple button using UIkit.  This example assumes you've already installed and included UIkit as described above.  Add the following HTML within your `<body>`:\n\n\n```html\n<button class=\"uk-button uk-button-primary\">Click Me</button>\n```\n\nThis code will render a primary colored button thanks to the `uk-button` and `uk-button-primary` classes.  This demonstrates the basic usage of UIkit classes to style HTML elements.  Refer to the UIkit documentation for a complete list of available components and classes.  Further functionality, such as JavaScript interactions, would require referring to the component's specific documentation.\n\n\n## Core Components\n\n### Button\n\nUIkit buttons provide a consistent and styled approach to interactive elements.  They are easily customized using modifier classes.\n\n**Basic Usage:**\n\n```html\n<button class=\"uk-button\">Default Button</button>\n<button class=\"uk-button uk-button-primary\">Primary Button</button>\n<button class=\"uk-button uk-button-secondary\">Secondary Button</button>\n<button class=\"uk-button uk-button-danger\">Danger Button</button>\n```\n\n**Modifiers:**  Numerous modifier classes are available for different styles (e.g., `uk-button-large`, `uk-button-small`, `uk-button-text`, `uk-button-default`). Consult the UIkit documentation for a complete list.\n\n\n### Alert\n\nAlerts display important messages to the user.  They come in various severity levels.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-alert-primary\" uk-alert>\n  <a class=\"uk-alert-close\" uk-close></a>\n  This is a primary alert.\n</div>\n<div class=\"uk-alert-danger\" uk-alert>\n  <a class=\"uk-alert-close\" uk-close></a>\n  This is a danger alert.\n</div>\n```\n\nThe `uk-alert` attribute is required for dismissable alerts using the close button.\n\n\n### Badge\n\nBadges are small indicators, typically displaying numbers or labels.\n\n**Basic Usage:**\n\n```html\n<span class=\"uk-badge\">New</span>\n<span class=\"uk-badge uk-badge-warning\">12</span>\n```\n\n\n### Breadcrumb\n\nBreadcrumbs display a hierarchical path.\n\n**Basic Usage:**\n\n```html\n<ul class=\"uk-breadcrumb\">\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">Library</a></li>\n  <li><a href=\"#\">Data</a></li>\n</ul>\n```\n\n\n### Callout\n\nCallouts highlight important information or sections of text.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-card uk-card-body uk-card-default uk-margin\">\n  <p>This is a callout.  Use the classes `uk-card`, `uk-card-body` and `uk-card-default` for styling.</p>\n</div>\n```\n\nCustomize styling through additional card classes.\n\n\n### Close Button\n\nA small \"x\" button for dismissing elements.  Often used with alerts and modals.\n\n**Basic Usage:**\n\n```html\n<a class=\"uk-close\" uk-close></a>\n```\n\n\n### Grid\n\nUIkit's grid system provides a flexible layout for arranging content.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-grid-small uk-child-width-1-2@s\" uk-grid>\n  <div>Column 1</div>\n  <div>Column 2</div>\n</div>\n```\nThis creates a two-column grid that stacks vertically on smaller screens and horizontally on larger screens.  `@s` denotes a breakpoint (small screen).  Check UIkit documentation for breakpoint details and more advanced usage.\n\n\n### Icon\n\nUIkit provides a large set of icons.\n\n**Basic Usage:**\n\n```html\n<i class=\"uk-icon\" data-uk-icon=\"icon: user\"></i>\n<i class=\"uk-icon\" data-uk-icon=\"icon: trash; ratio: 2\"></i>\n```\n\nRequires `uikit-icons.min.js` to be included. See the icon documentation for the full list of available icons and customization options.\n\n\n### Label\n\nLabels provide textual descriptions for form elements.\n\n**Basic Usage:**\n\n```html\n<label class=\"uk-form-label\" for=\"name\">Name:</label>\n<input class=\"uk-input\" id=\"name\" type=\"text\">\n```\n\n\n### Pagination\n\nProvides numbered links for navigating through paginated content.\n\n**Basic Usage:**\n\n```html\n<ul class=\"uk-pagination\" uk-margin>\n  <li class=\"uk-active\"><a href=\"#\">1</a></li>\n  <li><a href=\"#\">2</a></li>\n  <li><a href=\"#\">3</a></li>\n</ul>\n```\n\n\n### Progress Bar\n\nDisplays the progress of a task or operation.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-progress\" style=\"width: 75%;\">\n  <div class=\"uk-progress-bar\" style=\"width: 50%;\"></div>\n</div>\n```\n\n\n### Spinner\n\nA loading indicator.\n\n**Basic Usage:**\n\n```html\n<span uk-spinner></span>\n```\n\n\n### Switch\n\nA toggle switch for on/off options.\n\n**Basic Usage:**\n\n```html\n<label>\n    <input type=\"checkbox\" checked>\n    <span class=\"uk-switch-button\"></span>\n</label>\n```\n\n\n### Table\n\nUIkit provides styling for HTML tables.\n\n**Basic Usage:**\n\n```html\n<table class=\"uk-table uk-table-striped\">\n  <thead>\n    <tr><th>Name</th><th>Email</th></tr>\n  </thead>\n  <tbody>\n    <tr><td>John Doe</td><td>john.doe@example.com</td></tr>\n  </tbody>\n</table>\n```\n\n\n### Text Input\n\nA basic text input field.\n\n**Basic Usage:**\n\n```html\n<input class=\"uk-input\" type=\"text\" placeholder=\"Enter text\">\n```\n\nNumerous options are available for customizing text inputs (e.g., `uk-input-default`,  `uk-form-width-large`). Consult the UIkit documentation for details.\n\n\n## Navigation Components\n\n### Accordion\n\nAccordions allow users to expand and collapse sections of content.\n\n**Basic Usage:**\n\n```html\n<ul uk-accordion>\n  <li class=\"uk-open\">\n    <a class=\"uk-accordion-title\" href=\"#\">Item 1</a>\n    <div class=\"uk-accordion-content\">\n      <p>Content for Item 1.</p>\n    </div>\n  </li>\n  <li>\n    <a class=\"uk-accordion-title\" href=\"#\">Item 2</a>\n    <div class=\"uk-accordion-content\">\n      <p>Content for Item 2.</p>\n    </div>\n  </li>\n</ul>\n```\nThe `uk-accordion` attribute is crucial for enabling accordion functionality.  The `uk-open` class on a list item makes it open by default.\n\n\n### Dropdown\n\nDropdowns provide a menu that appears when clicked.\n\n**Basic Usage:**\n\n```html\n<div uk-dropdown>\n  <ul class=\"uk-nav uk-dropdown-nav\">\n    <li><a href=\"#\">Item 1</a></li>\n    <li><a href=\"#\">Item 2</a></li>\n  </ul>\n</div>\n<button>Open Dropdown</button>\n```\nThis requires the `uk-dropdown` attribute on the container element.  You'll need to use JavaScript or a similar method to trigger the dropdown's appearance (e.g., attaching a click event to the button).  The button itself isn't part of the UIkit dropdown component, it is used only to trigger it.\n\n\n### Menu\n\nMenus present a list of navigation items.\n\n**Basic Usage:**\n\n```html\n<ul class=\"uk-nav uk-nav-default\">\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>\n<ul class=\"uk-nav uk-nav-primary uk-nav-side\">\n    <li class=\"uk-nav-header\">Main Navigation</li>\n    <li><a href=\"#\">Item 1</a></li>\n    <li><a href=\"#\">Item 2</a></li>\n</ul>\n```\nUIkit offers different menu styles such as  `uk-nav-default`, `uk-nav-primary`, `uk-nav-side` for customizing the appearance.\n\n\n### Navbar\n\nNavbars provide a consistent top or bottom navigation bar.\n\n**Basic Usage:**\n\n```html\n<nav class=\"uk-navbar-container\" uk-navbar>\n    <div class=\"uk-navbar-left\">\n        <a href=\"#\" class=\"uk-navbar-item uk-logo\">My Website</a>\n    </div>\n    <div class=\"uk-navbar-right\">\n        <ul class=\"uk-navbar-nav\">\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">About</a></li>\n        </ul>\n    </div>\n</nav>\n```\nThe `uk-navbar-container` and `uk-navbar` classes are essential, and  `uk-navbar-left` and `uk-navbar-right` control the alignment of elements.\n\n\n### Pagination\n\n(This component was already described in the Core Components section)\n\n\n### Tabs\n\nTabs allow users to switch between different sections of content.\n\n**Basic Usage:**\n\n```html\n<ul uk-tab>\n  <li class=\"uk-active\"><a href=\"#\">Item 1</a></li>\n  <li><a href=\"#\">Item 2</a></li>\n</ul>\n<ul class=\"uk-switcher uk-margin\">\n  <li>Content for Item 1</li>\n  <li>Content for Item 2</li>\n</ul>\n```\nThe `uk-tab` attribute on the `<ul>` element makes it a tabbed interface.  The `uk-switcher` class on the second `<ul>` is crucial for the content to be correctly switched.  The `uk-active` class is on the first `<li>` element, indicating which tab is initially selected.\n\n\n## Layout Components\n\n### Grid\n\n(This component was already described in the Core Components section)\n\n\n### Image\n\nUIkit provides classes for responsive images.\n\n**Basic Usage:**\n\n```html\n<img src=\"image.jpg\" alt=\"My Image\" class=\"uk-responsive-width\">\n```\n\nThe `uk-responsive-width` class ensures that the image scales proportionally to its container, preventing overflow.  For more advanced responsiveness, consider using the `uk-width-*` classes to control the image's width relative to its parent container.  For example, `uk-width-1-2` will make the image take up half the width of its container.\n\n\n### Container\n\nContainers provide a consistent width across different screen sizes, preventing content from overflowing.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-container\">\n  <h1>My Page Title</h1>\n  <p>This content will be contained within a defined width.</p>\n</div>\n```\nThis creates a container with a maximum width that adapts to the screen size.  UIkit offers variations like `uk-container-xsmall`, `uk-container-small`, `uk-container-large`, and `uk-container-expand` to fine-tune the container's width behavior.\n\n\n### Responsive\n\nUIkit uses media queries to achieve responsiveness.  The `uk-width-*` classes (e.g., `uk-width-1-2@m`) and other layout classes are responsive by default, adjusting their behavior based on screen size.  The `@m` indicates a breakpoint, consult the UIkit documentation for details on breakpoint sizes.\n\n\n### Flexbox\n\nUIkit leverages flexbox for flexible layout.  You can use the `uk-flex` class for basic flexbox functionality.\n\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-flex uk-flex-center\">\n  <div>Item 1</div>\n  <div>Item 2</div>\n</div>\n```\n\nThis centers the items horizontally using `uk-flex-center`.  Explore other `uk-flex-*` classes for various alignment and direction options (e.g., `uk-flex-middle`, `uk-flex-column`).\n\n\n### Position\n\nUIkit provides utility classes for positioning elements.  These classes rely on CSS positioning properties.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-position-top-left\">Top Left</div>\n<div class=\"uk-position-center\">Center</div>\n<div class=\"uk-position-bottom-right\">Bottom Right</div>\n<div class=\"uk-position-fixed uk-position-bottom-right\">Fixed Bottom Right</div>\n\n```\nThese classes offer simple positioning relative to the parent or viewport.  For absolute positioning, you can combine these classes with `uk-position-fixed` or `uk-position-absolute`. Remember that for `uk-position-fixed` to work correctly, the element should have a defined width and height.  `uk-position-absolute` removes the element from the normal flow of the page, enabling it to be positioned relative to its ancestor.\n\n\n## Form Components\n\n### Text Input\n\n(This component was already described in the Core Components section)\n\n\n### Select\n\nSelect elements allow users to choose from a list of options.\n\n**Basic Usage:**\n\n```html\n<select class=\"uk-select\">\n  <option value=\"1\">Option 1</option>\n  <option value=\"2\">Option 2</option>\n  <option value=\"3\">Option 3</option>\n</select>\n```\n\nUIkit provides basic styling for select elements.  For more advanced customization, you'll likely need custom CSS.\n\n\n### Checkbox\n\nCheckboxes allow users to select one or more options.\n\n**Basic Usage:**\n\n```html\n<label><input class=\"uk-checkbox\" type=\"checkbox\"> Checkbox Option</label>\n```\n\nThe `uk-checkbox` class provides basic styling.\n\n\n### Radio Button\n\nRadio buttons allow users to select only one option from a set.\n\n**Basic Usage:**\n\n```html\n<label><input class=\"uk-radio\" type=\"radio\" name=\"radio-group\"> Option 1</label>\n<label><input class=\"uk-radio\" type=\"radio\" name=\"radio-group\"> Option 2</label>\n```\n\nNote the shared `name` attribute for the radio buttons, ensuring only one can be selected at a time.  The `uk-radio` class applies UIkit styling.\n\n\n### Textarea\n\nTextareas allow users to input multi-line text.\n\n**Basic Usage:**\n\n```html\n<textarea class=\"uk-textarea\" rows=\"5\" placeholder=\"Enter your text here\"></textarea>\n```\n\n\n### File Input\n\nFile input elements allow users to select files from their system.\n\n**Basic Usage:**\n\n```html\n<input type=\"file\" class=\"uk-input\">\n```\n\nUIkit provides basic styling for file inputs. For a visually improved experience, you might consider using a custom component or library that enhances the default file input's appearance.\n\n\n### Form Validation\n\nUIkit doesn't provide built-in form validation functionality, but it integrates well with JavaScript validation libraries. You would typically use a JavaScript library to handle the validation logic and display error messages.  UIkit's styling can then be used to visually present error messages effectively.  You would add classes to elements to indicate valid or invalid states.  For example:\n\n```html\n<input type=\"text\" class=\"uk-input\" id=\"name\" required>\n<div id=\"name-error\" class=\"uk-text-danger uk-hidden\"></div>  <!-- Error message container -->\n\n<script>\n    // JavaScript validation logic here...  if invalid:\n    document.getElementById('name-error').textContent = 'Name is required';\n    document.getElementById('name-error').classList.remove('uk-hidden');\n</script>\n```\n\nThis example shows a basic approach.  More sophisticated validation would require a more robust JavaScript validation framework and potentially more advanced handling of error display using UIkit's components.\n\n\n## Modal & Overlay\n\n### Modal\n\nModals are overlay windows that appear on top of the main content.\n\n**Basic Usage:**\n\n```html\n<button type=\"button\" data-uk-toggle=\"target: #my-modal\">Open Modal</button>\n\n<div id=\"my-modal\" uk-modal>\n  <div class=\"uk-modal-dialog uk-modal-body\">\n    <h2 class=\"uk-modal-title\">Modal Title</h2>\n    <p>Modal content goes here.</p>\n    <button class=\"uk-button uk-modal-close\" type=\"button\">Close</button>\n  </div>\n</div>\n```\n\nThis code uses the `data-uk-toggle` attribute on the button to trigger the modal. The `uk-modal` attribute is crucial for defining the modal element.  The `.uk-modal-close` class on the button provides a styled close button.  Remember to include the necessary JavaScript for UIkit to function.\n\n\n### Tooltip\n\nTooltips provide brief information when hovering over an element.\n\n**Basic Usage:**\n\n```html\n<a href=\"#\" title=\"Tooltip text\" uk-tooltip></a>\n<button title=\"Another tooltip\" uk-tooltip=\"pos:top\">Hover</button>\n```\n\nThe `uk-tooltip` attribute enables tooltip functionality. The `title` attribute provides the tooltip text.  You can specify tooltip position using the `pos` option (e.g., `pos:top`, `pos:bottom`, `pos:left`, `pos:right`).\n\n\n### Popover\n\nPopovers are similar to tooltips but provide more space for content.\n\n**Basic Usage:**\n\n```html\n<button data-uk-popover=\"content: &lt;p&gt;Popover content here&lt;/p&gt;\">Open Popover</button>\n```\n\nThe `data-uk-popover` attribute enables popover functionality. The `content` option specifies the popover content.  You can also target an element for the content using a selector (`content: #my-popover-content`) or use a URL (`content: url.html`).\n\n\n### Dropdown\n\n(This component was already described in the Navigation Components section)\n\n\n\n## Utilities\n\n### Responsive Utilities\n\nUIkit offers utility classes for controlling the visibility and behavior of elements across different screen sizes.  These classes use media queries to adjust styles based on the viewport width.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-visible@m\">Visible on medium and larger screens</div>\n<div class=\"uk-hidden@s\">Hidden on small screens</div>\n<div class=\"uk-width-1-2@l\">Half width on large screens</div>\n```\n\nThe `@m`, `@s`, `@l`, etc. suffixes indicate the breakpoint (medium, small, large, etc.).  Consult the UIkit documentation for specific breakpoint sizes.  The `uk-visible` and `uk-hidden` classes control visibility, while `uk-width-*` classes control the element's width relative to its parent container, all responsively.\n\n\n### Spacing Utilities\n\nThese utilities provide classes for adding margin and padding to elements.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-margin\">Element with margin</div>\n<div class=\"uk-margin-top\">Top margin</div>\n<div class=\"uk-padding\">Element with padding</div>\n<div class=\"uk-padding-small\">Small padding</div>\n<div class=\"uk-margin-remove-top\">Remove top margin</div>\n<div class=\"uk-margin-remove\">Remove all margins</div>\n```\n\nUIkit provides various modifiers for fine-grained control, such as `uk-margin-small`, `uk-margin-large`, `uk-margin-remove-bottom`, etc., which can be combined with directional modifiers such as `uk-margin-top`, `uk-margin-bottom`, `uk-margin-left`, and `uk-margin-right`.  The same principle applies to padding utilities using `uk-padding`.\n\n\n### Text Utilities\n\nClasses for styling text.\n\n**Basic Usage:**\n\n```html\n<p class=\"uk-text-bold\">Bold text</p>\n<p class=\"uk-text-italic\">Italic text</p>\n<p class=\"uk-text-lead\">Lead paragraph</p>\n<p class=\"uk-text-muted\">Muted text</p>\n<p class=\"uk-text-center\">Center-aligned text</p>\n```\n\nMany other text styling utilities exist such as `uk-text-uppercase`, `uk-text-lowercase`, `uk-text-small`, `uk-text-large` etc.\n\n\n### Color Utilities\n\nClasses for applying colors to elements.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-background-primary\">Primary background</div>\n<div class=\"uk-text-secondary\">Secondary text color</div>\n<div class=\"uk-text-danger\">Danger text color</div>\n```\n\nUIkit offers a range of predefined color classes corresponding to the theme's color palette (primary, secondary, danger, success, warning, etc.).\n\n\n### Display Utilities\n\nControl the display property of elements.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-display-block\">Block-level element</div>\n<div class=\"uk-display-inline\">Inline element</div>\n<div class=\"uk-display-inline-block\">Inline-block element</div>\n<div class=\"uk-display-none\">Hidden element</div>\n```\n\nThese classes conveniently set the `display` property to `block`, `inline`, `inline-block`, or `none`.\n\n\n### Flexbox Utilities\n\n(Many of these utilities are covered in the Layout Components section, under Flexbox.  However, additional utilities exist.)  Beyond the `uk-flex-*` classes for creating and styling flex containers and items, additional utilities are available for fine-grained control over flexbox behavior.  Consult the UIkit documentation for the complete list of these utilities, as they are numerous and often depend on context.  These are mostly classes to control things like `flex-grow`, `flex-shrink`, `flex-basis`, `align-self`, `order`, etc.  These are very specific to controlling aspects of flexbox items and containers.\n\n\n## Advanced Usage\n\n### Customizing Components\n\nUIkit components can be customized using CSS and JavaScript.  You can override existing styles using CSS and modify or extend component behavior using JavaScript.  Overriding CSS is typically done by creating a custom CSS file that includes more specific selectors targeting the UIkit components' classes. For example, to change the background color of all primary buttons, you would add this to your custom CSS file:\n\n\n```css\n.uk-button-primary {\n  background-color: #007bff !important; /* Using !important is generally discouraged, use more specific selectors if possible. */\n}\n```\n\nModifying JavaScript behavior requires a deeper understanding of UIkit's code and might involve extending existing components or creating custom plugins.  Consult the UIkit source code and documentation for details on specific components' APIs.\n\n\n### Creating Custom Components\n\nCreating custom components allows extending UIkit's functionality.  This involves creating your own HTML, CSS, and JavaScript to build new components that integrate seamlessly with the existing UIkit framework.  This generally involves writing your own JavaScript component, utilizing UIkit's JavaScript API to interact with other components, and styling your new component using CSS.  The process may involve using a module bundler to manage dependencies and build your custom component.\n\n\n### Theming\n\nUIkit's theme can be customized through CSS variables (custom properties).  This approach allows changing the colors, typography, and other visual aspects of the framework without modifying the core UIkit CSS.  By setting CSS variables in your own stylesheet, you can control the appearance of UIkit components throughout your application.  Refer to the UIkit documentation for the available CSS variables and how to use them effectively.\n\n\n### Accessibility\n\nBuilding accessible applications is crucial. UIkit is designed with accessibility in mind, but it's the developer's responsibility to ensure proper usage.  Key considerations include semantic HTML, ARIA attributes, sufficient color contrast, keyboard navigation, and alternative text for images.  UIkit provides many components that inherently support accessibility, but you need to carefully select and implement them correctly to maintain accessibility throughout your project.\n\n\n### Internationalization\n\nInternationalizing (i18n) your application allows adapting it to different languages and regions. UIkit itself is language-agnostic; the responsibility of handling text translations rests with the developer.  You can use JavaScript libraries or frameworks dedicated to i18n to manage translations within your UIkit application.   These libraries usually enable loading language-specific data and dynamically switching between languages based on user preferences.\n\n\n### Performance Optimization\n\nOptimizing performance is essential for a smooth user experience.  Strategies include minifying and compressing CSS and JavaScript, using efficient image formats, and leveraging browser caching.  Understanding which UIkit components or features might impact performance and proactively addressing them through code optimization and efficient asset management is crucial.  Using lazy-loading techniques for images and other heavy assets is also recommended.  Profiling your application's performance is key to identifying performance bottlenecks.\n\n\n### Testing\n\nThorough testing is vital for ensuring UIkit application quality and reliability.  This includes unit testing individual components, integration testing interactions between components, and end-to-end testing of user flows.  Choose testing frameworks appropriate for your development environment.  Regular testing is crucial, especially when making changes to existing components or adding new ones.  Testing not only catches bugs but also helps maintain the code's quality and ensures consistency over time.\n\n\n\n\n## Contributing\n\nWe welcome contributions to UIkit!  Whether it's bug fixes, new features, or improvements to the documentation, your help is valuable.  Follow these guidelines to contribute effectively.\n\n\n### Setting up the development environment\n\n1. **Clone the repository:**  Start by cloning the UIkit repository from GitHub:\n\n   ```bash\n   git clone https://github.com/uikit/uikit.git\n   ```\n\n2. **Install dependencies:** Navigate to the cloned directory and install the necessary Node.js packages using npm or yarn:\n\n   ```bash\n   npm install\n   # or\n   yarn install\n   ```\n\n3. **Start the development server:** UIkit uses a development server for live reloading and building the project.  Run the following command:\n\n   ```bash\n   npm start\n   # or\n   yarn start\n   ```\n\n   This will start a local development server and open UIkit's website in your browser.  Changes you make to the code will be automatically reflected in the browser.\n\n\n### Coding standards\n\nUIkit adheres to specific coding standards to maintain consistency and readability.  Please ensure your contributions follow these guidelines:\n\n* **Code style:** Follow the existing code style in the project.  Use a consistent indentation (spaces, not tabs), naming conventions, and comment style.\n* **JavaScript:**  Use ES6+ JavaScript features where appropriate.\n* **CSS:**  Use a consistent CSS style, following the existing patterns in UIkit's CSS files.\n* **HTML:**  Use semantic HTML and follow best practices for accessibility (ARIA attributes, etc.).\n* **Documentation:**  Provide clear and concise documentation for any new features or changes you introduce.  Update existing documentation if necessary.\n* **Testing:**  Write comprehensive unit tests for any new code or changes you make.\n\n\n### Testing your code\n\nBefore submitting a pull request, ensure your code passes all tests.  Run the test suite using:\n\n```bash\nnpm test\n# or\nyarn test\n```\n\nAddress any failures before submitting your changes.  Consider adding new tests to cover any new functionality you've introduced.\n\n\n### Submitting a pull request\n\n1. **Fork the repository:** Create a fork of the UIkit repository on GitHub.\n2. **Create a branch:** Create a new branch for your changes.  Use a descriptive branch name that reflects the purpose of your contribution (e.g., `fix/button-styling`, `feat/new-component`).\n3. **Make your changes:** Implement your changes, adhering to the coding standards.\n4. **Commit your changes:** Commit your changes with clear and concise commit messages.  Follow a consistent commit message style (e.g., \"Fix: Correct button margin\").\n5. **Push your branch:** Push your branch to your forked repository.\n6. **Create a pull request:** Create a pull request on GitHub, comparing your branch to the main branch of the UIkit repository.\n7. **Address feedback:**  Respond to any feedback or requests for changes from the maintainers.  Make necessary revisions and update your pull request.\n8. **Merge your changes:** Once the maintainers approve your pull request, it will be merged into the main UIkit repository.\n\n\nRemember to consult the UIkit contribution guidelines on the official GitHub repository for the most up-to-date information and any specific instructions.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Breakpoint:** A screen size at which the layout or styling of UIkit components changes. UIkit defines several breakpoints (e.g., small, medium, large) to adapt to different screen sizes.\n* **Component:** A reusable UI element, such as a button, modal, or grid.\n* **Modifier:** A class added to a component to modify its appearance or behavior. For example, adding `uk-button-primary` modifies a standard button to have a primary color.\n* **Plugin:** A JavaScript module that extends UIkit's functionality.\n* **Utility Class:** A CSS class that provides a simple styling or layout function, such as adding margin or padding.\n* **Theme:** The overall visual style of UIkit, defined by color palettes, typography, and other design elements.\n* **Mixins:** Reusable CSS snippets that can be included in other CSS rules to apply consistent styling patterns.\n* **Sass:** A CSS preprocessor that offers features such as variables, nesting, and mixins, enhancing code organization and maintainability.\n\n\n### Changelog\n\nThis section would typically contain a detailed record of changes made to UIkit across different releases.  Each entry would list version numbers, dates, and a summary of changes (new features, bug fixes, breaking changes, etc.).  This section should be regularly updated with information about new releases and changes to the library.  Refer to the UIkit project's official repository (usually on GitHub) for the most current changelog.\n\n\n### License\n\nUIkit is licensed under the [MIT License](https://opensource.org/licenses/MIT).  This means that you are free to use, modify, and distribute UIkit in your projects, subject to the terms of the MIT License.  The license grants broad permissions to use the software, provided that the license notice is included in any redistribution.  You can find the complete license text in the project's repository.  Always refer to the latest license file in the repository as it may contain minor updates or clarifications over time.\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nUIkit can be installed via npm, yarn, or by downloading the pre-built files.  We recommend using npm or yarn for easier management of dependencies.\n\n**npm:**\n\n```bash\nnpm install uikit --save\n```\n\n**yarn:**\n\n```bash\nyarn add uikit\n```\n\nAfter installation, the UIkit CSS and JavaScript files will be available in your `node_modules` directory.  You can then import them into your project (see Basic Usage).  Alternatively, you can download the pre-built files from the official UIkit website and include them directly in your HTML.\n\n\n### Basic Usage\n\nOnce installed, include the necessary CSS and JavaScript files in your HTML.  The exact location depends on your project's setup, but typically you would place them within the `<head>` and before the closing `</body>` tag, respectively.\n\n**Using npm/yarn:**  After installation using the methods above, you will need to import the CSS and JS files into your application's entry point (e.g., `index.js` or `main.js`)  The import style will depend on your chosen bundler (Webpack, Parcel, Rollup etc.) but may resemble this (using ES6 modules):\n\n```javascript\nimport 'uikit/dist/css/uikit.min.css';\nimport UIkit from 'uikit';\nimport Icons from 'uikit/dist/js/uikit-icons';\n\nUIkit.use(Icons); // Load the icon library\n```\n\nIf you are using a CSS preprocessor like Sass, consider using a Sass-compatible version of UIkit for easier integration.\n\n\n**Using pre-built files:** Include the CSS and JS files directly in your HTML (replace `path/to/` with the actual path to your files):\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"path/to/uikit.min.css\" />\n</head>\n<body>\n  <script src=\"path/to/uikit.min.js\"></script>\n  <script src=\"path/to/uikit-icons.min.js\"></script> </body>\n```\n\n\n### Setting up your project\n\nBefore you start using UIkit, ensure you have a basic HTML project structure.  This might involve creating a simple `index.html` file and including any necessary JavaScript files for your application's logic.  UIkit doesn't enforce a specific project structure, but a well-organized project is recommended for maintainability. For example a basic project structure could look like this:\n\n```\nmy-project/\n├── index.html\n├── src/\n│   └── index.js\n└── node_modules/\n```\n\nRemember to adjust file paths and imports according to your project’s setup and preferred method of development.\n\n\n### First component example\n\nLet's create a simple button using UIkit.  This example assumes you've already installed and included UIkit as described above.  Add the following HTML within your `<body>`:\n\n\n```html\n<button class=\"uk-button uk-button-primary\">Click Me</button>\n```\n\nThis code will render a primary colored button thanks to the `uk-button` and `uk-button-primary` classes.  This demonstrates the basic usage of UIkit classes to style HTML elements.  Refer to the UIkit documentation for a complete list of available components and classes.  Further functionality, such as JavaScript interactions, would require referring to the component's specific documentation.\n\n\n## Core Components\n\n### Button\n\nUIkit buttons provide a consistent and styled approach to interactive elements.  They are easily customized using modifier classes.\n\n**Basic Usage:**\n\n```html\n<button class=\"uk-button\">Default Button</button>\n<button class=\"uk-button uk-button-primary\">Primary Button</button>\n<button class=\"uk-button uk-button-secondary\">Secondary Button</button>\n<button class=\"uk-button uk-button-danger\">Danger Button</button>\n```\n\n**Modifiers:**  Numerous modifier classes are available for different styles (e.g., `uk-button-large`, `uk-button-small`, `uk-button-text`, `uk-button-default`). Consult the UIkit documentation for a complete list.\n\n\n### Alert\n\nAlerts display important messages to the user.  They come in various severity levels.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-alert-primary\" uk-alert>\n  <a class=\"uk-alert-close\" uk-close></a>\n  This is a primary alert.\n</div>\n<div class=\"uk-alert-danger\" uk-alert>\n  <a class=\"uk-alert-close\" uk-close></a>\n  This is a danger alert.\n</div>\n```\n\nThe `uk-alert` attribute is required for dismissable alerts using the close button.\n\n\n### Badge\n\nBadges are small indicators, typically displaying numbers or labels.\n\n**Basic Usage:**\n\n```html\n<span class=\"uk-badge\">New</span>\n<span class=\"uk-badge uk-badge-warning\">12</span>\n```\n\n\n### Breadcrumb\n\nBreadcrumbs display a hierarchical path.\n\n**Basic Usage:**\n\n```html\n<ul class=\"uk-breadcrumb\">\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">Library</a></li>\n  <li><a href=\"#\">Data</a></li>\n</ul>\n```\n\n\n### Callout\n\nCallouts highlight important information or sections of text.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-card uk-card-body uk-card-default uk-margin\">\n  <p>This is a callout.  Use the classes `uk-card`, `uk-card-body` and `uk-card-default` for styling.</p>\n</div>\n```\n\nCustomize styling through additional card classes.\n\n\n### Close Button\n\nA small \"x\" button for dismissing elements.  Often used with alerts and modals.\n\n**Basic Usage:**\n\n```html\n<a class=\"uk-close\" uk-close></a>\n```\n\n\n### Grid\n\nUIkit's grid system provides a flexible layout for arranging content.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-grid-small uk-child-width-1-2@s\" uk-grid>\n  <div>Column 1</div>\n  <div>Column 2</div>\n</div>\n```\nThis creates a two-column grid that stacks vertically on smaller screens and horizontally on larger screens.  `@s` denotes a breakpoint (small screen).  Check UIkit documentation for breakpoint details and more advanced usage.\n\n\n### Icon\n\nUIkit provides a large set of icons.\n\n**Basic Usage:**\n\n```html\n<i class=\"uk-icon\" data-uk-icon=\"icon: user\"></i>\n<i class=\"uk-icon\" data-uk-icon=\"icon: trash; ratio: 2\"></i>\n```\n\nRequires `uikit-icons.min.js` to be included. See the icon documentation for the full list of available icons and customization options.\n\n\n### Label\n\nLabels provide textual descriptions for form elements.\n\n**Basic Usage:**\n\n```html\n<label class=\"uk-form-label\" for=\"name\">Name:</label>\n<input class=\"uk-input\" id=\"name\" type=\"text\">\n```\n\n\n### Pagination\n\nProvides numbered links for navigating through paginated content.\n\n**Basic Usage:**\n\n```html\n<ul class=\"uk-pagination\" uk-margin>\n  <li class=\"uk-active\"><a href=\"#\">1</a></li>\n  <li><a href=\"#\">2</a></li>\n  <li><a href=\"#\">3</a></li>\n</ul>\n```\n\n\n### Progress Bar\n\nDisplays the progress of a task or operation.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-progress\" style=\"width: 75%;\">\n  <div class=\"uk-progress-bar\" style=\"width: 50%;\"></div>\n</div>\n```\n\n\n### Spinner\n\nA loading indicator.\n\n**Basic Usage:**\n\n```html\n<span uk-spinner></span>\n```\n\n\n### Switch\n\nA toggle switch for on/off options.\n\n**Basic Usage:**\n\n```html\n<label>\n    <input type=\"checkbox\" checked>\n    <span class=\"uk-switch-button\"></span>\n</label>\n```\n\n\n### Table\n\nUIkit provides styling for HTML tables.\n\n**Basic Usage:**\n\n```html\n<table class=\"uk-table uk-table-striped\">\n  <thead>\n    <tr><th>Name</th><th>Email</th></tr>\n  </thead>\n  <tbody>\n    <tr><td>John Doe</td><td>john.doe@example.com</td></tr>\n  </tbody>\n</table>\n```\n\n\n### Text Input\n\nA basic text input field.\n\n**Basic Usage:**\n\n```html\n<input class=\"uk-input\" type=\"text\" placeholder=\"Enter text\">\n```\n\nNumerous options are available for customizing text inputs (e.g., `uk-input-default`,  `uk-form-width-large`). Consult the UIkit documentation for details.\n\n\n## Navigation Components\n\n### Accordion\n\nAccordions allow users to expand and collapse sections of content.\n\n**Basic Usage:**\n\n```html\n<ul uk-accordion>\n  <li class=\"uk-open\">\n    <a class=\"uk-accordion-title\" href=\"#\">Item 1</a>\n    <div class=\"uk-accordion-content\">\n      <p>Content for Item 1.</p>\n    </div>\n  </li>\n  <li>\n    <a class=\"uk-accordion-title\" href=\"#\">Item 2</a>\n    <div class=\"uk-accordion-content\">\n      <p>Content for Item 2.</p>\n    </div>\n  </li>\n</ul>\n```\nThe `uk-accordion` attribute is crucial for enabling accordion functionality.  The `uk-open` class on a list item makes it open by default.\n\n\n### Dropdown\n\nDropdowns provide a menu that appears when clicked.\n\n**Basic Usage:**\n\n```html\n<div uk-dropdown>\n  <ul class=\"uk-nav uk-dropdown-nav\">\n    <li><a href=\"#\">Item 1</a></li>\n    <li><a href=\"#\">Item 2</a></li>\n  </ul>\n</div>\n<button>Open Dropdown</button>\n```\nThis requires the `uk-dropdown` attribute on the container element.  You'll need to use JavaScript or a similar method to trigger the dropdown's appearance (e.g., attaching a click event to the button).  The button itself isn't part of the UIkit dropdown component, it is used only to trigger it.\n\n\n### Menu\n\nMenus present a list of navigation items.\n\n**Basic Usage:**\n\n```html\n<ul class=\"uk-nav uk-nav-default\">\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>\n<ul class=\"uk-nav uk-nav-primary uk-nav-side\">\n    <li class=\"uk-nav-header\">Main Navigation</li>\n    <li><a href=\"#\">Item 1</a></li>\n    <li><a href=\"#\">Item 2</a></li>\n</ul>\n```\nUIkit offers different menu styles such as  `uk-nav-default`, `uk-nav-primary`, `uk-nav-side` for customizing the appearance.\n\n\n### Navbar\n\nNavbars provide a consistent top or bottom navigation bar.\n\n**Basic Usage:**\n\n```html\n<nav class=\"uk-navbar-container\" uk-navbar>\n    <div class=\"uk-navbar-left\">\n        <a href=\"#\" class=\"uk-navbar-item uk-logo\">My Website</a>\n    </div>\n    <div class=\"uk-navbar-right\">\n        <ul class=\"uk-navbar-nav\">\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">About</a></li>\n        </ul>\n    </div>\n</nav>\n```\nThe `uk-navbar-container` and `uk-navbar` classes are essential, and  `uk-navbar-left` and `uk-navbar-right` control the alignment of elements.\n\n\n### Pagination\n\n(This component was already described in the Core Components section)\n\n\n### Tabs\n\nTabs allow users to switch between different sections of content.\n\n**Basic Usage:**\n\n```html\n<ul uk-tab>\n  <li class=\"uk-active\"><a href=\"#\">Item 1</a></li>\n  <li><a href=\"#\">Item 2</a></li>\n</ul>\n<ul class=\"uk-switcher uk-margin\">\n  <li>Content for Item 1</li>\n  <li>Content for Item 2</li>\n</ul>\n```\nThe `uk-tab` attribute on the `<ul>` element makes it a tabbed interface.  The `uk-switcher` class on the second `<ul>` is crucial for the content to be correctly switched.  The `uk-active` class is on the first `<li>` element, indicating which tab is initially selected.\n\n\n## Layout Components\n\n### Grid\n\n(This component was already described in the Core Components section)\n\n\n### Image\n\nUIkit provides classes for responsive images.\n\n**Basic Usage:**\n\n```html\n<img src=\"image.jpg\" alt=\"My Image\" class=\"uk-responsive-width\">\n```\n\nThe `uk-responsive-width` class ensures that the image scales proportionally to its container, preventing overflow.  For more advanced responsiveness, consider using the `uk-width-*` classes to control the image's width relative to its parent container.  For example, `uk-width-1-2` will make the image take up half the width of its container.\n\n\n### Container\n\nContainers provide a consistent width across different screen sizes, preventing content from overflowing.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-container\">\n  <h1>My Page Title</h1>\n  <p>This content will be contained within a defined width.</p>\n</div>\n```\nThis creates a container with a maximum width that adapts to the screen size.  UIkit offers variations like `uk-container-xsmall`, `uk-container-small`, `uk-container-large`, and `uk-container-expand` to fine-tune the container's width behavior.\n\n\n### Responsive\n\nUIkit uses media queries to achieve responsiveness.  The `uk-width-*` classes (e.g., `uk-width-1-2@m`) and other layout classes are responsive by default, adjusting their behavior based on screen size.  The `@m` indicates a breakpoint, consult the UIkit documentation for details on breakpoint sizes.\n\n\n### Flexbox\n\nUIkit leverages flexbox for flexible layout.  You can use the `uk-flex` class for basic flexbox functionality.\n\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-flex uk-flex-center\">\n  <div>Item 1</div>\n  <div>Item 2</div>\n</div>\n```\n\nThis centers the items horizontally using `uk-flex-center`.  Explore other `uk-flex-*` classes for various alignment and direction options (e.g., `uk-flex-middle`, `uk-flex-column`).\n\n\n### Position\n\nUIkit provides utility classes for positioning elements.  These classes rely on CSS positioning properties.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-position-top-left\">Top Left</div>\n<div class=\"uk-position-center\">Center</div>\n<div class=\"uk-position-bottom-right\">Bottom Right</div>\n<div class=\"uk-position-fixed uk-position-bottom-right\">Fixed Bottom Right</div>\n\n```\nThese classes offer simple positioning relative to the parent or viewport.  For absolute positioning, you can combine these classes with `uk-position-fixed` or `uk-position-absolute`. Remember that for `uk-position-fixed` to work correctly, the element should have a defined width and height.  `uk-position-absolute` removes the element from the normal flow of the page, enabling it to be positioned relative to its ancestor.\n\n\n## Form Components\n\n### Text Input\n\n(This component was already described in the Core Components section)\n\n\n### Select\n\nSelect elements allow users to choose from a list of options.\n\n**Basic Usage:**\n\n```html\n<select class=\"uk-select\">\n  <option value=\"1\">Option 1</option>\n  <option value=\"2\">Option 2</option>\n  <option value=\"3\">Option 3</option>\n</select>\n```\n\nUIkit provides basic styling for select elements.  For more advanced customization, you'll likely need custom CSS.\n\n\n### Checkbox\n\nCheckboxes allow users to select one or more options.\n\n**Basic Usage:**\n\n```html\n<label><input class=\"uk-checkbox\" type=\"checkbox\"> Checkbox Option</label>\n```\n\nThe `uk-checkbox` class provides basic styling.\n\n\n### Radio Button\n\nRadio buttons allow users to select only one option from a set.\n\n**Basic Usage:**\n\n```html\n<label><input class=\"uk-radio\" type=\"radio\" name=\"radio-group\"> Option 1</label>\n<label><input class=\"uk-radio\" type=\"radio\" name=\"radio-group\"> Option 2</label>\n```\n\nNote the shared `name` attribute for the radio buttons, ensuring only one can be selected at a time.  The `uk-radio` class applies UIkit styling.\n\n\n### Textarea\n\nTextareas allow users to input multi-line text.\n\n**Basic Usage:**\n\n```html\n<textarea class=\"uk-textarea\" rows=\"5\" placeholder=\"Enter your text here\"></textarea>\n```\n\n\n### File Input\n\nFile input elements allow users to select files from their system.\n\n**Basic Usage:**\n\n```html\n<input type=\"file\" class=\"uk-input\">\n```\n\nUIkit provides basic styling for file inputs. For a visually improved experience, you might consider using a custom component or library that enhances the default file input's appearance.\n\n\n### Form Validation\n\nUIkit doesn't provide built-in form validation functionality, but it integrates well with JavaScript validation libraries. You would typically use a JavaScript library to handle the validation logic and display error messages.  UIkit's styling can then be used to visually present error messages effectively.  You would add classes to elements to indicate valid or invalid states.  For example:\n\n```html\n<input type=\"text\" class=\"uk-input\" id=\"name\" required>\n<div id=\"name-error\" class=\"uk-text-danger uk-hidden\"></div>  <!-- Error message container -->\n\n<script>\n    // JavaScript validation logic here...  if invalid:\n    document.getElementById('name-error').textContent = 'Name is required';\n    document.getElementById('name-error').classList.remove('uk-hidden');\n</script>\n```\n\nThis example shows a basic approach.  More sophisticated validation would require a more robust JavaScript validation framework and potentially more advanced handling of error display using UIkit's components.\n\n\n## Modal & Overlay\n\n### Modal\n\nModals are overlay windows that appear on top of the main content.\n\n**Basic Usage:**\n\n```html\n<button type=\"button\" data-uk-toggle=\"target: #my-modal\">Open Modal</button>\n\n<div id=\"my-modal\" uk-modal>\n  <div class=\"uk-modal-dialog uk-modal-body\">\n    <h2 class=\"uk-modal-title\">Modal Title</h2>\n    <p>Modal content goes here.</p>\n    <button class=\"uk-button uk-modal-close\" type=\"button\">Close</button>\n  </div>\n</div>\n```\n\nThis code uses the `data-uk-toggle` attribute on the button to trigger the modal. The `uk-modal` attribute is crucial for defining the modal element.  The `.uk-modal-close` class on the button provides a styled close button.  Remember to include the necessary JavaScript for UIkit to function.\n\n\n### Tooltip\n\nTooltips provide brief information when hovering over an element.\n\n**Basic Usage:**\n\n```html\n<a href=\"#\" title=\"Tooltip text\" uk-tooltip></a>\n<button title=\"Another tooltip\" uk-tooltip=\"pos:top\">Hover</button>\n```\n\nThe `uk-tooltip` attribute enables tooltip functionality. The `title` attribute provides the tooltip text.  You can specify tooltip position using the `pos` option (e.g., `pos:top`, `pos:bottom`, `pos:left`, `pos:right`).\n\n\n### Popover\n\nPopovers are similar to tooltips but provide more space for content.\n\n**Basic Usage:**\n\n```html\n<button data-uk-popover=\"content: &lt;p&gt;Popover content here&lt;/p&gt;\">Open Popover</button>\n```\n\nThe `data-uk-popover` attribute enables popover functionality. The `content` option specifies the popover content.  You can also target an element for the content using a selector (`content: #my-popover-content`) or use a URL (`content: url.html`).\n\n\n### Dropdown\n\n(This component was already described in the Navigation Components section)\n\n\n\n## Utilities\n\n### Responsive Utilities\n\nUIkit offers utility classes for controlling the visibility and behavior of elements across different screen sizes.  These classes use media queries to adjust styles based on the viewport width.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-visible@m\">Visible on medium and larger screens</div>\n<div class=\"uk-hidden@s\">Hidden on small screens</div>\n<div class=\"uk-width-1-2@l\">Half width on large screens</div>\n```\n\nThe `@m`, `@s`, `@l`, etc. suffixes indicate the breakpoint (medium, small, large, etc.).  Consult the UIkit documentation for specific breakpoint sizes.  The `uk-visible` and `uk-hidden` classes control visibility, while `uk-width-*` classes control the element's width relative to its parent container, all responsively.\n\n\n### Spacing Utilities\n\nThese utilities provide classes for adding margin and padding to elements.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-margin\">Element with margin</div>\n<div class=\"uk-margin-top\">Top margin</div>\n<div class=\"uk-padding\">Element with padding</div>\n<div class=\"uk-padding-small\">Small padding</div>\n<div class=\"uk-margin-remove-top\">Remove top margin</div>\n<div class=\"uk-margin-remove\">Remove all margins</div>\n```\n\nUIkit provides various modifiers for fine-grained control, such as `uk-margin-small`, `uk-margin-large`, `uk-margin-remove-bottom`, etc., which can be combined with directional modifiers such as `uk-margin-top`, `uk-margin-bottom`, `uk-margin-left`, and `uk-margin-right`.  The same principle applies to padding utilities using `uk-padding`.\n\n\n### Text Utilities\n\nClasses for styling text.\n\n**Basic Usage:**\n\n```html\n<p class=\"uk-text-bold\">Bold text</p>\n<p class=\"uk-text-italic\">Italic text</p>\n<p class=\"uk-text-lead\">Lead paragraph</p>\n<p class=\"uk-text-muted\">Muted text</p>\n<p class=\"uk-text-center\">Center-aligned text</p>\n```\n\nMany other text styling utilities exist such as `uk-text-uppercase`, `uk-text-lowercase`, `uk-text-small`, `uk-text-large` etc.\n\n\n### Color Utilities\n\nClasses for applying colors to elements.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-background-primary\">Primary background</div>\n<div class=\"uk-text-secondary\">Secondary text color</div>\n<div class=\"uk-text-danger\">Danger text color</div>\n```\n\nUIkit offers a range of predefined color classes corresponding to the theme's color palette (primary, secondary, danger, success, warning, etc.).\n\n\n### Display Utilities\n\nControl the display property of elements.\n\n**Basic Usage:**\n\n```html\n<div class=\"uk-display-block\">Block-level element</div>\n<div class=\"uk-display-inline\">Inline element</div>\n<div class=\"uk-display-inline-block\">Inline-block element</div>\n<div class=\"uk-display-none\">Hidden element</div>\n```\n\nThese classes conveniently set the `display` property to `block`, `inline`, `inline-block`, or `none`.\n\n\n### Flexbox Utilities\n\n(Many of these utilities are covered in the Layout Components section, under Flexbox.  However, additional utilities exist.)  Beyond the `uk-flex-*` classes for creating and styling flex containers and items, additional utilities are available for fine-grained control over flexbox behavior.  Consult the UIkit documentation for the complete list of these utilities, as they are numerous and often depend on context.  These are mostly classes to control things like `flex-grow`, `flex-shrink`, `flex-basis`, `align-self`, `order`, etc.  These are very specific to controlling aspects of flexbox items and containers.\n\n\n## Advanced Usage\n\n### Customizing Components\n\nUIkit components can be customized using CSS and JavaScript.  You can override existing styles using CSS and modify or extend component behavior using JavaScript.  Overriding CSS is typically done by creating a custom CSS file that includes more specific selectors targeting the UIkit components' classes. For example, to change the background color of all primary buttons, you would add this to your custom CSS file:\n\n\n```css\n.uk-button-primary {\n  background-color: #007bff !important; /* Using !important is generally discouraged, use more specific selectors if possible. */\n}\n```\n\nModifying JavaScript behavior requires a deeper understanding of UIkit's code and might involve extending existing components or creating custom plugins.  Consult the UIkit source code and documentation for details on specific components' APIs.\n\n\n### Creating Custom Components\n\nCreating custom components allows extending UIkit's functionality.  This involves creating your own HTML, CSS, and JavaScript to build new components that integrate seamlessly with the existing UIkit framework.  This generally involves writing your own JavaScript component, utilizing UIkit's JavaScript API to interact with other components, and styling your new component using CSS.  The process may involve using a module bundler to manage dependencies and build your custom component.\n\n\n### Theming\n\nUIkit's theme can be customized through CSS variables (custom properties).  This approach allows changing the colors, typography, and other visual aspects of the framework without modifying the core UIkit CSS.  By setting CSS variables in your own stylesheet, you can control the appearance of UIkit components throughout your application.  Refer to the UIkit documentation for the available CSS variables and how to use them effectively.\n\n\n### Accessibility\n\nBuilding accessible applications is crucial. UIkit is designed with accessibility in mind, but it's the developer's responsibility to ensure proper usage.  Key considerations include semantic HTML, ARIA attributes, sufficient color contrast, keyboard navigation, and alternative text for images.  UIkit provides many components that inherently support accessibility, but you need to carefully select and implement them correctly to maintain accessibility throughout your project.\n\n\n### Internationalization\n\nInternationalizing (i18n) your application allows adapting it to different languages and regions. UIkit itself is language-agnostic; the responsibility of handling text translations rests with the developer.  You can use JavaScript libraries or frameworks dedicated to i18n to manage translations within your UIkit application.   These libraries usually enable loading language-specific data and dynamically switching between languages based on user preferences.\n\n\n### Performance Optimization\n\nOptimizing performance is essential for a smooth user experience.  Strategies include minifying and compressing CSS and JavaScript, using efficient image formats, and leveraging browser caching.  Understanding which UIkit components or features might impact performance and proactively addressing them through code optimization and efficient asset management is crucial.  Using lazy-loading techniques for images and other heavy assets is also recommended.  Profiling your application's performance is key to identifying performance bottlenecks.\n\n\n### Testing\n\nThorough testing is vital for ensuring UIkit application quality and reliability.  This includes unit testing individual components, integration testing interactions between components, and end-to-end testing of user flows.  Choose testing frameworks appropriate for your development environment.  Regular testing is crucial, especially when making changes to existing components or adding new ones.  Testing not only catches bugs but also helps maintain the code's quality and ensures consistency over time.\n\n\n\n\n## Contributing\n\nWe welcome contributions to UIkit!  Whether it's bug fixes, new features, or improvements to the documentation, your help is valuable.  Follow these guidelines to contribute effectively.\n\n\n### Setting up the development environment\n\n1. **Clone the repository:**  Start by cloning the UIkit repository from GitHub:\n\n   ```bash\n   git clone https://github.com/uikit/uikit.git\n   ```\n\n2. **Install dependencies:** Navigate to the cloned directory and install the necessary Node.js packages using npm or yarn:\n\n   ```bash\n   npm install\n   # or\n   yarn install\n   ```\n\n3. **Start the development server:** UIkit uses a development server for live reloading and building the project.  Run the following command:\n\n   ```bash\n   npm start\n   # or\n   yarn start\n   ```\n\n   This will start a local development server and open UIkit's website in your browser.  Changes you make to the code will be automatically reflected in the browser.\n\n\n### Coding standards\n\nUIkit adheres to specific coding standards to maintain consistency and readability.  Please ensure your contributions follow these guidelines:\n\n* **Code style:** Follow the existing code style in the project.  Use a consistent indentation (spaces, not tabs), naming conventions, and comment style.\n* **JavaScript:**  Use ES6+ JavaScript features where appropriate.\n* **CSS:**  Use a consistent CSS style, following the existing patterns in UIkit's CSS files.\n* **HTML:**  Use semantic HTML and follow best practices for accessibility (ARIA attributes, etc.).\n* **Documentation:**  Provide clear and concise documentation for any new features or changes you introduce.  Update existing documentation if necessary.\n* **Testing:**  Write comprehensive unit tests for any new code or changes you make.\n\n\n### Testing your code\n\nBefore submitting a pull request, ensure your code passes all tests.  Run the test suite using:\n\n```bash\nnpm test\n# or\nyarn test\n```\n\nAddress any failures before submitting your changes.  Consider adding new tests to cover any new functionality you've introduced.\n\n\n### Submitting a pull request\n\n1. **Fork the repository:** Create a fork of the UIkit repository on GitHub.\n2. **Create a branch:** Create a new branch for your changes.  Use a descriptive branch name that reflects the purpose of your contribution (e.g., `fix/button-styling`, `feat/new-component`).\n3. **Make your changes:** Implement your changes, adhering to the coding standards.\n4. **Commit your changes:** Commit your changes with clear and concise commit messages.  Follow a consistent commit message style (e.g., \"Fix: Correct button margin\").\n5. **Push your branch:** Push your branch to your forked repository.\n6. **Create a pull request:** Create a pull request on GitHub, comparing your branch to the main branch of the UIkit repository.\n7. **Address feedback:**  Respond to any feedback or requests for changes from the maintainers.  Make necessary revisions and update your pull request.\n8. **Merge your changes:** Once the maintainers approve your pull request, it will be merged into the main UIkit repository.\n\n\nRemember to consult the UIkit contribution guidelines on the official GitHub repository for the most up-to-date information and any specific instructions.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Breakpoint:** A screen size at which the layout or styling of UIkit components changes. UIkit defines several breakpoints (e.g., small, medium, large) to adapt to different screen sizes.\n* **Component:** A reusable UI element, such as a button, modal, or grid.\n* **Modifier:** A class added to a component to modify its appearance or behavior. For example, adding `uk-button-primary` modifies a standard button to have a primary color.\n* **Plugin:** A JavaScript module that extends UIkit's functionality.\n* **Utility Class:** A CSS class that provides a simple styling or layout function, such as adding margin or padding.\n* **Theme:** The overall visual style of UIkit, defined by color palettes, typography, and other design elements.\n* **Mixins:** Reusable CSS snippets that can be included in other CSS rules to apply consistent styling patterns.\n* **Sass:** A CSS preprocessor that offers features such as variables, nesting, and mixins, enhancing code organization and maintainability.\n\n\n### Changelog\n\nThis section would typically contain a detailed record of changes made to UIkit across different releases.  Each entry would list version numbers, dates, and a summary of changes (new features, bug fixes, breaking changes, etc.).  This section should be regularly updated with information about new releases and changes to the library.  Refer to the UIkit project's official repository (usually on GitHub) for the most current changelog.\n\n\n### License\n\nUIkit is licensed under the [MIT License](https://opensource.org/licenses/MIT).  This means that you are free to use, modify, and distribute UIkit in your projects, subject to the terms of the MIT License.  The license grants broad permissions to use the software, provided that the license notice is included in any redistribution.  You can find the complete license text in the project's repository.  Always refer to the latest license file in the repository as it may contain minor updates or clarifications over time.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"uikit.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"UIkit - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}