{"title":"justifiedGallery - Documentation","markdown":{"yaml":{"title":"justifiedGallery - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is justifiedGallery?\n\njustifiedGallery is a jQuery plugin designed to create beautiful, responsive, and easily customizable photo galleries.  It arranges images in a justified layout, meaning images are sized and positioned to fill the available width evenly, resulting in a clean and visually appealing presentation. Unlike traditional grid layouts, justifiedGallery adapts dynamically to different screen sizes and window resolutions, maintaining its aesthetic appeal on desktops, tablets, and mobile devices.  It's ideal for showcasing images, portfolios, or any visual content where a balanced and responsive presentation is crucial.\n\n\n### Key Features\n\n* **Responsive Design:** Automatically adjusts the layout to fit different screen sizes and window resolutions.\n* **Justified Layout:**  Evenly distributes images across the available width for a visually appealing presentation.\n* **Easy Customization:** Highly customizable via options, allowing control over image spacing, margins, row heights, and more.\n* **Image Caption Support:**  Easily display captions for each image.\n* **Lightweight:**  Minimal impact on page load time.\n* **Cross-browser Compatibility:**  Works across a wide range of modern browsers.\n* **Extensible:**  Can be extended with custom functionality through its API.\n* **Lazy Loading (Optional):**  Improve initial page load performance by loading images only when they are visible.\n\n\n### Getting Started\n\nTo use justifiedGallery, you'll need to include jQuery and the justifiedGallery script in your HTML file.  Download the plugin from [insert download link here] and include it as follows:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> <!-- Or your jQuery source -->\n<script src=\"justifiedGallery.min.js\"></script> \n```\n\nThen, create a container element for your images.  This container will be targeted by the plugin. Example:\n\n```html\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\" />\n  <img src=\"image2.jpg\" alt=\"Image 2\" />\n  <img src=\"image3.jpg\" alt=\"Image 3\" />\n  <!-- ... more images ... -->\n</div>\n```\n\nFinally, initialize the plugin on your container using a simple jQuery call:\n\n```javascript\n$(\"#myGallery\").justifiedGallery();\n```\n\nThis will create a justified gallery using the default settings.  For more advanced customization, refer to the options section in this manual [link to options section].\n\n\n## Installation and Setup\n\n### Installing via npm or yarn\n\njustifiedGallery is available via npm and yarn.  To install it, use the following command in your terminal:\n\n```bash\nnpm install justifiedgallery\n# or\nyarn add justifiedgallery\n```\n\nAfter installation, you can import it into your project using your preferred module bundler (e.g., Webpack, Parcel).  For example, using ES6 modules:\n\n```javascript\nimport justifiedGallery from 'justifiedgallery';\nimport $ from 'jquery'; //Ensure you also import jQuery\n\n$(document).ready(function() {\n    $('#myGallery').justifiedGallery();\n});\n```\n\nRemember to adjust the selector `#myGallery` to match the ID of your gallery container.\n\n\n### Including justifiedGallery in your project\n\nIf you prefer not to use a package manager, you can download the `justifiedGallery.min.js` file directly from [Insert download link here].  Include it in your HTML file after including jQuery:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>  <!-- Or your jQuery source -->\n<script src=\"justifiedGallery.min.js\"></script>\n```\n\nPlace this script tag just before the closing `</body>` tag, or within a `$(document).ready()` block to ensure jQuery is loaded before the plugin.\n\n### Basic HTML Structure\n\nYour HTML should include a container element to hold your images.  This container will be targeted by the justifiedGallery plugin.  You can use any suitable HTML element, such as a `<div>` or a `<ul>`.  Images within the container can be added using `<img>` tags.  For example:\n\n```html\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\">\n  <img src=\"image2.jpg\" alt=\"Image 2\">\n  <img src=\"image3.jpg\" alt=\"Image 3\">\n  <img src=\"image4.jpg\" alt=\"Image 4\">\n</div>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, etc., with the actual paths to your images.  The `alt` attributes are crucial for accessibility.\n\n\n### Configuration Options\n\njustifiedGallery offers several options to customize the gallery's appearance and behavior.  These options are passed as a JavaScript object to the `justifiedGallery()` function.\n\n* **`rowHeight`:** (Number) The height of each row in pixels.  Defaults to 100.\n* **`lastRow`:** ('justify' | 'nojustify' | 'left')  How to handle the last row. 'justify' (default) justifies the last row. 'nojustify' stacks images in the last row. 'left' aligns images to the left.\n* **`margins`:** (Number) The margin between images in pixels. Defaults to 1.\n* **`border`:** (Number) The border width of images in pixels. Defaults to 0.\n* **`randomize`:** (Boolean) Randomizes the order of images. Defaults to `false`.\n* **`justifyThreshold`:** (Number) The minimum height of a row to justify. Prevents the creation of very short rows.  Defaults to 0.\n* **`waitThumbnailsLoad`:** (Boolean) If set to true, the gallery will be re-justified after all thumbnail images have finished loading. Defaults to `true`.\n* **`selector`:** (String)  A jQuery selector to target specific elements within the gallery container.  Defaults to `'img'`\n* **`target`:** (String)  The container in which the images should be displayed. Defaults to `null`, meaning the images stay in the original container.\n* **`rel`:** (String) value for rel attribute of img tags, useful for lightbox.\n* **`captions`:** (Boolean) Whether to show captions. Defaults to `false`\n* **`captionClass`:** (String) CSS class for captions. Defaults to `'jgallery-caption'`\n\n\nExample usage with custom options:\n\n```javascript\n$(\"#myGallery\").justifiedGallery({\n  rowHeight: 150,\n  margins: 5,\n  lastRow: 'nojustify',\n  captions: true\n});\n```\n\nRefer to the complete list of options and detailed explanations on [Insert link to detailed options documentation here]\n\n\n\n## Usage and API\n\n### Creating a justifiedGallery instance\n\nThe core functionality of justifiedGallery revolves around creating an instance of the gallery. This is done by calling the `justifiedGallery()` method on a jQuery selection containing the images you want to display.  The method accepts an optional configuration object as its argument.  For example:\n\n\n```javascript\n$(\"#myGallery\").justifiedGallery({\n  rowHeight: 120,\n  margins: 8\n});\n```\n\nThis code selects the element with the ID \"myGallery\" and initializes a justifiedGallery instance with a row height of 120 pixels and 8-pixel margins between images.  If no options are provided, the plugin uses default settings.  Remember to include jQuery and the justifiedGallery script in your HTML before using this code (as described in the Installation and Setup section).\n\n\n### Image Loading and Display\n\njustifiedGallery handles the loading and display of images efficiently. By default (`waitThumbnailsLoad: true`), it waits for all images to load before calculating and applying the justified layout. This ensures the gallery renders correctly.  If you have a large number of images, you might consider setting `waitThumbnailsLoad` to `false` to improve initial rendering speed. The layout will then readjust once the images are fully loaded.  You can also manage image loading manually using the API methods (see below).\n\n\n### Responsive Design and Behavior\n\njustifiedGallery is inherently responsive.  It recalculates the justified layout whenever the browser window is resized.  This ensures that the gallery always looks its best regardless of screen size. No additional code is required for responsive behavior â€“ it's built-in.  The layout adjusts automatically to maintain an even distribution of images across the available width.\n\n\n### Customizing the Appearance\n\nYou can customize the appearance of your justifiedGallery using CSS.  The plugin applies default classes to the gallery container and its elements, allowing you to style it precisely. You can target the following classes to control aspects of the layout:\n\n* `.justified-gallery`: The main container.\n* `.justified-gallery img`: The images within the gallery.\n* `.jgallery-caption`: The caption element (if enabled).\n\nYou can also customize aspects of the appearance through configuration options like `rowHeight`, `margins`, `border`, and `lastRow` (as detailed in the Configuration Options section).  Use these options to fine-tune spacing, row heights, and the handling of the last row.\n\n\n### API Methods and Events\n\njustifiedGallery provides a few API methods for controlling and interacting with the gallery instance:\n\n* **`destroy()`:** Removes the justifiedGallery layout and restores the original HTML structure.\n* **`rejustify()`:** Recalculates and reapplies the justified layout. This is useful if you dynamically add or remove images from the gallery.\n* **`option(name)`:** Returns the value of the specified option.\n* **`option(name, value)`:** Sets the value of the specified option and re-justifies the gallery.\n\n**Events:**\n\njustifiedGallery triggers the following events:\n\n* **`jg.complete`:** Fired when the gallery has been completely rendered (all images loaded and layout applied).\n* **`jg.resized`:** Fired when the gallery is resized due to browser window resizing.\n\nExample of using the `rejustify()` method:\n\n```javascript\n$(\"#myGallery\").justifiedGallery();\n// ... later, after adding new images ...\n$(\"#myGallery\").justifiedGallery('rejustify');\n```\n\nYou can listen for events using jQuery's `.on()` method:\n\n```javascript\n$(\"#myGallery\").on(\"jg.complete\", function() {\n  console.log(\"justifiedGallery rendering complete!\");\n});\n```\n\nRemember to consult the complete API documentation [Insert Link Here] for further details and examples.\n\n\n## Customization Options\n\n### Margin and Row Height Adjustment\n\nThe core visual aspect of justifiedGallery is controlled by `rowHeight` and `margins`.  These options directly impact the spacing between images and the overall look.\n\n* **`rowHeight`:** This option (a number representing pixels) determines the height of each row in the gallery. Adjusting this value significantly alters the layout's appearance.  Larger values lead to fewer, taller rows; smaller values result in more, shorter rows.  The default value is 100.\n\n* **`margins`:** This option (a number representing pixels) sets the margin between images, both horizontally and vertically.  Increasing this value adds more spacing between images, making the gallery appear less dense. Decreasing it creates a tighter, more compact layout. The default value is 1.\n\n\n### Image Sizing and Scaling\n\njustifiedGallery doesn't offer direct control over individual image dimensions *before* justification.  It calculates the optimal dimensions for each image to fit the justified layout based on the `rowHeight` and `margins`.  However, you can influence the final displayed size by:\n\n* **Setting `rowHeight`:** As explained above, adjusting `rowHeight` indirectly affects image size, controlling the overall proportion of height to width.\n\n* **Using CSS:**  You can use CSS styles applied to the images themselves (e.g., `max-width`, `max-height`) to constrain their size within the justified layout.  Be aware that this might override some aspects of justifiedGallery's automatic sizing, potentially disrupting the even distribution.  Use this carefully.\n\n* **Pre-processing Images:**  Before adding images to the gallery, you can resize them externally using image processing tools to ensure a more uniform size.\n\n\n### Caption and Title Handling\n\njustifiedGallery supports captions.  To enable captions, set the `captions` option to `true` during initialization:\n\n```javascript\n$(\"#myGallery\").justifiedGallery({ captions: true });\n```\n\nThe plugin will then automatically use the `alt` attribute of each `<img>` tag as the caption.  If you need more complex caption handling, you can add custom caption elements to your HTML alongside the images.  You can also customize the caption appearance using the `captionClass` option which defaults to `'jgallery-caption'`.\n\nIf you don't want to use `alt` text for captions, ensure each image has a sibling element (e.g., a `<p>` tag) that will be treated as the caption. The sibling needs to be right after the `<img>` tag.  The content of this sibling will be used as the caption.\n\nTitles are not directly supported; the `title` attribute of the image is not used by the plugin.  If title information is required, it should be handled separately, possibly by adding it to the custom caption.\n\n\n### CSS Customization\n\njustifiedGallery uses a set of default CSS classes.  You can fully customize the gallery's appearance through CSS.  The main class is `.justified-gallery`, which targets the gallery container.  Images within the gallery are selected using `.justified-gallery img`.  Captions are styled via the `.jgallery-caption` class (when captions are enabled).  Use these classes to target elements and modify their properties like colors, fonts, margins, padding, and other visual aspects.\n\n\n### Accessibility Considerations\n\n* **Alt Text:** Always provide meaningful `alt` attributes for your images.  This is crucial for screen readers and is also used for captions by default if `captions` is set to `true`.\n\n* **Keyboard Navigation:**  Ensure your gallery works well with keyboard navigation.  This typically involves adding appropriate ARIA attributes or using standard keyboard-focusable elements.  justifiedGallery itself doesn't inherently handle keyboard navigation; you may need to implement this using additional JavaScript.\n\n* **Semantic HTML:** Use semantic HTML5 elements where possible to improve the overall accessibility of your page.\n\n* **Color Contrast:**  Pay attention to color contrast between text, backgrounds, and images, ensuring sufficient contrast for users with visual impairments.\n\n\n## Advanced Usage\n\n### Working with Different Image Sizes\n\njustifiedGallery is designed to handle images of varying sizes. It automatically calculates the optimal dimensions for each image to maintain the justified layout. However, significant differences in image aspect ratios can affect the visual balance. For best results:\n\n* **Consistent Aspect Ratios:** Aim for images with relatively consistent aspect ratios within a gallery to prevent extremely tall or short rows.  Pre-processing images to a similar aspect ratio can greatly improve the overall aesthetic.\n\n* **`justifyThreshold` Option:** The `justifyThreshold` option can help manage rows that are too short. By increasing its value (in pixels), you set a minimum row height, preventing the creation of very short rows that may look unbalanced due to disproportionate image sizes.\n\n* **`lastRow` Option:**  The `lastRow` option controls how the last row is handled. If you have a mix of very large and very small images, choosing `'nojustify'` or `'left'` might give better visual results in the final row than the default `'justify'`.\n\n\n### Handling Large Image Sets\n\nWith large image sets, performance becomes crucial.  To optimize performance:\n\n* **Lazy Loading:** While not directly built-in, consider implementing lazy loading to defer the loading of images until they are visible in the viewport.  Numerous lazy-loading libraries can be easily integrated with justifiedGallery. This significantly improves initial page load times.\n\n* **`waitThumbnailsLoad` Option:** Setting `waitThumbnailsLoad` to `false` can speed up the initial rendering. The gallery will be justified initially using placeholder dimensions, and will be re-justified once all images are loaded. This can improve the perceived performance, but there might be a brief visual flicker.\n\n* **Image Optimization:** Optimize your images for web use.  Compress them without excessive quality loss using tools like TinyPNG or ImageOptim. Smaller image file sizes drastically improve loading speed.\n\n* **Chunking Images:** Consider fetching and displaying images in chunks using techniques like infinite scrolling, rather than loading all images at once.\n\n\n### Integration with Other Libraries\n\njustifiedGallery is a jQuery plugin and is designed to work well with other jQuery libraries and plugins. Some potential integrations include:\n\n* **Lightboxes:**  Integrate with lightbox libraries (like Fancybox or Magnific Popup) to provide a larger, detailed view of each image when clicked. The `rel` attribute within your image tags can be utilized for this purpose.\n\n* **Lazy Loading Libraries:**  As mentioned above, integrating a lazy loading library can significantly improve performance, especially with many images.\n\n* **Infinite Scroll Plugins:** Combine justifiedGallery with infinite scroll plugins to load images dynamically as the user scrolls down, for very large galleries.\n\n* **Image Carousel/Slider Plugins:** While less common, a combination with image carousels could create a unique gallery experience.  Be mindful of the potential for visual conflicts between the carousel's mechanics and justifiedGallery's layout.\n\n\n### Performance Optimization\n\nBeyond the strategies mentioned above (lazy loading and handling large image sets), you can further optimize performance by:\n\n* **Minification:** Use a minifier to reduce the size of your JavaScript files.\n\n* **Caching:** Leverage browser caching effectively to reduce server requests.\n\n* **Efficient CSS:** Write efficient CSS to avoid unnecessary reflows and repaints.  Minimize the complexity of your CSS selectors.\n\n* **Profiling:**  Use browser developer tools to profile your page's performance and identify bottlenecks.\n\n\n### Debugging and Troubleshooting\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML structure and CSS styles.  Check the console for JavaScript errors.\n\n* **jQuery Console:** If using jQuery, use the jQuery console to execute commands and inspect the state of the gallery elements.\n\n* **Check jQuery Version:**  Ensure you are using a compatible version of jQuery.\n\n* **Verify Plugin Inclusion:** Double-check that the justifiedGallery script is included correctly and that jQuery is loaded before it.\n\n* **Check for Conflicts:**  Look for potential conflicts with other JavaScript libraries on your page.\n\n* **Test with Different Browsers:**  Test the gallery on various browsers to catch any cross-browser compatibility issues.  If encountering issues with a specific browser, it is beneficial to look at the browser's developer tools' console to find any errors.\n\n\n\n\n## Examples and Use Cases\n\n### Basic Gallery Implementation\n\nThis example shows a simple implementation of justifiedGallery.  It requires only including the necessary scripts (jQuery and justifiedGallery) and initializing the plugin on a container holding your images:\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>justifiedGallery Example</title>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"justifiedGallery.min.js\"></script> </head>\n<body>\n\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\">\n  <img src=\"image2.jpg\" alt=\"Image 2\">\n  <img src=\"image3.jpg\" alt=\"Image 3\">\n  <img src=\"image4.jpg\" alt=\"Image 4\">\n</div>\n\n<script>\n$(document).ready(function() {\n  $(\"#myGallery\").justifiedGallery();\n});\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, etc., with the actual paths to your images.\n\n\n### Gallery with Captions\n\nTo display captions below each image, set the `captions` option to `true` and ensure your images have `alt` attributes:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>justifiedGallery with Captions</title>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"justifiedGallery.min.js\"></script>\n<style>\n  .jgallery-caption {\n    font-size: 14px;\n    color: #333;\n    text-align: center;\n  }\n</style>\n</head>\n<body>\n\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"A beautiful sunset\">\n  <img src=\"image2.jpg\" alt=\"A majestic mountain range\">\n  <img src=\"image3.jpg\" alt=\"A vibrant city skyline\">\n</div>\n\n<script>\n$(document).ready(function() {\n  $(\"#myGallery\").justifiedGallery({ captions: true });\n});\n</script>\n\n</body>\n</html>\n```\n\nThe added CSS styles the captions.  You can also use sibling elements for more complex caption control, as described in the Customization Options section.\n\n\n### Responsive Gallery Implementation\n\njustifiedGallery is inherently responsive.  No additional code is needed for a responsive gallery. The layout will automatically adapt to different screen sizes:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Responsive justifiedGallery</title>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"justifiedGallery.min.js\"></script>\n</head>\n<body>\n\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\">\n  <img src=\"image2.jpg\" alt=\"Image 2\">\n  <img src=\"image3.jpg\" alt=\"Image 3\">\n</div>\n\n<script>\n$(document).ready(function() {\n  $(\"#myGallery\").justifiedGallery();\n});\n</script>\n\n</body>\n</html>\n```\n\nThis example will work responsively without any additional code because justifiedGallery automatically adjusts its layout on window resize.\n\n\n### Custom Styling Example\n\nThis example shows how to customize the gallery's appearance using CSS:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Custom Styled justifiedGallery</title>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"justifiedGallery.min.js\"></script>\n<style>\n  #myGallery {\n    border: 5px solid #ccc;\n    padding: 10px;\n  }\n  #myGallery img {\n    border: 2px solid #eee;\n    margin: 5px;\n  }\n</style>\n</head>\n<body>\n\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\">\n  <img src=\"image2.jpg\" alt=\"Image 2\">\n  <img src=\"image3.jpg\" alt=\"Image 3\">\n</div>\n\n<script>\n$(document).ready(function() {\n  $(\"#myGallery\").justifiedGallery({ margins: 10 }); // Example of using the margins option\n});\n</script>\n\n</body>\n</html>\n```\n\nThis CSS adds a border and padding to the container and a border to the individual images, demonstrating how to style the gallery beyond the default appearance.  Remember to adjust paths to your images.\n\n\n## Contributing\n\nWe welcome contributions to justifiedGallery!  Whether you're reporting bugs, suggesting improvements, or submitting code changes, your help is valuable.\n\n### Reporting Issues\n\nIf you encounter a bug or have a feature request, please follow these steps:\n\n1. **Search for existing issues:** Before creating a new issue, search the issue tracker ([Insert Link to Issue Tracker Here]) to see if the problem has already been reported.\n\n2. **Provide detailed information:** When creating a new issue, provide as much information as possible, including:\n    * **A clear and concise description of the problem:**  Explain what you expected to happen and what actually happened.\n    * **Steps to reproduce the issue:** Include specific steps to allow others to reproduce the problem.\n    * **Browser and operating system information:**  Specify the browser and operating system you're using.\n    * **Relevant code snippets:** Share any relevant code from your project that might be helpful in understanding the issue.  A minimal, reproducible example is ideal.\n    * **Screenshots or screen recordings:**  If applicable, include screenshots or screen recordings to visually demonstrate the problem.\n\n3. **Use a descriptive title:** Choose a title that accurately reflects the issue you're reporting.\n\n\n### Submitting Pull Requests\n\nIf you'd like to contribute code changes, please follow these guidelines:\n\n1. **Fork the repository:** Fork the justifiedGallery repository on GitHub ([Insert Link to GitHub Repository Here]).\n\n2. **Create a new branch:** Create a new branch for your changes.  Use a descriptive branch name that reflects the changes you're making (e.g., \"fix-bug-123\" or \"feature-new-option\").\n\n3. **Make your changes:**  Make your changes and ensure they are well-documented.  Follow the coding style guide (see below).\n\n4. **Test your changes thoroughly:**  Test your changes to make sure they work correctly and don't introduce new bugs.\n\n5. **Commit your changes:**  Commit your changes with clear and concise commit messages.  Follow conventional commit message guidelines (e.g.,  `feat: add new option`, `fix: resolve bug in caption handling`).\n\n6. **Push your branch:** Push your branch to your forked repository.\n\n7. **Create a pull request:** Create a pull request on the main justifiedGallery repository, referencing the issue (if applicable) and providing a clear description of your changes.\n\n\n### Coding Style Guide\n\nTo ensure consistency and readability, please follow these coding style guidelines when submitting pull requests:\n\n* **Indentation:** Use 2 spaces for indentation.\n\n* **Line Length:** Keep lines under 80 characters.\n\n* **Naming Conventions:** Use descriptive variable and function names.  Follow camelCase for JavaScript variables and functions.\n\n* **Comments:**  Write clear and concise comments to explain complex logic.\n\n* **JavaScript Style:**  Adhere to standard JavaScript best practices.\n\n* **Testing:** If adding new features or fixing bugs, include appropriate tests to ensure correctness and prevent regressions.  We will consider pull requests that include tests more favorably.\n\n\nBefore submitting a pull request, please ensure your code passes all tests and follows the style guidelines.  We appreciate your contributions and look forward to reviewing your changes!\n\n\n## License\n\n### License Information\n\njustifiedGallery is released under the [Insert License Name Here, e.g., MIT License].  You can find the full license text in the [Insert Path to License File, e.g., `LICENSE` file] of this project.  In short, this license grants you the right to use, modify, and distribute justifiedGallery, subject to the terms and conditions specified in the license agreement.  Please review the license carefully before using this software.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is justifiedGallery?\n\njustifiedGallery is a jQuery plugin designed to create beautiful, responsive, and easily customizable photo galleries.  It arranges images in a justified layout, meaning images are sized and positioned to fill the available width evenly, resulting in a clean and visually appealing presentation. Unlike traditional grid layouts, justifiedGallery adapts dynamically to different screen sizes and window resolutions, maintaining its aesthetic appeal on desktops, tablets, and mobile devices.  It's ideal for showcasing images, portfolios, or any visual content where a balanced and responsive presentation is crucial.\n\n\n### Key Features\n\n* **Responsive Design:** Automatically adjusts the layout to fit different screen sizes and window resolutions.\n* **Justified Layout:**  Evenly distributes images across the available width for a visually appealing presentation.\n* **Easy Customization:** Highly customizable via options, allowing control over image spacing, margins, row heights, and more.\n* **Image Caption Support:**  Easily display captions for each image.\n* **Lightweight:**  Minimal impact on page load time.\n* **Cross-browser Compatibility:**  Works across a wide range of modern browsers.\n* **Extensible:**  Can be extended with custom functionality through its API.\n* **Lazy Loading (Optional):**  Improve initial page load performance by loading images only when they are visible.\n\n\n### Getting Started\n\nTo use justifiedGallery, you'll need to include jQuery and the justifiedGallery script in your HTML file.  Download the plugin from [insert download link here] and include it as follows:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> <!-- Or your jQuery source -->\n<script src=\"justifiedGallery.min.js\"></script> \n```\n\nThen, create a container element for your images.  This container will be targeted by the plugin. Example:\n\n```html\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\" />\n  <img src=\"image2.jpg\" alt=\"Image 2\" />\n  <img src=\"image3.jpg\" alt=\"Image 3\" />\n  <!-- ... more images ... -->\n</div>\n```\n\nFinally, initialize the plugin on your container using a simple jQuery call:\n\n```javascript\n$(\"#myGallery\").justifiedGallery();\n```\n\nThis will create a justified gallery using the default settings.  For more advanced customization, refer to the options section in this manual [link to options section].\n\n\n## Installation and Setup\n\n### Installing via npm or yarn\n\njustifiedGallery is available via npm and yarn.  To install it, use the following command in your terminal:\n\n```bash\nnpm install justifiedgallery\n# or\nyarn add justifiedgallery\n```\n\nAfter installation, you can import it into your project using your preferred module bundler (e.g., Webpack, Parcel).  For example, using ES6 modules:\n\n```javascript\nimport justifiedGallery from 'justifiedgallery';\nimport $ from 'jquery'; //Ensure you also import jQuery\n\n$(document).ready(function() {\n    $('#myGallery').justifiedGallery();\n});\n```\n\nRemember to adjust the selector `#myGallery` to match the ID of your gallery container.\n\n\n### Including justifiedGallery in your project\n\nIf you prefer not to use a package manager, you can download the `justifiedGallery.min.js` file directly from [Insert download link here].  Include it in your HTML file after including jQuery:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>  <!-- Or your jQuery source -->\n<script src=\"justifiedGallery.min.js\"></script>\n```\n\nPlace this script tag just before the closing `</body>` tag, or within a `$(document).ready()` block to ensure jQuery is loaded before the plugin.\n\n### Basic HTML Structure\n\nYour HTML should include a container element to hold your images.  This container will be targeted by the justifiedGallery plugin.  You can use any suitable HTML element, such as a `<div>` or a `<ul>`.  Images within the container can be added using `<img>` tags.  For example:\n\n```html\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\">\n  <img src=\"image2.jpg\" alt=\"Image 2\">\n  <img src=\"image3.jpg\" alt=\"Image 3\">\n  <img src=\"image4.jpg\" alt=\"Image 4\">\n</div>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, etc., with the actual paths to your images.  The `alt` attributes are crucial for accessibility.\n\n\n### Configuration Options\n\njustifiedGallery offers several options to customize the gallery's appearance and behavior.  These options are passed as a JavaScript object to the `justifiedGallery()` function.\n\n* **`rowHeight`:** (Number) The height of each row in pixels.  Defaults to 100.\n* **`lastRow`:** ('justify' | 'nojustify' | 'left')  How to handle the last row. 'justify' (default) justifies the last row. 'nojustify' stacks images in the last row. 'left' aligns images to the left.\n* **`margins`:** (Number) The margin between images in pixels. Defaults to 1.\n* **`border`:** (Number) The border width of images in pixels. Defaults to 0.\n* **`randomize`:** (Boolean) Randomizes the order of images. Defaults to `false`.\n* **`justifyThreshold`:** (Number) The minimum height of a row to justify. Prevents the creation of very short rows.  Defaults to 0.\n* **`waitThumbnailsLoad`:** (Boolean) If set to true, the gallery will be re-justified after all thumbnail images have finished loading. Defaults to `true`.\n* **`selector`:** (String)  A jQuery selector to target specific elements within the gallery container.  Defaults to `'img'`\n* **`target`:** (String)  The container in which the images should be displayed. Defaults to `null`, meaning the images stay in the original container.\n* **`rel`:** (String) value for rel attribute of img tags, useful for lightbox.\n* **`captions`:** (Boolean) Whether to show captions. Defaults to `false`\n* **`captionClass`:** (String) CSS class for captions. Defaults to `'jgallery-caption'`\n\n\nExample usage with custom options:\n\n```javascript\n$(\"#myGallery\").justifiedGallery({\n  rowHeight: 150,\n  margins: 5,\n  lastRow: 'nojustify',\n  captions: true\n});\n```\n\nRefer to the complete list of options and detailed explanations on [Insert link to detailed options documentation here]\n\n\n\n## Usage and API\n\n### Creating a justifiedGallery instance\n\nThe core functionality of justifiedGallery revolves around creating an instance of the gallery. This is done by calling the `justifiedGallery()` method on a jQuery selection containing the images you want to display.  The method accepts an optional configuration object as its argument.  For example:\n\n\n```javascript\n$(\"#myGallery\").justifiedGallery({\n  rowHeight: 120,\n  margins: 8\n});\n```\n\nThis code selects the element with the ID \"myGallery\" and initializes a justifiedGallery instance with a row height of 120 pixels and 8-pixel margins between images.  If no options are provided, the plugin uses default settings.  Remember to include jQuery and the justifiedGallery script in your HTML before using this code (as described in the Installation and Setup section).\n\n\n### Image Loading and Display\n\njustifiedGallery handles the loading and display of images efficiently. By default (`waitThumbnailsLoad: true`), it waits for all images to load before calculating and applying the justified layout. This ensures the gallery renders correctly.  If you have a large number of images, you might consider setting `waitThumbnailsLoad` to `false` to improve initial rendering speed. The layout will then readjust once the images are fully loaded.  You can also manage image loading manually using the API methods (see below).\n\n\n### Responsive Design and Behavior\n\njustifiedGallery is inherently responsive.  It recalculates the justified layout whenever the browser window is resized.  This ensures that the gallery always looks its best regardless of screen size. No additional code is required for responsive behavior â€“ it's built-in.  The layout adjusts automatically to maintain an even distribution of images across the available width.\n\n\n### Customizing the Appearance\n\nYou can customize the appearance of your justifiedGallery using CSS.  The plugin applies default classes to the gallery container and its elements, allowing you to style it precisely. You can target the following classes to control aspects of the layout:\n\n* `.justified-gallery`: The main container.\n* `.justified-gallery img`: The images within the gallery.\n* `.jgallery-caption`: The caption element (if enabled).\n\nYou can also customize aspects of the appearance through configuration options like `rowHeight`, `margins`, `border`, and `lastRow` (as detailed in the Configuration Options section).  Use these options to fine-tune spacing, row heights, and the handling of the last row.\n\n\n### API Methods and Events\n\njustifiedGallery provides a few API methods for controlling and interacting with the gallery instance:\n\n* **`destroy()`:** Removes the justifiedGallery layout and restores the original HTML structure.\n* **`rejustify()`:** Recalculates and reapplies the justified layout. This is useful if you dynamically add or remove images from the gallery.\n* **`option(name)`:** Returns the value of the specified option.\n* **`option(name, value)`:** Sets the value of the specified option and re-justifies the gallery.\n\n**Events:**\n\njustifiedGallery triggers the following events:\n\n* **`jg.complete`:** Fired when the gallery has been completely rendered (all images loaded and layout applied).\n* **`jg.resized`:** Fired when the gallery is resized due to browser window resizing.\n\nExample of using the `rejustify()` method:\n\n```javascript\n$(\"#myGallery\").justifiedGallery();\n// ... later, after adding new images ...\n$(\"#myGallery\").justifiedGallery('rejustify');\n```\n\nYou can listen for events using jQuery's `.on()` method:\n\n```javascript\n$(\"#myGallery\").on(\"jg.complete\", function() {\n  console.log(\"justifiedGallery rendering complete!\");\n});\n```\n\nRemember to consult the complete API documentation [Insert Link Here] for further details and examples.\n\n\n## Customization Options\n\n### Margin and Row Height Adjustment\n\nThe core visual aspect of justifiedGallery is controlled by `rowHeight` and `margins`.  These options directly impact the spacing between images and the overall look.\n\n* **`rowHeight`:** This option (a number representing pixels) determines the height of each row in the gallery. Adjusting this value significantly alters the layout's appearance.  Larger values lead to fewer, taller rows; smaller values result in more, shorter rows.  The default value is 100.\n\n* **`margins`:** This option (a number representing pixels) sets the margin between images, both horizontally and vertically.  Increasing this value adds more spacing between images, making the gallery appear less dense. Decreasing it creates a tighter, more compact layout. The default value is 1.\n\n\n### Image Sizing and Scaling\n\njustifiedGallery doesn't offer direct control over individual image dimensions *before* justification.  It calculates the optimal dimensions for each image to fit the justified layout based on the `rowHeight` and `margins`.  However, you can influence the final displayed size by:\n\n* **Setting `rowHeight`:** As explained above, adjusting `rowHeight` indirectly affects image size, controlling the overall proportion of height to width.\n\n* **Using CSS:**  You can use CSS styles applied to the images themselves (e.g., `max-width`, `max-height`) to constrain their size within the justified layout.  Be aware that this might override some aspects of justifiedGallery's automatic sizing, potentially disrupting the even distribution.  Use this carefully.\n\n* **Pre-processing Images:**  Before adding images to the gallery, you can resize them externally using image processing tools to ensure a more uniform size.\n\n\n### Caption and Title Handling\n\njustifiedGallery supports captions.  To enable captions, set the `captions` option to `true` during initialization:\n\n```javascript\n$(\"#myGallery\").justifiedGallery({ captions: true });\n```\n\nThe plugin will then automatically use the `alt` attribute of each `<img>` tag as the caption.  If you need more complex caption handling, you can add custom caption elements to your HTML alongside the images.  You can also customize the caption appearance using the `captionClass` option which defaults to `'jgallery-caption'`.\n\nIf you don't want to use `alt` text for captions, ensure each image has a sibling element (e.g., a `<p>` tag) that will be treated as the caption. The sibling needs to be right after the `<img>` tag.  The content of this sibling will be used as the caption.\n\nTitles are not directly supported; the `title` attribute of the image is not used by the plugin.  If title information is required, it should be handled separately, possibly by adding it to the custom caption.\n\n\n### CSS Customization\n\njustifiedGallery uses a set of default CSS classes.  You can fully customize the gallery's appearance through CSS.  The main class is `.justified-gallery`, which targets the gallery container.  Images within the gallery are selected using `.justified-gallery img`.  Captions are styled via the `.jgallery-caption` class (when captions are enabled).  Use these classes to target elements and modify their properties like colors, fonts, margins, padding, and other visual aspects.\n\n\n### Accessibility Considerations\n\n* **Alt Text:** Always provide meaningful `alt` attributes for your images.  This is crucial for screen readers and is also used for captions by default if `captions` is set to `true`.\n\n* **Keyboard Navigation:**  Ensure your gallery works well with keyboard navigation.  This typically involves adding appropriate ARIA attributes or using standard keyboard-focusable elements.  justifiedGallery itself doesn't inherently handle keyboard navigation; you may need to implement this using additional JavaScript.\n\n* **Semantic HTML:** Use semantic HTML5 elements where possible to improve the overall accessibility of your page.\n\n* **Color Contrast:**  Pay attention to color contrast between text, backgrounds, and images, ensuring sufficient contrast for users with visual impairments.\n\n\n## Advanced Usage\n\n### Working with Different Image Sizes\n\njustifiedGallery is designed to handle images of varying sizes. It automatically calculates the optimal dimensions for each image to maintain the justified layout. However, significant differences in image aspect ratios can affect the visual balance. For best results:\n\n* **Consistent Aspect Ratios:** Aim for images with relatively consistent aspect ratios within a gallery to prevent extremely tall or short rows.  Pre-processing images to a similar aspect ratio can greatly improve the overall aesthetic.\n\n* **`justifyThreshold` Option:** The `justifyThreshold` option can help manage rows that are too short. By increasing its value (in pixels), you set a minimum row height, preventing the creation of very short rows that may look unbalanced due to disproportionate image sizes.\n\n* **`lastRow` Option:**  The `lastRow` option controls how the last row is handled. If you have a mix of very large and very small images, choosing `'nojustify'` or `'left'` might give better visual results in the final row than the default `'justify'`.\n\n\n### Handling Large Image Sets\n\nWith large image sets, performance becomes crucial.  To optimize performance:\n\n* **Lazy Loading:** While not directly built-in, consider implementing lazy loading to defer the loading of images until they are visible in the viewport.  Numerous lazy-loading libraries can be easily integrated with justifiedGallery. This significantly improves initial page load times.\n\n* **`waitThumbnailsLoad` Option:** Setting `waitThumbnailsLoad` to `false` can speed up the initial rendering. The gallery will be justified initially using placeholder dimensions, and will be re-justified once all images are loaded. This can improve the perceived performance, but there might be a brief visual flicker.\n\n* **Image Optimization:** Optimize your images for web use.  Compress them without excessive quality loss using tools like TinyPNG or ImageOptim. Smaller image file sizes drastically improve loading speed.\n\n* **Chunking Images:** Consider fetching and displaying images in chunks using techniques like infinite scrolling, rather than loading all images at once.\n\n\n### Integration with Other Libraries\n\njustifiedGallery is a jQuery plugin and is designed to work well with other jQuery libraries and plugins. Some potential integrations include:\n\n* **Lightboxes:**  Integrate with lightbox libraries (like Fancybox or Magnific Popup) to provide a larger, detailed view of each image when clicked. The `rel` attribute within your image tags can be utilized for this purpose.\n\n* **Lazy Loading Libraries:**  As mentioned above, integrating a lazy loading library can significantly improve performance, especially with many images.\n\n* **Infinite Scroll Plugins:** Combine justifiedGallery with infinite scroll plugins to load images dynamically as the user scrolls down, for very large galleries.\n\n* **Image Carousel/Slider Plugins:** While less common, a combination with image carousels could create a unique gallery experience.  Be mindful of the potential for visual conflicts between the carousel's mechanics and justifiedGallery's layout.\n\n\n### Performance Optimization\n\nBeyond the strategies mentioned above (lazy loading and handling large image sets), you can further optimize performance by:\n\n* **Minification:** Use a minifier to reduce the size of your JavaScript files.\n\n* **Caching:** Leverage browser caching effectively to reduce server requests.\n\n* **Efficient CSS:** Write efficient CSS to avoid unnecessary reflows and repaints.  Minimize the complexity of your CSS selectors.\n\n* **Profiling:**  Use browser developer tools to profile your page's performance and identify bottlenecks.\n\n\n### Debugging and Troubleshooting\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML structure and CSS styles.  Check the console for JavaScript errors.\n\n* **jQuery Console:** If using jQuery, use the jQuery console to execute commands and inspect the state of the gallery elements.\n\n* **Check jQuery Version:**  Ensure you are using a compatible version of jQuery.\n\n* **Verify Plugin Inclusion:** Double-check that the justifiedGallery script is included correctly and that jQuery is loaded before it.\n\n* **Check for Conflicts:**  Look for potential conflicts with other JavaScript libraries on your page.\n\n* **Test with Different Browsers:**  Test the gallery on various browsers to catch any cross-browser compatibility issues.  If encountering issues with a specific browser, it is beneficial to look at the browser's developer tools' console to find any errors.\n\n\n\n\n## Examples and Use Cases\n\n### Basic Gallery Implementation\n\nThis example shows a simple implementation of justifiedGallery.  It requires only including the necessary scripts (jQuery and justifiedGallery) and initializing the plugin on a container holding your images:\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>justifiedGallery Example</title>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"justifiedGallery.min.js\"></script> </head>\n<body>\n\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\">\n  <img src=\"image2.jpg\" alt=\"Image 2\">\n  <img src=\"image3.jpg\" alt=\"Image 3\">\n  <img src=\"image4.jpg\" alt=\"Image 4\">\n</div>\n\n<script>\n$(document).ready(function() {\n  $(\"#myGallery\").justifiedGallery();\n});\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, etc., with the actual paths to your images.\n\n\n### Gallery with Captions\n\nTo display captions below each image, set the `captions` option to `true` and ensure your images have `alt` attributes:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>justifiedGallery with Captions</title>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"justifiedGallery.min.js\"></script>\n<style>\n  .jgallery-caption {\n    font-size: 14px;\n    color: #333;\n    text-align: center;\n  }\n</style>\n</head>\n<body>\n\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"A beautiful sunset\">\n  <img src=\"image2.jpg\" alt=\"A majestic mountain range\">\n  <img src=\"image3.jpg\" alt=\"A vibrant city skyline\">\n</div>\n\n<script>\n$(document).ready(function() {\n  $(\"#myGallery\").justifiedGallery({ captions: true });\n});\n</script>\n\n</body>\n</html>\n```\n\nThe added CSS styles the captions.  You can also use sibling elements for more complex caption control, as described in the Customization Options section.\n\n\n### Responsive Gallery Implementation\n\njustifiedGallery is inherently responsive.  No additional code is needed for a responsive gallery. The layout will automatically adapt to different screen sizes:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Responsive justifiedGallery</title>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"justifiedGallery.min.js\"></script>\n</head>\n<body>\n\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\">\n  <img src=\"image2.jpg\" alt=\"Image 2\">\n  <img src=\"image3.jpg\" alt=\"Image 3\">\n</div>\n\n<script>\n$(document).ready(function() {\n  $(\"#myGallery\").justifiedGallery();\n});\n</script>\n\n</body>\n</html>\n```\n\nThis example will work responsively without any additional code because justifiedGallery automatically adjusts its layout on window resize.\n\n\n### Custom Styling Example\n\nThis example shows how to customize the gallery's appearance using CSS:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Custom Styled justifiedGallery</title>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"justifiedGallery.min.js\"></script>\n<style>\n  #myGallery {\n    border: 5px solid #ccc;\n    padding: 10px;\n  }\n  #myGallery img {\n    border: 2px solid #eee;\n    margin: 5px;\n  }\n</style>\n</head>\n<body>\n\n<div id=\"myGallery\">\n  <img src=\"image1.jpg\" alt=\"Image 1\">\n  <img src=\"image2.jpg\" alt=\"Image 2\">\n  <img src=\"image3.jpg\" alt=\"Image 3\">\n</div>\n\n<script>\n$(document).ready(function() {\n  $(\"#myGallery\").justifiedGallery({ margins: 10 }); // Example of using the margins option\n});\n</script>\n\n</body>\n</html>\n```\n\nThis CSS adds a border and padding to the container and a border to the individual images, demonstrating how to style the gallery beyond the default appearance.  Remember to adjust paths to your images.\n\n\n## Contributing\n\nWe welcome contributions to justifiedGallery!  Whether you're reporting bugs, suggesting improvements, or submitting code changes, your help is valuable.\n\n### Reporting Issues\n\nIf you encounter a bug or have a feature request, please follow these steps:\n\n1. **Search for existing issues:** Before creating a new issue, search the issue tracker ([Insert Link to Issue Tracker Here]) to see if the problem has already been reported.\n\n2. **Provide detailed information:** When creating a new issue, provide as much information as possible, including:\n    * **A clear and concise description of the problem:**  Explain what you expected to happen and what actually happened.\n    * **Steps to reproduce the issue:** Include specific steps to allow others to reproduce the problem.\n    * **Browser and operating system information:**  Specify the browser and operating system you're using.\n    * **Relevant code snippets:** Share any relevant code from your project that might be helpful in understanding the issue.  A minimal, reproducible example is ideal.\n    * **Screenshots or screen recordings:**  If applicable, include screenshots or screen recordings to visually demonstrate the problem.\n\n3. **Use a descriptive title:** Choose a title that accurately reflects the issue you're reporting.\n\n\n### Submitting Pull Requests\n\nIf you'd like to contribute code changes, please follow these guidelines:\n\n1. **Fork the repository:** Fork the justifiedGallery repository on GitHub ([Insert Link to GitHub Repository Here]).\n\n2. **Create a new branch:** Create a new branch for your changes.  Use a descriptive branch name that reflects the changes you're making (e.g., \"fix-bug-123\" or \"feature-new-option\").\n\n3. **Make your changes:**  Make your changes and ensure they are well-documented.  Follow the coding style guide (see below).\n\n4. **Test your changes thoroughly:**  Test your changes to make sure they work correctly and don't introduce new bugs.\n\n5. **Commit your changes:**  Commit your changes with clear and concise commit messages.  Follow conventional commit message guidelines (e.g.,  `feat: add new option`, `fix: resolve bug in caption handling`).\n\n6. **Push your branch:** Push your branch to your forked repository.\n\n7. **Create a pull request:** Create a pull request on the main justifiedGallery repository, referencing the issue (if applicable) and providing a clear description of your changes.\n\n\n### Coding Style Guide\n\nTo ensure consistency and readability, please follow these coding style guidelines when submitting pull requests:\n\n* **Indentation:** Use 2 spaces for indentation.\n\n* **Line Length:** Keep lines under 80 characters.\n\n* **Naming Conventions:** Use descriptive variable and function names.  Follow camelCase for JavaScript variables and functions.\n\n* **Comments:**  Write clear and concise comments to explain complex logic.\n\n* **JavaScript Style:**  Adhere to standard JavaScript best practices.\n\n* **Testing:** If adding new features or fixing bugs, include appropriate tests to ensure correctness and prevent regressions.  We will consider pull requests that include tests more favorably.\n\n\nBefore submitting a pull request, please ensure your code passes all tests and follows the style guidelines.  We appreciate your contributions and look forward to reviewing your changes!\n\n\n## License\n\n### License Information\n\njustifiedGallery is released under the [Insert License Name Here, e.g., MIT License].  You can find the full license text in the [Insert Path to License File, e.g., `LICENSE` file] of this project.  In short, this license grants you the right to use, modify, and distribute justifiedGallery, subject to the terms and conditions specified in the license agreement.  Please review the license carefully before using this software.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"justifiedgallery.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"justifiedGallery - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}