{"title":"sidr - Documentation","markdown":{"yaml":{"title":"sidr - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Sidr?","containsRefs":false,"markdown":"\n\n\n\nSidr is a [insert concise description of Sidr, e.g.,  responsive off-canvas menu plugin for jQuery]. It provides a simple yet powerful way to implement slide-out navigation menus on websites and web applications, enhancing user experience across various devices. Sidr offers a clean and customizable interface, making it easy to integrate into existing projects.  It's designed to be lightweight and efficient, minimizing performance impact.\n\n\n### Key Features and Benefits\n\n* **Responsive Design:** Adapts seamlessly to different screen sizes, ensuring optimal usability on desktops, tablets, and mobile devices.\n* **Customizable Styling:**  Offers extensive options for customizing the appearance of the menu, aligning with your website's design.  Supports CSS customization and theming.\n* **Easy Integration:** Simple jQuery integration allows for quick and straightforward implementation within existing projects.\n* **Multiple Menu Instances:** Supports creating and managing multiple off-canvas menus on a single page.\n* **Event Handling:** Provides events for monitoring menu opening, closing, and other actions, allowing developers to integrate custom functionality.\n* **Accessibility:**  Built with accessibility in mind, adhering to best practices for keyboard navigation and screen readers.\n* **Lightweight:**  Minimizes file size to ensure optimal page load times.\n\n\n### Target Audience\n\nSidr is targeted towards front-end web developers, designers, and anyone involved in building responsive websites or web applications.  Those familiar with HTML, CSS, and jQuery will find Sidr particularly easy to use.  It's suitable for projects of all sizes, from small personal websites to large-scale enterprise applications requiring robust and customizable navigation.\n\n\n### Setting up the Development Environment\n\n1. **Prerequisites:** Ensure you have a basic understanding of HTML, CSS, and JavaScript.  You'll need a web browser (Chrome, Firefox, etc.) and a code editor (VS Code, Sublime Text, Atom, etc.). jQuery is required for Sidr; download the latest version from [link to jQuery download] and include it in your project.\n\n2. **Download Sidr:** Download the Sidr source files from [link to Sidr download or repository]. You can typically find this as a zip file or clone it from a Git repository.\n\n3. **Include Sidr:** Include the Sidr JavaScript file and its associated CSS file in your HTML document within the `<head>` section, ensuring the jQuery file is included *before* the Sidr JavaScript file:\n\n   ```html\n   <link rel=\"stylesheet\" href=\"path/to/sidr.css\">\n   <script src=\"path/to/jquery.js\"></script>\n   <script src=\"path/to/sidr.js\"></script>\n   ```\n\n4. **Basic Usage:** Refer to the examples provided in the Sidr documentation to understand basic usage and start implementing the menu in your project.  The documentation should detail how to initiate Sidr, add menu items, and handle events.\n\n5. **Development and Testing:** Use your web browser's developer tools to inspect your code, debug issues, and ensure the menu functions as expected across different browsers and screen sizes.  Consider utilizing a browser testing framework or service to aid this process.\n\n\n## Getting Started with Sidr\n\n### Installation and Setup\n\nThere are several ways to install Sidr:\n\n**1. Downloading the files:** Download the latest release of Sidr from [link to download or repository].  This typically includes `sidr.js` and `sidr.css`.  Place these files in your project's `js` and `css` directories (or equivalent).\n\n**2. Using a CDN:** Include Sidr via a Content Delivery Network (CDN).  [Insert CDN link here if available].  This avoids the need to download the files, but relies on an external service.\n\n**3. Using a Package Manager (npm):** If you are using npm (Node Package Manager), you can install Sidr using:  `npm install sidr`  This will add Sidr to your project's dependencies.  You will then need to include it in your project using the appropriate import statement for your module bundler (e.g., webpack, Parcel).\n\n**Regardless of the installation method, you will need to include jQuery in your project before including Sidr.  Ensure jQuery is loaded before the Sidr script.** This can be done by including it via a CDN or from a local file.  For example:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> <script src=\"path/to/sidr.js\"></script>\n```\nReplace `\"path/to/sidr.js\"` with the actual path to your Sidr JavaScript file.  Also include the CSS file within the `<head>` of your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/sidr.css\">\n```\n\n\n### Basic Usage and Examples\n\nAfter installing Sidr, you can initialize it by calling `$('#my-menu').sidr();`, where `#my-menu` is the ID of your menu element.  This creates a default off-canvas menu.  Further configuration options allow for customization.  See the section on configuration options below.\n\nA basic example:\n\n```html\n<div id=\"simple-menu\">\n  <ul>\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</div>\n\n<button id=\"open-sidr\">Open Menu</button>\n\n<script>\n  $(document).ready(function() {\n    $('#simple-menu').sidr();\n    $('#open-sidr').click(function() {\n      $.sidr('open', 'simple-menu');\n    });\n  });\n</script>\n```\n\nThis code creates a simple menu with three links and a button that opens it using `$.sidr('open', 'simple-menu')`.  Remember to include jQuery and Sidr's JS and CSS files as described in the installation section.  More advanced examples with additional options can be found in the examples directory within the Sidr distribution.\n\n\n### Configuration Options\n\nSidr offers several configuration options to customize the menu's behavior and appearance. These options are passed as a JavaScript object to the `sidr()` function.  Key options include:\n\n* `name`:  (String)  The name of the menu (used to uniquely identify it). Defaults to `sidr`.\n* `source`: (String) The selector for the menu content. Defaults to the selector used to call `sidr()`.\n* `speed`: (Integer) The speed of the animation (in milliseconds). Defaults to 200.\n* `side`: (String)  The side of the screen the menu will appear from (`left`, `right`). Defaults to `left`.\n* `body`: (String) Whether to add `body` CSS classes for easy styling. Defaults to `true`.\n* `renaming`: (Boolean)  Renames the body classes to prevent conflicts. Defaults to `true`.\n* `displace`: (Boolean)  Whether to displace the content when the menu is open. Defaults to `true`.\n* `onOpen`: (Function)  A callback function executed when the menu opens.\n* `onClose`: (Function)  A callback function executed when the menu closes.\n\nFor example, to create a right-side menu with a slower animation:\n\n```javascript\n$('#my-menu').sidr({\n  side: 'right',\n  speed: 400\n});\n```\n\nRefer to the full documentation for a complete list of options and their descriptions.\n\n\n### Creating a Simple Sidr Menu\n\n1. **Create the Menu Structure:** Create an unordered list (`<ul>`) containing your menu items. Each item should be a list item (`<li>`) with a link (`<a>`) element inside.  Give this `<ul>` a unique ID (e.g., `my-sidr-menu`).\n\n   ```html\n   <ul id=\"my-sidr-menu\">\n     <li><a href=\"#\">Home</a></li>\n     <li><a href=\"#\">About</a></li>\n     <li><a href=\"#\">Services</a></li>\n     <li><a href=\"#\">Contact</a></li>\n   </ul>\n   ```\n\n2. **Add a Button (Optional):**  Add a button to trigger the menu's opening.  This could be a hamburger icon or other element. Assign it an ID (e.g., `open-menu-button`).\n\n   ```html\n   <button id=\"open-menu-button\">Open Menu</button>\n   ```\n\n3. **Initialize Sidr:** In your JavaScript file (after including jQuery and Sidr), initialize Sidr using the ID of your menu element:\n\n   ```javascript\n   $(document).ready(function() {\n     $('#my-sidr-menu').sidr(); // This initializes the default Sidr setup.  Add options as needed\n\n     $('#open-menu-button').click(function() {\n         $.sidr('open', 'my-sidr-menu');\n     });\n   });\n   ```\n\n4. **Style the Menu:**  Use CSS to style the menu to match your website's design.  Refer to the Sidr CSS file for default styles and adjust as needed.  You can either customize the existing CSS or create separate styles.  Target the classes generated by Sidr for efficient styling.\n\n\nThis will create a basic, functional Sidr menu.  You can then enhance this further using the configuration options described above to customize its behavior and appearance.\n\n\n## Advanced Usage\n\n### Customizing the Appearance\n\nSidr's appearance can be extensively customized using CSS.  The plugin generates several classes that you can target to modify the menu's styling.  These classes typically include `sidr`, `sidr-inner`, `sidr-class-name` (where `class-name` reflects the `name` option used during initialization), and others.  Inspect the generated HTML and CSS using your browser's developer tools to identify the specific classes to target.\n\nYou can override the default styles provided by `sidr.css` or create a separate stylesheet for your customizations.  For example, to change the background color of the menu:\n\n```css\n.sidr-class-name {\n  background-color: #f0f0f0;\n}\n```\n\nRemember to replace `.sidr-class-name` with the actual class name generated by Sidr for your menu.  You can customize virtually every aspect of the menu's appearance, including colors, fonts, padding, and more, through CSS.\n\n\n### Using Different Themes\n\nWhile Sidr doesn't directly include pre-built themes, you can easily create your own themes by extending the default stylesheet. Create a new CSS file and import `sidr.css` as a base.  Then, override or add styles to customize the appearance according to your desired theme.  You can create multiple theme files for different styles, switching between them as needed within your project.\n\n\n### Handling Events\n\nSidr provides several events that allow you to trigger custom functionality when the menu opens or closes.  These events can be accessed using jQuery's `.on()` method.  The available events are:\n\n* `sidr.open`: Triggered when the menu opens.\n* `sidr.close`: Triggered when the menu closes.\n\nFor example:\n\n```javascript\n$('#my-menu').sidr({\n  onOpen: function() {\n    console.log('Menu opened!');\n    // Add your custom code here (e.g., analytics tracking)\n  },\n  onClose: function() {\n    console.log('Menu closed!');\n    // Add your custom code here (e.g., reset form fields)\n  }\n});\n```\n\n\n### Integrating with Other Libraries\n\nSidr is designed to work well with other JavaScript libraries.  Since it's built on jQuery, integration with other jQuery plugins is generally straightforward.  If using a library that conflicts with jQuery, ensure that you handle potential conflicts by carefully managing the order of script inclusion or utilizing namespaces appropriately.\n\n\n### Creating Nested Menus\n\nSidr itself doesn't directly support nested menus, but you can achieve a nested effect by using nested unordered lists (`<ul>`) within your menu structure.  Style the nested lists with CSS to create the visual hierarchy and indentation of a nested menu.  You can use JavaScript to control the opening and closing of nested sections, if desired, though this will require custom code beyond the core Sidr functionality.\n\n\n### Accessibility Considerations\n\nFor optimal accessibility:\n\n* **Keyboard Navigation:** Ensure the menu is fully navigable using the keyboard.  Test this thoroughly.\n* **Screen Reader Compatibility:** Use appropriate ARIA attributes (`aria-expanded`, `aria-hidden`, `role=\"menu\"`, etc.) to improve screen reader compatibility.  This will make the menu accessible to users who rely on screen readers.\n* **Semantic HTML:** Use semantic HTML elements (`<nav>`, `<ul>`, `<li>`, `<a>`) to structure the menu.\n* **Focus Management:**  Properly manage focus when the menu opens and closes, ensuring that the focus remains within the menu when it's open.\n* **Sufficient Contrast:** Ensure adequate contrast between text and background colors for better readability.\n\n\nBy following these guidelines, you can make your Sidr menu more accessible to a wider range of users, including those with disabilities. Remember to consult accessibility guidelines (like WCAG) for best practices.\n\n\n## API Reference\n\n### Sidr Constructor\n\nThe Sidr constructor initializes a new off-canvas menu.  It's called by passing the selector for your menu element to the `sidr()` function.  Optional configuration options can be passed as a second argument, a JavaScript object.\n\n**Syntax:**\n\n```javascript\n$('#myMenu').sidr([options]);\n```\n\n* `#myMenu`:  A jQuery selector targeting the element containing your menu content (usually a `<ul>` or `<div>`).\n* `[options]`: (Optional) An object containing configuration options (see \"Options Reference\" below).\n\n\n### Methods: `open()`, `close()`, `toggle()`, `destroy()`\n\nSidr provides several methods to control the menu's behavior after initialization:\n\n* **`open(name)`:** Opens the specified menu.  `name` is a string representing the menu's name (defaults to `sidr` if not specified during initialization).\n\n   ```javascript\n   $.sidr('open', 'myMenu'); // Opens the menu with name 'myMenu'\n   ```\n\n* **`close(name)`:** Closes the specified menu.  `name` is a string representing the menu's name (defaults to `sidr` if not specified).\n\n   ```javascript\n   $.sidr('close', 'myMenu'); // Closes the menu with name 'myMenu'\n   ```\n\n* **`toggle(name)`:** Toggles the specified menu's state (opens if closed, closes if open).  `name` is a string representing the menu's name (defaults to `sidr` if not specified).\n\n   ```javascript\n   $.sidr('toggle', 'myMenu'); // Toggles the menu with name 'myMenu'\n   ```\n\n* **`destroy(name)`:** Removes Sidr functionality from the specified menu and cleans up associated events and elements. `name` is a string representing the menu's name (defaults to `sidr` if not specified). This method will remove all the Sidr related elements from the DOM and unbind events.  After this call the menu is no longer managed by Sidr.\n\n   ```javascript\n   $.sidr('destroy', 'myMenu'); // Removes Sidr functionality from the menu with name 'myMenu'\n   ```\n\n\n### Events: `open`, `close`, `ready`\n\nSidr triggers several custom events that you can use to add custom functionality:\n\n* **`open`:** This event is triggered when a menu is opened using the `open()` method. The event object contains the menu's name as `name` property.\n  ```javascript\n  $(document).on('open.sidr', function(event) {\n    console.log('Sidr menu opened: ' + event.name);\n  });\n  ```\n\n* **`close`:** This event is triggered when a menu is closed using the `close()` method. The event object contains the menu's name as `name` property.\n  ```javascript\n  $(document).on('close.sidr', function(event) {\n    console.log('Sidr menu closed: ' + event.name);\n  });\n  ```\n\n* **`ready`:** This event is triggered when Sidr has finished initializing and the menu is ready. This event is triggered for each menu separately after its initialization is complete.  Useful for triggering actions after the menu is fully set up. The event object contains the menu's name as `name` property.\n  ```javascript\n  $(document).on('ready.sidr', function(event) {\n    console.log('Sidr menu is ready: ' + event.name);\n  });\n  ```\n\n\n### Options Reference\n\nThese options are passed as a JavaScript object to the `sidr()` function during initialization.\n\n* **`name` (String):**  A unique name for the menu instance.  Used to differentiate multiple menus on a single page. Defaults to `sidr`.\n* **`source` (String):** The selector for the menu content (HTML element). Defaults to the selector used to call `sidr()`.\n* **`speed` (Integer):**  The animation speed in milliseconds. Defaults to 200.\n* **`side` (String):**  The side of the screen the menu appears from (`left`, `right`). Defaults to `left`.\n* **`body` (Boolean):**  Whether to add classes to the `<body>` element for styling. Defaults to `true`.\n* **`renaming` (Boolean):** Renames body classes to prevent conflicts. Defaults to `true`.\n* **`displace` (Boolean):**  Whether to displace the main content when the menu is open. Defaults to `true`.\n* **`onOpen` (Function):** A callback function executed when the menu opens. Receives the menu name as an argument.\n* **`onClose` (Function):** A callback function executed when the menu closes. Receives the menu name as an argument.\n* **`callback` (Function):** A callback function to be executed after the menu is initialized (deprecated in favor of the `ready` event).\n* **`timing` (String):** The animation timing function to use (e.g., `ease`, `linear`). Defaults to `ease`.\n\n\nRemember to consult the latest Sidr documentation for the most up-to-date information on the API and options.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Menu doesn't appear:**\n    * **Problem:** Verify that jQuery is included *before* the Sidr JavaScript file. Ensure correct paths to both jQuery and Sidr files in your HTML. Check for typos in selectors (`#myMenu`) and ensure the element exists in your HTML.  Inspect the browser's developer console for JavaScript errors.\n    * **Solution:** Double-check file paths, selectors, and the order of script inclusion. Fix any reported JavaScript errors.\n\n* **Menu doesn't animate:**\n    * **Problem:** Check the `speed` option in your Sidr configuration.  A speed of 0 will disable animation. Ensure there are no CSS rules conflicting with Sidr's animation styles.\n    * **Solution:** Set `speed` to a positive value (e.g., 200). Inspect your CSS for conflicting rules and resolve them.\n\n* **Menu overlaps content:**\n    * **Problem:** The `displace` option might be set to `false`, preventing content displacement.  Check for conflicting CSS rules that might position elements incorrectly.\n    * **Solution:** Set `displace` to `true`.  Review your CSS to ensure no styles are unintentionally overriding Sidr's positioning.\n\n* **Multiple menus conflict:**\n    * **Problem:** If you have multiple Sidr menus, ensure they have unique names using the `name` option.  Conflicting names can lead to unpredictable behavior.\n    * **Solution:** Assign unique names to each Sidr menu instance during initialization.\n\n* **Events not firing:**\n    * **Problem:** Verify correct event binding using jQuery's `.on()` method.  Ensure the event names (`open.sidr`, `close.sidr`) are correctly specified.  Check for errors in your event handlers.\n    * **Solution:** Double-check event names and ensure your event handlers are correctly defined and bound. Use browser developer tools to check for errors in the console.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML, CSS, and JavaScript. Check the console for errors and warnings.  The network tab can help verify that files are loading correctly.\n\n* **Console Logging:** Add `console.log()` statements to your JavaScript code to track the values of variables and the execution flow.  This helps identify the point where issues occur.\n\n* **Simplify:** Create a minimal example that reproduces the issue. This simplifies debugging by eliminating unnecessary code that might mask the root cause.\n\n* **Version Control:** Use a version control system (Git) to track changes to your code. This allows you to easily revert to previous versions if problems arise.\n\n\n### Troubleshooting Browser Compatibility\n\nSidr generally supports modern browsers. However, older browsers might require specific CSS hacks or polyfills for optimal compatibility.  If you encounter issues in older browsers, consider using a polyfill library (like polyfill.io) or targeting specific CSS properties known to be problematic in older browsers.  Thoroughly test across different browsers and versions.\n\n\n### Where to Find Help\n\n* **Official Documentation:** Refer to the official Sidr documentation for detailed explanations, examples, and API references.\n* **Online Forums:** Search for solutions on relevant online forums and Q&A sites (Stack Overflow, etc.).\n* **Issue Tracker:**  If you encounter a bug, consider reporting it on the Sidr project's issue tracker (if available).  Provide clear steps to reproduce the issue and relevant code snippets.  A minimal, reproducible example is highly beneficial.\n\n\nRemember to always provide clear descriptions of your problem, including the steps to reproduce the issue, relevant code snippets, and the browser and versions you're using when seeking help.\n\n\n## Examples and Use Cases\n\n### Responsive Navigation Menus\n\nSidr excels at creating responsive navigation menus that adapt seamlessly to different screen sizes.  A common use case involves hiding a navigation menu on smaller screens and revealing it as a slide-out menu triggered by a button (often a hamburger icon).  This enhances usability on mobile devices without cluttering the screen on larger displays.\n\n**Implementation:**  Create a standard `<nav>` element containing your menu links.  Use CSS to hide this menu on larger screens (e.g., `display: none;` for screens above a certain width).  Initialize Sidr on this `<nav>` element, and add a button that calls `$.sidr('open', 'myMenu')` to trigger the menu's appearance.  Use media queries to adjust the styling and visibility based on screen size.\n\n\n### Sidebars and Navigation Panels\n\nSidr is equally well-suited for implementing sidebars and navigation panels.  These panels can contain supplementary information, navigation links, or user controls, appearing alongside the main content area.  The slide-out effect provided by Sidr makes these panels non-intrusive and easily accessible without consuming valuable screen real estate.\n\n**Implementation:** Create a `<div>` element to hold the sidebar content.  Style it appropriately (e.g., using CSS to set its width and position). Initialize Sidr on this `<div>` element and use CSS or JavaScript to adjust its position relative to the main content area.\n\n\n### Mobile-First Design Implementations\n\nIn a mobile-first design approach, the default view is optimized for smaller screens. Sidr is ideal for enhancing the mobile experience by providing a clean and efficient way to present navigation and other elements.  For mobile-first designs, you'll typically start with the Sidr menu visible on smaller screens and then use CSS media queries to hide or modify it for larger screens.\n\n**Implementation:**  Create your menu as a Sidr menu initially.  This becomes the primary navigation on smaller devices.  For larger screens, use CSS media queries to change the menu's display to `block` or adjust its position to be a fixed navigation bar.\n\n\n### Advanced Menu Structures\n\nWhile Sidr doesn't directly support nested menus, you can create visually nested structures by using nested unordered lists (`<ul>`) within your menu HTML. You will need to manage the opening and closing behavior of submenus using custom JavaScript or other techniques outside of Sidr's core functionality.   CSS can be used to visually style nested lists to give the impression of nested menus.\n\n**Implementation:**  Create nested `<ul>` elements within your main menu element. Use CSS to style the nesting, for instance, adding indentation or using different background colors for each level of the nested structure.  Consider using JavaScript to handle the expand/collapse behavior of nested menu sections to enhance the user experience.  This would involve adding event listeners to the parent menu items that control the visibility of their children.  Libraries like jQuery can greatly simplify this implementation.\n\n\n## Contributing to Sidr\n\n### Setting up the Development Environment\n\nTo contribute to Sidr, you'll need a development environment set up with the necessary tools and dependencies.  These instructions assume you're familiar with Git and have Node.js and npm (or yarn) installed.\n\n1. **Fork the Repository:**  Fork the official Sidr repository on GitHub to your own account.  This creates a copy of the project that you can work on independently.\n\n2. **Clone Your Fork:** Clone your forked repository to your local machine using Git:\n\n   ```bash\n   git clone <your-github-username>/sidr.git\n   cd sidr\n   ```\n   Replace `<your-github-username>` with your GitHub username.\n\n3. **Install Dependencies:**  Navigate to the project directory and install the project's dependencies using npm or yarn:\n\n   ```bash\n   npm install  // Or: yarn install\n   ```\n\n4. **Run the Development Server (if applicable):** Some projects may include a development server for easier testing.  Refer to the project's `README.md` file for instructions on how to start the development server, if provided.\n\n5. **Create a New Branch:** Before making any changes, create a new branch for your contribution:\n\n   ```bash\n   git checkout -b <your-branch-name>\n   ```\n   Replace `<your-branch-name>` with a descriptive name for your branch (e.g., \"fix-bug-123\" or \"add-feature-xyz\").\n\n\n### Coding Style Guidelines\n\nAdhere to the existing coding style used in the Sidr project.  Consistency is crucial for maintaining code readability and maintainability.  Look at existing code to get a feel for the style and conventions used for variable naming, indentation, commenting, etc.  If the project has an official style guide (e.g., in a `CONTRIBUTING.md` file), follow it closely.\n\n\n### Testing and Debugging\n\nBefore submitting a pull request, ensure your changes are thoroughly tested.  The project may include a testing suite; run the tests to verify your changes don't introduce regressions or break existing functionality.  Use your browser's developer tools to debug any issues you encounter during testing.\n\n\n### Submitting Pull Requests\n\n1. **Commit Your Changes:**  After making your changes and testing them, commit your changes using Git:\n\n   ```bash\n   git add .\n   git commit -m \"<your-commit-message>\"\n   ```\n   Write a clear and concise commit message explaining your changes.\n\n2. **Push Your Branch:** Push your branch to your forked repository:\n\n   ```bash\n   git push origin <your-branch-name>\n   ```\n\n3. **Create a Pull Request:** On GitHub, go to your forked repository and create a pull request to merge your branch into the main branch of the original Sidr repository.  Provide a detailed description of your changes in the pull request, explaining the context, the problem you're addressing, and any relevant considerations.\n\n4. **Address Feedback:**  The maintainers may provide feedback on your pull request.  Address any comments or requested changes promptly and push updates to your branch.  Continue this iterative process until your pull request is approved and merged.\n\n\nRemember to be respectful and collaborative throughout the contribution process.  Clear communication and a willingness to incorporate feedback are key to a successful contribution.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Sidr?\n\nSidr is a [insert concise description of Sidr, e.g.,  responsive off-canvas menu plugin for jQuery]. It provides a simple yet powerful way to implement slide-out navigation menus on websites and web applications, enhancing user experience across various devices. Sidr offers a clean and customizable interface, making it easy to integrate into existing projects.  It's designed to be lightweight and efficient, minimizing performance impact.\n\n\n### Key Features and Benefits\n\n* **Responsive Design:** Adapts seamlessly to different screen sizes, ensuring optimal usability on desktops, tablets, and mobile devices.\n* **Customizable Styling:**  Offers extensive options for customizing the appearance of the menu, aligning with your website's design.  Supports CSS customization and theming.\n* **Easy Integration:** Simple jQuery integration allows for quick and straightforward implementation within existing projects.\n* **Multiple Menu Instances:** Supports creating and managing multiple off-canvas menus on a single page.\n* **Event Handling:** Provides events for monitoring menu opening, closing, and other actions, allowing developers to integrate custom functionality.\n* **Accessibility:**  Built with accessibility in mind, adhering to best practices for keyboard navigation and screen readers.\n* **Lightweight:**  Minimizes file size to ensure optimal page load times.\n\n\n### Target Audience\n\nSidr is targeted towards front-end web developers, designers, and anyone involved in building responsive websites or web applications.  Those familiar with HTML, CSS, and jQuery will find Sidr particularly easy to use.  It's suitable for projects of all sizes, from small personal websites to large-scale enterprise applications requiring robust and customizable navigation.\n\n\n### Setting up the Development Environment\n\n1. **Prerequisites:** Ensure you have a basic understanding of HTML, CSS, and JavaScript.  You'll need a web browser (Chrome, Firefox, etc.) and a code editor (VS Code, Sublime Text, Atom, etc.). jQuery is required for Sidr; download the latest version from [link to jQuery download] and include it in your project.\n\n2. **Download Sidr:** Download the Sidr source files from [link to Sidr download or repository]. You can typically find this as a zip file or clone it from a Git repository.\n\n3. **Include Sidr:** Include the Sidr JavaScript file and its associated CSS file in your HTML document within the `<head>` section, ensuring the jQuery file is included *before* the Sidr JavaScript file:\n\n   ```html\n   <link rel=\"stylesheet\" href=\"path/to/sidr.css\">\n   <script src=\"path/to/jquery.js\"></script>\n   <script src=\"path/to/sidr.js\"></script>\n   ```\n\n4. **Basic Usage:** Refer to the examples provided in the Sidr documentation to understand basic usage and start implementing the menu in your project.  The documentation should detail how to initiate Sidr, add menu items, and handle events.\n\n5. **Development and Testing:** Use your web browser's developer tools to inspect your code, debug issues, and ensure the menu functions as expected across different browsers and screen sizes.  Consider utilizing a browser testing framework or service to aid this process.\n\n\n## Getting Started with Sidr\n\n### Installation and Setup\n\nThere are several ways to install Sidr:\n\n**1. Downloading the files:** Download the latest release of Sidr from [link to download or repository].  This typically includes `sidr.js` and `sidr.css`.  Place these files in your project's `js` and `css` directories (or equivalent).\n\n**2. Using a CDN:** Include Sidr via a Content Delivery Network (CDN).  [Insert CDN link here if available].  This avoids the need to download the files, but relies on an external service.\n\n**3. Using a Package Manager (npm):** If you are using npm (Node Package Manager), you can install Sidr using:  `npm install sidr`  This will add Sidr to your project's dependencies.  You will then need to include it in your project using the appropriate import statement for your module bundler (e.g., webpack, Parcel).\n\n**Regardless of the installation method, you will need to include jQuery in your project before including Sidr.  Ensure jQuery is loaded before the Sidr script.** This can be done by including it via a CDN or from a local file.  For example:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> <script src=\"path/to/sidr.js\"></script>\n```\nReplace `\"path/to/sidr.js\"` with the actual path to your Sidr JavaScript file.  Also include the CSS file within the `<head>` of your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/sidr.css\">\n```\n\n\n### Basic Usage and Examples\n\nAfter installing Sidr, you can initialize it by calling `$('#my-menu').sidr();`, where `#my-menu` is the ID of your menu element.  This creates a default off-canvas menu.  Further configuration options allow for customization.  See the section on configuration options below.\n\nA basic example:\n\n```html\n<div id=\"simple-menu\">\n  <ul>\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</div>\n\n<button id=\"open-sidr\">Open Menu</button>\n\n<script>\n  $(document).ready(function() {\n    $('#simple-menu').sidr();\n    $('#open-sidr').click(function() {\n      $.sidr('open', 'simple-menu');\n    });\n  });\n</script>\n```\n\nThis code creates a simple menu with three links and a button that opens it using `$.sidr('open', 'simple-menu')`.  Remember to include jQuery and Sidr's JS and CSS files as described in the installation section.  More advanced examples with additional options can be found in the examples directory within the Sidr distribution.\n\n\n### Configuration Options\n\nSidr offers several configuration options to customize the menu's behavior and appearance. These options are passed as a JavaScript object to the `sidr()` function.  Key options include:\n\n* `name`:  (String)  The name of the menu (used to uniquely identify it). Defaults to `sidr`.\n* `source`: (String) The selector for the menu content. Defaults to the selector used to call `sidr()`.\n* `speed`: (Integer) The speed of the animation (in milliseconds). Defaults to 200.\n* `side`: (String)  The side of the screen the menu will appear from (`left`, `right`). Defaults to `left`.\n* `body`: (String) Whether to add `body` CSS classes for easy styling. Defaults to `true`.\n* `renaming`: (Boolean)  Renames the body classes to prevent conflicts. Defaults to `true`.\n* `displace`: (Boolean)  Whether to displace the content when the menu is open. Defaults to `true`.\n* `onOpen`: (Function)  A callback function executed when the menu opens.\n* `onClose`: (Function)  A callback function executed when the menu closes.\n\nFor example, to create a right-side menu with a slower animation:\n\n```javascript\n$('#my-menu').sidr({\n  side: 'right',\n  speed: 400\n});\n```\n\nRefer to the full documentation for a complete list of options and their descriptions.\n\n\n### Creating a Simple Sidr Menu\n\n1. **Create the Menu Structure:** Create an unordered list (`<ul>`) containing your menu items. Each item should be a list item (`<li>`) with a link (`<a>`) element inside.  Give this `<ul>` a unique ID (e.g., `my-sidr-menu`).\n\n   ```html\n   <ul id=\"my-sidr-menu\">\n     <li><a href=\"#\">Home</a></li>\n     <li><a href=\"#\">About</a></li>\n     <li><a href=\"#\">Services</a></li>\n     <li><a href=\"#\">Contact</a></li>\n   </ul>\n   ```\n\n2. **Add a Button (Optional):**  Add a button to trigger the menu's opening.  This could be a hamburger icon or other element. Assign it an ID (e.g., `open-menu-button`).\n\n   ```html\n   <button id=\"open-menu-button\">Open Menu</button>\n   ```\n\n3. **Initialize Sidr:** In your JavaScript file (after including jQuery and Sidr), initialize Sidr using the ID of your menu element:\n\n   ```javascript\n   $(document).ready(function() {\n     $('#my-sidr-menu').sidr(); // This initializes the default Sidr setup.  Add options as needed\n\n     $('#open-menu-button').click(function() {\n         $.sidr('open', 'my-sidr-menu');\n     });\n   });\n   ```\n\n4. **Style the Menu:**  Use CSS to style the menu to match your website's design.  Refer to the Sidr CSS file for default styles and adjust as needed.  You can either customize the existing CSS or create separate styles.  Target the classes generated by Sidr for efficient styling.\n\n\nThis will create a basic, functional Sidr menu.  You can then enhance this further using the configuration options described above to customize its behavior and appearance.\n\n\n## Advanced Usage\n\n### Customizing the Appearance\n\nSidr's appearance can be extensively customized using CSS.  The plugin generates several classes that you can target to modify the menu's styling.  These classes typically include `sidr`, `sidr-inner`, `sidr-class-name` (where `class-name` reflects the `name` option used during initialization), and others.  Inspect the generated HTML and CSS using your browser's developer tools to identify the specific classes to target.\n\nYou can override the default styles provided by `sidr.css` or create a separate stylesheet for your customizations.  For example, to change the background color of the menu:\n\n```css\n.sidr-class-name {\n  background-color: #f0f0f0;\n}\n```\n\nRemember to replace `.sidr-class-name` with the actual class name generated by Sidr for your menu.  You can customize virtually every aspect of the menu's appearance, including colors, fonts, padding, and more, through CSS.\n\n\n### Using Different Themes\n\nWhile Sidr doesn't directly include pre-built themes, you can easily create your own themes by extending the default stylesheet. Create a new CSS file and import `sidr.css` as a base.  Then, override or add styles to customize the appearance according to your desired theme.  You can create multiple theme files for different styles, switching between them as needed within your project.\n\n\n### Handling Events\n\nSidr provides several events that allow you to trigger custom functionality when the menu opens or closes.  These events can be accessed using jQuery's `.on()` method.  The available events are:\n\n* `sidr.open`: Triggered when the menu opens.\n* `sidr.close`: Triggered when the menu closes.\n\nFor example:\n\n```javascript\n$('#my-menu').sidr({\n  onOpen: function() {\n    console.log('Menu opened!');\n    // Add your custom code here (e.g., analytics tracking)\n  },\n  onClose: function() {\n    console.log('Menu closed!');\n    // Add your custom code here (e.g., reset form fields)\n  }\n});\n```\n\n\n### Integrating with Other Libraries\n\nSidr is designed to work well with other JavaScript libraries.  Since it's built on jQuery, integration with other jQuery plugins is generally straightforward.  If using a library that conflicts with jQuery, ensure that you handle potential conflicts by carefully managing the order of script inclusion or utilizing namespaces appropriately.\n\n\n### Creating Nested Menus\n\nSidr itself doesn't directly support nested menus, but you can achieve a nested effect by using nested unordered lists (`<ul>`) within your menu structure.  Style the nested lists with CSS to create the visual hierarchy and indentation of a nested menu.  You can use JavaScript to control the opening and closing of nested sections, if desired, though this will require custom code beyond the core Sidr functionality.\n\n\n### Accessibility Considerations\n\nFor optimal accessibility:\n\n* **Keyboard Navigation:** Ensure the menu is fully navigable using the keyboard.  Test this thoroughly.\n* **Screen Reader Compatibility:** Use appropriate ARIA attributes (`aria-expanded`, `aria-hidden`, `role=\"menu\"`, etc.) to improve screen reader compatibility.  This will make the menu accessible to users who rely on screen readers.\n* **Semantic HTML:** Use semantic HTML elements (`<nav>`, `<ul>`, `<li>`, `<a>`) to structure the menu.\n* **Focus Management:**  Properly manage focus when the menu opens and closes, ensuring that the focus remains within the menu when it's open.\n* **Sufficient Contrast:** Ensure adequate contrast between text and background colors for better readability.\n\n\nBy following these guidelines, you can make your Sidr menu more accessible to a wider range of users, including those with disabilities. Remember to consult accessibility guidelines (like WCAG) for best practices.\n\n\n## API Reference\n\n### Sidr Constructor\n\nThe Sidr constructor initializes a new off-canvas menu.  It's called by passing the selector for your menu element to the `sidr()` function.  Optional configuration options can be passed as a second argument, a JavaScript object.\n\n**Syntax:**\n\n```javascript\n$('#myMenu').sidr([options]);\n```\n\n* `#myMenu`:  A jQuery selector targeting the element containing your menu content (usually a `<ul>` or `<div>`).\n* `[options]`: (Optional) An object containing configuration options (see \"Options Reference\" below).\n\n\n### Methods: `open()`, `close()`, `toggle()`, `destroy()`\n\nSidr provides several methods to control the menu's behavior after initialization:\n\n* **`open(name)`:** Opens the specified menu.  `name` is a string representing the menu's name (defaults to `sidr` if not specified during initialization).\n\n   ```javascript\n   $.sidr('open', 'myMenu'); // Opens the menu with name 'myMenu'\n   ```\n\n* **`close(name)`:** Closes the specified menu.  `name` is a string representing the menu's name (defaults to `sidr` if not specified).\n\n   ```javascript\n   $.sidr('close', 'myMenu'); // Closes the menu with name 'myMenu'\n   ```\n\n* **`toggle(name)`:** Toggles the specified menu's state (opens if closed, closes if open).  `name` is a string representing the menu's name (defaults to `sidr` if not specified).\n\n   ```javascript\n   $.sidr('toggle', 'myMenu'); // Toggles the menu with name 'myMenu'\n   ```\n\n* **`destroy(name)`:** Removes Sidr functionality from the specified menu and cleans up associated events and elements. `name` is a string representing the menu's name (defaults to `sidr` if not specified). This method will remove all the Sidr related elements from the DOM and unbind events.  After this call the menu is no longer managed by Sidr.\n\n   ```javascript\n   $.sidr('destroy', 'myMenu'); // Removes Sidr functionality from the menu with name 'myMenu'\n   ```\n\n\n### Events: `open`, `close`, `ready`\n\nSidr triggers several custom events that you can use to add custom functionality:\n\n* **`open`:** This event is triggered when a menu is opened using the `open()` method. The event object contains the menu's name as `name` property.\n  ```javascript\n  $(document).on('open.sidr', function(event) {\n    console.log('Sidr menu opened: ' + event.name);\n  });\n  ```\n\n* **`close`:** This event is triggered when a menu is closed using the `close()` method. The event object contains the menu's name as `name` property.\n  ```javascript\n  $(document).on('close.sidr', function(event) {\n    console.log('Sidr menu closed: ' + event.name);\n  });\n  ```\n\n* **`ready`:** This event is triggered when Sidr has finished initializing and the menu is ready. This event is triggered for each menu separately after its initialization is complete.  Useful for triggering actions after the menu is fully set up. The event object contains the menu's name as `name` property.\n  ```javascript\n  $(document).on('ready.sidr', function(event) {\n    console.log('Sidr menu is ready: ' + event.name);\n  });\n  ```\n\n\n### Options Reference\n\nThese options are passed as a JavaScript object to the `sidr()` function during initialization.\n\n* **`name` (String):**  A unique name for the menu instance.  Used to differentiate multiple menus on a single page. Defaults to `sidr`.\n* **`source` (String):** The selector for the menu content (HTML element). Defaults to the selector used to call `sidr()`.\n* **`speed` (Integer):**  The animation speed in milliseconds. Defaults to 200.\n* **`side` (String):**  The side of the screen the menu appears from (`left`, `right`). Defaults to `left`.\n* **`body` (Boolean):**  Whether to add classes to the `<body>` element for styling. Defaults to `true`.\n* **`renaming` (Boolean):** Renames body classes to prevent conflicts. Defaults to `true`.\n* **`displace` (Boolean):**  Whether to displace the main content when the menu is open. Defaults to `true`.\n* **`onOpen` (Function):** A callback function executed when the menu opens. Receives the menu name as an argument.\n* **`onClose` (Function):** A callback function executed when the menu closes. Receives the menu name as an argument.\n* **`callback` (Function):** A callback function to be executed after the menu is initialized (deprecated in favor of the `ready` event).\n* **`timing` (String):** The animation timing function to use (e.g., `ease`, `linear`). Defaults to `ease`.\n\n\nRemember to consult the latest Sidr documentation for the most up-to-date information on the API and options.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Menu doesn't appear:**\n    * **Problem:** Verify that jQuery is included *before* the Sidr JavaScript file. Ensure correct paths to both jQuery and Sidr files in your HTML. Check for typos in selectors (`#myMenu`) and ensure the element exists in your HTML.  Inspect the browser's developer console for JavaScript errors.\n    * **Solution:** Double-check file paths, selectors, and the order of script inclusion. Fix any reported JavaScript errors.\n\n* **Menu doesn't animate:**\n    * **Problem:** Check the `speed` option in your Sidr configuration.  A speed of 0 will disable animation. Ensure there are no CSS rules conflicting with Sidr's animation styles.\n    * **Solution:** Set `speed` to a positive value (e.g., 200). Inspect your CSS for conflicting rules and resolve them.\n\n* **Menu overlaps content:**\n    * **Problem:** The `displace` option might be set to `false`, preventing content displacement.  Check for conflicting CSS rules that might position elements incorrectly.\n    * **Solution:** Set `displace` to `true`.  Review your CSS to ensure no styles are unintentionally overriding Sidr's positioning.\n\n* **Multiple menus conflict:**\n    * **Problem:** If you have multiple Sidr menus, ensure they have unique names using the `name` option.  Conflicting names can lead to unpredictable behavior.\n    * **Solution:** Assign unique names to each Sidr menu instance during initialization.\n\n* **Events not firing:**\n    * **Problem:** Verify correct event binding using jQuery's `.on()` method.  Ensure the event names (`open.sidr`, `close.sidr`) are correctly specified.  Check for errors in your event handlers.\n    * **Solution:** Double-check event names and ensure your event handlers are correctly defined and bound. Use browser developer tools to check for errors in the console.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML, CSS, and JavaScript. Check the console for errors and warnings.  The network tab can help verify that files are loading correctly.\n\n* **Console Logging:** Add `console.log()` statements to your JavaScript code to track the values of variables and the execution flow.  This helps identify the point where issues occur.\n\n* **Simplify:** Create a minimal example that reproduces the issue. This simplifies debugging by eliminating unnecessary code that might mask the root cause.\n\n* **Version Control:** Use a version control system (Git) to track changes to your code. This allows you to easily revert to previous versions if problems arise.\n\n\n### Troubleshooting Browser Compatibility\n\nSidr generally supports modern browsers. However, older browsers might require specific CSS hacks or polyfills for optimal compatibility.  If you encounter issues in older browsers, consider using a polyfill library (like polyfill.io) or targeting specific CSS properties known to be problematic in older browsers.  Thoroughly test across different browsers and versions.\n\n\n### Where to Find Help\n\n* **Official Documentation:** Refer to the official Sidr documentation for detailed explanations, examples, and API references.\n* **Online Forums:** Search for solutions on relevant online forums and Q&A sites (Stack Overflow, etc.).\n* **Issue Tracker:**  If you encounter a bug, consider reporting it on the Sidr project's issue tracker (if available).  Provide clear steps to reproduce the issue and relevant code snippets.  A minimal, reproducible example is highly beneficial.\n\n\nRemember to always provide clear descriptions of your problem, including the steps to reproduce the issue, relevant code snippets, and the browser and versions you're using when seeking help.\n\n\n## Examples and Use Cases\n\n### Responsive Navigation Menus\n\nSidr excels at creating responsive navigation menus that adapt seamlessly to different screen sizes.  A common use case involves hiding a navigation menu on smaller screens and revealing it as a slide-out menu triggered by a button (often a hamburger icon).  This enhances usability on mobile devices without cluttering the screen on larger displays.\n\n**Implementation:**  Create a standard `<nav>` element containing your menu links.  Use CSS to hide this menu on larger screens (e.g., `display: none;` for screens above a certain width).  Initialize Sidr on this `<nav>` element, and add a button that calls `$.sidr('open', 'myMenu')` to trigger the menu's appearance.  Use media queries to adjust the styling and visibility based on screen size.\n\n\n### Sidebars and Navigation Panels\n\nSidr is equally well-suited for implementing sidebars and navigation panels.  These panels can contain supplementary information, navigation links, or user controls, appearing alongside the main content area.  The slide-out effect provided by Sidr makes these panels non-intrusive and easily accessible without consuming valuable screen real estate.\n\n**Implementation:** Create a `<div>` element to hold the sidebar content.  Style it appropriately (e.g., using CSS to set its width and position). Initialize Sidr on this `<div>` element and use CSS or JavaScript to adjust its position relative to the main content area.\n\n\n### Mobile-First Design Implementations\n\nIn a mobile-first design approach, the default view is optimized for smaller screens. Sidr is ideal for enhancing the mobile experience by providing a clean and efficient way to present navigation and other elements.  For mobile-first designs, you'll typically start with the Sidr menu visible on smaller screens and then use CSS media queries to hide or modify it for larger screens.\n\n**Implementation:**  Create your menu as a Sidr menu initially.  This becomes the primary navigation on smaller devices.  For larger screens, use CSS media queries to change the menu's display to `block` or adjust its position to be a fixed navigation bar.\n\n\n### Advanced Menu Structures\n\nWhile Sidr doesn't directly support nested menus, you can create visually nested structures by using nested unordered lists (`<ul>`) within your menu HTML. You will need to manage the opening and closing behavior of submenus using custom JavaScript or other techniques outside of Sidr's core functionality.   CSS can be used to visually style nested lists to give the impression of nested menus.\n\n**Implementation:**  Create nested `<ul>` elements within your main menu element. Use CSS to style the nesting, for instance, adding indentation or using different background colors for each level of the nested structure.  Consider using JavaScript to handle the expand/collapse behavior of nested menu sections to enhance the user experience.  This would involve adding event listeners to the parent menu items that control the visibility of their children.  Libraries like jQuery can greatly simplify this implementation.\n\n\n## Contributing to Sidr\n\n### Setting up the Development Environment\n\nTo contribute to Sidr, you'll need a development environment set up with the necessary tools and dependencies.  These instructions assume you're familiar with Git and have Node.js and npm (or yarn) installed.\n\n1. **Fork the Repository:**  Fork the official Sidr repository on GitHub to your own account.  This creates a copy of the project that you can work on independently.\n\n2. **Clone Your Fork:** Clone your forked repository to your local machine using Git:\n\n   ```bash\n   git clone <your-github-username>/sidr.git\n   cd sidr\n   ```\n   Replace `<your-github-username>` with your GitHub username.\n\n3. **Install Dependencies:**  Navigate to the project directory and install the project's dependencies using npm or yarn:\n\n   ```bash\n   npm install  // Or: yarn install\n   ```\n\n4. **Run the Development Server (if applicable):** Some projects may include a development server for easier testing.  Refer to the project's `README.md` file for instructions on how to start the development server, if provided.\n\n5. **Create a New Branch:** Before making any changes, create a new branch for your contribution:\n\n   ```bash\n   git checkout -b <your-branch-name>\n   ```\n   Replace `<your-branch-name>` with a descriptive name for your branch (e.g., \"fix-bug-123\" or \"add-feature-xyz\").\n\n\n### Coding Style Guidelines\n\nAdhere to the existing coding style used in the Sidr project.  Consistency is crucial for maintaining code readability and maintainability.  Look at existing code to get a feel for the style and conventions used for variable naming, indentation, commenting, etc.  If the project has an official style guide (e.g., in a `CONTRIBUTING.md` file), follow it closely.\n\n\n### Testing and Debugging\n\nBefore submitting a pull request, ensure your changes are thoroughly tested.  The project may include a testing suite; run the tests to verify your changes don't introduce regressions or break existing functionality.  Use your browser's developer tools to debug any issues you encounter during testing.\n\n\n### Submitting Pull Requests\n\n1. **Commit Your Changes:**  After making your changes and testing them, commit your changes using Git:\n\n   ```bash\n   git add .\n   git commit -m \"<your-commit-message>\"\n   ```\n   Write a clear and concise commit message explaining your changes.\n\n2. **Push Your Branch:** Push your branch to your forked repository:\n\n   ```bash\n   git push origin <your-branch-name>\n   ```\n\n3. **Create a Pull Request:** On GitHub, go to your forked repository and create a pull request to merge your branch into the main branch of the original Sidr repository.  Provide a detailed description of your changes in the pull request, explaining the context, the problem you're addressing, and any relevant considerations.\n\n4. **Address Feedback:**  The maintainers may provide feedback on your pull request.  Address any comments or requested changes promptly and push updates to your branch.  Continue this iterative process until your pull request is approved and merged.\n\n\nRemember to be respectful and collaborative throughout the contribution process.  Clear communication and a willingness to incorporate feedback are key to a successful contribution.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"sidr.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"sidr - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}