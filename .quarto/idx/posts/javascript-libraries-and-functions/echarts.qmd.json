{"title":"ECharts - A Developer's Handbook","markdown":{"yaml":{"title":"ECharts - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nECharts can be integrated into your project in several ways.  The primary methods are via a CDN, npm, or yarn.\n\n**CDN:** The easiest way to get started is by including ECharts via a CDN link. Add the following script tag to your HTML file:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js\"></script>\n```\nReplace `5.4.2` with the desired version number.  You can find the latest version on the ECharts website.\n\n**npm:** If you're using npm, install ECharts using:\n\n```bash\nnpm install echarts\n```\n\n**yarn:**  If you prefer yarn, use:\n\n```bash\nyarn add echarts\n```\n\nAfter installation via npm or yarn, you'll need to import ECharts into your JavaScript code (see \"Including ECharts in your project\" below).\n\n\n### Basic Example\n\nA minimal ECharts example involves creating a DOM element for the chart and then initializing the chart instance.  This example creates a simple line chart.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>ECharts Example</title>\n</head>\n<body>\n  <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n  <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js\"></script>\n  <script type=\"text/javascript\">\n    // based on prepared DOM, initialize echarts instance\n    var myChart = echarts.init(document.getElementById('main'));\n\n    // specify chart configuration item and data\n    var option = {\n      xAxis: { type: 'category', data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] },\n      yAxis: { type: 'value' },\n      series: [{ data: [820, 932, 901, 934, 1290, 1330, 1320], type: 'line' }]\n    };\n\n    // use configuration item and data specified to show chart\n    myChart.setOption(option);\n  </script>\n</body>\n</html>\n```\n\n\n### Including ECharts in your project\n\nAfter installation using npm or yarn, import ECharts into your project's JavaScript file.  Using ES modules:\n\n```javascript\nimport * as echarts from 'echarts';\n\n// ... your chart initialization code ...\n```\n\nOr, using CommonJS:\n\n\n```javascript\nconst echarts = require('echarts');\n\n// ... your chart initialization code ...\n```\n\nRemember to adjust the import statement based on your module system and project structure.\n\n\n### First Chart\n\nThe \"Basic Example\" provides a complete, runnable example to create your first chart.  The code creates a `div` element to hold the chart, initializes the ECharts instance using `echarts.init()`, defines the chart's options (data and configuration), and finally sets the options using `myChart.setOption()`.  This will render a simple line chart in your browser.  Remember to include the ECharts library as described in the \"Installation\" section.\n\n\n## Chart Types\n\n### Line Charts\n\nLine charts are used to visualize data trends over time or across categories.  They are ideal for showing continuous data and highlighting changes in values.  ECharts' line chart offers features like smoothing, data points, tooltips, and various customization options for axes, lines, and labels.  You can specify different line styles, colors, and add markers to highlight specific data points.\n\n### Bar Charts\n\nBar charts represent data using rectangular bars, making it easy to compare values across different categories.  ECharts supports both vertical and horizontal bar charts, allowing for flexibility in presentation.  Features like stacking, grouping, and data labels enhance the chart's readability and informativeness.\n\n### Scatter Charts\n\nScatter charts display data as points on a two-dimensional plane, showing the relationship between two variables.  ECharts' scatter charts allow for the visualization of large datasets, offering features like zooming, panning, and the ability to add labels and tooltips to individual data points.  Different point shapes and sizes can be used to represent additional data dimensions.\n\n### Pie Charts\n\nPie charts represent proportions or percentages of a whole.  ECharts' pie charts provide options for labeling slices with percentages or values, adjusting slice positions, and customizing the appearance of the chart, including colors and styles.  They are useful for showing the relative contribution of different categories to a total.\n\n### Map Charts\n\nMap charts visualize data geographically on a map. ECharts integrates with various map providers and allows for the visualization of geographical data using different visual representations like heatmaps, points, and regions.  You can customize the map's appearance, add tooltips, and interact with map elements.\n\n### Radar Charts\n\nRadar charts display multivariate data in a radial fashion.  Each variable is represented by an axis, and data points are plotted in relation to these axes.  ECharts supports multiple radar series, different area styles, and customization of the chart's appearance.\n\n### Heatmaps\n\nHeatmaps use color gradients to represent data density or magnitude in a matrix format.  ECharts' heatmaps allow for the visualization of large datasets, offering features like zooming, panning, and custom color scales.  They are useful for identifying patterns and trends in data distributions.\n\n### Treemaps\n\nTreemaps display hierarchical data using nested rectangles, where the size of each rectangle represents the value of the corresponding data element.  ECharts' treemaps allow for interactive exploration of hierarchical data, offering features like drill-down and tooltips.\n\n### Graph Charts\n\nGraph charts visualize relationships between nodes and edges in a network.  ECharts supports various graph layouts, node styles, and edge types, enabling the representation of complex network structures.  Interactive features like node highlighting and path tracing enhance the analysis of network relationships.\n\n### Gauge Charts\n\nGauge charts display a single value relative to a range, often used for monitoring metrics like speed, temperature, or progress.  ECharts' gauge charts provide customizable ranges, pointers, and labels, allowing for clear representation of a single key value within a defined context.\n\n### Funnel Charts\n\nFunnel charts represent a process or stages of a workflow, showing the flow of data through different steps.  ECharts' funnel charts allow for visualization of the number of items or data points at each stage, highlighting drop-offs or bottlenecks in the process.\n\n\n### Candlestick Charts\n\nCandlestick charts are commonly used in financial analysis to visualize price movements over time. Each candlestick represents the opening, closing, high, and low prices for a given period. ECharts provides tools to create and customize these charts effectively.\n\n### Boxplot Charts\n\nBoxplot charts (also known as box and whisker plots) show the distribution of data through quartiles. They visually represent the median, quartiles, and outliers, providing a quick understanding of the data's spread and central tendency.\n\n### Parallel Charts\n\nParallel charts are used to compare multiple data attributes simultaneously.  Each attribute is represented on a separate axis, and data points are linked across the axes.  This allows for identifying patterns and correlations among different attributes.\n\n### Sankey Diagrams\n\nSankey diagrams visualize the flow of data or resources between different nodes.  The width of the links between nodes represents the magnitude of the flow, making it easy to identify major flows and bottlenecks within a system.\n\n\n## Chart Components\n\n### Titles\n\nTitles provide context and a clear description for your charts. ECharts allows you to add main titles, sub-titles, and link titles to your charts. You can customize their text, font, position, and styling to suit your needs.  Multiple titles can be added for richer descriptions.\n\n### Legends\n\nLegends provide a visual key to interpret the different series and data within your chart. ECharts lets you customize the legend's position (top, bottom, left, right), orientation (vertical, horizontal), and item appearance (colors, labels, etc.).  Interactive legends allow users to selectively show or hide series.\n\n### Tooltips\n\nTooltips provide interactive data information upon hovering over chart elements. ECharts allows for extensive customization of tooltip content, formatting, position, and trigger behavior (item, axis).  You can display various data fields and format them dynamically.\n\n### Grids\n\nGrids organize and layout multiple charts or chart components within a single container.  ECharts allows you to create multiple grids on a canvas, positioning them to create complex dashboard layouts.  Grids define the coordinate system for the charts they contain.\n\n### Axis\n\nAxes define the coordinate system for your chart and provide scaling and labeling for your data. ECharts offers both cartesian (x, y) axes and polar axes.  You can customize axis types (value, category, time, log), labels, scales, and appearances.\n\n### Data Zoom\n\nData zoom components enable users to interactively zoom in and out of large datasets.  ECharts provides both inside and outside zoom controls, allowing for fine-grained control over the visible data range.  Different zoom modes (slider, inside, etc.) provide flexibility in user interaction.\n\n### Visual Map\n\nVisual maps provide a visual representation of a data range, often used to encode data values to colors or sizes.  ECharts' visual maps allow you to create color gradients or size scales linked to a data series or dimension, helping visualize data magnitude.\n\n### Timelines\n\nTimelines allow for the sequential display of charts across time.  ECharts' timelines facilitate the creation of animated transitions and the selection of different time periods within a larger dataset.  They are excellent for visualizing changes over time.\n\n### Data Browsing\n\nData browsing allows users to explore data interactively through a series of controls. ECharts provides various features, such as data selection, filtering, and pagination for navigating large datasets and focusing on specific aspects of your data.\n\n### Marklines and Markpoints\n\nMarklines and markpoints add annotations directly onto the chart, highlighting specific data points or trends.  Marklines draw lines across the chart while markpoints add special visual markers to individual data points.  These components enhance the chart's ability to communicate specific information.\n\n\n## Data Handling\n\n### Data Formats\n\nECharts accepts data in various formats, primarily arrays and objects.  The most common format is an array of arrays, where each inner array represents a data item.  For example, for a line chart:\n\n```javascript\n[\n    [10, 20],\n    [20, 30],\n    [30, 40]\n]\n```\n\nAlternatively, you can use an array of objects, especially useful when you have multiple dimensions:\n\n```javascript\n[\n    {value: 10, name: 'A'},\n    {value: 20, name: 'B'},\n    {value: 30, name: 'C'}\n]\n```\n\nECharts also supports other formats, including those compatible with common data formats like CSV or JSON.  Consult the ECharts documentation for the most comprehensive list of supported data formats.\n\n\n### Data Loading\n\nData can be loaded directly into the chart options or loaded asynchronously. For simpler charts, direct data inclusion is sufficient. For complex or large datasets, asynchronous loading via `$.get`, `fetch`, or other AJAX methods is recommended.  This avoids blocking the rendering process.\n\nExample of asynchronous loading (using `fetch`):\n\n```javascript\nfetch('data.json')\n  .then(response => response.json())\n  .then(data => {\n    myChart.setOption({\n      series: [{ data: data }]\n    });\n  });\n```\n\n\n### Data Filtering\n\nECharts doesn't directly handle data filtering within its core functionality. Data filtering should be performed before passing the data to the chart.  You can use JavaScript's built-in array methods like `filter` to pre-process your data:\n\n```javascript\nconst filteredData = originalData.filter(item => item.value > 15);\nmyChart.setOption({ series: [{ data: filteredData }] });\n```\n\n\n### Data Transformation\n\nSimilar to filtering, data transformation is best handled before passing data to ECharts. You can use JavaScript functions to reshape or modify your data as needed. This might involve calculating new values, aggregating data, or reformatting it for better chart representation.\n\nFor example, calculating a moving average:\n\n```javascript\nfunction calculateMovingAverage(data, windowSize) {\n  // ...Implementation to calculate moving average...\n  return transformedData;\n}\nconst transformedData = calculateMovingAverage(originalData, 3);\nmyChart.setOption({ series: [{ data: transformedData }] });\n```\n\n### Working with Large Datasets\n\nFor large datasets, performance optimization is crucial.  Techniques include:\n\n* **Data downsampling:** Reduce the number of data points by averaging or summarizing data within intervals.\n* **Lazy loading:** Load only the necessary data points for the currently visible viewport.  ECharts offers features like `dataZoom` that can help with this.\n* **Data virtualization:**  Implement custom data handling to load and display only the portion of data required for rendering.  This avoids loading the entire dataset into memory.\n* **Using efficient data structures:** Choose data structures optimized for the operations you'll perform (e.g., using typed arrays instead of regular arrays for numerical data).\n\n\nRemember to consult the ECharts documentation and examples for optimal performance strategies tailored to your specific chart type and dataset size.\n\n\n## Customization\n\n### Themes\n\nECharts provides built-in themes that alter the overall look and feel of your charts. You can select a theme when initializing the chart or apply a theme later using `setOption()`.  Themes modify aspects like colors, fonts, and component styles.  ECharts also allows creating and using custom themes by defining a JSON configuration object.  This allows for a consistent visual style across your applications.\n\n### Styling Charts\n\nBeyond themes, fine-grained styling is achieved by directly manipulating the chart's options.  You can customize virtually every visual element, from colors and fonts to axis labels, data point shapes, and tooltip appearances.  ECharts' extensive API documentation provides details on the properties you can adjust for each chart component. This includes using CSS directly within certain aspects of the charts.\n\n### Custom Components\n\nFor extending ECharts' functionality, you can create and integrate custom components. This allows adding entirely new visual elements or extending existing ones to match your specific needs.  The process involves registering a custom component and configuring it within your chart options.  ECharts provides clear documentation on the required structure and methods for developing custom components.\n\n### Advanced Configuration Options\n\nECharts offers numerous advanced configuration options that allow fine-tuning chart behavior and performance.  These options control aspects like animation, data interaction, event handling, and rendering performance.  Exploring these advanced options allows for creating highly customized and optimized charts, catering to specific application requirements.  Areas like performance optimization for large datasets and custom interactions often fall under these advanced configurations.\n\n\n## Events and Interactions\n\n### Event Handling\n\nECharts provides a rich set of events that trigger on various user interactions and chart updates.  You can register event listeners to respond to these events and implement custom actions.  Common events include `click`, `mouseover`, `mouseout`, `legendselectchanged`, and others specific to chart types and components.  Event handlers are typically attached using the `on` method of the chart instance.  The event object passed to the handler contains information about the event.\n\nExample:\n\n```javascript\nmyChart.on('click', params => {\n  console.log('Chart clicked at:', params);\n  // Your custom logic here...\n});\n```\n\n### Chart Interactions\n\nECharts offers several built-in chart interactions, such as:\n\n* **Zooming and panning:**  Many chart types support zooming and panning to explore data at different scales.\n* **Data selection:**  Users can select data points or regions, triggering events you can respond to.\n* **Tooltip display:**  Hovering over data points displays tooltips showing detailed information.\n* **Legend interaction:**  Clicking on legend items hides or shows corresponding series.\n* **Data brush selection:**  Select a range of data with a brush to highlight or filter it.\n\nThese interactions are usually enabled by default, but their behavior can be customized (see \"Customizing Interactions\" below).\n\n### Customizing Interactions\n\nECharts allows extensive customization of interactions.  You can:\n\n* **Enable/disable built-in interactions:**  Control which interactions are available to the user.\n* **Modify interaction behavior:** Change how zooming, panning, or data selection works.  For instance, you could restrict zoom levels or change the selection behavior.\n* **Create custom interactions:**  Implement completely new interaction behaviors by responding to chart events and manipulating the chart's state.  This could involve custom highlighting, linking to external data, or adding unique visual responses.\n* **Add custom controls:**  Create your own UI elements (buttons, sliders, etc.) to control chart interactions beyond the defaults.\n\nCustomizing interactions requires a good understanding of ECharts' event system and its API for manipulating chart components.  This often involves combining event handling with direct manipulation of chart options.\n\n\n## Advanced Techniques\n\n### Dynamic Chart Updates\n\nUpdating charts dynamically is crucial for creating responsive and interactive visualizations. ECharts allows for efficient updates using `setOption()`.  For incremental updates, use the `setOption` method with the `notMerge` option set to `true` to replace the entire option object.  For merging updates, leave `notMerge` as `false` (default) to merge new options with existing ones.  This allows selective modification of chart data or configuration without redrawing the entire chart.  Efficient update strategies are key for maintaining a smooth user experience, especially with large datasets.\n\n### Chart Animations\n\nECharts provides built-in animation capabilities for visually engaging charts.  Animations can be enabled or disabled globally or on a per-series basis.  You can customize animation duration, easing functions, and other properties to fine-tune the visual effect.  Well-designed animations improve the user experience by making changes more apparent and understandable. However, excessive or poorly implemented animations can negatively impact performance.\n\n### Interactive Elements\n\nInteractive elements enhance user engagement and allow for deeper data exploration. Techniques include:\n\n* **Custom tooltips:**  Extend the default tooltips to display more detailed or custom information.\n* **Interactive legends:**  Allow users to select, filter, or highlight data series through legend interaction.\n* **Data zooming and panning:**  Enable users to explore large datasets by zooming in and panning.\n* **Custom controls:**  Add interactive buttons, sliders, or other custom controls to dynamically modify chart parameters.\n* **Linking charts:**  Synchronize the selection or zoom levels across multiple charts for coordinated data exploration.\n\nThese features require combining ECharts' event handling and API to update chart options in response to user interactions.\n\n\n### Performance Optimization\n\nOptimizing performance is critical for smooth visualizations, especially with large datasets. Techniques include:\n\n* **Data downsampling:** Reduce the number of data points for improved rendering speed.\n* **Lazy loading:** Load and render data only when needed (e.g., for the visible area of a chart).\n* **Efficient data structures:** Use data structures tailored to your needs for faster data access and processing.\n* **Animation optimization:** Disable or simplify animations for better performance, especially on less powerful devices.\n* **Minimizing DOM manipulations:** Reduce the number of times the DOM is updated to improve rendering speed.\n* **Using worker threads (if applicable):** Offload computationally intensive tasks to background threads to avoid blocking the main thread.\n\nThese optimizations often involve balancing visual fidelity with performance to achieve the best user experience.  Profiling your code can help identify performance bottlenecks.  The techniques used often depend on the scale and nature of your data and the complexity of your chart.\n\n\n## API Reference\n\n### ECharts Instance Methods\n\nThe ECharts instance, obtained via `echarts.init()`, exposes several methods for interacting with and controlling the chart.  Key methods include:\n\n* **`setOption(option, notMerge)`:** Sets or updates the chart options. `notMerge` (boolean) controls whether to merge the new options with existing ones or replace them entirely.\n* **`getOption()`:** Retrieves the current chart options.\n* **`resize()`:**  Resizes the chart to fit its container.  Useful when the container's dimensions change dynamically.\n* **`dispose()`:**  Destroys the chart instance, releasing resources.  Important for cleanup when the chart is no longer needed.\n* **`on(eventName, eventHandler)`:**  Registers an event listener for a specific event.\n* **`off(eventName, eventHandler)`:** Removes an event listener.\n* **`getDataURL(opts)`:** Returns a data URL of the chart image.  Allows saving the chart as an image.\n* **`convertToPixel(seriesIndex, dataIndex)`:** Converts data coordinates to pixel coordinates. Useful for custom annotations or interactions.\n* **`convertFromPixel(seriesIndex, dataIndex)`:** Converts pixel coordinates to data coordinates.\n\n\nThe complete list of instance methods and their detailed descriptions can be found in the official ECharts API documentation.\n\n\n### Option Configuration Details\n\nThe `option` object passed to `setOption()` defines the chart's appearance, behavior, and data.  This object is hierarchical, with properties controlling various aspects like:\n\n* **`title`:** Chart title settings.\n* **`legend`:** Legend settings.\n* **`tooltip`:** Tooltip settings.\n* **`grid`:** Grid layout settings.\n* **`xAxis`, `yAxis`:** Axis settings.\n* **`series`:**  Data series configuration.  Each series has its own options, depending on the chart type (e.g., line, bar, pie).\n* **`visualMap`:**  Visual map settings for encoding data values to colors or sizes.\n* **`dataZoom`:** Data zoom settings.\n* **`timeline`:** Timeline settings.\n\nDetailed descriptions and available properties for each option are thoroughly documented in the official ECharts API reference.\n\n\n### Component APIs\n\nECharts components (like axes, legends, tooltips) often have their own APIs for more granular control.  These APIs are usually accessed through properties within the main `option` object. For example, to configure the x-axis labels:\n\n```javascript\noption = {\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed'],\n    axisLabel: { // Component-specific API\n      rotate: 45,\n      formatter: '{value} days'\n    }\n  }\n};\n```\n\nConsult the official API documentation to find component-specific APIs and their parameters.\n\n\n### Utility Functions\n\nECharts provides utility functions that are helpful for various tasks:\n\n* **`echarts.number.format()`:** Formats numbers according to specified patterns.\n* **`echarts.util.each()`:** Iterates over arrays or objects.\n* **`echarts.graphic.Group()`:** Creates a graphic group for custom rendering.\n* **`echarts.graphic.Text()`:** Creates a text element.\n* **`echarts.graphic.Rect()`:** Creates a rectangle element.  (These are examples from the graphic component)\n\nThese utility functions are used for tasks like data processing, graphic element creation, and other common operations.  The specific set of utility functions is documented in the official ECharts API.  The `echarts` namespace houses many of these utility functions, offering a range of options for common development tasks.\n\n\n## Troubleshooting\n\n### Common Issues\n\nSeveral common issues arise when working with ECharts:\n\n* **Chart not rendering:**  This often stems from incorrect library inclusion, missing or incorrectly formatted data, or typos in configuration options.  Double-check your HTML for the correct script inclusion, verify your data structure, and carefully review your `option` object for errors.  Using your browser's developer console to check for JavaScript errors is essential.\n\n* **Incorrect chart appearance:**  Unexpected visual results may be due to misconfigured options.  Check the axis types, scales, data ranges, and series configurations.  Consult the ECharts documentation for the correct options for your chart type.\n\n* **Performance issues:**  Large datasets or complex chart configurations can lead to slow rendering. Consider optimizing your data (downsampling, lazy loading), simplifying chart elements, and using ECharts' performance optimization features.\n\n* **Unexpected behavior:** Unforeseen behavior might indicate issues in event handling or interaction configurations.  Carefully review your event handlers and ensure they correctly interact with the chart's state.\n\n\n### Debugging Tips\n\nEffective debugging techniques for ECharts include:\n\n* **Browser developer tools:** Use your browser's developer console to check for JavaScript errors, inspect the chart's DOM structure, and debug your code step-by-step.  The console often provides clues about the source of errors.\n\n* **Simplify your code:** Break down complex charts into smaller, simpler components to isolate the source of problems.  This makes it easier to identify the problem area.\n\n* **Check the ECharts documentation:** Carefully review the relevant sections of the ECharts documentation for your chart type and the options you're using.  The documentation provides detailed explanations of options and expected behavior.\n\n* **Inspect the `option` object:**  Log your `option` object to the console before setting it to the chart. This helps verify that the configuration is correct and as intended.\n\n* **Use a code editor with debugging tools:** Modern code editors have debugging features that allow setting breakpoints, stepping through code, and inspecting variables.  These tools significantly aid in identifying the root causes of problems.\n\n\n### Error Messages\n\nECharts error messages often provide valuable clues for resolving issues.  Pay close attention to:\n\n* **Specific error messages:**  The error messages themselves usually provide information about the nature of the problem (e.g., missing data, invalid configuration, etc.).\n\n* **Line numbers and file names:** These help locate the specific part of your code causing the error.\n\n* **Stack traces:**  In more complex cases, the stack trace can help trace the execution path that led to the error, showing the sequence of function calls.\n\nIf an error message isn't immediately clear, use a search engine to find potential solutions or consult ECharts' issue tracker or community forums.  Providing the error message and relevant code snippets when seeking assistance will help others diagnose your problem more effectively.\n\n\n## Examples and Tutorials\n\n### Basic Chart Examples\n\nThe ECharts website and documentation provide a wealth of basic chart examples covering various chart types.  These examples showcase the fundamental usage of ECharts, demonstrating how to create simple charts with basic configurations.  They are excellent starting points for learning the core concepts and syntax of ECharts.  These usually include simple line charts, bar charts, pie charts, and scatter charts, demonstrating basic data input and minimal configurations.\n\n### Advanced Chart Examples\n\nBeyond basic charts, ECharts offers examples showcasing advanced features and techniques.  These examples demonstrate more complex configurations, including custom components, interactive elements, data transformations, and animations.  They provide insights into creating more sophisticated and feature-rich visualizations.  Advanced examples might involve combining multiple chart types, creating custom visual maps, utilizing data zooming and panning, incorporating tooltips with custom content, and more.\n\n### Real-World Applications\n\nTo illustrate practical usage, ECharts provides examples demonstrating how the library can be applied in real-world scenarios.  These examples showcase diverse applications of ECharts, providing inspiration and practical guidance for integrating ECharts into various projects.  They might demonstrate examples in dashboards, data analysis tools, or even specific industry applications, providing realistic contexts and implementation approaches.  These can range from simple dashboards showing key metrics to complex interactive data explorations.\n\n### Code Examples\n\nThroughout the ECharts documentation and website, numerous code examples are provided. These examples are written in JavaScript and demonstrate various aspects of ECharts, from basic chart creation to advanced customization.   The examples are typically concise and well-commented, making them easy to understand and adapt to specific needs.  They often accompany explanations, making them effective learning tools and practical references for implementing specific features or configurations within your projects.  The examples showcase both the declarative option setting and the imperative API interaction approaches.\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nECharts can be integrated into your project in several ways.  The primary methods are via a CDN, npm, or yarn.\n\n**CDN:** The easiest way to get started is by including ECharts via a CDN link. Add the following script tag to your HTML file:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js\"></script>\n```\nReplace `5.4.2` with the desired version number.  You can find the latest version on the ECharts website.\n\n**npm:** If you're using npm, install ECharts using:\n\n```bash\nnpm install echarts\n```\n\n**yarn:**  If you prefer yarn, use:\n\n```bash\nyarn add echarts\n```\n\nAfter installation via npm or yarn, you'll need to import ECharts into your JavaScript code (see \"Including ECharts in your project\" below).\n\n\n### Basic Example\n\nA minimal ECharts example involves creating a DOM element for the chart and then initializing the chart instance.  This example creates a simple line chart.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>ECharts Example</title>\n</head>\n<body>\n  <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n  <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js\"></script>\n  <script type=\"text/javascript\">\n    // based on prepared DOM, initialize echarts instance\n    var myChart = echarts.init(document.getElementById('main'));\n\n    // specify chart configuration item and data\n    var option = {\n      xAxis: { type: 'category', data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] },\n      yAxis: { type: 'value' },\n      series: [{ data: [820, 932, 901, 934, 1290, 1330, 1320], type: 'line' }]\n    };\n\n    // use configuration item and data specified to show chart\n    myChart.setOption(option);\n  </script>\n</body>\n</html>\n```\n\n\n### Including ECharts in your project\n\nAfter installation using npm or yarn, import ECharts into your project's JavaScript file.  Using ES modules:\n\n```javascript\nimport * as echarts from 'echarts';\n\n// ... your chart initialization code ...\n```\n\nOr, using CommonJS:\n\n\n```javascript\nconst echarts = require('echarts');\n\n// ... your chart initialization code ...\n```\n\nRemember to adjust the import statement based on your module system and project structure.\n\n\n### First Chart\n\nThe \"Basic Example\" provides a complete, runnable example to create your first chart.  The code creates a `div` element to hold the chart, initializes the ECharts instance using `echarts.init()`, defines the chart's options (data and configuration), and finally sets the options using `myChart.setOption()`.  This will render a simple line chart in your browser.  Remember to include the ECharts library as described in the \"Installation\" section.\n\n\n## Chart Types\n\n### Line Charts\n\nLine charts are used to visualize data trends over time or across categories.  They are ideal for showing continuous data and highlighting changes in values.  ECharts' line chart offers features like smoothing, data points, tooltips, and various customization options for axes, lines, and labels.  You can specify different line styles, colors, and add markers to highlight specific data points.\n\n### Bar Charts\n\nBar charts represent data using rectangular bars, making it easy to compare values across different categories.  ECharts supports both vertical and horizontal bar charts, allowing for flexibility in presentation.  Features like stacking, grouping, and data labels enhance the chart's readability and informativeness.\n\n### Scatter Charts\n\nScatter charts display data as points on a two-dimensional plane, showing the relationship between two variables.  ECharts' scatter charts allow for the visualization of large datasets, offering features like zooming, panning, and the ability to add labels and tooltips to individual data points.  Different point shapes and sizes can be used to represent additional data dimensions.\n\n### Pie Charts\n\nPie charts represent proportions or percentages of a whole.  ECharts' pie charts provide options for labeling slices with percentages or values, adjusting slice positions, and customizing the appearance of the chart, including colors and styles.  They are useful for showing the relative contribution of different categories to a total.\n\n### Map Charts\n\nMap charts visualize data geographically on a map. ECharts integrates with various map providers and allows for the visualization of geographical data using different visual representations like heatmaps, points, and regions.  You can customize the map's appearance, add tooltips, and interact with map elements.\n\n### Radar Charts\n\nRadar charts display multivariate data in a radial fashion.  Each variable is represented by an axis, and data points are plotted in relation to these axes.  ECharts supports multiple radar series, different area styles, and customization of the chart's appearance.\n\n### Heatmaps\n\nHeatmaps use color gradients to represent data density or magnitude in a matrix format.  ECharts' heatmaps allow for the visualization of large datasets, offering features like zooming, panning, and custom color scales.  They are useful for identifying patterns and trends in data distributions.\n\n### Treemaps\n\nTreemaps display hierarchical data using nested rectangles, where the size of each rectangle represents the value of the corresponding data element.  ECharts' treemaps allow for interactive exploration of hierarchical data, offering features like drill-down and tooltips.\n\n### Graph Charts\n\nGraph charts visualize relationships between nodes and edges in a network.  ECharts supports various graph layouts, node styles, and edge types, enabling the representation of complex network structures.  Interactive features like node highlighting and path tracing enhance the analysis of network relationships.\n\n### Gauge Charts\n\nGauge charts display a single value relative to a range, often used for monitoring metrics like speed, temperature, or progress.  ECharts' gauge charts provide customizable ranges, pointers, and labels, allowing for clear representation of a single key value within a defined context.\n\n### Funnel Charts\n\nFunnel charts represent a process or stages of a workflow, showing the flow of data through different steps.  ECharts' funnel charts allow for visualization of the number of items or data points at each stage, highlighting drop-offs or bottlenecks in the process.\n\n\n### Candlestick Charts\n\nCandlestick charts are commonly used in financial analysis to visualize price movements over time. Each candlestick represents the opening, closing, high, and low prices for a given period. ECharts provides tools to create and customize these charts effectively.\n\n### Boxplot Charts\n\nBoxplot charts (also known as box and whisker plots) show the distribution of data through quartiles. They visually represent the median, quartiles, and outliers, providing a quick understanding of the data's spread and central tendency.\n\n### Parallel Charts\n\nParallel charts are used to compare multiple data attributes simultaneously.  Each attribute is represented on a separate axis, and data points are linked across the axes.  This allows for identifying patterns and correlations among different attributes.\n\n### Sankey Diagrams\n\nSankey diagrams visualize the flow of data or resources between different nodes.  The width of the links between nodes represents the magnitude of the flow, making it easy to identify major flows and bottlenecks within a system.\n\n\n## Chart Components\n\n### Titles\n\nTitles provide context and a clear description for your charts. ECharts allows you to add main titles, sub-titles, and link titles to your charts. You can customize their text, font, position, and styling to suit your needs.  Multiple titles can be added for richer descriptions.\n\n### Legends\n\nLegends provide a visual key to interpret the different series and data within your chart. ECharts lets you customize the legend's position (top, bottom, left, right), orientation (vertical, horizontal), and item appearance (colors, labels, etc.).  Interactive legends allow users to selectively show or hide series.\n\n### Tooltips\n\nTooltips provide interactive data information upon hovering over chart elements. ECharts allows for extensive customization of tooltip content, formatting, position, and trigger behavior (item, axis).  You can display various data fields and format them dynamically.\n\n### Grids\n\nGrids organize and layout multiple charts or chart components within a single container.  ECharts allows you to create multiple grids on a canvas, positioning them to create complex dashboard layouts.  Grids define the coordinate system for the charts they contain.\n\n### Axis\n\nAxes define the coordinate system for your chart and provide scaling and labeling for your data. ECharts offers both cartesian (x, y) axes and polar axes.  You can customize axis types (value, category, time, log), labels, scales, and appearances.\n\n### Data Zoom\n\nData zoom components enable users to interactively zoom in and out of large datasets.  ECharts provides both inside and outside zoom controls, allowing for fine-grained control over the visible data range.  Different zoom modes (slider, inside, etc.) provide flexibility in user interaction.\n\n### Visual Map\n\nVisual maps provide a visual representation of a data range, often used to encode data values to colors or sizes.  ECharts' visual maps allow you to create color gradients or size scales linked to a data series or dimension, helping visualize data magnitude.\n\n### Timelines\n\nTimelines allow for the sequential display of charts across time.  ECharts' timelines facilitate the creation of animated transitions and the selection of different time periods within a larger dataset.  They are excellent for visualizing changes over time.\n\n### Data Browsing\n\nData browsing allows users to explore data interactively through a series of controls. ECharts provides various features, such as data selection, filtering, and pagination for navigating large datasets and focusing on specific aspects of your data.\n\n### Marklines and Markpoints\n\nMarklines and markpoints add annotations directly onto the chart, highlighting specific data points or trends.  Marklines draw lines across the chart while markpoints add special visual markers to individual data points.  These components enhance the chart's ability to communicate specific information.\n\n\n## Data Handling\n\n### Data Formats\n\nECharts accepts data in various formats, primarily arrays and objects.  The most common format is an array of arrays, where each inner array represents a data item.  For example, for a line chart:\n\n```javascript\n[\n    [10, 20],\n    [20, 30],\n    [30, 40]\n]\n```\n\nAlternatively, you can use an array of objects, especially useful when you have multiple dimensions:\n\n```javascript\n[\n    {value: 10, name: 'A'},\n    {value: 20, name: 'B'},\n    {value: 30, name: 'C'}\n]\n```\n\nECharts also supports other formats, including those compatible with common data formats like CSV or JSON.  Consult the ECharts documentation for the most comprehensive list of supported data formats.\n\n\n### Data Loading\n\nData can be loaded directly into the chart options or loaded asynchronously. For simpler charts, direct data inclusion is sufficient. For complex or large datasets, asynchronous loading via `$.get`, `fetch`, or other AJAX methods is recommended.  This avoids blocking the rendering process.\n\nExample of asynchronous loading (using `fetch`):\n\n```javascript\nfetch('data.json')\n  .then(response => response.json())\n  .then(data => {\n    myChart.setOption({\n      series: [{ data: data }]\n    });\n  });\n```\n\n\n### Data Filtering\n\nECharts doesn't directly handle data filtering within its core functionality. Data filtering should be performed before passing the data to the chart.  You can use JavaScript's built-in array methods like `filter` to pre-process your data:\n\n```javascript\nconst filteredData = originalData.filter(item => item.value > 15);\nmyChart.setOption({ series: [{ data: filteredData }] });\n```\n\n\n### Data Transformation\n\nSimilar to filtering, data transformation is best handled before passing data to ECharts. You can use JavaScript functions to reshape or modify your data as needed. This might involve calculating new values, aggregating data, or reformatting it for better chart representation.\n\nFor example, calculating a moving average:\n\n```javascript\nfunction calculateMovingAverage(data, windowSize) {\n  // ...Implementation to calculate moving average...\n  return transformedData;\n}\nconst transformedData = calculateMovingAverage(originalData, 3);\nmyChart.setOption({ series: [{ data: transformedData }] });\n```\n\n### Working with Large Datasets\n\nFor large datasets, performance optimization is crucial.  Techniques include:\n\n* **Data downsampling:** Reduce the number of data points by averaging or summarizing data within intervals.\n* **Lazy loading:** Load only the necessary data points for the currently visible viewport.  ECharts offers features like `dataZoom` that can help with this.\n* **Data virtualization:**  Implement custom data handling to load and display only the portion of data required for rendering.  This avoids loading the entire dataset into memory.\n* **Using efficient data structures:** Choose data structures optimized for the operations you'll perform (e.g., using typed arrays instead of regular arrays for numerical data).\n\n\nRemember to consult the ECharts documentation and examples for optimal performance strategies tailored to your specific chart type and dataset size.\n\n\n## Customization\n\n### Themes\n\nECharts provides built-in themes that alter the overall look and feel of your charts. You can select a theme when initializing the chart or apply a theme later using `setOption()`.  Themes modify aspects like colors, fonts, and component styles.  ECharts also allows creating and using custom themes by defining a JSON configuration object.  This allows for a consistent visual style across your applications.\n\n### Styling Charts\n\nBeyond themes, fine-grained styling is achieved by directly manipulating the chart's options.  You can customize virtually every visual element, from colors and fonts to axis labels, data point shapes, and tooltip appearances.  ECharts' extensive API documentation provides details on the properties you can adjust for each chart component. This includes using CSS directly within certain aspects of the charts.\n\n### Custom Components\n\nFor extending ECharts' functionality, you can create and integrate custom components. This allows adding entirely new visual elements or extending existing ones to match your specific needs.  The process involves registering a custom component and configuring it within your chart options.  ECharts provides clear documentation on the required structure and methods for developing custom components.\n\n### Advanced Configuration Options\n\nECharts offers numerous advanced configuration options that allow fine-tuning chart behavior and performance.  These options control aspects like animation, data interaction, event handling, and rendering performance.  Exploring these advanced options allows for creating highly customized and optimized charts, catering to specific application requirements.  Areas like performance optimization for large datasets and custom interactions often fall under these advanced configurations.\n\n\n## Events and Interactions\n\n### Event Handling\n\nECharts provides a rich set of events that trigger on various user interactions and chart updates.  You can register event listeners to respond to these events and implement custom actions.  Common events include `click`, `mouseover`, `mouseout`, `legendselectchanged`, and others specific to chart types and components.  Event handlers are typically attached using the `on` method of the chart instance.  The event object passed to the handler contains information about the event.\n\nExample:\n\n```javascript\nmyChart.on('click', params => {\n  console.log('Chart clicked at:', params);\n  // Your custom logic here...\n});\n```\n\n### Chart Interactions\n\nECharts offers several built-in chart interactions, such as:\n\n* **Zooming and panning:**  Many chart types support zooming and panning to explore data at different scales.\n* **Data selection:**  Users can select data points or regions, triggering events you can respond to.\n* **Tooltip display:**  Hovering over data points displays tooltips showing detailed information.\n* **Legend interaction:**  Clicking on legend items hides or shows corresponding series.\n* **Data brush selection:**  Select a range of data with a brush to highlight or filter it.\n\nThese interactions are usually enabled by default, but their behavior can be customized (see \"Customizing Interactions\" below).\n\n### Customizing Interactions\n\nECharts allows extensive customization of interactions.  You can:\n\n* **Enable/disable built-in interactions:**  Control which interactions are available to the user.\n* **Modify interaction behavior:** Change how zooming, panning, or data selection works.  For instance, you could restrict zoom levels or change the selection behavior.\n* **Create custom interactions:**  Implement completely new interaction behaviors by responding to chart events and manipulating the chart's state.  This could involve custom highlighting, linking to external data, or adding unique visual responses.\n* **Add custom controls:**  Create your own UI elements (buttons, sliders, etc.) to control chart interactions beyond the defaults.\n\nCustomizing interactions requires a good understanding of ECharts' event system and its API for manipulating chart components.  This often involves combining event handling with direct manipulation of chart options.\n\n\n## Advanced Techniques\n\n### Dynamic Chart Updates\n\nUpdating charts dynamically is crucial for creating responsive and interactive visualizations. ECharts allows for efficient updates using `setOption()`.  For incremental updates, use the `setOption` method with the `notMerge` option set to `true` to replace the entire option object.  For merging updates, leave `notMerge` as `false` (default) to merge new options with existing ones.  This allows selective modification of chart data or configuration without redrawing the entire chart.  Efficient update strategies are key for maintaining a smooth user experience, especially with large datasets.\n\n### Chart Animations\n\nECharts provides built-in animation capabilities for visually engaging charts.  Animations can be enabled or disabled globally or on a per-series basis.  You can customize animation duration, easing functions, and other properties to fine-tune the visual effect.  Well-designed animations improve the user experience by making changes more apparent and understandable. However, excessive or poorly implemented animations can negatively impact performance.\n\n### Interactive Elements\n\nInteractive elements enhance user engagement and allow for deeper data exploration. Techniques include:\n\n* **Custom tooltips:**  Extend the default tooltips to display more detailed or custom information.\n* **Interactive legends:**  Allow users to select, filter, or highlight data series through legend interaction.\n* **Data zooming and panning:**  Enable users to explore large datasets by zooming in and panning.\n* **Custom controls:**  Add interactive buttons, sliders, or other custom controls to dynamically modify chart parameters.\n* **Linking charts:**  Synchronize the selection or zoom levels across multiple charts for coordinated data exploration.\n\nThese features require combining ECharts' event handling and API to update chart options in response to user interactions.\n\n\n### Performance Optimization\n\nOptimizing performance is critical for smooth visualizations, especially with large datasets. Techniques include:\n\n* **Data downsampling:** Reduce the number of data points for improved rendering speed.\n* **Lazy loading:** Load and render data only when needed (e.g., for the visible area of a chart).\n* **Efficient data structures:** Use data structures tailored to your needs for faster data access and processing.\n* **Animation optimization:** Disable or simplify animations for better performance, especially on less powerful devices.\n* **Minimizing DOM manipulations:** Reduce the number of times the DOM is updated to improve rendering speed.\n* **Using worker threads (if applicable):** Offload computationally intensive tasks to background threads to avoid blocking the main thread.\n\nThese optimizations often involve balancing visual fidelity with performance to achieve the best user experience.  Profiling your code can help identify performance bottlenecks.  The techniques used often depend on the scale and nature of your data and the complexity of your chart.\n\n\n## API Reference\n\n### ECharts Instance Methods\n\nThe ECharts instance, obtained via `echarts.init()`, exposes several methods for interacting with and controlling the chart.  Key methods include:\n\n* **`setOption(option, notMerge)`:** Sets or updates the chart options. `notMerge` (boolean) controls whether to merge the new options with existing ones or replace them entirely.\n* **`getOption()`:** Retrieves the current chart options.\n* **`resize()`:**  Resizes the chart to fit its container.  Useful when the container's dimensions change dynamically.\n* **`dispose()`:**  Destroys the chart instance, releasing resources.  Important for cleanup when the chart is no longer needed.\n* **`on(eventName, eventHandler)`:**  Registers an event listener for a specific event.\n* **`off(eventName, eventHandler)`:** Removes an event listener.\n* **`getDataURL(opts)`:** Returns a data URL of the chart image.  Allows saving the chart as an image.\n* **`convertToPixel(seriesIndex, dataIndex)`:** Converts data coordinates to pixel coordinates. Useful for custom annotations or interactions.\n* **`convertFromPixel(seriesIndex, dataIndex)`:** Converts pixel coordinates to data coordinates.\n\n\nThe complete list of instance methods and their detailed descriptions can be found in the official ECharts API documentation.\n\n\n### Option Configuration Details\n\nThe `option` object passed to `setOption()` defines the chart's appearance, behavior, and data.  This object is hierarchical, with properties controlling various aspects like:\n\n* **`title`:** Chart title settings.\n* **`legend`:** Legend settings.\n* **`tooltip`:** Tooltip settings.\n* **`grid`:** Grid layout settings.\n* **`xAxis`, `yAxis`:** Axis settings.\n* **`series`:**  Data series configuration.  Each series has its own options, depending on the chart type (e.g., line, bar, pie).\n* **`visualMap`:**  Visual map settings for encoding data values to colors or sizes.\n* **`dataZoom`:** Data zoom settings.\n* **`timeline`:** Timeline settings.\n\nDetailed descriptions and available properties for each option are thoroughly documented in the official ECharts API reference.\n\n\n### Component APIs\n\nECharts components (like axes, legends, tooltips) often have their own APIs for more granular control.  These APIs are usually accessed through properties within the main `option` object. For example, to configure the x-axis labels:\n\n```javascript\noption = {\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed'],\n    axisLabel: { // Component-specific API\n      rotate: 45,\n      formatter: '{value} days'\n    }\n  }\n};\n```\n\nConsult the official API documentation to find component-specific APIs and their parameters.\n\n\n### Utility Functions\n\nECharts provides utility functions that are helpful for various tasks:\n\n* **`echarts.number.format()`:** Formats numbers according to specified patterns.\n* **`echarts.util.each()`:** Iterates over arrays or objects.\n* **`echarts.graphic.Group()`:** Creates a graphic group for custom rendering.\n* **`echarts.graphic.Text()`:** Creates a text element.\n* **`echarts.graphic.Rect()`:** Creates a rectangle element.  (These are examples from the graphic component)\n\nThese utility functions are used for tasks like data processing, graphic element creation, and other common operations.  The specific set of utility functions is documented in the official ECharts API.  The `echarts` namespace houses many of these utility functions, offering a range of options for common development tasks.\n\n\n## Troubleshooting\n\n### Common Issues\n\nSeveral common issues arise when working with ECharts:\n\n* **Chart not rendering:**  This often stems from incorrect library inclusion, missing or incorrectly formatted data, or typos in configuration options.  Double-check your HTML for the correct script inclusion, verify your data structure, and carefully review your `option` object for errors.  Using your browser's developer console to check for JavaScript errors is essential.\n\n* **Incorrect chart appearance:**  Unexpected visual results may be due to misconfigured options.  Check the axis types, scales, data ranges, and series configurations.  Consult the ECharts documentation for the correct options for your chart type.\n\n* **Performance issues:**  Large datasets or complex chart configurations can lead to slow rendering. Consider optimizing your data (downsampling, lazy loading), simplifying chart elements, and using ECharts' performance optimization features.\n\n* **Unexpected behavior:** Unforeseen behavior might indicate issues in event handling or interaction configurations.  Carefully review your event handlers and ensure they correctly interact with the chart's state.\n\n\n### Debugging Tips\n\nEffective debugging techniques for ECharts include:\n\n* **Browser developer tools:** Use your browser's developer console to check for JavaScript errors, inspect the chart's DOM structure, and debug your code step-by-step.  The console often provides clues about the source of errors.\n\n* **Simplify your code:** Break down complex charts into smaller, simpler components to isolate the source of problems.  This makes it easier to identify the problem area.\n\n* **Check the ECharts documentation:** Carefully review the relevant sections of the ECharts documentation for your chart type and the options you're using.  The documentation provides detailed explanations of options and expected behavior.\n\n* **Inspect the `option` object:**  Log your `option` object to the console before setting it to the chart. This helps verify that the configuration is correct and as intended.\n\n* **Use a code editor with debugging tools:** Modern code editors have debugging features that allow setting breakpoints, stepping through code, and inspecting variables.  These tools significantly aid in identifying the root causes of problems.\n\n\n### Error Messages\n\nECharts error messages often provide valuable clues for resolving issues.  Pay close attention to:\n\n* **Specific error messages:**  The error messages themselves usually provide information about the nature of the problem (e.g., missing data, invalid configuration, etc.).\n\n* **Line numbers and file names:** These help locate the specific part of your code causing the error.\n\n* **Stack traces:**  In more complex cases, the stack trace can help trace the execution path that led to the error, showing the sequence of function calls.\n\nIf an error message isn't immediately clear, use a search engine to find potential solutions or consult ECharts' issue tracker or community forums.  Providing the error message and relevant code snippets when seeking assistance will help others diagnose your problem more effectively.\n\n\n## Examples and Tutorials\n\n### Basic Chart Examples\n\nThe ECharts website and documentation provide a wealth of basic chart examples covering various chart types.  These examples showcase the fundamental usage of ECharts, demonstrating how to create simple charts with basic configurations.  They are excellent starting points for learning the core concepts and syntax of ECharts.  These usually include simple line charts, bar charts, pie charts, and scatter charts, demonstrating basic data input and minimal configurations.\n\n### Advanced Chart Examples\n\nBeyond basic charts, ECharts offers examples showcasing advanced features and techniques.  These examples demonstrate more complex configurations, including custom components, interactive elements, data transformations, and animations.  They provide insights into creating more sophisticated and feature-rich visualizations.  Advanced examples might involve combining multiple chart types, creating custom visual maps, utilizing data zooming and panning, incorporating tooltips with custom content, and more.\n\n### Real-World Applications\n\nTo illustrate practical usage, ECharts provides examples demonstrating how the library can be applied in real-world scenarios.  These examples showcase diverse applications of ECharts, providing inspiration and practical guidance for integrating ECharts into various projects.  They might demonstrate examples in dashboards, data analysis tools, or even specific industry applications, providing realistic contexts and implementation approaches.  These can range from simple dashboards showing key metrics to complex interactive data explorations.\n\n### Code Examples\n\nThroughout the ECharts documentation and website, numerous code examples are provided. These examples are written in JavaScript and demonstrate various aspects of ECharts, from basic chart creation to advanced customization.   The examples are typically concise and well-commented, making them easy to understand and adapt to specific needs.  They often accompany explanations, making them effective learning tools and practical references for implementing specific features or configurations within your projects.  The examples showcase both the declarative option setting and the imperative API interaction approaches.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"echarts.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"ECharts - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}