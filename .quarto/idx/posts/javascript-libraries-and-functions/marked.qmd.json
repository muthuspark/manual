{"title":"Marked - Documentation","markdown":{"yaml":{"title":"Marked - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is Marked?\n\nMarked is a markdown editor for macOS and Windows.  It allows you to write in simple, plain-text Markdown format and instantly see the rendered HTML output in a preview pane. This allows for a distraction-free writing experience while simultaneously providing a real-time view of your formatted document. Marked supports a wide range of Markdown extensions, offering flexibility and customization for your writing needs.  It's designed to be lightweight, fast, and easy to use, prioritizing both simplicity and powerful features.\n\n\n### Why use Marked?\n\nMarked offers several advantages over other markdown editors:\n\n* **Real-time Preview:**  See your formatted document instantly as you type, eliminating the need for constant switching between editor and preview modes.\n* **Clean and Intuitive Interface:**  The user interface is designed to be minimal and uncluttered, allowing you to focus on your writing.\n* **Customizable Styling:** Marked allows for extensive customization of the rendered HTML output via CSS, enabling you to tailor the appearance to your exact preferences.\n* **Support for Numerous Markdown Extensions:**  Marked supports many popular Markdown extensions, enabling richer formatting and functionality.\n* **Export Options:** Easily export your finished documents in various formats, including HTML, PDF, and plain text.\n* **Cross-Platform Support (macOS and Windows):**  Maintain consistent workflow across multiple operating systems.\n\n\n### Setting up Marked.\n\nSetting up Marked is straightforward:\n\n1. **Download:** Download the appropriate installer for your operating system (macOS or Windows) from the official Marked website.\n2. **Installation:** Run the installer and follow the on-screen instructions. The process is typically simple and requires minimal user interaction.\n3. **Configuration (Optional):** While Marked offers a streamlined default experience, you can customize various aspects of its functionality. This includes choosing your preferred Markdown extensions, configuring CSS for custom styling, and adjusting other settings within the application's preferences.  Explore the preferences menu to discover these options.\n4. **Start Writing:** After installation, you can immediately begin writing and rendering your markdown documents. Simply open a new file, start typing, and see your formatted content in the preview pane.\n\n\n## Basic Usage\n\n### Markdown Basics\n\nMarked supports a wide range of Markdown syntax.  Here's a quick overview of the basics:\n\n* **Headers:** Use `#` symbols at the beginning of a line to create headers (e.g., `# Heading 1`, `## Heading 2`, etc.).\n* **Emphasis:** Use `*` or `_` for italics (e.g., `*italics*` or `_italics_`) and `**` or `__` for bold (e.g., `**bold**` or `__bold__`).\n* **Lists:** Create unordered lists with `*`, `-`, or `+` (e.g., `* Item 1`, `- Item 2`, `+ Item 3`). Create ordered lists with numbers followed by a period (e.g., `1. Item 1`, `2. Item 2`).\n* **Links:** Create links using square brackets for the link text and parentheses for the URL (e.g., `[Marked Website](https://marked.app)`).\n* **Images:** Similar to links, use square brackets for the alt text and parentheses for the URL, preceded by an exclamation mark (e.g., `![Marked Logo](marked-logo.png)`).\n* **Code:** Use backticks (`) to enclose inline code snippets (e.g., `` `code` ``) and triple backticks (```) to create code blocks (e.g., ```javascript\nconsole.log(\"Hello, world!\");\n```).  Specify the language after the opening triple backticks for syntax highlighting (e.g., ```python\nprint(\"Hello, world!\")\n```).\n* **Blockquotes:** Use `>` at the beginning of a line to create blockquotes (e.g., `> This is a blockquote.`).\n* **Horizontal Rules:** Use three or more hyphens (`---`), asterisks (`***`), or underscores (`___`) on a line by themselves to create a horizontal rule.\n\n\n### Rendering Markdown\n\nMarked automatically renders your Markdown as you type. The preview pane displays the HTML output in real-time.  Any changes you make to the Markdown source will immediately update the preview.  The rendering engine used is based on a robust and highly compatible parser. If you encounter unexpected behavior, ensure that your Markdown syntax is correct and check the Marked application's settings to verify that the correct Markdown extensions are enabled.\n\n### Options and Configuration\n\nMarked provides a comprehensive set of options and configurations to customize your experience.  Access these settings through the application's preferences menu.  Key configurable aspects include:\n\n* **Markdown Extensions:** Select which Markdown extensions to enable.  This allows you to control support for features like tables, footnotes, and other extensions.  Refer to the documentation for a complete list of supported extensions and their functionalities.\n* **Custom CSS:** Apply custom CSS to style the rendered HTML output. This allows for complete control over the visual appearance of your documents, enabling you to create a unique look and feel.\n* **Fonts:** Select the fonts used in both the editor and the preview pane.\n* **Export Options:** Configure settings for exporting your documents in different formats (HTML, PDF, etc.), including specifying metadata, page margins, and other relevant export parameters.\n* **Themes:** Choose from available themes (or create your own) to change the visual style of the application's interface.\n* **General Settings:** Adjust various aspects of the application behavior, including line wrapping, auto-saving, and more.\n\n\nBy exploring the options available in the preferences menu, you can tailor Marked to perfectly fit your workflow and preferences. Remember to consult the application's help documentation for detailed descriptions of each setting and its impact.\n\n\n## Advanced Usage\n\n### Customizing Renderers\n\nWhile Marked provides a robust default rendering engine, advanced users can customize the rendering process.  This typically involves creating custom CSS stylesheets to modify the visual appearance of the rendered HTML.  To achieve this:\n\n1. **Create a CSS file:** Create a new CSS file containing your custom styles.  This file should contain CSS rules targeting specific HTML elements generated by Marked's rendering engine.  You might want to inspect the rendered HTML (using your browser's developer tools) to identify the appropriate selectors for your customizations.\n\n2. **Apply the CSS:** In Marked's preferences, navigate to the section allowing you to specify custom CSS.  Provide the path to your newly created CSS file. Marked will then incorporate your custom styles into the rendered output.\n\n3. **Testing:** Thoroughly test your custom CSS to ensure it functions as intended and doesn't introduce any unintended styling conflicts.\n\nNote:  Direct modification of Marked's internal rendering engine is generally not supported and may break functionality.  Custom CSS offers a safe and effective way to customize the visual presentation.\n\n\n### Extending Marked with Plugins\n\nMarked does not natively support plugins.  Its functionality is primarily defined within the application itself.  Any extensions to its core features would require modification of the application's source code, which is not publicly available.\n\n\n### Handling Errors and Exceptions\n\nIf errors occur during the Markdown rendering process (e.g., due to invalid Markdown syntax), Marked will typically display an error message indicating the nature of the problem. This usually involves highlighting the problematic section of your Markdown source code in the editor.  Refer to the error message for detailed information to help correct the issue.  Common errors include:\n\n* **Syntax Errors:** Incorrect use of Markdown syntax will lead to rendering errors. Carefully review the Markdown specification and ensure your syntax is correct.\n* **File Errors:** Issues related to accessing or reading files, particularly those referenced within your Markdown (e.g., images), can result in errors. Check that the referenced files exist and are accessible to Marked.\n\n\n### Performance Optimization\n\nFor optimal performance, consider these points:\n\n* **Document Size:** Extremely large Markdown documents might impact rendering speed.  For very large documents, consider breaking them down into smaller, more manageable files.\n* **Complex Markdown:** Highly complex Markdown with numerous embedded elements, nested structures, and extensive use of extensions can increase rendering time.  Strive for a balanced approach, avoiding unnecessary complexity where possible.\n* **Custom CSS:** Overly complex or inefficient custom CSS can negatively impact rendering performance.  Optimize your CSS to ensure it's concise and efficiently targets the elements it's intended to style.\n* **System Resources:**  Ensure your system has sufficient resources (RAM, CPU) to handle the rendering process.  Closing unnecessary applications might free up resources for Marked.\n\nIf you consistently experience performance issues, consider contacting Marked support for assistance in troubleshooting potential problems.\n\n\n## Markdown Syntax\n\nMarked supports a comprehensive range of Markdown syntax elements.  The following details the supported syntax and how it's rendered.  Note that the exact rendering may vary slightly depending on enabled Markdown extensions.\n\n### Headers\n\nHeaders are created using `#` symbols at the beginning of a line. The number of `#` symbols determines the header level (e.g., `#` is level 1, `##` is level 2, and so on, up to level 6).\n\n```markdown\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n```\n\n### Emphasis\n\nUse `*` or `_` for italics and `**` or `__` for bold text.  You can combine them for bold italics.\n\n```markdown\n*This is italics.*\n_This is also italics._\n**This is bold.**\n__This is also bold.__\n***This is bold italics.***\n___This is also bold italics.___\n```\n\n### Lists\n\nUnordered lists are created using `*`, `-`, or `+` at the beginning of each list item. Ordered lists use numbers followed by a period.\n\n```markdown\n* Item 1\n* Item 2\n- Item 3\n+ Item 4\n\n1. Item 1\n2. Item 2\n3. Item 3\n```\n\n### Links\n\nLinks are created using square brackets `[]` for the link text and parentheses `()` for the URL.\n\n```markdown\n[Marked Website](https://marked.app)\n```\n\n### Images\n\nImages are similar to links, but begin with an exclamation mark `!`.\n\n```markdown\n![Marked Logo](marked-logo.png)\n```\n\n### Code Blocks\n\nInline code is enclosed in backticks `` ` ``. Code blocks are enclosed in triple backticks ``` ```.  You can specify the language after the opening triple backticks for syntax highlighting (e.g., ````javascript`).\n\n```markdown\nThis is inline code: `` `var x = 10;` ``\n\nThis is a code block:\n```javascript\nfunction myFunction() {\n  console.log(\"Hello, world!\");\n}\n```\n```\n\n### Blockquotes\n\nBlockquotes are created using `>` at the beginning of each line.\n\n```markdown\n> This is a blockquote.\n> It can span multiple lines.\n```\n\n\n### Horizontal Rules\n\nHorizontal rules are created using three or more hyphens (`---`), asterisks (`***`), or underscores (`___`) on a line by themselves.\n\n```markdown\n---\n***\n___\n```\n\n### Tables\n\nTables are created using pipes `|` to separate columns and hyphens `-` to define the header row.\n\n```markdown\n| Header 1 | Header 2 |\n|---|---|\n| Row 1, Cell 1 | Row 1, Cell 2 |\n| Row 2, Cell 1 | Row 2, Cell 2 |\n```\n\n### HTML\n\nMarked allows embedding raw HTML. Note that this is dependent on the enabled renderer and may not support all HTML elements.\n\n```markdown\n<p>This is a paragraph using raw HTML.</p>\n```\n\n### Footnotes\n\nFootnotes are created using `[^footnote-ref]`.  The footnote definition is placed at the end of the document using `[^footnote-ref]: footnote text`.\n\n```markdown\nThis is a sentence with a footnote.[^1]\n\n[^1]: This is the footnote text.\n```\n\n### Definitions\n\nDefinitions lists are created using terms followed by colons and definitions.\n\n```markdown\nTerm 1\n: Definition 1\n\nTerm 2\n: Definition 2\n```\n\n\n## API Reference\n\n**Note:** This API reference describes the hypothetical API of a Marked-like Markdown renderer.  The actual Marked application's internal API is not publicly documented and may differ significantly. This section provides a conceptual overview of how such an API might be structured.\n\n\n### `marked()`\n\nThe primary function for rendering Markdown.  It takes a Markdown string as input and returns the rendered HTML string.\n\n```javascript\nconst html = marked('This is *Markdown*!'); // html will contain \"<p>This is <em>Markdown</em>!</p>\"\n```\n\n**Parameters:**\n\n* `markdown` (string): The Markdown string to render.\n\n**Returns:**\n\n* (string): The rendered HTML string.\n\n\n### `marked.setOptions()`\n\nSets global options for the Markdown renderer.  These options will affect all subsequent calls to `marked()`.\n\n```javascript\nmarked.setOptions({\n  gfm: true, // Enable GitHub Flavored Markdown\n  breaks: true, // Enable line breaks\n  smartypants: true // Enable smart quotes\n});\n```\n\n**Parameters:**\n\n* `options` (object): An object containing the options to set.  Common options include `gfm`, `breaks`, `smartypants`, `highlight`, and `langPrefix`.\n\n\n### `marked.Lexer()`\n\nCreates a new lexer instance. The lexer is responsible for breaking down the Markdown input into tokens.\n\n```javascript\nconst lexer = new marked.Lexer();\nconst tokens = lexer.lex('This is a #header.');\nconsole.log(tokens); // Array of tokens representing the Markdown structure.\n```\n\n**Parameters:**\n\n* (Optional) `options` (object): Options for the lexer.\n\n**Methods:**\n\n* `lex(markdown)`: Parses the Markdown input and returns an array of tokens.\n\n\n### `marked.Parser()`\n\nCreates a new parser instance. The parser takes the tokens generated by the lexer and constructs the HTML output.\n\n```javascript\nconst parser = new marked.Parser();\nconst html = parser.parse(tokens); // tokens from marked.Lexer().lex()\nconsole.log(html); // Rendered HTML\n```\n\n**Parameters:**\n\n* (Optional) `options` (object): Options for the parser.\n\n\n**Methods:**\n\n* `parse(tokens)`: Parses the array of tokens and returns the rendered HTML.\n\n\n### `marked.Renderer()`\n\nCreates a new renderer instance. The renderer is responsible for converting tokens into HTML.  This allows for customization of the HTML output.\n\n```javascript\nconst renderer = new marked.Renderer();\nrenderer.heading = function (text, level) {\n  return `<h${level} id=\"${text.toLowerCase().replace(/\\s+/g, '-')}\">${text}</h${level}>`;\n};\n\nconst html = marked('This is a #header.', { renderer: renderer }); // Custom header rendering\n```\n\n**Parameters:**\n\n* (Optional) `options` (object): Options for the renderer.\n\n**Methods:**\n\n*  Various methods for rendering different token types (e.g., `heading`, `paragraph`, `list`, `image`, `link`, etc.).  These methods can be overridden to customize the HTML generation.  Consult the renderer's API documentation for a complete list of available methods.\n\n\n\n## Troubleshooting\n\n### Common Issues\n\nThis section addresses frequently encountered issues when using Marked.\n\n* **Rendering Errors:** Incorrect Markdown syntax is a common source of rendering errors. Carefully review your Markdown code, paying close attention to syntax rules for elements like headers, lists, links, and code blocks.  Use a Markdown linter (if available) to help identify syntax problems.  Marked often provides helpful error messages highlighting the location of the problem in your Markdown source.\n\n* **Unexpected Formatting:**  If the rendered output doesn't match your expectations, ensure that the correct Markdown extensions are enabled in Marked's preferences. Some formatting behaviors (like line breaks, smart quotes, etc.) are controlled by these settings.\n\n* **Image Display Issues:** Problems displaying images may stem from incorrect image paths, inaccessible image files, or missing image files. Double-check that the file paths in your Markdown are correct and the images are accessible to the application.\n\n\n* **Custom CSS Conflicts:** If you're using custom CSS, conflicts with existing styles might cause unexpected visual results. Inspect the rendered HTML (using browser developer tools) to identify style conflicts and adjust your custom CSS accordingly.\n\n* **Performance Issues:**  Extremely large Markdown files or complex documents with nested elements and many extensions can affect rendering performance. Consider breaking large files into smaller parts or simplifying complex Markdown structures.\n\n* **Application Crashes:**  If Marked crashes unexpectedly, try restarting the application.  If the crashes persist, check for application updates and consider contacting support.\n\n\n### Debugging Tips\n\nIf you encounter more complex issues, these debugging tips can assist you:\n\n* **Simplify Your Markdown:**  Create a minimal, reproducible Markdown example to isolate the problem. This helps in identifying the root cause.\n\n* **Check the Console:** If Marked has a console or log output, check for any error messages or warnings that may provide clues about the issue.\n\n* **Inspect Rendered HTML:** Using your web browser's developer tools (usually accessed by right-clicking and selecting \"Inspect\" or \"Inspect Element\"), examine the rendered HTML.  This will help identify if the problem is in the Markdown or the HTML rendering process.\n\n* **Test with Different Markdown Editors:**  Render your Markdown in another editor to see if the problem is specific to Marked or a broader Markdown rendering issue.\n\n* **Review Marked's Documentation:** The official documentation should provide answers to many common questions and troubleshooting solutions.\n\n* **Search for Similar Issues:**  If your problem isn't documented, search online forums and community support channels to see if others have experienced the same or similar problems.\n\n\n\n### Community Support\n\nFor assistance beyond this manual, consider these avenues:\n\n* **Online Forums:** Check if Marked has an official online forum or community where users can ask questions and share solutions.\n\n* **Issue Trackers:**  If you suspect a bug or have encountered unexpected behavior, report it through Marked's issue tracker (if one exists). Provide detailed information, including the steps to reproduce the issue and relevant screenshots or logs.\n\n* **Contact Support:**  Many applications provide direct support channels (e.g., email or a help desk system). Contacting support is advisable for complex issues or critical problems.  Provide as much detail as possible about your problem, including Marked's version, operating system, and relevant screenshots or logs.\n\n\n## Contributing\n\nThis section outlines how to contribute to the development of Marked (assuming it's an open-source project).  If Marked is not open-source, this section would be irrelevant and should be omitted.\n\n### Contributing Guidelines\n\nWe welcome contributions from the community!  To contribute to Marked, please follow these guidelines:\n\n1. **Fork the Repository:** Create a fork of the main Marked repository on the platform where it's hosted (e.g., GitHub, GitLab).\n\n2. **Create a Branch:** Create a new branch for your contribution.  Use descriptive branch names that clearly indicate the purpose of your changes (e.g., `fix-bug-123`, `feature-new-theme`).\n\n3. **Make Your Changes:** Implement your changes, following the code style guidelines detailed below.  Ensure your changes are well-documented and thoroughly tested.\n\n4. **Write Tests:**  Add or update tests to cover your changes.  Thorough testing is crucial to ensuring the quality and stability of the project.\n\n5. **Commit Your Changes:** Commit your changes with clear and concise commit messages.  Follow a consistent commit message style (e.g., using imperative mood).\n\n6. **Push Your Branch:** Push your branch to your forked repository.\n\n7. **Create a Pull Request:** Create a pull request to merge your branch into the main repository.  Clearly describe the changes you've made and address any potential concerns or questions in your pull request description.\n\n8. **Respond to Feedback:**  Respond to any feedback provided by the maintainers or other contributors.  Be prepared to make necessary revisions and address any outstanding concerns.\n\n\n### Code Style\n\nMaintain consistency in code style to improve readability and maintainability.  Follow these guidelines:\n\n* **Indentation:** Use consistent indentation (typically 2 or 4 spaces).  Avoid using tabs.\n\n* **Naming Conventions:** Adhere to consistent naming conventions for variables, functions, and classes.  (Specify the conventions used in the project, e.g., camelCase, snake_case).\n\n* **Comments:**  Write clear and concise comments to explain complex logic or non-obvious code sections.\n\n* **Line Length:** Keep lines of code to a reasonable length (e.g., under 80 characters) to enhance readability.\n\n* **Formatting:** Use a code formatter (if one is specified by the project) to ensure consistent formatting across the codebase.\n\n\n### Testing\n\nTesting is a crucial part of the development process.  Contribute to the existing test suite or add new tests to cover your changes. The project should specify its testing framework and practices.  Follow these general guidelines:\n\n* **Write Unit Tests:**  Create unit tests to test individual components or functions in isolation.\n\n* **Write Integration Tests:**  Develop integration tests to verify the interactions between different parts of the system.\n\n* **Test Coverage:** Strive for high test coverage to ensure that a significant portion of the codebase is tested.\n\n* **Continuous Integration (CI):**  Familiarize yourself with the project's CI process.  The CI pipeline should automatically run tests when code changes are pushed.  Ensure that your changes pass all CI tests before submitting a pull request.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is Marked?\n\nMarked is a markdown editor for macOS and Windows.  It allows you to write in simple, plain-text Markdown format and instantly see the rendered HTML output in a preview pane. This allows for a distraction-free writing experience while simultaneously providing a real-time view of your formatted document. Marked supports a wide range of Markdown extensions, offering flexibility and customization for your writing needs.  It's designed to be lightweight, fast, and easy to use, prioritizing both simplicity and powerful features.\n\n\n### Why use Marked?\n\nMarked offers several advantages over other markdown editors:\n\n* **Real-time Preview:**  See your formatted document instantly as you type, eliminating the need for constant switching between editor and preview modes.\n* **Clean and Intuitive Interface:**  The user interface is designed to be minimal and uncluttered, allowing you to focus on your writing.\n* **Customizable Styling:** Marked allows for extensive customization of the rendered HTML output via CSS, enabling you to tailor the appearance to your exact preferences.\n* **Support for Numerous Markdown Extensions:**  Marked supports many popular Markdown extensions, enabling richer formatting and functionality.\n* **Export Options:** Easily export your finished documents in various formats, including HTML, PDF, and plain text.\n* **Cross-Platform Support (macOS and Windows):**  Maintain consistent workflow across multiple operating systems.\n\n\n### Setting up Marked.\n\nSetting up Marked is straightforward:\n\n1. **Download:** Download the appropriate installer for your operating system (macOS or Windows) from the official Marked website.\n2. **Installation:** Run the installer and follow the on-screen instructions. The process is typically simple and requires minimal user interaction.\n3. **Configuration (Optional):** While Marked offers a streamlined default experience, you can customize various aspects of its functionality. This includes choosing your preferred Markdown extensions, configuring CSS for custom styling, and adjusting other settings within the application's preferences.  Explore the preferences menu to discover these options.\n4. **Start Writing:** After installation, you can immediately begin writing and rendering your markdown documents. Simply open a new file, start typing, and see your formatted content in the preview pane.\n\n\n## Basic Usage\n\n### Markdown Basics\n\nMarked supports a wide range of Markdown syntax.  Here's a quick overview of the basics:\n\n* **Headers:** Use `#` symbols at the beginning of a line to create headers (e.g., `# Heading 1`, `## Heading 2`, etc.).\n* **Emphasis:** Use `*` or `_` for italics (e.g., `*italics*` or `_italics_`) and `**` or `__` for bold (e.g., `**bold**` or `__bold__`).\n* **Lists:** Create unordered lists with `*`, `-`, or `+` (e.g., `* Item 1`, `- Item 2`, `+ Item 3`). Create ordered lists with numbers followed by a period (e.g., `1. Item 1`, `2. Item 2`).\n* **Links:** Create links using square brackets for the link text and parentheses for the URL (e.g., `[Marked Website](https://marked.app)`).\n* **Images:** Similar to links, use square brackets for the alt text and parentheses for the URL, preceded by an exclamation mark (e.g., `![Marked Logo](marked-logo.png)`).\n* **Code:** Use backticks (`) to enclose inline code snippets (e.g., `` `code` ``) and triple backticks (```) to create code blocks (e.g., ```javascript\nconsole.log(\"Hello, world!\");\n```).  Specify the language after the opening triple backticks for syntax highlighting (e.g., ```python\nprint(\"Hello, world!\")\n```).\n* **Blockquotes:** Use `>` at the beginning of a line to create blockquotes (e.g., `> This is a blockquote.`).\n* **Horizontal Rules:** Use three or more hyphens (`---`), asterisks (`***`), or underscores (`___`) on a line by themselves to create a horizontal rule.\n\n\n### Rendering Markdown\n\nMarked automatically renders your Markdown as you type. The preview pane displays the HTML output in real-time.  Any changes you make to the Markdown source will immediately update the preview.  The rendering engine used is based on a robust and highly compatible parser. If you encounter unexpected behavior, ensure that your Markdown syntax is correct and check the Marked application's settings to verify that the correct Markdown extensions are enabled.\n\n### Options and Configuration\n\nMarked provides a comprehensive set of options and configurations to customize your experience.  Access these settings through the application's preferences menu.  Key configurable aspects include:\n\n* **Markdown Extensions:** Select which Markdown extensions to enable.  This allows you to control support for features like tables, footnotes, and other extensions.  Refer to the documentation for a complete list of supported extensions and their functionalities.\n* **Custom CSS:** Apply custom CSS to style the rendered HTML output. This allows for complete control over the visual appearance of your documents, enabling you to create a unique look and feel.\n* **Fonts:** Select the fonts used in both the editor and the preview pane.\n* **Export Options:** Configure settings for exporting your documents in different formats (HTML, PDF, etc.), including specifying metadata, page margins, and other relevant export parameters.\n* **Themes:** Choose from available themes (or create your own) to change the visual style of the application's interface.\n* **General Settings:** Adjust various aspects of the application behavior, including line wrapping, auto-saving, and more.\n\n\nBy exploring the options available in the preferences menu, you can tailor Marked to perfectly fit your workflow and preferences. Remember to consult the application's help documentation for detailed descriptions of each setting and its impact.\n\n\n## Advanced Usage\n\n### Customizing Renderers\n\nWhile Marked provides a robust default rendering engine, advanced users can customize the rendering process.  This typically involves creating custom CSS stylesheets to modify the visual appearance of the rendered HTML.  To achieve this:\n\n1. **Create a CSS file:** Create a new CSS file containing your custom styles.  This file should contain CSS rules targeting specific HTML elements generated by Marked's rendering engine.  You might want to inspect the rendered HTML (using your browser's developer tools) to identify the appropriate selectors for your customizations.\n\n2. **Apply the CSS:** In Marked's preferences, navigate to the section allowing you to specify custom CSS.  Provide the path to your newly created CSS file. Marked will then incorporate your custom styles into the rendered output.\n\n3. **Testing:** Thoroughly test your custom CSS to ensure it functions as intended and doesn't introduce any unintended styling conflicts.\n\nNote:  Direct modification of Marked's internal rendering engine is generally not supported and may break functionality.  Custom CSS offers a safe and effective way to customize the visual presentation.\n\n\n### Extending Marked with Plugins\n\nMarked does not natively support plugins.  Its functionality is primarily defined within the application itself.  Any extensions to its core features would require modification of the application's source code, which is not publicly available.\n\n\n### Handling Errors and Exceptions\n\nIf errors occur during the Markdown rendering process (e.g., due to invalid Markdown syntax), Marked will typically display an error message indicating the nature of the problem. This usually involves highlighting the problematic section of your Markdown source code in the editor.  Refer to the error message for detailed information to help correct the issue.  Common errors include:\n\n* **Syntax Errors:** Incorrect use of Markdown syntax will lead to rendering errors. Carefully review the Markdown specification and ensure your syntax is correct.\n* **File Errors:** Issues related to accessing or reading files, particularly those referenced within your Markdown (e.g., images), can result in errors. Check that the referenced files exist and are accessible to Marked.\n\n\n### Performance Optimization\n\nFor optimal performance, consider these points:\n\n* **Document Size:** Extremely large Markdown documents might impact rendering speed.  For very large documents, consider breaking them down into smaller, more manageable files.\n* **Complex Markdown:** Highly complex Markdown with numerous embedded elements, nested structures, and extensive use of extensions can increase rendering time.  Strive for a balanced approach, avoiding unnecessary complexity where possible.\n* **Custom CSS:** Overly complex or inefficient custom CSS can negatively impact rendering performance.  Optimize your CSS to ensure it's concise and efficiently targets the elements it's intended to style.\n* **System Resources:**  Ensure your system has sufficient resources (RAM, CPU) to handle the rendering process.  Closing unnecessary applications might free up resources for Marked.\n\nIf you consistently experience performance issues, consider contacting Marked support for assistance in troubleshooting potential problems.\n\n\n## Markdown Syntax\n\nMarked supports a comprehensive range of Markdown syntax elements.  The following details the supported syntax and how it's rendered.  Note that the exact rendering may vary slightly depending on enabled Markdown extensions.\n\n### Headers\n\nHeaders are created using `#` symbols at the beginning of a line. The number of `#` symbols determines the header level (e.g., `#` is level 1, `##` is level 2, and so on, up to level 6).\n\n```markdown\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n```\n\n### Emphasis\n\nUse `*` or `_` for italics and `**` or `__` for bold text.  You can combine them for bold italics.\n\n```markdown\n*This is italics.*\n_This is also italics._\n**This is bold.**\n__This is also bold.__\n***This is bold italics.***\n___This is also bold italics.___\n```\n\n### Lists\n\nUnordered lists are created using `*`, `-`, or `+` at the beginning of each list item. Ordered lists use numbers followed by a period.\n\n```markdown\n* Item 1\n* Item 2\n- Item 3\n+ Item 4\n\n1. Item 1\n2. Item 2\n3. Item 3\n```\n\n### Links\n\nLinks are created using square brackets `[]` for the link text and parentheses `()` for the URL.\n\n```markdown\n[Marked Website](https://marked.app)\n```\n\n### Images\n\nImages are similar to links, but begin with an exclamation mark `!`.\n\n```markdown\n![Marked Logo](marked-logo.png)\n```\n\n### Code Blocks\n\nInline code is enclosed in backticks `` ` ``. Code blocks are enclosed in triple backticks ``` ```.  You can specify the language after the opening triple backticks for syntax highlighting (e.g., ````javascript`).\n\n```markdown\nThis is inline code: `` `var x = 10;` ``\n\nThis is a code block:\n```javascript\nfunction myFunction() {\n  console.log(\"Hello, world!\");\n}\n```\n```\n\n### Blockquotes\n\nBlockquotes are created using `>` at the beginning of each line.\n\n```markdown\n> This is a blockquote.\n> It can span multiple lines.\n```\n\n\n### Horizontal Rules\n\nHorizontal rules are created using three or more hyphens (`---`), asterisks (`***`), or underscores (`___`) on a line by themselves.\n\n```markdown\n---\n***\n___\n```\n\n### Tables\n\nTables are created using pipes `|` to separate columns and hyphens `-` to define the header row.\n\n```markdown\n| Header 1 | Header 2 |\n|---|---|\n| Row 1, Cell 1 | Row 1, Cell 2 |\n| Row 2, Cell 1 | Row 2, Cell 2 |\n```\n\n### HTML\n\nMarked allows embedding raw HTML. Note that this is dependent on the enabled renderer and may not support all HTML elements.\n\n```markdown\n<p>This is a paragraph using raw HTML.</p>\n```\n\n### Footnotes\n\nFootnotes are created using `[^footnote-ref]`.  The footnote definition is placed at the end of the document using `[^footnote-ref]: footnote text`.\n\n```markdown\nThis is a sentence with a footnote.[^1]\n\n[^1]: This is the footnote text.\n```\n\n### Definitions\n\nDefinitions lists are created using terms followed by colons and definitions.\n\n```markdown\nTerm 1\n: Definition 1\n\nTerm 2\n: Definition 2\n```\n\n\n## API Reference\n\n**Note:** This API reference describes the hypothetical API of a Marked-like Markdown renderer.  The actual Marked application's internal API is not publicly documented and may differ significantly. This section provides a conceptual overview of how such an API might be structured.\n\n\n### `marked()`\n\nThe primary function for rendering Markdown.  It takes a Markdown string as input and returns the rendered HTML string.\n\n```javascript\nconst html = marked('This is *Markdown*!'); // html will contain \"<p>This is <em>Markdown</em>!</p>\"\n```\n\n**Parameters:**\n\n* `markdown` (string): The Markdown string to render.\n\n**Returns:**\n\n* (string): The rendered HTML string.\n\n\n### `marked.setOptions()`\n\nSets global options for the Markdown renderer.  These options will affect all subsequent calls to `marked()`.\n\n```javascript\nmarked.setOptions({\n  gfm: true, // Enable GitHub Flavored Markdown\n  breaks: true, // Enable line breaks\n  smartypants: true // Enable smart quotes\n});\n```\n\n**Parameters:**\n\n* `options` (object): An object containing the options to set.  Common options include `gfm`, `breaks`, `smartypants`, `highlight`, and `langPrefix`.\n\n\n### `marked.Lexer()`\n\nCreates a new lexer instance. The lexer is responsible for breaking down the Markdown input into tokens.\n\n```javascript\nconst lexer = new marked.Lexer();\nconst tokens = lexer.lex('This is a #header.');\nconsole.log(tokens); // Array of tokens representing the Markdown structure.\n```\n\n**Parameters:**\n\n* (Optional) `options` (object): Options for the lexer.\n\n**Methods:**\n\n* `lex(markdown)`: Parses the Markdown input and returns an array of tokens.\n\n\n### `marked.Parser()`\n\nCreates a new parser instance. The parser takes the tokens generated by the lexer and constructs the HTML output.\n\n```javascript\nconst parser = new marked.Parser();\nconst html = parser.parse(tokens); // tokens from marked.Lexer().lex()\nconsole.log(html); // Rendered HTML\n```\n\n**Parameters:**\n\n* (Optional) `options` (object): Options for the parser.\n\n\n**Methods:**\n\n* `parse(tokens)`: Parses the array of tokens and returns the rendered HTML.\n\n\n### `marked.Renderer()`\n\nCreates a new renderer instance. The renderer is responsible for converting tokens into HTML.  This allows for customization of the HTML output.\n\n```javascript\nconst renderer = new marked.Renderer();\nrenderer.heading = function (text, level) {\n  return `<h${level} id=\"${text.toLowerCase().replace(/\\s+/g, '-')}\">${text}</h${level}>`;\n};\n\nconst html = marked('This is a #header.', { renderer: renderer }); // Custom header rendering\n```\n\n**Parameters:**\n\n* (Optional) `options` (object): Options for the renderer.\n\n**Methods:**\n\n*  Various methods for rendering different token types (e.g., `heading`, `paragraph`, `list`, `image`, `link`, etc.).  These methods can be overridden to customize the HTML generation.  Consult the renderer's API documentation for a complete list of available methods.\n\n\n\n## Troubleshooting\n\n### Common Issues\n\nThis section addresses frequently encountered issues when using Marked.\n\n* **Rendering Errors:** Incorrect Markdown syntax is a common source of rendering errors. Carefully review your Markdown code, paying close attention to syntax rules for elements like headers, lists, links, and code blocks.  Use a Markdown linter (if available) to help identify syntax problems.  Marked often provides helpful error messages highlighting the location of the problem in your Markdown source.\n\n* **Unexpected Formatting:**  If the rendered output doesn't match your expectations, ensure that the correct Markdown extensions are enabled in Marked's preferences. Some formatting behaviors (like line breaks, smart quotes, etc.) are controlled by these settings.\n\n* **Image Display Issues:** Problems displaying images may stem from incorrect image paths, inaccessible image files, or missing image files. Double-check that the file paths in your Markdown are correct and the images are accessible to the application.\n\n\n* **Custom CSS Conflicts:** If you're using custom CSS, conflicts with existing styles might cause unexpected visual results. Inspect the rendered HTML (using browser developer tools) to identify style conflicts and adjust your custom CSS accordingly.\n\n* **Performance Issues:**  Extremely large Markdown files or complex documents with nested elements and many extensions can affect rendering performance. Consider breaking large files into smaller parts or simplifying complex Markdown structures.\n\n* **Application Crashes:**  If Marked crashes unexpectedly, try restarting the application.  If the crashes persist, check for application updates and consider contacting support.\n\n\n### Debugging Tips\n\nIf you encounter more complex issues, these debugging tips can assist you:\n\n* **Simplify Your Markdown:**  Create a minimal, reproducible Markdown example to isolate the problem. This helps in identifying the root cause.\n\n* **Check the Console:** If Marked has a console or log output, check for any error messages or warnings that may provide clues about the issue.\n\n* **Inspect Rendered HTML:** Using your web browser's developer tools (usually accessed by right-clicking and selecting \"Inspect\" or \"Inspect Element\"), examine the rendered HTML.  This will help identify if the problem is in the Markdown or the HTML rendering process.\n\n* **Test with Different Markdown Editors:**  Render your Markdown in another editor to see if the problem is specific to Marked or a broader Markdown rendering issue.\n\n* **Review Marked's Documentation:** The official documentation should provide answers to many common questions and troubleshooting solutions.\n\n* **Search for Similar Issues:**  If your problem isn't documented, search online forums and community support channels to see if others have experienced the same or similar problems.\n\n\n\n### Community Support\n\nFor assistance beyond this manual, consider these avenues:\n\n* **Online Forums:** Check if Marked has an official online forum or community where users can ask questions and share solutions.\n\n* **Issue Trackers:**  If you suspect a bug or have encountered unexpected behavior, report it through Marked's issue tracker (if one exists). Provide detailed information, including the steps to reproduce the issue and relevant screenshots or logs.\n\n* **Contact Support:**  Many applications provide direct support channels (e.g., email or a help desk system). Contacting support is advisable for complex issues or critical problems.  Provide as much detail as possible about your problem, including Marked's version, operating system, and relevant screenshots or logs.\n\n\n## Contributing\n\nThis section outlines how to contribute to the development of Marked (assuming it's an open-source project).  If Marked is not open-source, this section would be irrelevant and should be omitted.\n\n### Contributing Guidelines\n\nWe welcome contributions from the community!  To contribute to Marked, please follow these guidelines:\n\n1. **Fork the Repository:** Create a fork of the main Marked repository on the platform where it's hosted (e.g., GitHub, GitLab).\n\n2. **Create a Branch:** Create a new branch for your contribution.  Use descriptive branch names that clearly indicate the purpose of your changes (e.g., `fix-bug-123`, `feature-new-theme`).\n\n3. **Make Your Changes:** Implement your changes, following the code style guidelines detailed below.  Ensure your changes are well-documented and thoroughly tested.\n\n4. **Write Tests:**  Add or update tests to cover your changes.  Thorough testing is crucial to ensuring the quality and stability of the project.\n\n5. **Commit Your Changes:** Commit your changes with clear and concise commit messages.  Follow a consistent commit message style (e.g., using imperative mood).\n\n6. **Push Your Branch:** Push your branch to your forked repository.\n\n7. **Create a Pull Request:** Create a pull request to merge your branch into the main repository.  Clearly describe the changes you've made and address any potential concerns or questions in your pull request description.\n\n8. **Respond to Feedback:**  Respond to any feedback provided by the maintainers or other contributors.  Be prepared to make necessary revisions and address any outstanding concerns.\n\n\n### Code Style\n\nMaintain consistency in code style to improve readability and maintainability.  Follow these guidelines:\n\n* **Indentation:** Use consistent indentation (typically 2 or 4 spaces).  Avoid using tabs.\n\n* **Naming Conventions:** Adhere to consistent naming conventions for variables, functions, and classes.  (Specify the conventions used in the project, e.g., camelCase, snake_case).\n\n* **Comments:**  Write clear and concise comments to explain complex logic or non-obvious code sections.\n\n* **Line Length:** Keep lines of code to a reasonable length (e.g., under 80 characters) to enhance readability.\n\n* **Formatting:** Use a code formatter (if one is specified by the project) to ensure consistent formatting across the codebase.\n\n\n### Testing\n\nTesting is a crucial part of the development process.  Contribute to the existing test suite or add new tests to cover your changes. The project should specify its testing framework and practices.  Follow these general guidelines:\n\n* **Write Unit Tests:**  Create unit tests to test individual components or functions in isolation.\n\n* **Write Integration Tests:**  Develop integration tests to verify the interactions between different parts of the system.\n\n* **Test Coverage:** Strive for high test coverage to ensure that a significant portion of the codebase is tested.\n\n* **Continuous Integration (CI):**  Familiarize yourself with the project's CI process.  The CI pipeline should automatically run tests when code changes are pushed.  Ensure that your changes pass all CI tests before submitting a pull request.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"marked.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Marked - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}