---
title: "fullPage.js - A Developer's Handbook"
categories: [ "JavaScript Libraries and Functions" ]
---
## Getting Started

### Installation

fullPage.js can be installed via npm, yarn, or by directly downloading the files from the [official website](link-to-official-website-here).

**npm:**

```bash
npm install fullpage.js
```

**yarn:**

```bash
yarn add fullpage.js
```

**Direct Download:** Download the necessary files (fullpage.css and fullpage.js) from the official website and include them in your project.


### Basic Setup

Before you begin, ensure you have a basic HTML structure with sections representing your website's different pages. Each section will become a slide in your fullPage.js website.  A simple structure could look like this:

```html
<div id="fullpage">
  <div class="section">Section 1</div>
  <div class="section">Section 2</div>
  <div class="section">Section 3</div>
</div>
```


### Creating your first fullPage.js website

After setting up your HTML structure, you need to initialize fullPage.js. This is done by including the CSS and JavaScript files and then calling the `$.fn.fullpage.init()` function.  Refer to the next section for details on including the files.  After including the files, add the following JavaScript code:

```javascript
$(document).ready(function() {
    $('#fullpage').fullpage();
});
```
This code will initialize fullPage.js on the element with the ID "fullpage".


### Including CSS and JavaScript

Include the `fullpage.css` stylesheet in the `<head>` of your HTML document and the `fullpage.js` script in the `<body>`, ideally just before the closing `</body>` tag.  For npm/yarn users, the paths will depend on your project setup. For direct downloads, adjust the paths accordingly. Example:

```html
<!DOCTYPE html>
<html>
<head>
  <title>My fullPage.js Website</title>
  <link rel="stylesheet" href="path/to/fullpage.css">
</head>
<body>
  <div id="fullpage">
    <!-- Your sections here -->
  </div>
  <script src="path/to/jquery.min.js"></script>  <!--  Make sure you include jQuery -->
  <script src="path/to/fullpage.js"></script>
  <script>
    $(document).ready(function() {
        $('#fullpage').fullpage();
    });
  </script>
</body>
</html>
```
Remember to replace `"path/to/..."` with the correct paths to your files. You will also need to include jQuery;  fullPage.js relies on it.

### Browser Compatibility

fullPage.js aims for broad browser compatibility.  It officially supports the latest versions of major browsers including Chrome, Firefox, Safari, Edge, and Opera.  While older browsers might work, full functionality and optimal performance are not guaranteed.  For best results, target modern browsers.  Refer to the official documentation for the most up-to-date compatibility information.


## Core Concepts

### Sections and Slides

fullPage.js organizes your website content into *sections* and *slides*.  A *section* represents a full-screen page, while *slides* are individual elements within a section, allowing for horizontal scrolling within a section.  Each section is defined by a `<div>` with the class `section`, and each slide within a section is defined by a `<div>` with the class `slide`.

```html
<div id="fullpage">
    <div class="section">
        <div class="slide">Slide 1 of Section 1</div>
        <div class="slide">Slide 2 of Section 1</div>
    </div>
    <div class="section">
        <div class="slide">Slide 1 of Section 2</div>
    </div>
    <div class="section">Section 3</div> </div>
```

In this example, there are three sections.  The first section contains two slides, the second section contains one slide, and the third section contains only one slide (no horizontal scrolling).


### Navigation

fullPage.js provides built-in navigation features, including:

* **Vertical Navigation:** Users can scroll vertically between sections using the mouse wheel, touch gestures, or keyboard arrows (up and down).
* **Horizontal Navigation:**  When a section contains multiple slides, users can scroll horizontally between those slides.
* **Navigation Menu:**  A customizable menu can be easily implemented to allow users to directly jump to specific sections.  This is configured via options passed during initialization.
* **Scrollbars:** Fullpage.js can optionally hide or show scrollbars, providing a cleaner user experience.


### Scrolling

fullPage.js offers smooth and intuitive scrolling between sections and slides.  Scrolling behavior can be customized, offering options for:

* **Scrolling Speed:** Control how quickly the user moves between sections and slides.
* **Scrolling Type:**  Choose between different scrolling methods (e.g., `ease`, `linear`).
* **Scrolling Direction:** Define whether scrolling happens vertically, horizontally, or both.
* **Continuous Vertical Scrolling:**  Enable scrolling past the last section to loop back to the top, or vice-versa.


### Responsive Design

fullPage.js adapts to different screen sizes and devices.  You can define different settings for different screen sizes and orientations through its options.  Consider using media queries in your CSS to style elements appropriately for different viewport sizes. FullPage.js itself handles the adjustments to maintain functionality across various devices.


### Events

fullPage.js offers a rich set of events that you can use to trigger custom actions at specific points within the scrolling process.  These events include:

* **`afterLoad`:** Triggered after a section has been loaded.
* **`onLeave`:** Triggered when a user leaves a section.
* **`afterRender`:** Triggered after all sections are rendered.
* **`afterSlideLoad`:** Triggered after a slide within a section has been loaded.
* **`afterResize`:** Triggered after a window resize event.
* **`scrollHorizontal`:** Triggered when a user scrolls horizontally (between slides).


You can use these events to execute custom JavaScript code, such as animations or updating content based on the user's current position in the website.  Refer to the official documentation for a complete list and details on how to use each event.


## API Reference

### Initialization Options

When initializing fullPage.js using `$('#fullpage').fullpage(options);`, you can pass an object containing various options to customize its behavior.  Here are some key options:

* **`licenseKey` (string):** Your license key (required for commercial use).
* **`anchors` (array):**  An array of strings defining anchors for each section.  These are used for URL linking and navigation.
* **`menu` (string or jQuery object):**  Selector for the navigation menu element.
* **`navigation` (boolean):**  Shows or hides the built-in vertical navigation dots.
* **`navigationPosition` (string):**  Positions the navigation (e.g., `right`, `left`).
* **`scrollHorizontally` (boolean):** Enables horizontal scrolling (slides).
* **`slidesNavigation` (boolean):** Shows or hides the navigation for slides within sections.
* **`autoScrolling` (boolean):** Enables or disables automatic scrolling.
* **`fitToSection` (boolean):**  Whether to resize the sections to the viewport height.
* **`responsiveWidth` (number):** The viewport width at which the responsive mode activates.
* **`responsiveHeight` (number):** The viewport height at which the responsive mode activates.


Many more options exist for fine-grained control over styling, animations, and functionality. Consult the official documentation for a complete list and descriptions.


### Methods

fullPage.js provides several methods to control its behavior after initialization. These methods are called on the fullPage.js instance.  Example:  `$.fn.fullpage.reBuild();`

* **`fullpage.moveSectionUp()`:** Moves to the previous section.
* **`fullpage.moveSectionDown()`:** Moves to the next section.
* **`fullpage.moveTo(section,slide)`:** Moves to a specific section and slide (index or anchor).
* **`fullpage.setResponsive(isResponsive)`:**  Manually sets the responsive mode.
* **`fullpage.reBuild()`:**  Rebuilds the plugin (useful after DOM manipulations).
* **`fullpage.destroy()`:**  Completely destroys the fullPage.js instance.
* **`fullpage.setAllowScrolling(value, direction)`:** Enables or disables scrolling.  Direction can be 'vertical', 'horizontal', or 'both'.
* **`fullpage.getActiveSection()`:** Returns the currently active section.
* **`fullpage.getActiveSlide()`:** Returns the currently active slide.


These are some of the commonly used methods. Refer to the official documentation for a full list of available methods and parameters.


### Callbacks

Callbacks are functions that you can provide as options during initialization to execute code at specific moments within fullPage.js's lifecycle.  These are often used in conjunction with Events.  Example (In Initialization options):

```javascript
$('#fullpage').fullpage({
    afterLoad: function(origin, destination, direction){
      console.log("Section loaded:", destination.index);
    }
});
```

Common callbacks include `afterLoad`, `onLeave`, `afterRender`, `afterSlideLoad`, etc., mirroring many of the events.


### Events API

fullPage.js triggers various events throughout its operation, allowing you to integrate custom functionality. These events can be bound using jQuery's `on()` method.

* **`afterLoad`:**  Triggered after a section is loaded.
* **`onLeave`:** Triggered when leaving a section.
* **`afterRender`:** Triggered after the plugin has finished rendering all sections and slides.
* **`afterSlideLoad`:** Triggered after a slide within a section is loaded.
* **`afterResize`:** Triggered after a window resize.
* **`slideChange`:** Triggered after a slide changes.
* **`scrollHorizontal`:** Triggered during horizontal scroll.
* **`sectionsNav`:** Triggered when interacting with the sections navigation.
* **`lazyLoad`:** Triggered when an image or element is lazy-loaded.

To listen for these events, use jQuery's `on()` method like this:

```javascript
$('#fullpage').on('afterLoad', function(origin, destination, direction){
    // Your custom code here
});
```

Refer to the official documentation for more details on each event's parameters. Remember to replace placeholders like  `// Your custom code here` with your actual code.


## Advanced Usage

### Customizing Navigation

Beyond the basic navigation options, fullPage.js allows extensive customization. You can:

* **Create a custom navigation menu:**  Specify a custom HTML element to act as your navigation menu using the `menu` option.  This provides more design control.
* **Customize the styling:** Use CSS to modify the appearance of the default navigation elements (bullets, thumbnails) or your custom menu.  Target the relevant classes provided in the plugin's CSS.
* **Add or remove navigation elements:** You can dynamically add or remove navigation items using JavaScript and the fullPage.js API, syncing it with your content changes.
* **Implement alternative navigation:** Consider adding alternative navigation methods, such as keyboard navigation shortcuts, if the default navigation isn't suitable for your users.


### Vertical Scrolling

fullPage.js's default vertical scrolling behavior can be modified extensively:

* **Scrolling speed:** Adjust the `scrollingSpeed` option to control how quickly users move between sections.
* **Easing:** Change the `easing` option to alter the animation curve during scrolling.
* **Continuous scrolling:** Enable continuous vertical scrolling (`continuousVertical: true`) to allow scrolling beyond the last section and looping back to the beginning.
* **Scroll bar behavior:** Control the visibility of scrollbars using options like `scrollBar:true` (to show) or `scrollBar:false` (to hide).
* **Intertia:** Fine-tune scrolling inertia, enabling a more natural feeling scroll.


### Horizontal Scrolling

For horizontal scrolling within sections (slides), consider these points:

* **Number of slides:** The number of slides within a section determines the horizontal scrolling range.  Ensure sufficient content for each slide.
* **Slide width:**  Adjust the width of each slide to fit the content and your design.  Ensure total slide width exceeds the viewport width.
* **Navigation:** Implement horizontal slide navigation using `slidesNavigation: true` to provide users with visual cues and controls for navigating slides within a section.
* **Auto-scrolling:** Consider enabling or disabling auto-scrolling horizontally (`autoScrolling: true` for automatic, `autoScrolling: false` for manual scrolling) based on your design and user experience goals.


### Fixed Elements

Elements positioned using `position: fixed;` remain in place while the user scrolls.  However, keep these considerations in mind when using fixed elements with fullPage.js:

* **Z-index:** Ensure that fixed elements have a z-index high enough to appear above the scrolling sections.
* **JavaScript adjustments:** You might need to adjust the positioning or visibility of fixed elements using JavaScript events provided by fullPage.js (`afterLoad`, `onLeave`, etc.) to account for the changing viewport and section positioning.
* **Compatibility:**  Test thoroughly on different browsers and devices to ensure proper rendering and behavior of fixed elements in conjunction with fullPage.js.


### Responsive Design and Breakpoints

To ensure your fullPage.js website works well on different devices, leverage responsive design techniques:

* **Media queries:** Use CSS media queries to adjust the styling and layout of your website based on the viewport size and device orientation.
* **Responsive options:** Utilize fullPage.js's responsive options (`responsiveWidth`, `responsiveHeight`) to switch to a different scrolling mode or layout at specific breakpoints.
* **Mobile-first approach:** Design your website with a mobile-first approach, ensuring that the core functionality and user experience work seamlessly on smaller screens before optimizing for larger ones.


### Accessibility

To improve accessibility for users with disabilities:

* **Semantic HTML:** Use semantic HTML elements to structure your content logically.
* **ARIA attributes:** Consider using appropriate ARIA attributes (e.g., ARIA landmarks, ARIA roles) to enhance accessibility.
* **Keyboard navigation:** Ensure that all features are accessible using keyboard navigation.
* **Screen reader compatibility:** Test your website with screen readers to verify compatibility and ensure that information is properly conveyed to visually impaired users.
* **Alternative text for images:** Provide descriptive alternative text for all images.


### Performance Optimization

To maintain good performance, especially on larger websites or devices with limited resources:

* **Optimize images:** Use appropriately sized and compressed images to reduce page load times.
* **Lazy loading:** Utilize lazy loading for images to improve initial page load performance. fullPage.js offers built-in lazy loading functionality.
* **Minimize JavaScript and CSS:** Keep your JavaScript and CSS files as small as possible to reduce the amount of data that needs to be downloaded.
* **Efficient DOM manipulation:** Avoid unnecessary DOM manipulations, as these can negatively impact performance.
* **Regular maintenance:** Regularly review and optimize your code to identify and address any performance bottlenecks.



## Examples and Use Cases

### Simple Website

A simple website can benefit from fullPage.js by presenting information across multiple sections, each acting as a distinct page.  This is ideal for websites with a small number of pages or those that want a more visually engaging user experience than traditional linear scrolling.  Each section can contain text, images, and other content relevant to that page.  Navigation can be implemented using the built-in navigation bullets or a custom menu.  This approach provides a clean, straightforward design and excellent user experience.


### One Page Application

fullPage.js can be used to create a single-page application (SPA) with multiple sections representing different parts of the application.  This allows for content organization within a single page, providing a seamless user experience without constant page reloads.  Each section can host a different component or view of the application.  Using the API, you can trigger actions and updates based on which section is currently visible, enhancing the interactivity and dynamics of the SPA. This structure simplifies navigation and reduces the number of HTTP requests.


### Slideshow

fullPage.js can easily create a sophisticated slideshow.  Each section can represent a different slide, with multiple slides (using horizontal scrolling) per section for a more complex display.  You can incorporate various media types within each slide, making for an impressive visual presentation.  Adding custom animations triggered by `afterLoad` or `onLeave` events further enhances the slideshow's dynamic quality.  Navigation can be customized to match the desired style of the slideshow.


### Portfolio

For showcasing a portfolio of work, fullPage.js creates a visually appealing and intuitive experience.  Each section can represent a different project, containing images, videos, descriptions, and links.  The smooth scrolling between sections provides a polished feel, drawing attention to each project.  Sections can be structured to emphasize key project aspects.  This allows for a comprehensive yet navigable display of a creative individual's or company's work.  Using the API, you can even incorporate interactive elements within each project's presentation.


### eCommerce

While fullPage.js isn't ideal for complex e-commerce applications, it can enhance aspects of the user experience.  You could use it to present product categories in different sections, creating a visually attractive way to browse products.  Each section could focus on a specific product category or a set of related products.  However, it's crucial to ensure that core e-commerce functionalities like adding items to a cart, checkout processes, and secure payment processing are handled separately and don't rely solely on the fullPage.js structure.  Consider fullPage.js as a supplementary enhancement to a well-structured e-commerce application rather than the foundation of it.


## Troubleshooting

### Common Issues

* **fullPage.js not working:**  Ensure that you've correctly included jQuery, the fullPage.js CSS file (`fullpage.css`), and the fullPage.js JavaScript file (`fullpage.js`) in your HTML.  Check the paths are correct and that there are no conflicts with other scripts or styles.  Also, verify that the element with the ID you're targeting (`#fullpage` by default) exists in your HTML and is correctly structured.

* **Sections not displaying correctly:** Check your HTML structure to make sure your sections (`<div class="section">`) and slides (`<div class="slide">`) are correctly nested.  Incorrect nesting or missing classes can lead to rendering issues. Also, inspect the browser's console for any JavaScript errors that may be preventing fullPage.js from functioning properly.

* **Scrolling issues:** Problems with scrolling may arise from conflicts with other JavaScript libraries that manipulate scrolling behavior.  Try disabling other scripts temporarily to see if that resolves the issue.  Also, check your fullPage.js initialization options, such as `autoScrolling`, `scrollingSpeed`, and `easing`, to ensure they are set appropriately.

* **Responsive issues:** If your website doesn't adapt correctly to different screen sizes, review your CSS media queries and fullPage.js responsive options (`responsiveWidth`, `responsiveHeight`).  Ensure that your design is properly responsive and accounts for different viewport sizes.

* **License key errors:** If using a commercial license, make sure you've entered the correct license key during initialization.  Incorrect license keys will prevent the plugin from functioning correctly.


### Debugging

Use your browser's developer tools (usually accessed by pressing F12) to debug your fullPage.js implementation:

* **Console:** Check the console for any JavaScript errors or warnings that fullPage.js or your custom code might be generating.
* **Network:** Inspect network requests to make sure that all necessary files (CSS and JavaScript) are loaded correctly.
* **Sources:** Step through your JavaScript code using the debugger to understand the flow of execution and identify potential problems.
* **Elements:** Inspect the HTML structure to verify that your sections and slides are rendered as expected.


### Troubleshooting Tips

* **Simplify your HTML:** Create a minimal HTML structure with just the essential sections to isolate potential problems.  Gradually add complexity to identify which part of your code is causing the issue.

* **Check for JavaScript conflicts:**  Temporarily disable other JavaScript libraries to see if they're interfering with fullPage.js.

* **Consult the documentation:** The official fullPage.js documentation provides detailed information on usage, options, and troubleshooting.

* **Search for similar issues:** Search online forums and communities for reported issues that are similar to yours.  The solution may have already been found and documented.

* **Test on different browsers:** Ensure your website works correctly across various browsers and devices to identify potential browser-specific issues.


### Support and Community

For additional assistance, consider these resources:

* **Official fullPage.js website:** The official website usually provides documentation, tutorials, and a contact form for support.
* **Online forums:** Search for relevant forums or communities related to fullPage.js or web development in general.  You can ask questions and share your experiences with other developers.
* **GitHub issues:** If you've found a bug or have a feature request, consider reporting it on the fullPage.js GitHub repository.  Contributing to the community can help improve the plugin for everyone.


Remember to provide clear and concise details when seeking help, including your fullPage.js version, browser information, relevant code snippets, and a detailed description of the problem you're encountering.

