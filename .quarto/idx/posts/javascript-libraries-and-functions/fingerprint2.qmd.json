{"title":"Fingerprint2 - Documentation","markdown":{"yaml":{"title":"Fingerprint2 - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is Fingerprint2?\n\nFingerprint2 is a JavaScript library that generates a unique \"fingerprint\" for a web browser.  This fingerprint is a hash composed of various browser characteristics and settings, aiming to create a pseudonymous identifier for a user's browsing environment.  It's crucial to understand that Fingerprint2 does *not* directly identify individuals; instead, it identifies the specific configuration of the browser and system being used. This can be useful for various applications, but it's important to be mindful of privacy implications and comply with relevant regulations.  The fingerprint is designed to be relatively stable over time, barring significant changes to the user's browser or system.  However, it is still not guaranteed to be entirely permanent.\n\n### Why use Fingerprint2?\n\nFingerprint2 can be a valuable tool in situations where you need to identify and track browser instances, but direct user identification is undesirable or impossible (e.g., due to privacy concerns or the lack of user logins).  Common use cases include:\n\n* **Analytics:**  Tracking unique visitors to a website without relying on cookies, which can be blocked or cleared by users.\n* **Fraud Detection:** Identifying potentially fraudulent activity based on unusual browser configurations.\n* **Session Management:** Maintaining user sessions in environments where traditional cookies might be less reliable.\n* **Debugging and Testing:** Identifying and distinguishing between multiple browser instances during development and testing.\n\nIt is paramount to use Fingerprint2 responsibly and ethically, always respecting user privacy and complying with relevant data protection regulations. Consider alternatives and prioritize user privacy whenever possible.\n\n### Key Features and Benefits\n\n* **Lightweight and Efficient:** Fingerprint2 is designed to be small and performant, minimizing the impact on website load times.\n* **Cross-Browser Compatibility:** It supports a wide range of modern browsers.\n* **Flexible and Customizable:**  While providing a default fingerprint, it allows for some customization to focus on specific browser aspects.\n* **Pseudonymous Identification:**  Provides a unique identifier without revealing personally identifiable information directly.\n* **Simplicity:**  The API is straightforward and easy to integrate into existing projects.\n\n### Browser Compatibility\n\nFingerprint2 aims for broad compatibility, but the accuracy and completeness of the fingerprint might vary slightly across different browsers and versions.  While it generally works well with modern browsers such as Chrome, Firefox, Safari, and Edge, support for older or less common browsers might be limited.  It's recommended to test thoroughly in your target browsers to ensure the desired level of accuracy and reliability.  Specific compatibility details may be found in the project's release notes and issue tracker.  Note that continuous evolution of browsers may affect the long-term stability of the fingerprint generated.\n\n\n## Installation and Setup\n\n### Installing Fingerprint2 via npm\n\nThe recommended way to install Fingerprint2 is using npm (Node Package Manager).  Open your terminal or command prompt and navigate to your project's directory. Then, execute the following command:\n\n```bash\nnpm install fingerprint2\n```\n\nThis will download and install Fingerprint2 into your project's `node_modules` directory.  You can then import it into your JavaScript code as described in the \"Including Fingerprint2 in your project\" section.\n\n\n### Installing Fingerprint2 via CDN\n\nFor quick prototyping or projects where npm is not suitable, you can include Fingerprint2 via a CDN (Content Delivery Network).  A popular option is jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/fingerprint2\"></script>\n```\n\nPlace this `<script>` tag within the `<head>` section of your HTML file.  This will load Fingerprint2 directly into your browser.  Ensure that this line is placed *before* any code that attempts to use the Fingerprint2 library.\n\n\n### Including Fingerprint2 in your project\n\nAfter installing Fingerprint2 (either via npm or CDN), you need to include it in your JavaScript code.\n\n**Using npm:**\n\n```javascript\nimport Fingerprint2 from 'fingerprint2';\n// or, if using CommonJS\nconst Fingerprint2 = require('fingerprint2');\n```\n\n**Using CDN:**  The library will be globally available as `Fingerprint2`.  No additional import is needed.\n\n### Basic Usage Example\n\nThe following example demonstrates the basic usage of Fingerprint2 to generate a browser fingerprint.  Remember to handle potential errors appropriately in a production environment.\n\n```javascript\nimport Fingerprint2 from 'fingerprint2';\n\nconst options = {\n  canvas: true, // Enable canvas fingerprinting (optional, but recommended)\n  ie_activex: true //Enable IE ActiveX fingerprinting (optional)\n};\n\n\nconst fp = new Fingerprint2(options);\nfp.get(function(result){\n  console.log(result); //The generated fingerprint as a string.\n  //  result.visitorId will be the generated unique hash.  Avoid relying on visitorId alone for tracking, as it may not always be available.\n  //  result.components is an array of component values, use this for debugging or analysis.\n}, function(error){\n  console.error(\"Fingerprint2 failed:\", error);\n});\n```\n\nThis code creates a new Fingerprint2 instance, optionally specifying settings, and then calls the `get()` method. The `get()` method takes two callback functions: one for successful fingerprint generation and one for handling errors.  The generated fingerprint (a string) is then logged to the console.  Remember that the fingerprint should be treated as pseudonymous data and handled responsibly.  The `visitorId` property provides a concise hash that can be used as identifier but it's crucial to understand that this is not guaranteed to be perfectly unique across different instances of browsers with identical configurations.\n\n\n## API Reference\n\n### getFingerprint()\n\nThe core function of Fingerprint2 is `get()`, which asynchronously generates the browser fingerprint.  It takes two callback functions as arguments: a success callback and an error callback.\n\n**Signature:**\n\n```javascript\nget(successCallback, errorCallback, options)\n```\n\n* **`successCallback(result)`:** A function executed upon successful fingerprint generation.  The `result` object contains the following properties:\n\n    * `visitorId`: A string representing the generated unique hash of the fingerprint (pseudonymous identifier).  *Note:  Do not rely solely on this ID for tracking, as it's not always guaranteed to be persistently unique.*\n    * `components`: An array of objects, each representing a component of the fingerprint (e.g., user agent, screen resolution, plugins). Useful for debugging and detailed analysis.\n\n* **`errorCallback(error)`:** A function executed if an error occurs during fingerprint generation. The `error` parameter contains details about the error.\n\n* **`options` (optional):** An object that allows customization of the fingerprinting process (see \"Options and Customization\" section).\n\n\n### Options and Customization\n\nThe `options` parameter passed to the `get()` method allows for customization of the fingerprint generation process.  The following options are available:\n\n* **`canvas` (boolean, default: `true`):** Enables or disables canvas fingerprinting.  Canvas fingerprinting can provide a more robust fingerprint but may have higher privacy implications.  Set to `false` to disable it.\n\n* **`ie_activex` (boolean, default: `true`):** Enables or disables ActiveX fingerprinting for Internet Explorer.  This is only relevant for Internet Explorer and is generally less reliable.  Set to `false` to disable it.\n\n* **`screen_resolution` (boolean, default: `true`):** Enables or disables screen resolution as a component of the fingerprint.\n\n\n  Add other options as needed based on the Fingerprint2 library version.  Check the library documentation for the most up-to-date list of available options.\n\n\n### Event Handling\n\nFingerprint2 primarily uses callbacks for handling success and error events.  There are no dedicated events beyond these callbacks.\n\n\n### Error Handling\n\nThe `errorCallback` function passed to the `get()` method is crucial for handling potential errors during fingerprint generation.  Common error causes include browser incompatibilities or issues accessing certain browser features.  Robust error handling is essential for a production-ready implementation.  The `error` object passed to the `errorCallback` usually provides information about the type and cause of the error.\n\n\n### Asynchronous Operations\n\nThe `get()` method is asynchronous.  This means that it does not block the execution of other code while generating the fingerprint.  The `successCallback` and `errorCallback` functions are executed once the fingerprint generation is complete, either successfully or with an error.  It's crucial to understand this asynchronous nature when integrating Fingerprint2 into your application to avoid race conditions or unexpected behavior.  Consider using promises or async/await for easier asynchronous flow management, if your environment supports these features.  The asynchronous nature of the function ensures it doesn't freeze the browser while creating the fingerprint.\n\n\n## Advanced Usage\n\n### Component-based Integration\n\nWhile the basic example shows a simple integration,  more complex applications might benefit from integrating Fingerprint2 within a component-based architecture.  This allows for better management of the fingerprint generation process and its integration with other parts of the application.\n\nFor example, in React, you might create a custom hook:\n\n```javascript\nimport { useState, useEffect } from 'react';\nimport Fingerprint2 from 'fingerprint2';\n\nconst useFingerprint = () => {\n  const [fingerprint, setFingerprint] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fp = new Fingerprint2();\n    fp.get((result) => {\n      setFingerprint(result.visitorId);\n    }, (err) => {\n      setError(err);\n    });\n  }, []);\n\n  return { fingerprint, error };\n};\n\nexport default useFingerprint;\n```\n\nThis hook handles the fingerprint generation and exposes the result and any errors through state variables.  Similar approaches can be used in other component-based frameworks like Angular or Vue.js.\n\n\n### Working with different frameworks (React, Angular, Vue)\n\nFingerprint2 is a plain JavaScript library and can be integrated into various frameworks.  The integration method depends on the framework's module system and component structure.\n\n* **React:**  Use a custom hook (as shown above) or integrate it directly into a component's lifecycle methods (e.g., `useEffect`).\n\n* **Angular:**  Use a service to handle fingerprint generation and inject it into components that require it.\n\n* **Vue.js:**  Create a custom component or mixin to encapsulate the fingerprint generation logic and make it easily reusable across your application.  You can use the `mounted` lifecycle hook to trigger the fingerprint generation.\n\n\nRemember to handle asynchronous operations appropriately and manage state changes effectively using your chosen framework's mechanisms.\n\n\n### Customizing Fingerprint Components\n\nWhile Fingerprint2 provides a default set of components, advanced users might need to customize which components are included in the fingerprint.  While direct modification of the internal component generation isn't officially supported, you could achieve a level of customization by creating a wrapper function that pre-processes or filters the components before using `visitorId`.  However, this approach requires a deep understanding of the library's internals and carries the risk of breaking functionality with future updates.  Always exercise caution when modifying core library behavior.\n\n\n### Performance Optimization\n\nFingerprint2 is designed to be lightweight, but its performance can still be affected by factors like the number of components included and the browser's capabilities.  To optimize performance:\n\n* **Minimize Components:** Disable unnecessary components using the options parameter (e.g., `canvas: false`).\n* **Asynchronous Processing:** Always ensure that fingerprint generation is performed asynchronously to avoid blocking the main thread.\n* **Caching:** If appropriate for your application, consider caching the fingerprint to reduce the number of times it needs to be generated.  However, remember to account for the possibility of the fingerprint changing over time.\n\n\n### Security Considerations\n\n* **Privacy:**  Be mindful of privacy implications.  Always inform users about the use of fingerprinting technology and comply with relevant data privacy regulations (e.g., GDPR, CCPA).  Consider alternatives whenever possible and prioritize user privacy.\n* **Spoofing:**  Understand that browser fingerprinting is not foolproof.  Users can employ techniques to modify their browser configurations to alter their fingerprint.\n* **Storage:**  If you store fingerprints, secure them appropriately using encryption and access controls.\n* **Ethical Use:**  Use Fingerprint2 responsibly and ethically.  Avoid using it for tracking users without their explicit consent or for malicious purposes.\n\nRemember that fingerprint data is pseudonymous, not anonymous.  It can still be potentially linked to individuals under specific circumstances.  Always prioritize responsible data handling.\n\n\n## Troubleshooting\n\n### Common Errors and Solutions\n\n* **`Fingerprint2 is not defined`:** This error typically occurs when the library is not correctly included in your project.  Double-check that the script tag (for CDN inclusion) or import statement (for npm) is correct and placed in the appropriate location in your code.\n\n* **Callback functions not being executed:**  This can be due to incorrect usage of the `get()` method or asynchronous issues.  Ensure that you are providing valid callback functions and handling the asynchronous nature of the `get()` method appropriately (e.g., using promises or async/await).\n\n* **Empty or unexpected fingerprint:**  An empty or unexpected fingerprint might indicate issues with browser compatibility or that components are being blocked by browser settings or extensions. Check browser developer console for errors. Review the components array in the results to identify which components are missing or have unexpected values.\n\n\n* **Errors related to specific components (e.g., canvas, plugins):** These errors often indicate that the browser is blocking access to certain features. Check browser settings and extensions to see if they are interfering with the fingerprinting process.  Consider disabling optional components in `options` to see if a specific component is causing the issue.\n\n### Debugging Tips\n\n* **Console Logging:**  Use `console.log()` to inspect the values of variables, the `result` object returned by `get()`, and the `error` object passed to the error callback.\n\n* **Network Inspection:**  Inspect network requests in your browser's developer tools to ensure that the Fingerprint2 library is loading correctly.\n\n* **Component Analysis:** Pay close attention to the `components` array returned by `get()`. It will provide detailed information about each component of the fingerprint and help pinpoint missing or incorrect data.  This can help diagnose issues related to specific browser features.\n\n* **Browser Developer Tools:** The browser's developer tools (usually accessed by pressing F12) are invaluable for debugging JavaScript code.  Look for errors in the console, check the network tab to verify script loading, and use the debugger to step through your code.\n\n* **Simplified Test Cases:** Create a minimal, reproducible example to isolate the problem.  Start with a very basic integration, then gradually add more complexity until the error appears.\n\n\n### Browser-Specific Issues\n\nDifferent browsers may have varying levels of support for different fingerprinting techniques.  Older browsers or browsers with enhanced privacy settings might restrict access to certain browser features used by Fingerprint2.  Thorough testing across your target browsers is crucial.  Examine the `components` array in the results to identify browser-specific inconsistencies.\n\n### Performance Bottlenecks\n\nPerformance issues are rare with Fingerprint2 due to its lightweight nature, but can occur if you're generating fingerprints very frequently or if you're using a large number of components.  Consider optimizing component usage, caching fingerprints where appropriate, and ensuring asynchronous processing to mitigate performance bottlenecks. Profiling tools can assist in identifying specific performance hotspots in your code.\n\n\n### Community Support Resources\n\nFor assistance beyond this manual, consult the following resources:\n\n* **Project's Issue Tracker (if available):** Check for existing issues related to your problem.  If you can't find a solution, report a new issue, providing detailed information about the problem, your environment, and steps to reproduce it.\n* **Online Forums and Communities:** Search relevant online forums or communities for discussions related to Fingerprint2 or browser fingerprinting in general.\n* **Direct Contact (if applicable):** If the project maintains a contact address or support channel, you can try reaching out to the maintainers directly for assistance.  However, note that direct support might not always be available for open-source projects.\n\nRemember to provide as much relevant information as possible when seeking help, including your browser, operating system, Fingerprint2 version, and code snippets.  This will greatly increase the chances of receiving prompt and effective assistance.\n\n\n## Contributing\n\nWe welcome contributions to Fingerprint2!  Whether it's bug fixes, new features, or improved documentation, your help is valuable.  Please follow these guidelines to ensure a smooth contribution process.\n\n### Setting up the development environment\n\n1. **Clone the repository:** Start by cloning the Fingerprint2 repository to your local machine using Git:\n\n   ```bash\n   git clone <repository_url>\n   ```\n\n2. **Install dependencies:** Navigate to the cloned repository's directory and install the project's dependencies using npm:\n\n   ```bash\n   npm install\n   ```\n\n3. **Run the development server (if applicable):**  Some projects might include a development server for testing purposes. Refer to the project's `README` file for instructions on starting the development server.\n\n\n### Code style guide\n\nAdhere to the existing code style used in the project.  Consistency in code style improves readability and maintainability.  If a style guide is not explicitly defined, follow common JavaScript best practices and strive for clean, well-documented code.\n\n\n### Testing\n\nBefore submitting any code changes, ensure that they are thoroughly tested.  The project likely includes unit tests or integration tests.  Run the existing tests to establish a baseline and then add new tests for your changes to verify correct functionality and prevent regressions.  Follow any instructions provided in the project's `README` or documentation on running the test suite.\n\n\n### Submitting pull requests\n\n1. **Create a branch:** Create a new branch for your changes from the `main` or `develop` branch:\n\n   ```bash\n   git checkout -b <your_branch_name>\n   ```\n\n2. **Make your changes:** Implement your changes, ensuring they adhere to the code style guide and include comprehensive tests.\n\n3. **Commit your changes:** Commit your changes with clear and concise commit messages:\n\n   ```bash\n   git add .\n   git commit -m \"Your descriptive commit message\"\n   ```\n\n4. **Push your branch:** Push your branch to the remote repository:\n\n   ```bash\n   git push origin <your_branch_name>\n   ```\n\n5. **Create a pull request:** Create a pull request on the project's platform (e.g., GitHub, GitLab). Provide a detailed description of your changes and address any feedback provided by reviewers.\n\n6. **Address feedback:**  Respond to any comments or requests for changes from the reviewers.  Make necessary modifications and push the updates to your branch.\n\n\n### Reporting issues\n\nIf you encounter any bugs or have suggestions for improvements, please report them using the project's issue tracker.  When reporting an issue, provide the following information:\n\n* **Clear and concise title:** Summarize the issue in the title.\n\n* **Detailed description:** Describe the problem thoroughly, including steps to reproduce it, expected behavior, actual behavior, and any relevant error messages.\n\n* **Environment details:** Specify your operating system, browser, and versions of Fingerprint2 and any other relevant libraries.\n\n* **Code snippets:** Include relevant code snippets to help illustrate the problem.\n\n* **Screenshots or screen recordings (if applicable):**  Visual aids can be helpful in explaining complex issues.\n\nBy following these guidelines, you can contribute effectively to the improvement and maintenance of Fingerprint2.  Thank you for your contributions!\n\n\n## License\n\n### License Information\n\nFingerprint2 is licensed under the [Insert License Name Here, e.g., MIT License].  This means that you are free to use, modify, and distribute the software, subject to the terms and conditions specified in the full license text.  You can find the complete license agreement in the [Location of License File, e.g., `LICENSE` file] located in the root directory of this project's repository.  Please review the license carefully before using or distributing Fingerprint2.  By using Fingerprint2, you agree to the terms and conditions of the license.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is Fingerprint2?\n\nFingerprint2 is a JavaScript library that generates a unique \"fingerprint\" for a web browser.  This fingerprint is a hash composed of various browser characteristics and settings, aiming to create a pseudonymous identifier for a user's browsing environment.  It's crucial to understand that Fingerprint2 does *not* directly identify individuals; instead, it identifies the specific configuration of the browser and system being used. This can be useful for various applications, but it's important to be mindful of privacy implications and comply with relevant regulations.  The fingerprint is designed to be relatively stable over time, barring significant changes to the user's browser or system.  However, it is still not guaranteed to be entirely permanent.\n\n### Why use Fingerprint2?\n\nFingerprint2 can be a valuable tool in situations where you need to identify and track browser instances, but direct user identification is undesirable or impossible (e.g., due to privacy concerns or the lack of user logins).  Common use cases include:\n\n* **Analytics:**  Tracking unique visitors to a website without relying on cookies, which can be blocked or cleared by users.\n* **Fraud Detection:** Identifying potentially fraudulent activity based on unusual browser configurations.\n* **Session Management:** Maintaining user sessions in environments where traditional cookies might be less reliable.\n* **Debugging and Testing:** Identifying and distinguishing between multiple browser instances during development and testing.\n\nIt is paramount to use Fingerprint2 responsibly and ethically, always respecting user privacy and complying with relevant data protection regulations. Consider alternatives and prioritize user privacy whenever possible.\n\n### Key Features and Benefits\n\n* **Lightweight and Efficient:** Fingerprint2 is designed to be small and performant, minimizing the impact on website load times.\n* **Cross-Browser Compatibility:** It supports a wide range of modern browsers.\n* **Flexible and Customizable:**  While providing a default fingerprint, it allows for some customization to focus on specific browser aspects.\n* **Pseudonymous Identification:**  Provides a unique identifier without revealing personally identifiable information directly.\n* **Simplicity:**  The API is straightforward and easy to integrate into existing projects.\n\n### Browser Compatibility\n\nFingerprint2 aims for broad compatibility, but the accuracy and completeness of the fingerprint might vary slightly across different browsers and versions.  While it generally works well with modern browsers such as Chrome, Firefox, Safari, and Edge, support for older or less common browsers might be limited.  It's recommended to test thoroughly in your target browsers to ensure the desired level of accuracy and reliability.  Specific compatibility details may be found in the project's release notes and issue tracker.  Note that continuous evolution of browsers may affect the long-term stability of the fingerprint generated.\n\n\n## Installation and Setup\n\n### Installing Fingerprint2 via npm\n\nThe recommended way to install Fingerprint2 is using npm (Node Package Manager).  Open your terminal or command prompt and navigate to your project's directory. Then, execute the following command:\n\n```bash\nnpm install fingerprint2\n```\n\nThis will download and install Fingerprint2 into your project's `node_modules` directory.  You can then import it into your JavaScript code as described in the \"Including Fingerprint2 in your project\" section.\n\n\n### Installing Fingerprint2 via CDN\n\nFor quick prototyping or projects where npm is not suitable, you can include Fingerprint2 via a CDN (Content Delivery Network).  A popular option is jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/fingerprint2\"></script>\n```\n\nPlace this `<script>` tag within the `<head>` section of your HTML file.  This will load Fingerprint2 directly into your browser.  Ensure that this line is placed *before* any code that attempts to use the Fingerprint2 library.\n\n\n### Including Fingerprint2 in your project\n\nAfter installing Fingerprint2 (either via npm or CDN), you need to include it in your JavaScript code.\n\n**Using npm:**\n\n```javascript\nimport Fingerprint2 from 'fingerprint2';\n// or, if using CommonJS\nconst Fingerprint2 = require('fingerprint2');\n```\n\n**Using CDN:**  The library will be globally available as `Fingerprint2`.  No additional import is needed.\n\n### Basic Usage Example\n\nThe following example demonstrates the basic usage of Fingerprint2 to generate a browser fingerprint.  Remember to handle potential errors appropriately in a production environment.\n\n```javascript\nimport Fingerprint2 from 'fingerprint2';\n\nconst options = {\n  canvas: true, // Enable canvas fingerprinting (optional, but recommended)\n  ie_activex: true //Enable IE ActiveX fingerprinting (optional)\n};\n\n\nconst fp = new Fingerprint2(options);\nfp.get(function(result){\n  console.log(result); //The generated fingerprint as a string.\n  //  result.visitorId will be the generated unique hash.  Avoid relying on visitorId alone for tracking, as it may not always be available.\n  //  result.components is an array of component values, use this for debugging or analysis.\n}, function(error){\n  console.error(\"Fingerprint2 failed:\", error);\n});\n```\n\nThis code creates a new Fingerprint2 instance, optionally specifying settings, and then calls the `get()` method. The `get()` method takes two callback functions: one for successful fingerprint generation and one for handling errors.  The generated fingerprint (a string) is then logged to the console.  Remember that the fingerprint should be treated as pseudonymous data and handled responsibly.  The `visitorId` property provides a concise hash that can be used as identifier but it's crucial to understand that this is not guaranteed to be perfectly unique across different instances of browsers with identical configurations.\n\n\n## API Reference\n\n### getFingerprint()\n\nThe core function of Fingerprint2 is `get()`, which asynchronously generates the browser fingerprint.  It takes two callback functions as arguments: a success callback and an error callback.\n\n**Signature:**\n\n```javascript\nget(successCallback, errorCallback, options)\n```\n\n* **`successCallback(result)`:** A function executed upon successful fingerprint generation.  The `result` object contains the following properties:\n\n    * `visitorId`: A string representing the generated unique hash of the fingerprint (pseudonymous identifier).  *Note:  Do not rely solely on this ID for tracking, as it's not always guaranteed to be persistently unique.*\n    * `components`: An array of objects, each representing a component of the fingerprint (e.g., user agent, screen resolution, plugins). Useful for debugging and detailed analysis.\n\n* **`errorCallback(error)`:** A function executed if an error occurs during fingerprint generation. The `error` parameter contains details about the error.\n\n* **`options` (optional):** An object that allows customization of the fingerprinting process (see \"Options and Customization\" section).\n\n\n### Options and Customization\n\nThe `options` parameter passed to the `get()` method allows for customization of the fingerprint generation process.  The following options are available:\n\n* **`canvas` (boolean, default: `true`):** Enables or disables canvas fingerprinting.  Canvas fingerprinting can provide a more robust fingerprint but may have higher privacy implications.  Set to `false` to disable it.\n\n* **`ie_activex` (boolean, default: `true`):** Enables or disables ActiveX fingerprinting for Internet Explorer.  This is only relevant for Internet Explorer and is generally less reliable.  Set to `false` to disable it.\n\n* **`screen_resolution` (boolean, default: `true`):** Enables or disables screen resolution as a component of the fingerprint.\n\n\n  Add other options as needed based on the Fingerprint2 library version.  Check the library documentation for the most up-to-date list of available options.\n\n\n### Event Handling\n\nFingerprint2 primarily uses callbacks for handling success and error events.  There are no dedicated events beyond these callbacks.\n\n\n### Error Handling\n\nThe `errorCallback` function passed to the `get()` method is crucial for handling potential errors during fingerprint generation.  Common error causes include browser incompatibilities or issues accessing certain browser features.  Robust error handling is essential for a production-ready implementation.  The `error` object passed to the `errorCallback` usually provides information about the type and cause of the error.\n\n\n### Asynchronous Operations\n\nThe `get()` method is asynchronous.  This means that it does not block the execution of other code while generating the fingerprint.  The `successCallback` and `errorCallback` functions are executed once the fingerprint generation is complete, either successfully or with an error.  It's crucial to understand this asynchronous nature when integrating Fingerprint2 into your application to avoid race conditions or unexpected behavior.  Consider using promises or async/await for easier asynchronous flow management, if your environment supports these features.  The asynchronous nature of the function ensures it doesn't freeze the browser while creating the fingerprint.\n\n\n## Advanced Usage\n\n### Component-based Integration\n\nWhile the basic example shows a simple integration,  more complex applications might benefit from integrating Fingerprint2 within a component-based architecture.  This allows for better management of the fingerprint generation process and its integration with other parts of the application.\n\nFor example, in React, you might create a custom hook:\n\n```javascript\nimport { useState, useEffect } from 'react';\nimport Fingerprint2 from 'fingerprint2';\n\nconst useFingerprint = () => {\n  const [fingerprint, setFingerprint] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fp = new Fingerprint2();\n    fp.get((result) => {\n      setFingerprint(result.visitorId);\n    }, (err) => {\n      setError(err);\n    });\n  }, []);\n\n  return { fingerprint, error };\n};\n\nexport default useFingerprint;\n```\n\nThis hook handles the fingerprint generation and exposes the result and any errors through state variables.  Similar approaches can be used in other component-based frameworks like Angular or Vue.js.\n\n\n### Working with different frameworks (React, Angular, Vue)\n\nFingerprint2 is a plain JavaScript library and can be integrated into various frameworks.  The integration method depends on the framework's module system and component structure.\n\n* **React:**  Use a custom hook (as shown above) or integrate it directly into a component's lifecycle methods (e.g., `useEffect`).\n\n* **Angular:**  Use a service to handle fingerprint generation and inject it into components that require it.\n\n* **Vue.js:**  Create a custom component or mixin to encapsulate the fingerprint generation logic and make it easily reusable across your application.  You can use the `mounted` lifecycle hook to trigger the fingerprint generation.\n\n\nRemember to handle asynchronous operations appropriately and manage state changes effectively using your chosen framework's mechanisms.\n\n\n### Customizing Fingerprint Components\n\nWhile Fingerprint2 provides a default set of components, advanced users might need to customize which components are included in the fingerprint.  While direct modification of the internal component generation isn't officially supported, you could achieve a level of customization by creating a wrapper function that pre-processes or filters the components before using `visitorId`.  However, this approach requires a deep understanding of the library's internals and carries the risk of breaking functionality with future updates.  Always exercise caution when modifying core library behavior.\n\n\n### Performance Optimization\n\nFingerprint2 is designed to be lightweight, but its performance can still be affected by factors like the number of components included and the browser's capabilities.  To optimize performance:\n\n* **Minimize Components:** Disable unnecessary components using the options parameter (e.g., `canvas: false`).\n* **Asynchronous Processing:** Always ensure that fingerprint generation is performed asynchronously to avoid blocking the main thread.\n* **Caching:** If appropriate for your application, consider caching the fingerprint to reduce the number of times it needs to be generated.  However, remember to account for the possibility of the fingerprint changing over time.\n\n\n### Security Considerations\n\n* **Privacy:**  Be mindful of privacy implications.  Always inform users about the use of fingerprinting technology and comply with relevant data privacy regulations (e.g., GDPR, CCPA).  Consider alternatives whenever possible and prioritize user privacy.\n* **Spoofing:**  Understand that browser fingerprinting is not foolproof.  Users can employ techniques to modify their browser configurations to alter their fingerprint.\n* **Storage:**  If you store fingerprints, secure them appropriately using encryption and access controls.\n* **Ethical Use:**  Use Fingerprint2 responsibly and ethically.  Avoid using it for tracking users without their explicit consent or for malicious purposes.\n\nRemember that fingerprint data is pseudonymous, not anonymous.  It can still be potentially linked to individuals under specific circumstances.  Always prioritize responsible data handling.\n\n\n## Troubleshooting\n\n### Common Errors and Solutions\n\n* **`Fingerprint2 is not defined`:** This error typically occurs when the library is not correctly included in your project.  Double-check that the script tag (for CDN inclusion) or import statement (for npm) is correct and placed in the appropriate location in your code.\n\n* **Callback functions not being executed:**  This can be due to incorrect usage of the `get()` method or asynchronous issues.  Ensure that you are providing valid callback functions and handling the asynchronous nature of the `get()` method appropriately (e.g., using promises or async/await).\n\n* **Empty or unexpected fingerprint:**  An empty or unexpected fingerprint might indicate issues with browser compatibility or that components are being blocked by browser settings or extensions. Check browser developer console for errors. Review the components array in the results to identify which components are missing or have unexpected values.\n\n\n* **Errors related to specific components (e.g., canvas, plugins):** These errors often indicate that the browser is blocking access to certain features. Check browser settings and extensions to see if they are interfering with the fingerprinting process.  Consider disabling optional components in `options` to see if a specific component is causing the issue.\n\n### Debugging Tips\n\n* **Console Logging:**  Use `console.log()` to inspect the values of variables, the `result` object returned by `get()`, and the `error` object passed to the error callback.\n\n* **Network Inspection:**  Inspect network requests in your browser's developer tools to ensure that the Fingerprint2 library is loading correctly.\n\n* **Component Analysis:** Pay close attention to the `components` array returned by `get()`. It will provide detailed information about each component of the fingerprint and help pinpoint missing or incorrect data.  This can help diagnose issues related to specific browser features.\n\n* **Browser Developer Tools:** The browser's developer tools (usually accessed by pressing F12) are invaluable for debugging JavaScript code.  Look for errors in the console, check the network tab to verify script loading, and use the debugger to step through your code.\n\n* **Simplified Test Cases:** Create a minimal, reproducible example to isolate the problem.  Start with a very basic integration, then gradually add more complexity until the error appears.\n\n\n### Browser-Specific Issues\n\nDifferent browsers may have varying levels of support for different fingerprinting techniques.  Older browsers or browsers with enhanced privacy settings might restrict access to certain browser features used by Fingerprint2.  Thorough testing across your target browsers is crucial.  Examine the `components` array in the results to identify browser-specific inconsistencies.\n\n### Performance Bottlenecks\n\nPerformance issues are rare with Fingerprint2 due to its lightweight nature, but can occur if you're generating fingerprints very frequently or if you're using a large number of components.  Consider optimizing component usage, caching fingerprints where appropriate, and ensuring asynchronous processing to mitigate performance bottlenecks. Profiling tools can assist in identifying specific performance hotspots in your code.\n\n\n### Community Support Resources\n\nFor assistance beyond this manual, consult the following resources:\n\n* **Project's Issue Tracker (if available):** Check for existing issues related to your problem.  If you can't find a solution, report a new issue, providing detailed information about the problem, your environment, and steps to reproduce it.\n* **Online Forums and Communities:** Search relevant online forums or communities for discussions related to Fingerprint2 or browser fingerprinting in general.\n* **Direct Contact (if applicable):** If the project maintains a contact address or support channel, you can try reaching out to the maintainers directly for assistance.  However, note that direct support might not always be available for open-source projects.\n\nRemember to provide as much relevant information as possible when seeking help, including your browser, operating system, Fingerprint2 version, and code snippets.  This will greatly increase the chances of receiving prompt and effective assistance.\n\n\n## Contributing\n\nWe welcome contributions to Fingerprint2!  Whether it's bug fixes, new features, or improved documentation, your help is valuable.  Please follow these guidelines to ensure a smooth contribution process.\n\n### Setting up the development environment\n\n1. **Clone the repository:** Start by cloning the Fingerprint2 repository to your local machine using Git:\n\n   ```bash\n   git clone <repository_url>\n   ```\n\n2. **Install dependencies:** Navigate to the cloned repository's directory and install the project's dependencies using npm:\n\n   ```bash\n   npm install\n   ```\n\n3. **Run the development server (if applicable):**  Some projects might include a development server for testing purposes. Refer to the project's `README` file for instructions on starting the development server.\n\n\n### Code style guide\n\nAdhere to the existing code style used in the project.  Consistency in code style improves readability and maintainability.  If a style guide is not explicitly defined, follow common JavaScript best practices and strive for clean, well-documented code.\n\n\n### Testing\n\nBefore submitting any code changes, ensure that they are thoroughly tested.  The project likely includes unit tests or integration tests.  Run the existing tests to establish a baseline and then add new tests for your changes to verify correct functionality and prevent regressions.  Follow any instructions provided in the project's `README` or documentation on running the test suite.\n\n\n### Submitting pull requests\n\n1. **Create a branch:** Create a new branch for your changes from the `main` or `develop` branch:\n\n   ```bash\n   git checkout -b <your_branch_name>\n   ```\n\n2. **Make your changes:** Implement your changes, ensuring they adhere to the code style guide and include comprehensive tests.\n\n3. **Commit your changes:** Commit your changes with clear and concise commit messages:\n\n   ```bash\n   git add .\n   git commit -m \"Your descriptive commit message\"\n   ```\n\n4. **Push your branch:** Push your branch to the remote repository:\n\n   ```bash\n   git push origin <your_branch_name>\n   ```\n\n5. **Create a pull request:** Create a pull request on the project's platform (e.g., GitHub, GitLab). Provide a detailed description of your changes and address any feedback provided by reviewers.\n\n6. **Address feedback:**  Respond to any comments or requests for changes from the reviewers.  Make necessary modifications and push the updates to your branch.\n\n\n### Reporting issues\n\nIf you encounter any bugs or have suggestions for improvements, please report them using the project's issue tracker.  When reporting an issue, provide the following information:\n\n* **Clear and concise title:** Summarize the issue in the title.\n\n* **Detailed description:** Describe the problem thoroughly, including steps to reproduce it, expected behavior, actual behavior, and any relevant error messages.\n\n* **Environment details:** Specify your operating system, browser, and versions of Fingerprint2 and any other relevant libraries.\n\n* **Code snippets:** Include relevant code snippets to help illustrate the problem.\n\n* **Screenshots or screen recordings (if applicable):**  Visual aids can be helpful in explaining complex issues.\n\nBy following these guidelines, you can contribute effectively to the improvement and maintenance of Fingerprint2.  Thank you for your contributions!\n\n\n## License\n\n### License Information\n\nFingerprint2 is licensed under the [Insert License Name Here, e.g., MIT License].  This means that you are free to use, modify, and distribute the software, subject to the terms and conditions specified in the full license text.  You can find the complete license agreement in the [Location of License File, e.g., `LICENSE` file] located in the root directory of this project's repository.  Please review the license carefully before using or distributing Fingerprint2.  By using Fingerprint2, you agree to the terms and conditions of the license.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"fingerprint2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Fingerprint2 - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}