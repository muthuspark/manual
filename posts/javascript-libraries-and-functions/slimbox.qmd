---
title: "Slimbox - Documentation"
categories: [ "JavaScript Libraries and Functions" ]
---
## Introduction

### What is Slimbox?

Slimbox is a lightweight, highly customizable JavaScript lightbox script designed for displaying images and other content in a clean, unobtrusive overlay.  It's built to be easy to integrate into existing websites and requires minimal coding to implement. Slimbox focuses on simplicity and speed, providing a streamlined user experience without sacrificing functionality. It's ideal for showcasing photographs, product images, or any content you want to present in a larger, more focused view.

### Features and Benefits

* **Lightweight and fast:** Slimbox is designed for speed and efficiency, minimizing page load times and enhancing user experience. Its small file size contributes to quick loading.
* **Customizable:**  Easily adjust the look and feel of the lightbox using CSS.  Change colors, fonts, and dimensions to match your website's design.
* **Easy integration:** Slimbox integrates seamlessly into existing websites with minimal HTML and JavaScript code.
* **Cross-browser compatibility:**  Works consistently across a range of modern browsers.
* **Keyboard navigation:** Users can navigate through images using keyboard shortcuts.
* **Image resizing:** Automatically resizes images to fit within the lightbox while maintaining aspect ratio.
* **Supports multiple image galleries:**  Can handle multiple instances on a single page.
* **Simple API:** Offers a straightforward API for advanced customization and control.


### Browser Compatibility

Slimbox is designed to work on most modern browsers, including:

* Google Chrome (latest versions)
* Mozilla Firefox (latest versions)
* Safari (latest versions)
* Edge (latest versions)
* Opera (latest versions)

While older browsers may display the lightbox, full functionality and optimal visual appearance are not guaranteed.  It's recommended to test thoroughly across your target browsers.


### Getting Started: Installation and Setup

1. **Download:** Download the Slimbox files (typically `slimbox2.css` and `slimbox2.js`).

2. **Include CSS:** Add the `slimbox2.css` file to your website using a `<link>` tag in the `<head>` section of your HTML:

   ```html
   <link rel="stylesheet" type="text/css" href="path/to/slimbox2.css" />
   ```
   Replace `"path/to/"` with the actual path to your `slimbox2.css` file.


3. **Include JavaScript:** Add the `slimbox2.js` file to your website using a `<script>` tag, preferably just before the closing `</body>` tag:

   ```html
   <script type="text/javascript" src="path/to/slimbox2.js"></script>
   ```
   Replace `"path/to/"` with the actual path to your `slimbox2.js` file.

4. **Link Images:**  In your HTML, link your images to their larger versions using the `rel="lightbox"` attribute.  The `href` attribute should point to the larger image URL.  The `title` attribute (optional) will be used as the caption.  For example:

   ```html
   <a href="large_image.jpg" rel="lightbox" title="Image Caption"><img src="thumbnail_image.jpg" alt="Thumbnail" /></a>
   ```

5. **Initialization (Optional):** Slimbox generally initializes automatically. However, for advanced customization, you might need to call the `Slimbox.init()` function. Refer to the Slimbox documentation for details.


That's it! Now your images should open in the Slimbox lightbox when clicked. Remember to replace placeholder file paths with your actual file paths.


## Basic Usage

### Linking Images with Slimbox

The core of Slimbox functionality lies in how you link your images.  To make an image open in the Slimbox lightbox, you need to use the `rel="lightbox"` attribute within an `<a>` (anchor) tag. The `href` attribute of the anchor tag specifies the URL of the larger image to display in the lightbox.  The `title` attribute (optional) provides a caption for the image.


Here's the basic structure:

```html
<a href="path/to/large_image.jpg" rel="lightbox" title="Optional Image Caption">
  <img src="path/to/thumbnail_image.jpg" alt="Image description" />
</a>
```

Replace `"path/to/large_image.jpg"` with the URL of your large image and `"path/to/thumbnail_image.jpg"` with the URL of the smaller thumbnail image that the user will click.  The `alt` attribute provides alternative text for accessibility.


You can have multiple links on a single page, each opening its respective image in Slimbox.  Slimbox automatically handles navigation between images linked with `rel="lightbox"`.


### Customizing the Appearance

Slimbox's appearance is controlled primarily through CSS. You can modify the `slimbox2.css` file (or create a separate stylesheet that overrides its rules) to adjust colors, fonts, padding, and other visual aspects of the lightbox.

Here are some common CSS properties you might want to adjust:

* `.slimboxOverlay`: Styles the semi-transparent overlay that dims the background.
* `.slimboxWrap`: Styles the main container of the lightbox.
* `.slimboxImage`: Styles the displayed image within the lightbox.
* `.slimboxCaption`: Styles the image caption.
* `.slimboxClose`: Styles the close button.
* `.slimboxNav`: Styles the navigation arrows (previous/next).


For example, to change the background color of the overlay, you could add the following CSS rule:

```css
.slimboxOverlay {
  background-color: rgba(0, 0, 0, 0.8); /* Adjust opacity as needed */
}
```


Remember to maintain the overall structure of `slimbox2.css` to ensure the lightbox functions correctly.


### Opening Slimbox Programmatically

While Slimbox automatically opens when you click on a link with `rel="lightbox"`, you can also trigger it programmatically using JavaScript.  This allows for more advanced integration and control.


You can use the `Slimbox.open(array)` function, where `array` is an array containing the URLs of the images and their corresponding captions.

```javascript
var images = [
  ['path/to/image1.jpg', 'Caption for Image 1'],
  ['path/to/image2.jpg', 'Caption for Image 2'],
  ['path/to/image3.jpg', 'Caption for Image 3']
];

Slimbox.open(images, 0); // Opens the first image (index 0)
```

This opens the lightbox to the image specified by the index. If you only want to open a single image, provide an array with only one element.


### Closing Slimbox

Slimbox provides several ways to close the lightbox:

* **Clicking the close button:** The built-in close button (usually an "X") closes the lightbox.

* **Pressing the Escape key:**  Pressing the Escape key on the keyboard will close the lightbox.

* **Programmatically:**  You can close the lightbox programmatically using the `Slimbox.close()` function:

  ```javascript
  Slimbox.close();
  ```

This function will immediately close the lightbox regardless of the currently displayed image or any other conditions.


## Advanced Configuration

### Options Reference

While Slimbox offers a largely automatic setup,  it provides several options for fine-grained control over its behavior. These options are typically set using a JavaScript object passed to the `Slimbox.init()` function.  If you don't call `Slimbox.init()`, Slimbox uses default values.  Note that not all options may be directly configurable via CSS.


Here's a reference to some key options (refer to the full Slimbox documentation for a comprehensive list):


* `overlayOpacity`:  (Number, default: 0.8)  Controls the opacity of the overlay.  Values range from 0 (transparent) to 1 (fully opaque).

* `overlayFadeDuration`: (Number, default: 200)  Controls the duration (in milliseconds) of the overlay fade-in/fade-out animation.

* `resizeDuration`: (Number, default: 200)  Controls the duration (in milliseconds) of the image resizing animation.

* `closeOnOverlayClick`: (Boolean, default: true)  Determines whether clicking the overlay closes the lightbox.

* `loop`: (Boolean, default: false)  Determines whether navigation loops back to the beginning/end when reaching the first/last image.


To set these options, call `Slimbox.init()` like this:

```javascript
Slimbox.init({
  overlayOpacity: 0.7,
  overlayFadeDuration: 300,
  resizeDuration: 0, // Disable resize animation
  closeOnOverlayClick: false,
  loop: true
});
```

Remember to call `Slimbox.init()` *before* any images are linked with `rel="lightbox"`.



### Callbacks and Events

Slimbox offers several callbacks (functions) that are triggered at various points during its lifecycle.  These callbacks allow you to perform custom actions, such as adding analytics tracking, performing specific animations, or modifying the lightbox's behavior dynamically.


Here are a few example callbacks:


* `onOpen`:  Called when the lightbox opens.
* `onClose`: Called when the lightbox closes.
* `onImageChange`: Called when the displayed image changes (e.g., during navigation).
* `onImageLoad`: Called when a new image has finished loading.

To use callbacks, you'd pass them as part of the options object to `Slimbox.init()`:


```javascript
Slimbox.init({
  onOpen: function() {
    console.log('Slimbox opened!');
    // Add your custom code here
  },
  onClose: function() {
    console.log('Slimbox closed!');
    // Add your custom code here
  }
});
```

Consult the Slimbox documentation for the exact parameters passed to each callback function.



### Using Custom Templates

Slimbox's HTML structure can be customized by replacing the default templates.  This gives you complete control over the lightbox's layout and content.  This usually involves creating your own HTML fragments and specifying them using the `template` option in the `Slimbox.init()` function.  This is an advanced technique, and you'll need a strong understanding of HTML and how Slimbox's internal structure works.  The details on how to create and implement custom templates are usually described in the advanced usage section of the Slimbox documentation.

### Integrating with Other Libraries

Slimbox is generally designed to be compatible with other JavaScript libraries. However, you should be aware of potential conflicts.  If you're using other libraries that manipulate the DOM (Document Object Model) in similar ways, ensure there are no overlapping events or conflicting CSS rules.  Thorough testing is essential to prevent unexpected behavior.  If you encounter conflicts, carefully review the documentation for both Slimbox and the other libraries to identify potential solutions, such as adjusting event priorities or using namespaces to prevent naming collisions.


## Troubleshooting

### Common Issues and Solutions

This section addresses frequently encountered problems when using Slimbox.

* **Slimbox doesn't open:**
    * **Problem:** Clicking on image links doesn't open the lightbox.
    * **Solutions:**
        * Verify that you've correctly included both `slimbox2.css` and `slimbox2.js` in your HTML. Check the file paths.
        * Ensure that your image links use the `rel="lightbox"` attribute correctly.  Double-check the `href` attribute for accurate URLs.
        * Inspect your browser's developer console (usually by pressing F12) for JavaScript errors.
        * Make sure there are no JavaScript conflicts with other libraries on your page.
        * Ensure that your images actually exist at the specified URLs.

* **Images don't display correctly:**
    * **Problem:** Images are blurry, distorted, or don't load within the lightbox.
    * **Solutions:**
        * Verify that the image URLs in your `href` attributes are correct and point to valid, accessible images.
        * Check the image file formats (JPEG, PNG, GIF, etc.) are supported.
        * Inspect the `slimbox2.css` file to ensure image display settings (sizing, scaling) aren't causing issues.  Adjust CSS rules if necessary.
        * Check the image dimensions; extremely large images might require adjustment in the Slimbox configuration or pre-processing.

* **Navigation doesn't work:**
    * **Problem:** The previous/next buttons don't work for navigating through multiple images.
    * **Solutions:**
        * Check that all your image links share the same `rel="lightbox"` attribute. Slimbox groups images based on this attribute.
        * Ensure that the images linked with `rel="lightbox"` are accessible to the script.
        * Inspect the console for any JavaScript errors related to Slimbox navigation.

* **CSS conflicts:**
    * **Problem:**  Slimbox's styling clashes with your website's CSS, causing visual inconsistencies.
    * **Solutions:**
        * Use browser developer tools to inspect the CSS styles applied to the Slimbox elements.  Identify conflicting styles and adjust them accordingly, possibly using more specific CSS selectors.
        * Make sure your custom CSS is applied *after* the `slimbox2.css` stylesheet, so that it can override specific styles if needed.



### Debugging Techniques

* **Browser Developer Tools:** Use your browser's built-in developer tools (usually accessed by pressing F12). These tools allow you to inspect the HTML, CSS, and JavaScript of your page, check for errors in the console, and step through code execution (debugging).

* **JavaScript Console:** The browser's JavaScript console displays errors and warnings.  Examine these messages carefully to identify the source of problems.

* **Network Tab:** Use the Network tab in the developer tools to monitor network requests. This helps you see if images are loading correctly and to detect any loading errors.

* **Simplify:**  If you're experiencing difficulties, try creating a minimal HTML file with just the essential Slimbox code and one image. This helps isolate potential conflicts.

* **Test Incrementally:** Add functionality and features step-by-step. This makes it easier to pinpoint the source of any introduced issues.


### Error Messages and Their Meanings

Slimbox might not always produce explicit error messages.  Most errors are indirectly reflected through incorrect display or non-functional elements. The JavaScript console in your browser is your primary tool for detecting and understanding issues.


Common indicators (look for these messages in the console):

* **`Uncaught TypeError`, `Uncaught ReferenceError`:** These often indicate incorrect use of Slimbox functions or variables, or issues with the inclusion of the Slimbox scripts.  Check for typos and verify the file paths.

* **`404 Not Found` (Network Tab):**  This message from the Network tab indicates that one or more images couldn't be found at the specified URL. Verify that the paths to your images are correct.

* **`SyntaxError`:** Indicates a problem with your JavaScript code, perhaps in the callbacks or the options object passed to `Slimbox.init()`.  Carefully check the syntax.

* **Blank Lightbox or Missing Elements:**  If the lightbox appears but is empty or missing key elements (like the image or close button), this frequently points to an issue with the HTML structure, the image URLs, or incorrect CSS styling.  Examine your HTML, CSS, and the Slimbox initialization.


If you encounter an unfamiliar error message, search online for its meaning and relevance to Slimbox or JavaScript in general.  Providing relevant code snippets and the error message when seeking assistance will help others understand and resolve your problem more effectively.


## Examples

### Basic Image Gallery

This example demonstrates a simple image gallery using Slimbox.  Each image link opens the corresponding larger image in the lightbox.

```html
<!DOCTYPE html>
<html>
<head>
<title>Slimbox Basic Gallery</title>
<link rel="stylesheet" type="text/css" href="slimbox2.css" />
<script type="text/javascript" src="slimbox2.js"></script>
</head>
<body>

<h1>Basic Image Gallery</h1>

<a href="images/large_image1.jpg" rel="lightbox"><img src="images/thumbnail_image1.jpg" alt="Image 1" /></a>
<a href="images/large_image2.jpg" rel="lightbox"><img src="images/thumbnail_image2.jpg" alt="Image 2" /></a>
<a href="images/large_image3.jpg" rel="lightbox"><img src="images/thumbnail_image3.jpg" alt="Image 3" /></a>

</body>
</html>
```

Remember to replace `"images/large_image1.jpg"`, etc., with the actual paths to your large images, and similarly for the thumbnail images.  Ensure the images exist in the specified locations.


### Gallery with Captions

This example adds captions to each image in the lightbox. The `title` attribute within the `<a>` tag provides the caption text.

```html
<!DOCTYPE html>
<html>
<head>
<title>Slimbox Gallery with Captions</title>
<link rel="stylesheet" type="text/css" href="slimbox2.css" />
<script type="text/javascript" src="slimbox2.js"></script>
</head>
<body>

<h1>Image Gallery with Captions</h1>

<a href="images/large_image1.jpg" rel="lightbox" title="A beautiful sunset."><img src="images/thumbnail_image1.jpg" alt="Image 1" /></a>
<a href="images/large_image2.jpg" rel="lightbox" title="A majestic mountain range."><img src="images/thumbnail_image2.jpg" alt="Image 2" /></a>
<a href="images/large_image3.jpg" rel="lightbox" title="A vibrant city at night."><img src="images/thumbnail_image3.jpg" alt="Image 3" /></a>

</body>
</html>
```


### Gallery with Thumbnails

This example uses thumbnails to represent the images. Clicking a thumbnail opens the larger image in the lightbox.

```html
<!DOCTYPE html>
<html>
<head>
<title>Slimbox Gallery with Thumbnails</title>
<link rel="stylesheet" type="text/css" href="slimbox2.css" />
<script type="text/javascript" src="slimbox2.js"></script>
</head>
<body>

<h1>Image Gallery with Thumbnails</h1>

<div style="display: flex;">
<a href="images/large_image1.jpg" rel="lightbox"><img src="images/thumbnail_image1.jpg" alt="Image 1" style="width: 100px;"/></a>
<a href="images/large_image2.jpg" rel="lightbox"><img src="images/thumbnail_image2.jpg" alt="Image 2" style="width: 100px;"/></a>
<a href="images/large_image3.jpg" rel="lightbox"><img src="images/thumbnail_image3.jpg" alt="Image 3" style="width: 100px;"/></a>
</div>

</body>
</html>
```

Adjust the `style="width: 100px;"` attribute to control the size of your thumbnails.


### Using Slimbox with AJAX

This example requires a backend to serve image data.  The general principle is to fetch image URLs via AJAX and then use `Slimbox.open()` to display them.

```javascript
$.ajax({
  url: 'get_images.php', // Your server-side script
  dataType: 'json',
  success: function(data) {
    var images = [];
    $.each(data, function(index, item) {
      images.push([item.large_url, item.caption]); // Assumes 'get_images.php' returns an array of objects with large_url and caption properties
    });
    Slimbox.open(images, 0); // Opens the first image
  }
});
```

This code assumes you have a server-side script (`get_images.php` in this example) that returns JSON data containing the large image URLs and captions. You'll need a JavaScript library like jQuery to handle the AJAX request.  Remember to adapt this to your specific backend technology and data format.  Error handling (e.g., for failed AJAX requests) should also be added.


## API Reference

### Slimbox Object

The core of Slimbox's functionality is accessed through the `Slimbox` object.  This object provides methods for controlling the lightbox and handling events.  It's globally available after including `slimbox2.js`.


### Methods

* **`Slimbox.open(imgArray, index)`:** Opens the Slimbox lightbox.
    * `imgArray`: An array of arrays, where each inner array contains the URL of a large image and an optional caption: `[['image1.jpg', 'Caption 1'], ['image2.jpg', 'Caption 2']]`.
    * `index`:  (Optional) The index of the image to display initially (default is 0, the first image).

* **`Slimbox.close()`:** Closes the Slimbox lightbox.

* **`Slimbox.init(options)`:** Initializes Slimbox with custom options (see "Options" section below).  While not strictly required for basic usage, it allows for advanced configuration.

* **`Slimbox.getCaption(index)`:** Returns the caption for the image at the specified index within the currently open gallery.

* **`Slimbox.getNext(index)`:** Returns the index of the next image.  Handles looping if the `loop` option is enabled.

* **`Slimbox.getPrev(index)`:** Returns the index of the previous image. Handles looping if the `loop` option is enabled.



### Events

Slimbox triggers several events that you can listen for using JavaScript.  These events allow for custom actions at specific points in the lightbox's lifecycle.  Direct event listening is typically achieved by attaching listeners to the `Slimbox` object. The exact implementation will depend on your JavaScript framework or approach (e.g., using `addEventListener` directly or integrating within a framework's event system).


* **`onOpen`:** Fired when the lightbox opens.

* **`onClose`:** Fired when the lightbox closes.

* **`onImageLoad`:** Fired when an image finishes loading.

* **`onImageChange`:** Fired when the displayed image changes.


Example (using `addEventListener` -  adapt as needed for your framework):

```javascript
Slimbox.addEventListener('onOpen', function() {
  console.log('Slimbox opened!');
});

Slimbox.addEventListener('onClose', function() {
  console.log('Slimbox closed!');
});
```


The specific event listeners available and their parameters may vary depending on the Slimbox version. Refer to the complete Slimbox documentation for the most current details.


### Options

The `Slimbox.init(options)` method accepts an object containing various options to customize Slimbox's behavior.  These options are set *before* any images are opened using `Slimbox.open()`.


Here are some key options:

* `overlayOpacity` (Number, default: 0.8): Opacity of the overlay (0.0 to 1.0).
* `overlayFadeDuration` (Number, default: 200): Fade-in/out duration for the overlay (milliseconds).
* `resizeDuration` (Number, default: 200): Image resize animation duration (milliseconds).
* `closeOnOverlayClick` (Boolean, default: true): Close lightbox on overlay click.
* `loop` (Boolean, default: false): Enable looping through images.
* `onOpen`, `onClose`, `onImageLoad`, `onImageChange`: Callback functions for events (see "Events" section).
* `template`: (Advanced) Allows customizing the HTML structure of the lightbox (consult the detailed documentation for this option).


Example usage:

```javascript
Slimbox.init({
  overlayOpacity: 0.7,
  resizeDuration: 0, // Disable resize animation
  loop: true,
  onOpen: function() { /* ... */ },
  onClose: function() { /* ... */ }
});
```

Note:  The available options and their default values might vary slightly depending on the specific Slimbox version.  Always consult the latest documentation for the most accurate information.

