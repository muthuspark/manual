{"title":"Passive Localization - Documentation","markdown":{"yaml":{"title":"Passive Localization - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Passive Localization?","containsRefs":false,"markdown":"\n\n\n\nPassive localization refers to the process of determining the location of a sound source (or emitter) using only sensor measurements of the emitted signal, without actively transmitting any signals to the source. This contrasts with active localization techniques, which involve sending signals and measuring the time of flight or other properties of the reflected or received signals.  Passive localization typically relies on analyzing the time differences of arrival (TDOA), differences in received signal strength (RSS), or a combination of both, at multiple spatially separated sensors. The algorithms then use these differences to estimate the source's position.\n\n\n### Applications of Passive Localization\n\nPassive localization finds applications in a wide range of fields, including:\n\n* **Surveillance and Security:** Tracking the location of intruders, monitoring suspicious activities, locating hidden devices.\n* **Robotics and Automation:** Enabling robots to navigate and interact with their environment based on the sounds they perceive.\n* **Wildlife Monitoring:** Tracking animals based on their vocalizations or other sounds they produce.\n* **Acoustic Monitoring:** Monitoring industrial equipment for anomalies or determining the location of noise pollution sources.\n* **Emergency Response:** Locating the source of distress signals during search and rescue operations.\n* **Audio/Video Conferencing:** Improving the sound source identification and spatial audio processing in virtual and remote meeting environments.\n\n\n### Advantages and Disadvantages of Passive Localization\n\n**Advantages:**\n\n* **Covert Operation:**  It doesn't require emitting any signals, making it ideal for situations where stealth is crucial.\n* **Lower Cost:** It generally requires less expensive and complex hardware compared to active localization systems.\n* **Suitable for Harsh Environments:**  Can operate effectively in challenging environments where active techniques might be unreliable or difficult to implement.\n\n\n**Disadvantages:**\n\n* **Lower Accuracy:** Generally less accurate than active localization techniques, particularly in noisy environments or when the number of sensors is limited.\n* **Computational Complexity:** The algorithms involved in processing the sensor data and estimating the source location can be computationally intensive.\n* **Sensitivity to Noise and Multipath Propagation:** Performance can be severely degraded by environmental noise, signal reflections, and other propagation effects.\n* **Ambiguity Resolution:**  Algorithms may struggle to resolve ambiguities in the source location, especially in complex scenarios.\n\n\n### Overview of the Manual\n\nThis developer manual provides a comprehensive guide to implementing and utilizing passive localization algorithms. It covers the mathematical foundations of various passive localization techniques, including TDOA and RSS based methods.  Furthermore, it will guide you through the practical aspects of sensor selection, data acquisition, signal processing, algorithm implementation, and performance evaluation.  The manual also includes example code snippets and detailed explanations to facilitate the development and integration of passive localization systems.  Specific sections will cover algorithm details, implementation considerations, troubleshooting, and optimization strategies.\n\n\n## Mathematical Foundations\n\n### Triangulation Techniques\n\nTriangulation forms the basis of many passive localization methods.  It involves determining the location of a point by measuring its angles or distances from known points (sensors).  In the context of passive localization, these measurements are derived from the received signals.  Simple triangulation uses distance measurements from at least three sensors to form circles around each sensor with radii equal to the measured distances.  The intersection of these circles represents the estimated location of the sound source.  However, this approach is sensitive to measurement errors. More robust techniques account for measurement uncertainties using statistical methods to estimate the most likely location of the source.\n\n### Time Difference of Arrival (TDOA)\n\nTDOA methods leverage the differences in the arrival times of a signal at multiple sensors.  Assuming a constant signal propagation speed (e.g., the speed of sound), the difference in arrival times between pairs of sensors can be translated into differences in distances to the source.  Hyperbolas are then constructed based on these TDOA measurements.  Each hyperbola represents all possible source locations with a constant TDOA between a sensor pair.  The intersection of hyperbolas from multiple sensor pairs provides an estimate of the source location.  Algorithms like hyperbolic positioning and least-squares estimation are commonly employed for TDOA-based localization.\n\n\n### Angle of Arrival (AOA)\n\nAOA methods estimate the direction of arrival (DOA) of the signal at each sensor using techniques like beamforming or MUSIC (Multiple Signal Classification).  Knowing the sensor positions and the DOAs, the source location can be calculated through the intersection of the lines of bearing from each sensor.  While conceptually simple, AOA methods are susceptible to errors caused by multipath propagation and noise.  Furthermore, accurate DOA estimation requires sophisticated signal processing techniques and directional microphones or antenna arrays.\n\n### Received Signal Strength (RSS)\n\nRSS-based localization utilizes the received signal strength at each sensor to estimate the source location.  The received power typically decreases with distance, following an inverse-square law (in free space).  By measuring the RSS at multiple sensors and modeling the signal attenuation, it's possible to estimate the distances from the sensors to the source.  Similar to TDOA, this can lead to a triangulation problem where circles are drawn around the sensors, and their intersection points represent potential source locations. However, RSS methods are highly susceptible to environmental factors like multipath propagation, shadowing, and variations in the sensor sensitivity.\n\n\n### Hybrid Methods\n\nHybrid methods combine TDOA, AOA, and RSS measurements to improve the accuracy and robustness of localization.  This approach leverages the strengths of each individual method while mitigating their weaknesses.  For instance, combining TDOA and AOA can provide more accurate localization than either method alone, as TDOA provides range information and AOA provides bearing information.  The combination of these measurements allows for a more constrained estimation problem.\n\n### Error Analysis and Uncertainty\n\nAccurate error analysis is crucial for understanding the limitations and reliability of any passive localization system. Sources of error include:\n\n* **Sensor Noise:**  Noise in the sensor readings directly impacts the accuracy of the measured TDOAs, AOAs, or RSS values.\n* **Propagation Effects:**  Multipath propagation, reflections, and refraction can significantly distort the signal and introduce errors in the measurements.\n* **Sensor Calibration Errors:** Inaccuracies in the sensor positions or characteristics can lead to systematic errors in the localization results.\n* **Clock Synchronization:** For TDOA methods, precise clock synchronization across the sensors is vital.  Errors in synchronization directly translate to errors in the TDOA measurements.\n\nUncertainty quantification methods, such as Bayesian estimation or maximum likelihood estimation, provide a measure of confidence in the estimated source location by quantifying the uncertainty associated with the estimate.  This involves calculating confidence regions or probability density functions representing the likelihood of the true source location being within a specific area.\n\n\n## Algorithm Implementation in Javascript\n\n### Data Structures for Representing Sensor Data\n\nEfficient data structures are crucial for handling sensor data effectively.  A common approach is to use JavaScript objects or arrays to represent sensor readings.  Each sensor can be represented by an object containing its ID, coordinates (x, y, z), and the measured data (TDOA, AOA, or RSS).  For example:\n\n```javascript\n//Example sensor data structure\nconst sensor1 = {\n  id: 1,\n  coordinates: { x: 0, y: 0, z: 0 },\n  tdoa: [10, 5, 15], //Example TDOA relative to other sensors\n  aoa: 30, //Example Angle of Arrival in degrees\n  rss: -60 //Example Received Signal Strength in dBm\n};\n```\n\nArrays can then be used to store multiple sensor readings:\n\n```javascript\nconst sensorReadings = [sensor1, sensor2, sensor3];\n```\n\nConsider using typed arrays (e.g., `Float32Array`) for numerical data to improve performance, especially with a large number of sensors.\n\n\n### TDOA Algorithm Implementation\n\nA simple TDOA algorithm using hyperbolic positioning can be implemented as follows (Note: This is a simplified example and doesn't handle all edge cases or error conditions):\n\n```javascript\nfunction tdoaLocalization(sensorReadings, speedOfSound) {\n  //Implementation of hyperbolic positioning algorithm using sensorReadings and speedOfSound to estimate source location.  Requires solving a system of equations.  This is a placeholder, and a proper implementation would require a numerical solver library.\n  // ... (complex calculation using numerical methods such as Gauss-Newton) ...\n  return {x: estimatedX, y: estimatedY};\n}\n\n```\n\nA robust implementation would likely utilize a numerical solver library like `numeric.js` to handle the non-linear system of equations resulting from the hyperbolic positioning.\n\n\n### AOA Algorithm Implementation\n\nAOA localization involves solving a system of linear equations based on sensor positions and angles of arrival.  A simplified example (again, a placeholder needing a robust solver):\n\n```javascript\nfunction aoaLocalization(sensorReadings) {\n    //Implementation of AOA localization algorithm using sensorReadings to estimate source location.  This is a placeholder, and a real implementation would involve solving a system of linear equations, potentially using least squares or similar techniques.\n  // ... (calculation using linear algebra, potentially using a library like math.js) ...\n  return {x: estimatedX, y: estimatedY};\n}\n```\n\n\n### RSS Algorithm Implementation\n\nRSS localization often uses a least-squares approach or similar optimization technique to find the best fit to an attenuation model.  A highly simplified example:\n\n\n```javascript\nfunction rssLocalization(sensorReadings) {\n  //Implementation of RSS localization algorithm using sensorReadings to estimate source location. This will require a model of signal attenuation, likely an inverse square law model and requires an optimization algorithm (e.g., gradient descent or least squares) to find the best fit for the source position.\n  // ... (Implementation of RSS algorithm using least squares or other suitable optimization method)...\n  return {x: estimatedX, y: estimatedY};\n}\n```\n\nThis requires a model for signal attenuation and an optimization algorithm.\n\n\n### Implementing Hybrid Algorithms\n\nHybrid algorithms combine the strengths of TDOA, AOA, and RSS.  This typically involves a weighted average or more sophisticated techniques that fuse the information from different sensors and methods, using techniques like Kalman filtering or Bayesian estimation.  The complexity of implementation depends on the chosen fusion method.\n\n\n### Optimization Techniques for Speed and Accuracy\n\nFor improved performance, consider using:\n\n* **Vectorization:** Utilize libraries like `math.js` or `numeric.js` that offer vectorized operations for faster computations.\n* **Approximation Techniques:** Employ approximations (e.g., linearizing non-linear equations) to reduce computational complexity when accuracy is not paramount.\n* **Parallel Processing:** If possible, leverage parallel computing capabilities (e.g., Web Workers) to speed up calculations, especially for large datasets.\n\n\n### Handling Noise and Outliers\n\nRobust statistical methods are essential to handle noise and outliers.  Consider using:\n\n* **Median Filtering:** To reduce the impact of outliers in sensor readings.\n* **Weighted Averaging:** To assign lower weights to less reliable measurements.\n* **Robust Regression:** Techniques like RANSAC (Random Sample Consensus) can be employed to identify and reject outliers.\n\n\n### Unit Testing and Validation\n\nThorough unit testing is critical for ensuring correctness and reliability.  Test cases should cover different scenarios, including noisy data, outliers, and edge cases.  Validation against real or simulated data is also crucial to verify the accuracy and performance of the algorithms in realistic conditions.  Use a testing framework like Jest or Mocha to write and run your tests.\n\n\n## Practical Considerations and Advanced Topics\n\n### Sensor Placement and Calibration\n\nCareful sensor placement is crucial for accurate localization.  Ideally, sensors should be positioned to provide good geometric coverage of the area of interest.  Poor sensor geometry can lead to ambiguities and inaccurate estimations.  Consider factors like sensor spacing, sensor density, and the overall geometry of the sensor network.  Uniform spacing is often desirable but not always feasible.  Calibration is also essential to ensure the accuracy of sensor readings. This includes verifying the sensor positions, synchronizing clocks (for TDOA), and characterizing sensor responses.  Regular calibration is necessary to account for drift and other factors affecting sensor accuracy over time.\n\n\n### Environmental Factors and Their Impact\n\nEnvironmental factors significantly affect passive localization performance.  These factors include:\n\n* **Temperature:** Affects the speed of sound, which is critical for TDOA methods.\n* **Humidity:** Also impacts the speed of sound.\n* **Wind:** Can introduce biases in TDOA and AOA measurements, particularly over long distances.\n* **Obstacles and Reflections:**  Cause multipath propagation and shadowing, which lead to errors in the measurements.\n* **Ambient Noise:**  Masking of the desired signal by background noise can severely degrade performance.\n\nAccurate models of these environmental factors are often required for improved accuracy.\n\n\n### Dealing with Multipath Propagation\n\nMultipath propagation, where signals arrive at the sensors via multiple paths (direct, reflected, diffracted), is a major challenge in passive localization.  It leads to inaccurate TDOA and AOA measurements and increased uncertainty.  Techniques to mitigate multipath effects include:\n\n* **Signal Processing Techniques:**  Advanced signal processing methods such as beamforming, MUSIC, or wavelet transforms can help separate the direct path from the multipath components.\n* **Sensor Array Design:**  Careful design of sensor arrays can improve the ability to resolve multipath components.\n* **Statistical Methods:** Robust statistical methods can be used to estimate the source location despite the presence of multipath.\n\n\n### Real-time Processing and Constraints\n\nReal-time processing is often essential for applications requiring immediate localization results.  This necessitates efficient algorithms and optimized code to meet real-time constraints.  Consider factors like computational complexity, memory usage, and the need for low-latency processing.  Real-time systems typically require careful consideration of hardware limitations and the use of specialized hardware for computationally intensive tasks.\n\n\n### Scalability and Performance Optimization\n\nScalability refers to the ability of the localization system to handle a growing number of sensors and increasing data volumes.  Performance optimization aims to reduce computational complexity and improve the efficiency of the algorithms.  Consider these approaches for scalability and optimization:\n\n* **Distributed Processing:** Distribute the computational load across multiple processors or machines.\n* **Data Reduction Techniques:**  Reduce the amount of data processed by using techniques like data aggregation or dimensionality reduction.\n* **Algorithm Selection:** Choose algorithms that are computationally efficient and scale well with the number of sensors.\n* **Hardware Acceleration:** Employ specialized hardware (e.g., GPUs) to speed up computations.\n\n\n### Integration with other systems\n\nPassive localization systems are often integrated with other systems to provide a more comprehensive solution.  Examples include:\n\n* **Video Surveillance Systems:**  Combine audio localization with video tracking for enhanced situational awareness.\n* **Mapping and Navigation Systems:**  Integrate localization results with maps to provide location information in a geographical context.\n* **Data Visualization Tools:**  Use visualization tools to display the localization results and sensor data effectively.\n* **Decision Support Systems:**  Integrate localization data into decision support systems to aid in situation assessment and response planning.  This often involves the development of appropriate Application Programming Interfaces (APIs) for seamless data exchange.\n\n\n## Example Applications and Case Studies\n\n### Indoor Localization\n\nIndoor passive localization presents unique challenges due to the complex and often cluttered environments.  Walls, furniture, and other objects cause significant multipath propagation and signal attenuation.  However, indoor localization finds applications in:\n\n* **Smart Homes:**  Locating occupants or devices within a home for automation and security purposes.  This often involves using a network of strategically placed microphones to track the location of sounds generated by people or objects.\n* **Assisted Living:**  Monitoring the activities of elderly or disabled individuals to provide assistance when needed.  Sound localization can detect falls or other emergencies.\n* **Indoor Navigation:**  Providing indoor navigation assistance for people in large buildings such as hospitals or airports.  This might use sound sources (e.g., beacons) or ambient sounds to assist with location tracking.\n\nAlgorithms for indoor localization often need to incorporate models of the indoor environment to account for the effects of reflections and obstacles.\n\n\n### Outdoor Localization\n\nOutdoor passive localization faces different challenges, including variations in weather conditions, longer propagation distances, and the presence of significant background noise.  Applications include:\n\n* **Wildlife Tracking:** Locating animals based on their vocalizations.  This involves deploying a network of microphones over a wide area and using sophisticated signal processing techniques to separate animal vocalizations from background noise.\n* **Emergency Response:** Locating the source of distress calls or explosions during search and rescue operations.  Rapid and accurate localization is critical in emergency situations.\n* **Surveillance and Security:**  Monitoring large outdoor areas for suspicious activities.  This could involve using a network of sensors to detect and locate gunshots or other sounds associated with criminal activity.\n\nAlgorithms for outdoor localization need to consider factors like wind speed and direction, temperature variations, and the presence of natural obstacles.\n\n\n### Specific Use Cases and Examples\n\n* **Gunshot Localization:**  Determining the location of gunshots using a network of sensors to improve police response times.  This is often challenging due to the impulsive nature of gunshot sounds and the presence of other environmental noises.\n* **Machine Condition Monitoring:**  Locating the source of unusual sounds in industrial equipment to detect malfunctions before they lead to failures.  This uses sensors to listen to the sounds of machinery and identify anomalies that might indicate problems.\n* **Robot Navigation:**  Enabling robots to navigate using audio cues, allowing them to localize sound sources in order to respond accordingly, such as locating a person who calls for help.  This requires robust and real-time processing capabilities.\n\n\n### Real-World Challenges and Solutions\n\nReal-world passive localization often involves overcoming various challenges:\n\n* **Noise Reduction:**  Employ advanced noise reduction techniques like spectral subtraction or Wiener filtering to improve the signal-to-noise ratio.\n* **Calibration and Maintenance:**  Regular sensor calibration and maintenance are necessary to maintain accuracy and reliability.\n* **Computational Cost:**  Optimized algorithms and potentially specialized hardware might be necessary to handle real-time processing demands.\n* **Data Fusion:**  Combining data from multiple sensors or localization methods can improve accuracy and robustness.\n* **Model Accuracy:**  Developing accurate models of the environment and signal propagation is crucial for accurate localization.\n\nAddressing these challenges often requires a multi-faceted approach combining sophisticated signal processing techniques, robust algorithms, and careful system design.\n\n\n## Libraries and Resources\n\n### Useful Javascript Libraries\n\nSeveral JavaScript libraries can be helpful for implementing passive localization algorithms:\n\n* **Numeric.js:** A library for numerical computation in JavaScript, providing functions for linear algebra, matrix operations, and solving systems of equations – essential for many localization algorithms.  It's particularly useful for implementing TDOA and AOA algorithms that involve solving systems of equations.\n\n* **Math.js:**  Another powerful library for mathematical computations in JavaScript. It offers a comprehensive set of functions for matrix operations, linear algebra, statistics, and more.  Useful for various parts of the localization pipeline, including signal processing and statistical analysis.\n\n* **Plotly.js:** A charting library that can be used to visualize sensor data, localization results, and error analysis.  Visualizing the data is crucial for debugging and understanding the performance of your algorithms.\n\n* **TensorFlow.js:**  While more advanced, TensorFlow.js can be useful for implementing deep learning models for signal processing tasks like noise reduction or feature extraction that are relevant to improving the accuracy of passive localization.\n\n* **Simple Statistics:** A lightweight library providing basic statistical functions which can be helpful for handling noise and outliers in sensor data.\n\nNote that the choice of library will depend on the specific algorithms you are implementing and your performance requirements.  For computationally intensive tasks, consider using WebAssembly to improve performance.\n\n\n### Online Resources and Tutorials\n\nSeveral online resources provide information on passive localization:\n\n* **Online Courses:** Platforms like Coursera, edX, and Udacity offer courses on signal processing, machine learning, and related topics relevant to passive localization.\n\n* **Research Articles and Publications:**  Search academic databases like IEEE Xplore, ScienceDirect, and Google Scholar for research papers on passive localization algorithms and techniques.\n\n* **Tutorials and Blogs:** Numerous blog posts and tutorials cover aspects of passive localization, signal processing, and relevant programming concepts.  Look for materials focused on JavaScript and related libraries.\n\n* **Open-Source Projects:** Explore open-source projects on platforms like GitHub that implement passive localization algorithms or related signal processing techniques.  Analyzing existing code can provide valuable insights and accelerate development.\n\n\n### Related Research Papers\n\nFinding relevant research papers requires searching academic databases using keywords such as:\n\n* \"Passive acoustic localization\"\n* \"Time difference of arrival (TDOA) estimation\"\n* \"Angle of arrival (AOA) estimation\"\n* \"Received signal strength (RSS) localization\"\n* \"Multipath mitigation techniques\"\n* \"Robust localization algorithms\"\n* \"Sensor network localization\"\n* \"Bayesian localization\"\n* \"Kalman filtering for localization\"\n\nFocus your search on papers that address the specific challenges and application domains relevant to your project.  Pay attention to the algorithms presented and the evaluation methodologies used to assess the performance of these algorithms.  The cited references within the papers you find will often lead you to other important contributions in the field.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Angle of Arrival (AOA):** The direction from which a signal arrives at a sensor.\n* **Beamforming:** A signal processing technique used to estimate the direction of arrival of a signal.\n* **Calibration:** The process of adjusting and verifying the accuracy of sensors.\n* **Hyperbolic Positioning:** A method of localization that uses hyperbolas to estimate the location of a source.\n* **Localization:** The process of determining the location of a sound source.\n* **Multipath Propagation:** The phenomenon where a signal reaches a sensor via multiple paths.\n* **Received Signal Strength (RSS):** The power level of a received signal.\n* **Sensor Network:** A collection of spatially distributed sensors used for localization.\n* **Time Difference of Arrival (TDOA):** The difference in arrival times of a signal at multiple sensors.\n* **Triangulation:** A method of determining the location of a point using measurements from known points.\n\n\n### List of Acronyms\n\n* **AOA:** Angle of Arrival\n* **DOA:** Direction of Arrival\n* **GPS:** Global Positioning System\n* **MUSIC:** Multiple Signal Classification\n* **RSS:** Received Signal Strength\n* **TDOA:** Time Difference of Arrival\n\n\n### Mathematical Formulas and Derivations\n\nThis section provides some key mathematical formulas relevant to passive localization.  Note that a complete derivation of all formulas is beyond the scope of this appendix.  For detailed derivations, refer to the cited research papers and textbooks mentioned earlier in this manual.\n\n**1.  Distance Calculation from TDOA:**\n\nGiven the TDOA, τ, between two sensors separated by a distance, d, and the speed of sound, c, the hyperbolic equation relating the distance to the source (r1 and r2 from each sensor) is:\n\nr2 - r1 = cτ\n\nWhere:\n\n* r1 = distance from source to sensor 1\n* r2 = distance from source to sensor 2\n\n\n**2.  Distance Calculation from RSS (Free Space):**\n\nIn free space, the received signal strength (RSS) is related to distance (r) by the Friis transmission equation (simplified):\n\nPr = Pt - 20log10(r) + constant\n\nWhere:\n\n* Pr = Received power\n* Pt = Transmitted power\n* r = Distance\n\n\n**3. Linearized TDOA Equations (for least squares estimation):**\n\nFor simplicity, the non-linear hyperbolic equations can be linearized for a small region around an initial guess of the source location using Taylor expansion (This is an approximation).  These linearized equations can then be solved using linear least squares techniques.\n\n\nThese formulas provide a starting point for understanding the mathematical foundation of passive localization.  The actual implementation of these equations often involves more complex considerations such as noise, multipath, and sensor calibration errors.  Refer to the cited research papers and textbooks for detailed explanations and derivations.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Passive Localization?\n\nPassive localization refers to the process of determining the location of a sound source (or emitter) using only sensor measurements of the emitted signal, without actively transmitting any signals to the source. This contrasts with active localization techniques, which involve sending signals and measuring the time of flight or other properties of the reflected or received signals.  Passive localization typically relies on analyzing the time differences of arrival (TDOA), differences in received signal strength (RSS), or a combination of both, at multiple spatially separated sensors. The algorithms then use these differences to estimate the source's position.\n\n\n### Applications of Passive Localization\n\nPassive localization finds applications in a wide range of fields, including:\n\n* **Surveillance and Security:** Tracking the location of intruders, monitoring suspicious activities, locating hidden devices.\n* **Robotics and Automation:** Enabling robots to navigate and interact with their environment based on the sounds they perceive.\n* **Wildlife Monitoring:** Tracking animals based on their vocalizations or other sounds they produce.\n* **Acoustic Monitoring:** Monitoring industrial equipment for anomalies or determining the location of noise pollution sources.\n* **Emergency Response:** Locating the source of distress signals during search and rescue operations.\n* **Audio/Video Conferencing:** Improving the sound source identification and spatial audio processing in virtual and remote meeting environments.\n\n\n### Advantages and Disadvantages of Passive Localization\n\n**Advantages:**\n\n* **Covert Operation:**  It doesn't require emitting any signals, making it ideal for situations where stealth is crucial.\n* **Lower Cost:** It generally requires less expensive and complex hardware compared to active localization systems.\n* **Suitable for Harsh Environments:**  Can operate effectively in challenging environments where active techniques might be unreliable or difficult to implement.\n\n\n**Disadvantages:**\n\n* **Lower Accuracy:** Generally less accurate than active localization techniques, particularly in noisy environments or when the number of sensors is limited.\n* **Computational Complexity:** The algorithms involved in processing the sensor data and estimating the source location can be computationally intensive.\n* **Sensitivity to Noise and Multipath Propagation:** Performance can be severely degraded by environmental noise, signal reflections, and other propagation effects.\n* **Ambiguity Resolution:**  Algorithms may struggle to resolve ambiguities in the source location, especially in complex scenarios.\n\n\n### Overview of the Manual\n\nThis developer manual provides a comprehensive guide to implementing and utilizing passive localization algorithms. It covers the mathematical foundations of various passive localization techniques, including TDOA and RSS based methods.  Furthermore, it will guide you through the practical aspects of sensor selection, data acquisition, signal processing, algorithm implementation, and performance evaluation.  The manual also includes example code snippets and detailed explanations to facilitate the development and integration of passive localization systems.  Specific sections will cover algorithm details, implementation considerations, troubleshooting, and optimization strategies.\n\n\n## Mathematical Foundations\n\n### Triangulation Techniques\n\nTriangulation forms the basis of many passive localization methods.  It involves determining the location of a point by measuring its angles or distances from known points (sensors).  In the context of passive localization, these measurements are derived from the received signals.  Simple triangulation uses distance measurements from at least three sensors to form circles around each sensor with radii equal to the measured distances.  The intersection of these circles represents the estimated location of the sound source.  However, this approach is sensitive to measurement errors. More robust techniques account for measurement uncertainties using statistical methods to estimate the most likely location of the source.\n\n### Time Difference of Arrival (TDOA)\n\nTDOA methods leverage the differences in the arrival times of a signal at multiple sensors.  Assuming a constant signal propagation speed (e.g., the speed of sound), the difference in arrival times between pairs of sensors can be translated into differences in distances to the source.  Hyperbolas are then constructed based on these TDOA measurements.  Each hyperbola represents all possible source locations with a constant TDOA between a sensor pair.  The intersection of hyperbolas from multiple sensor pairs provides an estimate of the source location.  Algorithms like hyperbolic positioning and least-squares estimation are commonly employed for TDOA-based localization.\n\n\n### Angle of Arrival (AOA)\n\nAOA methods estimate the direction of arrival (DOA) of the signal at each sensor using techniques like beamforming or MUSIC (Multiple Signal Classification).  Knowing the sensor positions and the DOAs, the source location can be calculated through the intersection of the lines of bearing from each sensor.  While conceptually simple, AOA methods are susceptible to errors caused by multipath propagation and noise.  Furthermore, accurate DOA estimation requires sophisticated signal processing techniques and directional microphones or antenna arrays.\n\n### Received Signal Strength (RSS)\n\nRSS-based localization utilizes the received signal strength at each sensor to estimate the source location.  The received power typically decreases with distance, following an inverse-square law (in free space).  By measuring the RSS at multiple sensors and modeling the signal attenuation, it's possible to estimate the distances from the sensors to the source.  Similar to TDOA, this can lead to a triangulation problem where circles are drawn around the sensors, and their intersection points represent potential source locations. However, RSS methods are highly susceptible to environmental factors like multipath propagation, shadowing, and variations in the sensor sensitivity.\n\n\n### Hybrid Methods\n\nHybrid methods combine TDOA, AOA, and RSS measurements to improve the accuracy and robustness of localization.  This approach leverages the strengths of each individual method while mitigating their weaknesses.  For instance, combining TDOA and AOA can provide more accurate localization than either method alone, as TDOA provides range information and AOA provides bearing information.  The combination of these measurements allows for a more constrained estimation problem.\n\n### Error Analysis and Uncertainty\n\nAccurate error analysis is crucial for understanding the limitations and reliability of any passive localization system. Sources of error include:\n\n* **Sensor Noise:**  Noise in the sensor readings directly impacts the accuracy of the measured TDOAs, AOAs, or RSS values.\n* **Propagation Effects:**  Multipath propagation, reflections, and refraction can significantly distort the signal and introduce errors in the measurements.\n* **Sensor Calibration Errors:** Inaccuracies in the sensor positions or characteristics can lead to systematic errors in the localization results.\n* **Clock Synchronization:** For TDOA methods, precise clock synchronization across the sensors is vital.  Errors in synchronization directly translate to errors in the TDOA measurements.\n\nUncertainty quantification methods, such as Bayesian estimation or maximum likelihood estimation, provide a measure of confidence in the estimated source location by quantifying the uncertainty associated with the estimate.  This involves calculating confidence regions or probability density functions representing the likelihood of the true source location being within a specific area.\n\n\n## Algorithm Implementation in Javascript\n\n### Data Structures for Representing Sensor Data\n\nEfficient data structures are crucial for handling sensor data effectively.  A common approach is to use JavaScript objects or arrays to represent sensor readings.  Each sensor can be represented by an object containing its ID, coordinates (x, y, z), and the measured data (TDOA, AOA, or RSS).  For example:\n\n```javascript\n//Example sensor data structure\nconst sensor1 = {\n  id: 1,\n  coordinates: { x: 0, y: 0, z: 0 },\n  tdoa: [10, 5, 15], //Example TDOA relative to other sensors\n  aoa: 30, //Example Angle of Arrival in degrees\n  rss: -60 //Example Received Signal Strength in dBm\n};\n```\n\nArrays can then be used to store multiple sensor readings:\n\n```javascript\nconst sensorReadings = [sensor1, sensor2, sensor3];\n```\n\nConsider using typed arrays (e.g., `Float32Array`) for numerical data to improve performance, especially with a large number of sensors.\n\n\n### TDOA Algorithm Implementation\n\nA simple TDOA algorithm using hyperbolic positioning can be implemented as follows (Note: This is a simplified example and doesn't handle all edge cases or error conditions):\n\n```javascript\nfunction tdoaLocalization(sensorReadings, speedOfSound) {\n  //Implementation of hyperbolic positioning algorithm using sensorReadings and speedOfSound to estimate source location.  Requires solving a system of equations.  This is a placeholder, and a proper implementation would require a numerical solver library.\n  // ... (complex calculation using numerical methods such as Gauss-Newton) ...\n  return {x: estimatedX, y: estimatedY};\n}\n\n```\n\nA robust implementation would likely utilize a numerical solver library like `numeric.js` to handle the non-linear system of equations resulting from the hyperbolic positioning.\n\n\n### AOA Algorithm Implementation\n\nAOA localization involves solving a system of linear equations based on sensor positions and angles of arrival.  A simplified example (again, a placeholder needing a robust solver):\n\n```javascript\nfunction aoaLocalization(sensorReadings) {\n    //Implementation of AOA localization algorithm using sensorReadings to estimate source location.  This is a placeholder, and a real implementation would involve solving a system of linear equations, potentially using least squares or similar techniques.\n  // ... (calculation using linear algebra, potentially using a library like math.js) ...\n  return {x: estimatedX, y: estimatedY};\n}\n```\n\n\n### RSS Algorithm Implementation\n\nRSS localization often uses a least-squares approach or similar optimization technique to find the best fit to an attenuation model.  A highly simplified example:\n\n\n```javascript\nfunction rssLocalization(sensorReadings) {\n  //Implementation of RSS localization algorithm using sensorReadings to estimate source location. This will require a model of signal attenuation, likely an inverse square law model and requires an optimization algorithm (e.g., gradient descent or least squares) to find the best fit for the source position.\n  // ... (Implementation of RSS algorithm using least squares or other suitable optimization method)...\n  return {x: estimatedX, y: estimatedY};\n}\n```\n\nThis requires a model for signal attenuation and an optimization algorithm.\n\n\n### Implementing Hybrid Algorithms\n\nHybrid algorithms combine the strengths of TDOA, AOA, and RSS.  This typically involves a weighted average or more sophisticated techniques that fuse the information from different sensors and methods, using techniques like Kalman filtering or Bayesian estimation.  The complexity of implementation depends on the chosen fusion method.\n\n\n### Optimization Techniques for Speed and Accuracy\n\nFor improved performance, consider using:\n\n* **Vectorization:** Utilize libraries like `math.js` or `numeric.js` that offer vectorized operations for faster computations.\n* **Approximation Techniques:** Employ approximations (e.g., linearizing non-linear equations) to reduce computational complexity when accuracy is not paramount.\n* **Parallel Processing:** If possible, leverage parallel computing capabilities (e.g., Web Workers) to speed up calculations, especially for large datasets.\n\n\n### Handling Noise and Outliers\n\nRobust statistical methods are essential to handle noise and outliers.  Consider using:\n\n* **Median Filtering:** To reduce the impact of outliers in sensor readings.\n* **Weighted Averaging:** To assign lower weights to less reliable measurements.\n* **Robust Regression:** Techniques like RANSAC (Random Sample Consensus) can be employed to identify and reject outliers.\n\n\n### Unit Testing and Validation\n\nThorough unit testing is critical for ensuring correctness and reliability.  Test cases should cover different scenarios, including noisy data, outliers, and edge cases.  Validation against real or simulated data is also crucial to verify the accuracy and performance of the algorithms in realistic conditions.  Use a testing framework like Jest or Mocha to write and run your tests.\n\n\n## Practical Considerations and Advanced Topics\n\n### Sensor Placement and Calibration\n\nCareful sensor placement is crucial for accurate localization.  Ideally, sensors should be positioned to provide good geometric coverage of the area of interest.  Poor sensor geometry can lead to ambiguities and inaccurate estimations.  Consider factors like sensor spacing, sensor density, and the overall geometry of the sensor network.  Uniform spacing is often desirable but not always feasible.  Calibration is also essential to ensure the accuracy of sensor readings. This includes verifying the sensor positions, synchronizing clocks (for TDOA), and characterizing sensor responses.  Regular calibration is necessary to account for drift and other factors affecting sensor accuracy over time.\n\n\n### Environmental Factors and Their Impact\n\nEnvironmental factors significantly affect passive localization performance.  These factors include:\n\n* **Temperature:** Affects the speed of sound, which is critical for TDOA methods.\n* **Humidity:** Also impacts the speed of sound.\n* **Wind:** Can introduce biases in TDOA and AOA measurements, particularly over long distances.\n* **Obstacles and Reflections:**  Cause multipath propagation and shadowing, which lead to errors in the measurements.\n* **Ambient Noise:**  Masking of the desired signal by background noise can severely degrade performance.\n\nAccurate models of these environmental factors are often required for improved accuracy.\n\n\n### Dealing with Multipath Propagation\n\nMultipath propagation, where signals arrive at the sensors via multiple paths (direct, reflected, diffracted), is a major challenge in passive localization.  It leads to inaccurate TDOA and AOA measurements and increased uncertainty.  Techniques to mitigate multipath effects include:\n\n* **Signal Processing Techniques:**  Advanced signal processing methods such as beamforming, MUSIC, or wavelet transforms can help separate the direct path from the multipath components.\n* **Sensor Array Design:**  Careful design of sensor arrays can improve the ability to resolve multipath components.\n* **Statistical Methods:** Robust statistical methods can be used to estimate the source location despite the presence of multipath.\n\n\n### Real-time Processing and Constraints\n\nReal-time processing is often essential for applications requiring immediate localization results.  This necessitates efficient algorithms and optimized code to meet real-time constraints.  Consider factors like computational complexity, memory usage, and the need for low-latency processing.  Real-time systems typically require careful consideration of hardware limitations and the use of specialized hardware for computationally intensive tasks.\n\n\n### Scalability and Performance Optimization\n\nScalability refers to the ability of the localization system to handle a growing number of sensors and increasing data volumes.  Performance optimization aims to reduce computational complexity and improve the efficiency of the algorithms.  Consider these approaches for scalability and optimization:\n\n* **Distributed Processing:** Distribute the computational load across multiple processors or machines.\n* **Data Reduction Techniques:**  Reduce the amount of data processed by using techniques like data aggregation or dimensionality reduction.\n* **Algorithm Selection:** Choose algorithms that are computationally efficient and scale well with the number of sensors.\n* **Hardware Acceleration:** Employ specialized hardware (e.g., GPUs) to speed up computations.\n\n\n### Integration with other systems\n\nPassive localization systems are often integrated with other systems to provide a more comprehensive solution.  Examples include:\n\n* **Video Surveillance Systems:**  Combine audio localization with video tracking for enhanced situational awareness.\n* **Mapping and Navigation Systems:**  Integrate localization results with maps to provide location information in a geographical context.\n* **Data Visualization Tools:**  Use visualization tools to display the localization results and sensor data effectively.\n* **Decision Support Systems:**  Integrate localization data into decision support systems to aid in situation assessment and response planning.  This often involves the development of appropriate Application Programming Interfaces (APIs) for seamless data exchange.\n\n\n## Example Applications and Case Studies\n\n### Indoor Localization\n\nIndoor passive localization presents unique challenges due to the complex and often cluttered environments.  Walls, furniture, and other objects cause significant multipath propagation and signal attenuation.  However, indoor localization finds applications in:\n\n* **Smart Homes:**  Locating occupants or devices within a home for automation and security purposes.  This often involves using a network of strategically placed microphones to track the location of sounds generated by people or objects.\n* **Assisted Living:**  Monitoring the activities of elderly or disabled individuals to provide assistance when needed.  Sound localization can detect falls or other emergencies.\n* **Indoor Navigation:**  Providing indoor navigation assistance for people in large buildings such as hospitals or airports.  This might use sound sources (e.g., beacons) or ambient sounds to assist with location tracking.\n\nAlgorithms for indoor localization often need to incorporate models of the indoor environment to account for the effects of reflections and obstacles.\n\n\n### Outdoor Localization\n\nOutdoor passive localization faces different challenges, including variations in weather conditions, longer propagation distances, and the presence of significant background noise.  Applications include:\n\n* **Wildlife Tracking:** Locating animals based on their vocalizations.  This involves deploying a network of microphones over a wide area and using sophisticated signal processing techniques to separate animal vocalizations from background noise.\n* **Emergency Response:** Locating the source of distress calls or explosions during search and rescue operations.  Rapid and accurate localization is critical in emergency situations.\n* **Surveillance and Security:**  Monitoring large outdoor areas for suspicious activities.  This could involve using a network of sensors to detect and locate gunshots or other sounds associated with criminal activity.\n\nAlgorithms for outdoor localization need to consider factors like wind speed and direction, temperature variations, and the presence of natural obstacles.\n\n\n### Specific Use Cases and Examples\n\n* **Gunshot Localization:**  Determining the location of gunshots using a network of sensors to improve police response times.  This is often challenging due to the impulsive nature of gunshot sounds and the presence of other environmental noises.\n* **Machine Condition Monitoring:**  Locating the source of unusual sounds in industrial equipment to detect malfunctions before they lead to failures.  This uses sensors to listen to the sounds of machinery and identify anomalies that might indicate problems.\n* **Robot Navigation:**  Enabling robots to navigate using audio cues, allowing them to localize sound sources in order to respond accordingly, such as locating a person who calls for help.  This requires robust and real-time processing capabilities.\n\n\n### Real-World Challenges and Solutions\n\nReal-world passive localization often involves overcoming various challenges:\n\n* **Noise Reduction:**  Employ advanced noise reduction techniques like spectral subtraction or Wiener filtering to improve the signal-to-noise ratio.\n* **Calibration and Maintenance:**  Regular sensor calibration and maintenance are necessary to maintain accuracy and reliability.\n* **Computational Cost:**  Optimized algorithms and potentially specialized hardware might be necessary to handle real-time processing demands.\n* **Data Fusion:**  Combining data from multiple sensors or localization methods can improve accuracy and robustness.\n* **Model Accuracy:**  Developing accurate models of the environment and signal propagation is crucial for accurate localization.\n\nAddressing these challenges often requires a multi-faceted approach combining sophisticated signal processing techniques, robust algorithms, and careful system design.\n\n\n## Libraries and Resources\n\n### Useful Javascript Libraries\n\nSeveral JavaScript libraries can be helpful for implementing passive localization algorithms:\n\n* **Numeric.js:** A library for numerical computation in JavaScript, providing functions for linear algebra, matrix operations, and solving systems of equations – essential for many localization algorithms.  It's particularly useful for implementing TDOA and AOA algorithms that involve solving systems of equations.\n\n* **Math.js:**  Another powerful library for mathematical computations in JavaScript. It offers a comprehensive set of functions for matrix operations, linear algebra, statistics, and more.  Useful for various parts of the localization pipeline, including signal processing and statistical analysis.\n\n* **Plotly.js:** A charting library that can be used to visualize sensor data, localization results, and error analysis.  Visualizing the data is crucial for debugging and understanding the performance of your algorithms.\n\n* **TensorFlow.js:**  While more advanced, TensorFlow.js can be useful for implementing deep learning models for signal processing tasks like noise reduction or feature extraction that are relevant to improving the accuracy of passive localization.\n\n* **Simple Statistics:** A lightweight library providing basic statistical functions which can be helpful for handling noise and outliers in sensor data.\n\nNote that the choice of library will depend on the specific algorithms you are implementing and your performance requirements.  For computationally intensive tasks, consider using WebAssembly to improve performance.\n\n\n### Online Resources and Tutorials\n\nSeveral online resources provide information on passive localization:\n\n* **Online Courses:** Platforms like Coursera, edX, and Udacity offer courses on signal processing, machine learning, and related topics relevant to passive localization.\n\n* **Research Articles and Publications:**  Search academic databases like IEEE Xplore, ScienceDirect, and Google Scholar for research papers on passive localization algorithms and techniques.\n\n* **Tutorials and Blogs:** Numerous blog posts and tutorials cover aspects of passive localization, signal processing, and relevant programming concepts.  Look for materials focused on JavaScript and related libraries.\n\n* **Open-Source Projects:** Explore open-source projects on platforms like GitHub that implement passive localization algorithms or related signal processing techniques.  Analyzing existing code can provide valuable insights and accelerate development.\n\n\n### Related Research Papers\n\nFinding relevant research papers requires searching academic databases using keywords such as:\n\n* \"Passive acoustic localization\"\n* \"Time difference of arrival (TDOA) estimation\"\n* \"Angle of arrival (AOA) estimation\"\n* \"Received signal strength (RSS) localization\"\n* \"Multipath mitigation techniques\"\n* \"Robust localization algorithms\"\n* \"Sensor network localization\"\n* \"Bayesian localization\"\n* \"Kalman filtering for localization\"\n\nFocus your search on papers that address the specific challenges and application domains relevant to your project.  Pay attention to the algorithms presented and the evaluation methodologies used to assess the performance of these algorithms.  The cited references within the papers you find will often lead you to other important contributions in the field.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Angle of Arrival (AOA):** The direction from which a signal arrives at a sensor.\n* **Beamforming:** A signal processing technique used to estimate the direction of arrival of a signal.\n* **Calibration:** The process of adjusting and verifying the accuracy of sensors.\n* **Hyperbolic Positioning:** A method of localization that uses hyperbolas to estimate the location of a source.\n* **Localization:** The process of determining the location of a sound source.\n* **Multipath Propagation:** The phenomenon where a signal reaches a sensor via multiple paths.\n* **Received Signal Strength (RSS):** The power level of a received signal.\n* **Sensor Network:** A collection of spatially distributed sensors used for localization.\n* **Time Difference of Arrival (TDOA):** The difference in arrival times of a signal at multiple sensors.\n* **Triangulation:** A method of determining the location of a point using measurements from known points.\n\n\n### List of Acronyms\n\n* **AOA:** Angle of Arrival\n* **DOA:** Direction of Arrival\n* **GPS:** Global Positioning System\n* **MUSIC:** Multiple Signal Classification\n* **RSS:** Received Signal Strength\n* **TDOA:** Time Difference of Arrival\n\n\n### Mathematical Formulas and Derivations\n\nThis section provides some key mathematical formulas relevant to passive localization.  Note that a complete derivation of all formulas is beyond the scope of this appendix.  For detailed derivations, refer to the cited research papers and textbooks mentioned earlier in this manual.\n\n**1.  Distance Calculation from TDOA:**\n\nGiven the TDOA, τ, between two sensors separated by a distance, d, and the speed of sound, c, the hyperbolic equation relating the distance to the source (r1 and r2 from each sensor) is:\n\nr2 - r1 = cτ\n\nWhere:\n\n* r1 = distance from source to sensor 1\n* r2 = distance from source to sensor 2\n\n\n**2.  Distance Calculation from RSS (Free Space):**\n\nIn free space, the received signal strength (RSS) is related to distance (r) by the Friis transmission equation (simplified):\n\nPr = Pt - 20log10(r) + constant\n\nWhere:\n\n* Pr = Received power\n* Pt = Transmitted power\n* r = Distance\n\n\n**3. Linearized TDOA Equations (for least squares estimation):**\n\nFor simplicity, the non-linear hyperbolic equations can be linearized for a small region around an initial guess of the source location using Taylor expansion (This is an approximation).  These linearized equations can then be solved using linear least squares techniques.\n\n\nThese formulas provide a starting point for understanding the mathematical foundation of passive localization.  The actual implementation of these equations often involves more complex considerations such as noise, multipath, and sensor calibration errors.  Refer to the cited research papers and textbooks for detailed explanations and derivations.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"passive-localization.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Passive Localization - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}