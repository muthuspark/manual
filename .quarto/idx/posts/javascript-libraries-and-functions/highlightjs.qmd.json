{"title":"Highlight.js - Documentation","markdown":{"yaml":{"title":"Highlight.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nHighlight.js can be installed via several methods, depending on your project's needs and preferences.\n\n* **CDN:** The easiest way to get started is using a CDN.  Include the following `<script>` tag in your HTML `<head>`:\n\n```html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n```\nReplace `default.min.css` with the name of your preferred style.  See the [styles gallery](https://highlightjs.org/styles/) for options.  You might also want to include a specific language:\n\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/javascript.min.js\"></script>\n```\n\n\n* **npm:** For Node.js projects, use npm:\n\n```bash\nnpm install highlight.js\n```\n\n* **yarn:**  For yarn users:\n\n```bash\nyarn add highlight.js\n```\n\n\n* **Download:** You can also download the Highlight.js files directly from the [GitHub releases](https://github.com/highlightjs/highlight.js/releases) and include them in your project.\n\n\n### Basic Usage\n\nAfter installation, you need to initialize Highlight.js to highlight your code.  This typically involves calling the `hljs.highlightAll()` method after the Highlight.js library and your code have been loaded.  Alternatively, you can highlight specific elements individually using `hljs.highlightBlock(element)` or `hljs.highlightElement(element)`.\n\n### First Example\n\nLet's create a simple HTML file to showcase Highlight.js:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Highlight.js Example</title>\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/javascript.min.js\"></script>\n</head>\n<body>\n\n<pre><code class=\"language-javascript\">\nfunction myFunction() {\n  console.log(\"Hello, world!\");\n}\n</code></pre>\n\n<script>hljs.highlightAll();</script>\n</body>\n</html>\n```\n\nThis code includes the Highlight.js CSS and JavaScript files, specifies the JavaScript language for the code block using the `language-javascript` class, and then calls `hljs.highlightAll()` to highlight the code.\n\n\n### Including Highlight.js in your project\n\nThe method for including Highlight.js depends on your chosen installation method.\n\n* **CDN:**  Simply include the `<link>` and `<script>` tags as shown in the \"First Example.\"\n\n* **npm/yarn:**  Require the library in your JavaScript code (e.g., using `import` or `require` depending on your module system),  then use the methods described in the \"Basic Usage\" section.  Remember to also include the CSS stylesheet. For example (using ES modules):\n\n```javascript\nimport hljs from 'highlight.js/lib/core';\nimport javascript from 'highlight.js/lib/languages/javascript';\n\nhljs.registerLanguage('javascript', javascript);\nhljs.highlightAll();\n```\n\n* **Download:** Copy the necessary CSS and JavaScript files into your project's `css` and `js` folders (or equivalent), and then link to them in your HTML using `<link>` and `<script>` tags, similarly to the CDN approach.  Remember to adjust file paths accordingly.\n\n\n## Core Concepts\n\n### Languages\n\nHighlight.js supports a vast number of programming and markup languages. Each language is defined by a separate language definition file (typically found in the `languages` directory of the Highlight.js distribution).  These files contain regular expressions and other logic that dictate how the code should be parsed and styled.  You can register additional languages using the `hljs.registerLanguage` method or by simply including the necessary language file in your HTML `<script>` tags via a CDN or file path.  A list of supported languages is available on the [Highlight.js website](https://highlightjs.org/).\n\n\n### Highlighting Process\n\nThe highlighting process in Highlight.js generally follows these steps:\n\n1. **Language Detection:**  If not explicitly specified using the `language-XXX` class attribute on the `<pre>` or `<code>` element, Highlight.js attempts to auto-detect the language based on the code content (see the section on Auto-detection).\n\n2. **Parsing:** The code is parsed according to the rules defined in the selected language definition file. This involves breaking the code into meaningful segments (tokens) based on syntax rules (keywords, comments, strings, etc.).\n\n3. **Tokenization:** Each segment is assigned a token type, indicating its semantic meaning within the language.\n\n4. **Styling:** Based on the token types, the corresponding CSS classes are applied to each segment, resulting in the visually highlighted code.  These classes are defined in the chosen theme's stylesheet.\n\n5. **Rendering:** The highlighted code is then rendered in the browser.\n\n\n### Configuration Options\n\nWhile Highlight.js offers a default configuration, it can be customized through several options.  These options can affect various aspects of the highlighting process, such as language detection behavior, the use of case-insensitive matching, and more.  Consult the Highlight.js documentation and API for a comprehensive list of available configuration options and their usage.  Configuration options can typically be set using the `hljs.configure()` method.\n\n\n### Themes\n\nHighlight.js themes control the visual appearance of highlighted code.  Themes are provided as CSS files that define styles for the various token types.  Many pre-built themes are available, and you can create your own custom themes by modifying existing ones or creating new CSS files.  The theme is typically specified by the CSS file included in your HTML, or potentially through a configuration option. A gallery of available themes can often be found on the Highlight.js website.\n\n\n### Auto-detection\n\nHighlight.js can attempt to automatically detect the language of a code snippet if the `language-XXX` class is not explicitly provided.  This auto-detection relies on heuristics and analyzing the code's content to identify patterns and keywords associated with different languages.  However, auto-detection is not always perfect and might not be reliable in all cases, especially for ambiguous code snippets.  For best results, it's often recommended to explicitly specify the language using the `language-XXX` class attribute.  The effectiveness of auto-detection can also be influenced by configuration options.\n\n\n## Language Support\n\n### Supported Languages\n\nHighlight.js boasts support for a wide array of programming languages, markup languages, and more.  The complete list of supported languages is available on the [Highlight.js website](https://highlightjs.org/) and usually dynamically updated.  The availability of a language often depends on the version of Highlight.js you're using;  newer versions frequently add support for more languages.  To use a specific language, you typically need to include its corresponding language definition file, either via a CDN, by importing it from a package (if using npm or yarn), or by including it directly.\n\n\n### Adding New Languages\n\nAdding support for a new language involves creating a language definition file. This file describes the syntax and structure of the language using regular expressions and other descriptive metadata. The file should follow the structure outlined in the next section (\"Language Definition Structure\").  Once created, you'll need to register this new language definition with Highlight.js.  See the Highlight.js documentation for details on registering custom languages.  Typically, this involves using the `hljs.registerLanguage('languageName', languageDefinition)` function, where `languageName` is the identifier for your language (e.g., 'mylang') and `languageDefinition` is the object you created.\n\n\n### Language Definition Structure\n\nA Highlight.js language definition is a JavaScript object with several key properties.  The exact structure can be complex, but typically includes:\n\n* **`name`:** A string specifying the language name (e.g., 'JavaScript').\n* **`aliases`:** An array of alternative names or abbreviations for the language.\n* **`keywords`:** An object or array defining keywords of the language. This often includes sub-categories (e.g., `keyword`, `built_in`, `literal`).\n* **`contains`:** An array defining the various \"modes\" or lexemes of the language.  These are rules to match different parts of the code (e.g., comments, strings, numbers). Each mode is typically an object with properties like `className` (the CSS class to apply) and `begin` and `end` (regular expressions defining the start and end of the mode).\n* **`illegal`:** A regular expression defining illegal characters or sequences that will result in parsing failure for the language.\n* **`vs`:**  (Optional)  Specific configuration for Visual Studio Code-style highlighting.\n\nThe structure often involves nested objects and regular expressions to handle complex grammatical structures. Examining existing language definition files is the best way to understand the intricacies of constructing one.\n\n\n### Customizing Existing Languages\n\nInstead of creating a completely new language definition, you might only need to modify an existing one. This is useful for extending the functionality of an existing language or adapting it to a specific dialect or framework.  You can accomplish this by copying the existing language definition, modifying the relevant parts (e.g., adding or changing keywords, regular expressions, or modes), and then registering the modified definition using a new name. Avoid directly modifying the original language definition files to maintain clean and reusable code.  The process will involve creating a new object that extends the functionality of the original and then registering it.\n\n\n## Themes\n\n### Available Themes\n\nHighlight.js offers a variety of pre-built themes, each providing a distinct visual style for highlighted code. These themes are typically distributed as CSS files.  A gallery of available themes is often found on the official Highlight.js website or in the documentation. The selection of themes can vary depending on the version of Highlight.js.  Each theme alters the colors and styles applied to the different code tokens (keywords, comments, strings, etc.), giving you control over the visual presentation of your highlighted code.\n\n\n### Creating Custom Themes\n\nCreating a custom theme is relatively straightforward.  It involves creating a new CSS file and defining styles for the various classes used by Highlight.js to represent different code elements. These classes often follow a consistent naming convention (e.g., `.hljs-keyword`, `.hljs-string`, `.hljs-comment`).  You will style these classes to achieve your desired visual effect.  Refer to an existing theme file as a template or guide to understand the structure and naming conventions.  You can start with a copy of an existing theme and modify it to your needs.\n\n\n### Theme Structure\n\nA Highlight.js theme is essentially a CSS file.  The structure is simple: it consists of CSS selectors that target the classes applied by Highlight.js to the different code elements. For example:\n\n```css\n.hljs {\n  background: #f8f8f8;\n}\n\n.hljs-keyword {\n  color: #008000; /* Green keywords */\n}\n\n.hljs-string {\n  color: #a31515; /* Red strings */\n}\n\n.hljs-comment {\n  color: #808080; /* Gray comments */\n}\n```\n\nThis example shows basic styling; more complex themes might use more sophisticated CSS to handle different situations, such as nested elements or specific language constructs.\n\n\n### Applying Themes\n\nApplying a theme involves linking the theme's CSS file in your HTML document.  This should be done using a `<link>` tag within the `<head>` section of your HTML.  Ensure that the CSS file is loaded *before* the Highlight.js JavaScript code is executed.  For example:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/your/theme.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n<script>hljs.highlightAll();</script>\n```\n\nReplace `\"path/to/your/theme.css\"` with the actual path to your theme's CSS file. If using a CDN or a packaged version, you'll need to locate the appropriate CSS file for your chosen theme and adjust the path accordingly.  If using a theme packaged with Highlight.js,  the path will be relative to the Highlight.js files.\n\n\n## Advanced Usage\n\n### Working with Pre-formatted Code\n\nHighlight.js is primarily designed to work with code enclosed within `<pre>` and `<code>` tags. However, you might encounter situations where code is already pre-formatted, perhaps within a larger text block.  In such cases, you'll need to select the appropriate elements containing the code and then apply highlighting using `hljs.highlightBlock(element)` or `hljs.highlightElement(element)`. This allows you to target and highlight specific code sections without relying solely on class-based detection.\n\n\n### Inline Code Highlighting\n\nWhile Highlight.js excels at highlighting larger code blocks, it can also be used for highlighting smaller snippets of code within a paragraph of text. This is often achieved using the `<code>` tag.  Ensure that the `<code>` tag contains the code you want to highlight, and that Highlight.js is properly initialized.  If `hljs.highlightAll()` is used, inline code will also be automatically highlighted.  If you are highlighting individual elements, remember to use `hljs.highlightElement()` or `hljs.highlightBlock()` on the relevant `<code>` tags.\n\n\n### Using with Frameworks (React, Vue, Angular, etc.)\n\nIntegrating Highlight.js with popular JavaScript frameworks like React, Vue, and Angular typically involves using the framework's component model or lifecycle methods.  You might create a custom component that wraps the Highlight.js functionality, allowing you to easily embed highlighted code within your application's components. The specific implementation will vary depending on the chosen framework.  Often, you'll need to handle the lifecycle of the highlighting process, ensuring that the highlighting happens after the code has been rendered into the DOM.  Look for community-contributed components or integrations if available, as they might streamline the process.\n\n\n### Programmatic Highlighting\n\nInstead of relying on automatic highlighting via `hljs.highlightAll()`, you can programmatically highlight specific code blocks using `hljs.highlightBlock(element)` or `hljs.highlightElement(element)`.  This approach offers more control, especially when dealing with dynamically generated content.  You can use these functions to highlight elements after they've been added to the DOM, making it ideal for situations where code is rendered asynchronously or updated frequently.  It allows precise targeting and avoids unnecessary highlighting of non-code elements.\n\n\n### Customizing the Highlighting Process\n\nHighlight.js offers several points for customization beyond themes. You can modify language definitions to account for specific syntax variations, adjust the auto-detection logic, and change the way tokens are classified.  This requires a deeper understanding of the Highlight.js internal workings, particularly the language definition structure and highlighting process.  For advanced customization, consider exploring the source code and the available configuration options to tailor the library to your particular requirements.\n\n\n### Performance Optimization\n\nFor large codebases or applications with many code blocks, performance optimization is important. Consider using techniques such as:\n\n* **Lazy Loading:** Only highlight code blocks that are visible in the viewport.  Use intersection observer APIs to detect when code elements become visible, triggering highlighting only at that time.\n* **Highlighting on Demand:**  Avoid `hljs.highlightAll()` for large numbers of elements.  Instead, highlight individual blocks as needed using `hljs.highlightBlock()` or `hljs.highlightElement()`.\n* **Minimized Bundles:** Use the minified versions of the Highlight.js files and only include the necessary language definitions, reducing the overall bundle size.\n* **Caching:** Implement caching mechanisms to store already-highlighted code, avoiding redundant highlighting operations.\n\n\n\n\n## API Reference\n\n### highlight.js Object\n\nThe core `hljs` object (often accessed as `hljs` in your code) provides the main interface to Highlight.js. It's not a constructor; instead, it contains various methods and properties for interacting with the library.  Key properties and methods are described in the sections below.  The `hljs` object is the primary entry point for all Highlight.js functionality.  You'll use its methods to register languages, highlight code, configure options and more.\n\n\n### highlight.registerLanguage() method\n\nThis method registers a new language definition with Highlight.js.  It takes two arguments:\n\n* `languageName`: A string representing the unique name of the language (e.g., 'javascript', 'python').\n* `languageDefinition`: An object containing the language definition (see \"Language Definition Structure\" in the Language Support section).\n\nThis function extends Highlight.js to support a language not already included by default. Once registered, the language can be used for highlighting.  For example:\n\n```javascript\nhljs.registerLanguage('mylang', {\n  name: 'My Language',\n  keywords: {\n    keyword: ['foo', 'bar', 'baz']\n  }\n  // ... rest of the language definition\n});\n```\n\n\n### highlight.highlight() method\n\nThis method highlights a given code snippet and returns a highlighted HTML string.  It takes two arguments:\n\n* `code`: The code snippet to highlight (as a string).\n* `language`: The name of the language to use for highlighting (optional; if omitted, auto-detection is attempted).\n\nThis function highlights code directly; it doesn't modify the DOM.  The returned string can then be inserted into the HTML. For example:\n\n```javascript\nlet highlightedCode = hljs.highlight('javascript', `console.log(\"Hello\");`);\ndocument.getElementById('my-code').innerHTML = highlightedCode.value;\n```\n\n\n### highlight.highlightBlock() method\n\nThis method highlights a code block within the DOM. It takes one argument:\n\n* `block`: A DOM element representing the `<pre>` or `<code>` block containing the code.\n\nThis method directly modifies the DOM, highlighting the code within the given element. This is often preferred for highlighting elements already in the page, as it updates the element itself rather than returning a string.\n\n```javascript\nlet codeBlock = document.getElementById('my-code-block');\nhljs.highlightBlock(codeBlock);\n```\n\n\n### highlight.getLanguage() method\n\nThis method retrieves the language definition object for a given language name. It takes one argument:\n\n* `languageName`: A string representing the language name.\n\nIt returns the language definition object if found; otherwise, it returns `null`. This can be helpful when you need to programmatically access the properties of a specific language definition.\n\n\n### highlight.fixMarkup() method\n\nThis method attempts to correct potential issues in the HTML markup of a code block before highlighting. This can be useful for handling code snippets that contain malformed HTML.  It takes one argument:\n\n* `html`: The HTML string containing the code.\n\nThe method returns the corrected HTML string.  It is intended to assist in handling unusual or problematic input but shouldn't be relied upon to repair severe markup issues.\n\n\n### Language Objects\n\nEach registered language is represented internally by a language object. This object contains the definition and metadata for a specific language. You can access some information from this object, but it's generally not necessary to directly interact with these objects in typical usage; they are mostly used internally by `hljs` methods.  Accessing them directly is usually handled implicitly via `hljs.highlight` and similar functions.\n\n\n## Troubleshooting\n\n### Common Issues\n\n* **No highlighting:** Ensure that both the CSS and JavaScript files for Highlight.js are correctly included in your HTML, and that the JavaScript is loaded *after* the CSS.  Double-check file paths and ensure there are no typos in the `<link>` and `<script>` tags.  Also verify that `hljs.highlightAll()` (or a similar highlighting method) is called after the Highlight.js files have loaded and the code is present in the DOM.\n\n* **Incorrect language highlighting:** Verify that the `language-XXX` class is correctly assigned to the `<pre>` or `<code>` tags, using the correct language name.  If using auto-detection, ensure the code snippet is sufficiently unambiguous to allow accurate detection.  Review the supported languages and ensure the language you're using is included in your build.\n\n* **CSS conflicts:**  If the highlighting styles are not applied correctly, there might be a conflict with other CSS styles in your project. Use your browser's developer tools to inspect the highlighted code elements and identify potential CSS conflicts that override the Highlight.js styles.\n\n* **JavaScript errors:**  Check your browser's developer console (usually accessed by pressing F12) for any JavaScript errors that might be preventing Highlight.js from working correctly.  These errors often pinpoint the source of the problem.\n\n\n### Debugging Tips\n\n* **Inspect elements:** Use your browser's developer tools to inspect the HTML structure of the code blocks you are trying to highlight.  This will allow you to verify if the necessary classes are added correctly and to check the CSS styles applied to those classes.\n\n* **Simplify the code:** If you're experiencing issues with a complex code snippet, try simplifying it to a smaller, minimal example to see if the problem persists.  This can help in isolating the source of the problem.\n\n* **Check the console:** Regularly check your browser's console for any errors or warnings that might be related to Highlight.js.  Error messages can provide valuable clues to diagnose issues.\n\n* **Test with a minimal setup:** Create a minimal HTML file that includes only the necessary Highlight.js files and a small code snippet.  If the highlighting works in this simplified environment, the problem lies in the interaction with other parts of your project.\n\n\n### Troubleshooting Language Issues\n\n* **Language not supported:** Ensure that the language you're attempting to highlight is actually supported by the version of Highlight.js you're using. Check the list of supported languages. If it's not supported, you'll have to add support yourself by creating a language definition file.\n\n* **Incorrect language definition:**  If you are using a custom language definition, double-check the syntax and ensure it adheres to the correct structure and uses valid regular expressions.\n\n* **Missing language file:** If you've included a custom language file, ensure it's correctly loaded and registered using `hljs.registerLanguage()`. Verify that the file is correctly included using the correct path.\n\n\n### Performance Problems\n\n* **Large code blocks:**  Highlighting very large code blocks can impact performance.  Consider using lazy loading or highlighting on demand to improve performance, especially for blocks that are not initially visible.\n\n* **Many code blocks:**  If your application includes many code blocks, highlighting all of them at once might slow things down.  Consider using `hljs.highlightBlock()` or `hljs.highlightElement()` on individual blocks as needed instead of `hljs.highlightAll()`.\n\n* **Inefficient language definitions:**  Poorly written language definitions can significantly affect performance.  If you've created a custom language definition, review its efficiency; overly complex regular expressions can be particularly problematic.  Avoid unnecessary backtracking or redundant patterns.\n\n* **Unminified files:** Always use the minified versions of the Highlight.js files and any included language definitions for better performance in a production environment.\n\n\n## Contributing\n\n### Setting up Development Environment\n\nTo contribute to Highlight.js, you'll need to set up a development environment.  This generally involves:\n\n1. **Forking the repository:** Create a fork of the official Highlight.js repository on GitHub.\n\n2. **Cloning your fork:** Clone your forked repository to your local machine using Git:  `git clone <your-fork-url>`\n\n3. **Installing dependencies:**  Navigate to the cloned directory and install the necessary Node.js packages using npm or yarn. The `package.json` file in the root directory will list the required dependencies.  Typically, this involves running `npm install` or `yarn install`.\n\n4. **Building the project:**  Highlight.js uses a build process to create the distributable files. The build process is typically defined in a script within `package.json`.  This might involve commands like `npm run build` or similar.  Familiarize yourself with the build process described in the project's documentation.\n\n5. **Running tests:**  Before making any changes, ensure the test suite is passing.  The project likely contains instructions for running tests; it's typically a command like `npm test` or `yarn test`.\n\n\n### Coding Style Guide\n\nAdhere to the existing coding style used in the Highlight.js project.  This will typically involve consistent indentation, naming conventions, and commenting practices. Review the existing codebase to familiarize yourself with the style guide.  The project might have a `.editorconfig` file or other style guide documentation to aid you.  Maintaining consistency ensures a clean and readable codebase.\n\n\n### Testing Procedures\n\nHighlight.js has a comprehensive test suite.  Before submitting any pull request, ensure your changes do not break existing functionality and that all tests pass.  The testing process is usually described in the project's documentation, possibly including instructions on running unit tests and potentially integration tests.  Writing new tests for any new features or bug fixes is crucial to ensure that the changes work correctly and maintain the quality of the project.\n\n\n### Submitting Pull Requests\n\n1. **Create a branch:** Create a new branch for your changes using `git checkout -b <your-branch-name>`.  Use descriptive branch names that reflect the purpose of your changes.\n\n2. **Make your changes:** Implement your changes, adhering to the coding style guide and ensuring all tests pass.\n\n3. **Commit your changes:** Commit your changes with clear and concise commit messages.  Follow a consistent commit message style (e.g., using imperative mood for the subject line).\n\n4. **Push your branch:** Push your branch to your forked repository: `git push origin <your-branch-name>`.\n\n5. **Create a pull request:** On GitHub, create a pull request from your branch to the main branch of the original Highlight.js repository.  Provide a clear description of your changes and address any comments or suggestions made by the maintainers.  Ensure your pull request follows any guidelines outlined by the project maintainers.\n\n\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nHighlight.js can be installed via several methods, depending on your project's needs and preferences.\n\n* **CDN:** The easiest way to get started is using a CDN.  Include the following `<script>` tag in your HTML `<head>`:\n\n```html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n```\nReplace `default.min.css` with the name of your preferred style.  See the [styles gallery](https://highlightjs.org/styles/) for options.  You might also want to include a specific language:\n\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/javascript.min.js\"></script>\n```\n\n\n* **npm:** For Node.js projects, use npm:\n\n```bash\nnpm install highlight.js\n```\n\n* **yarn:**  For yarn users:\n\n```bash\nyarn add highlight.js\n```\n\n\n* **Download:** You can also download the Highlight.js files directly from the [GitHub releases](https://github.com/highlightjs/highlight.js/releases) and include them in your project.\n\n\n### Basic Usage\n\nAfter installation, you need to initialize Highlight.js to highlight your code.  This typically involves calling the `hljs.highlightAll()` method after the Highlight.js library and your code have been loaded.  Alternatively, you can highlight specific elements individually using `hljs.highlightBlock(element)` or `hljs.highlightElement(element)`.\n\n### First Example\n\nLet's create a simple HTML file to showcase Highlight.js:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Highlight.js Example</title>\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/javascript.min.js\"></script>\n</head>\n<body>\n\n<pre><code class=\"language-javascript\">\nfunction myFunction() {\n  console.log(\"Hello, world!\");\n}\n</code></pre>\n\n<script>hljs.highlightAll();</script>\n</body>\n</html>\n```\n\nThis code includes the Highlight.js CSS and JavaScript files, specifies the JavaScript language for the code block using the `language-javascript` class, and then calls `hljs.highlightAll()` to highlight the code.\n\n\n### Including Highlight.js in your project\n\nThe method for including Highlight.js depends on your chosen installation method.\n\n* **CDN:**  Simply include the `<link>` and `<script>` tags as shown in the \"First Example.\"\n\n* **npm/yarn:**  Require the library in your JavaScript code (e.g., using `import` or `require` depending on your module system),  then use the methods described in the \"Basic Usage\" section.  Remember to also include the CSS stylesheet. For example (using ES modules):\n\n```javascript\nimport hljs from 'highlight.js/lib/core';\nimport javascript from 'highlight.js/lib/languages/javascript';\n\nhljs.registerLanguage('javascript', javascript);\nhljs.highlightAll();\n```\n\n* **Download:** Copy the necessary CSS and JavaScript files into your project's `css` and `js` folders (or equivalent), and then link to them in your HTML using `<link>` and `<script>` tags, similarly to the CDN approach.  Remember to adjust file paths accordingly.\n\n\n## Core Concepts\n\n### Languages\n\nHighlight.js supports a vast number of programming and markup languages. Each language is defined by a separate language definition file (typically found in the `languages` directory of the Highlight.js distribution).  These files contain regular expressions and other logic that dictate how the code should be parsed and styled.  You can register additional languages using the `hljs.registerLanguage` method or by simply including the necessary language file in your HTML `<script>` tags via a CDN or file path.  A list of supported languages is available on the [Highlight.js website](https://highlightjs.org/).\n\n\n### Highlighting Process\n\nThe highlighting process in Highlight.js generally follows these steps:\n\n1. **Language Detection:**  If not explicitly specified using the `language-XXX` class attribute on the `<pre>` or `<code>` element, Highlight.js attempts to auto-detect the language based on the code content (see the section on Auto-detection).\n\n2. **Parsing:** The code is parsed according to the rules defined in the selected language definition file. This involves breaking the code into meaningful segments (tokens) based on syntax rules (keywords, comments, strings, etc.).\n\n3. **Tokenization:** Each segment is assigned a token type, indicating its semantic meaning within the language.\n\n4. **Styling:** Based on the token types, the corresponding CSS classes are applied to each segment, resulting in the visually highlighted code.  These classes are defined in the chosen theme's stylesheet.\n\n5. **Rendering:** The highlighted code is then rendered in the browser.\n\n\n### Configuration Options\n\nWhile Highlight.js offers a default configuration, it can be customized through several options.  These options can affect various aspects of the highlighting process, such as language detection behavior, the use of case-insensitive matching, and more.  Consult the Highlight.js documentation and API for a comprehensive list of available configuration options and their usage.  Configuration options can typically be set using the `hljs.configure()` method.\n\n\n### Themes\n\nHighlight.js themes control the visual appearance of highlighted code.  Themes are provided as CSS files that define styles for the various token types.  Many pre-built themes are available, and you can create your own custom themes by modifying existing ones or creating new CSS files.  The theme is typically specified by the CSS file included in your HTML, or potentially through a configuration option. A gallery of available themes can often be found on the Highlight.js website.\n\n\n### Auto-detection\n\nHighlight.js can attempt to automatically detect the language of a code snippet if the `language-XXX` class is not explicitly provided.  This auto-detection relies on heuristics and analyzing the code's content to identify patterns and keywords associated with different languages.  However, auto-detection is not always perfect and might not be reliable in all cases, especially for ambiguous code snippets.  For best results, it's often recommended to explicitly specify the language using the `language-XXX` class attribute.  The effectiveness of auto-detection can also be influenced by configuration options.\n\n\n## Language Support\n\n### Supported Languages\n\nHighlight.js boasts support for a wide array of programming languages, markup languages, and more.  The complete list of supported languages is available on the [Highlight.js website](https://highlightjs.org/) and usually dynamically updated.  The availability of a language often depends on the version of Highlight.js you're using;  newer versions frequently add support for more languages.  To use a specific language, you typically need to include its corresponding language definition file, either via a CDN, by importing it from a package (if using npm or yarn), or by including it directly.\n\n\n### Adding New Languages\n\nAdding support for a new language involves creating a language definition file. This file describes the syntax and structure of the language using regular expressions and other descriptive metadata. The file should follow the structure outlined in the next section (\"Language Definition Structure\").  Once created, you'll need to register this new language definition with Highlight.js.  See the Highlight.js documentation for details on registering custom languages.  Typically, this involves using the `hljs.registerLanguage('languageName', languageDefinition)` function, where `languageName` is the identifier for your language (e.g., 'mylang') and `languageDefinition` is the object you created.\n\n\n### Language Definition Structure\n\nA Highlight.js language definition is a JavaScript object with several key properties.  The exact structure can be complex, but typically includes:\n\n* **`name`:** A string specifying the language name (e.g., 'JavaScript').\n* **`aliases`:** An array of alternative names or abbreviations for the language.\n* **`keywords`:** An object or array defining keywords of the language. This often includes sub-categories (e.g., `keyword`, `built_in`, `literal`).\n* **`contains`:** An array defining the various \"modes\" or lexemes of the language.  These are rules to match different parts of the code (e.g., comments, strings, numbers). Each mode is typically an object with properties like `className` (the CSS class to apply) and `begin` and `end` (regular expressions defining the start and end of the mode).\n* **`illegal`:** A regular expression defining illegal characters or sequences that will result in parsing failure for the language.\n* **`vs`:**  (Optional)  Specific configuration for Visual Studio Code-style highlighting.\n\nThe structure often involves nested objects and regular expressions to handle complex grammatical structures. Examining existing language definition files is the best way to understand the intricacies of constructing one.\n\n\n### Customizing Existing Languages\n\nInstead of creating a completely new language definition, you might only need to modify an existing one. This is useful for extending the functionality of an existing language or adapting it to a specific dialect or framework.  You can accomplish this by copying the existing language definition, modifying the relevant parts (e.g., adding or changing keywords, regular expressions, or modes), and then registering the modified definition using a new name. Avoid directly modifying the original language definition files to maintain clean and reusable code.  The process will involve creating a new object that extends the functionality of the original and then registering it.\n\n\n## Themes\n\n### Available Themes\n\nHighlight.js offers a variety of pre-built themes, each providing a distinct visual style for highlighted code. These themes are typically distributed as CSS files.  A gallery of available themes is often found on the official Highlight.js website or in the documentation. The selection of themes can vary depending on the version of Highlight.js.  Each theme alters the colors and styles applied to the different code tokens (keywords, comments, strings, etc.), giving you control over the visual presentation of your highlighted code.\n\n\n### Creating Custom Themes\n\nCreating a custom theme is relatively straightforward.  It involves creating a new CSS file and defining styles for the various classes used by Highlight.js to represent different code elements. These classes often follow a consistent naming convention (e.g., `.hljs-keyword`, `.hljs-string`, `.hljs-comment`).  You will style these classes to achieve your desired visual effect.  Refer to an existing theme file as a template or guide to understand the structure and naming conventions.  You can start with a copy of an existing theme and modify it to your needs.\n\n\n### Theme Structure\n\nA Highlight.js theme is essentially a CSS file.  The structure is simple: it consists of CSS selectors that target the classes applied by Highlight.js to the different code elements. For example:\n\n```css\n.hljs {\n  background: #f8f8f8;\n}\n\n.hljs-keyword {\n  color: #008000; /* Green keywords */\n}\n\n.hljs-string {\n  color: #a31515; /* Red strings */\n}\n\n.hljs-comment {\n  color: #808080; /* Gray comments */\n}\n```\n\nThis example shows basic styling; more complex themes might use more sophisticated CSS to handle different situations, such as nested elements or specific language constructs.\n\n\n### Applying Themes\n\nApplying a theme involves linking the theme's CSS file in your HTML document.  This should be done using a `<link>` tag within the `<head>` section of your HTML.  Ensure that the CSS file is loaded *before* the Highlight.js JavaScript code is executed.  For example:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/your/theme.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n<script>hljs.highlightAll();</script>\n```\n\nReplace `\"path/to/your/theme.css\"` with the actual path to your theme's CSS file. If using a CDN or a packaged version, you'll need to locate the appropriate CSS file for your chosen theme and adjust the path accordingly.  If using a theme packaged with Highlight.js,  the path will be relative to the Highlight.js files.\n\n\n## Advanced Usage\n\n### Working with Pre-formatted Code\n\nHighlight.js is primarily designed to work with code enclosed within `<pre>` and `<code>` tags. However, you might encounter situations where code is already pre-formatted, perhaps within a larger text block.  In such cases, you'll need to select the appropriate elements containing the code and then apply highlighting using `hljs.highlightBlock(element)` or `hljs.highlightElement(element)`. This allows you to target and highlight specific code sections without relying solely on class-based detection.\n\n\n### Inline Code Highlighting\n\nWhile Highlight.js excels at highlighting larger code blocks, it can also be used for highlighting smaller snippets of code within a paragraph of text. This is often achieved using the `<code>` tag.  Ensure that the `<code>` tag contains the code you want to highlight, and that Highlight.js is properly initialized.  If `hljs.highlightAll()` is used, inline code will also be automatically highlighted.  If you are highlighting individual elements, remember to use `hljs.highlightElement()` or `hljs.highlightBlock()` on the relevant `<code>` tags.\n\n\n### Using with Frameworks (React, Vue, Angular, etc.)\n\nIntegrating Highlight.js with popular JavaScript frameworks like React, Vue, and Angular typically involves using the framework's component model or lifecycle methods.  You might create a custom component that wraps the Highlight.js functionality, allowing you to easily embed highlighted code within your application's components. The specific implementation will vary depending on the chosen framework.  Often, you'll need to handle the lifecycle of the highlighting process, ensuring that the highlighting happens after the code has been rendered into the DOM.  Look for community-contributed components or integrations if available, as they might streamline the process.\n\n\n### Programmatic Highlighting\n\nInstead of relying on automatic highlighting via `hljs.highlightAll()`, you can programmatically highlight specific code blocks using `hljs.highlightBlock(element)` or `hljs.highlightElement(element)`.  This approach offers more control, especially when dealing with dynamically generated content.  You can use these functions to highlight elements after they've been added to the DOM, making it ideal for situations where code is rendered asynchronously or updated frequently.  It allows precise targeting and avoids unnecessary highlighting of non-code elements.\n\n\n### Customizing the Highlighting Process\n\nHighlight.js offers several points for customization beyond themes. You can modify language definitions to account for specific syntax variations, adjust the auto-detection logic, and change the way tokens are classified.  This requires a deeper understanding of the Highlight.js internal workings, particularly the language definition structure and highlighting process.  For advanced customization, consider exploring the source code and the available configuration options to tailor the library to your particular requirements.\n\n\n### Performance Optimization\n\nFor large codebases or applications with many code blocks, performance optimization is important. Consider using techniques such as:\n\n* **Lazy Loading:** Only highlight code blocks that are visible in the viewport.  Use intersection observer APIs to detect when code elements become visible, triggering highlighting only at that time.\n* **Highlighting on Demand:**  Avoid `hljs.highlightAll()` for large numbers of elements.  Instead, highlight individual blocks as needed using `hljs.highlightBlock()` or `hljs.highlightElement()`.\n* **Minimized Bundles:** Use the minified versions of the Highlight.js files and only include the necessary language definitions, reducing the overall bundle size.\n* **Caching:** Implement caching mechanisms to store already-highlighted code, avoiding redundant highlighting operations.\n\n\n\n\n## API Reference\n\n### highlight.js Object\n\nThe core `hljs` object (often accessed as `hljs` in your code) provides the main interface to Highlight.js. It's not a constructor; instead, it contains various methods and properties for interacting with the library.  Key properties and methods are described in the sections below.  The `hljs` object is the primary entry point for all Highlight.js functionality.  You'll use its methods to register languages, highlight code, configure options and more.\n\n\n### highlight.registerLanguage() method\n\nThis method registers a new language definition with Highlight.js.  It takes two arguments:\n\n* `languageName`: A string representing the unique name of the language (e.g., 'javascript', 'python').\n* `languageDefinition`: An object containing the language definition (see \"Language Definition Structure\" in the Language Support section).\n\nThis function extends Highlight.js to support a language not already included by default. Once registered, the language can be used for highlighting.  For example:\n\n```javascript\nhljs.registerLanguage('mylang', {\n  name: 'My Language',\n  keywords: {\n    keyword: ['foo', 'bar', 'baz']\n  }\n  // ... rest of the language definition\n});\n```\n\n\n### highlight.highlight() method\n\nThis method highlights a given code snippet and returns a highlighted HTML string.  It takes two arguments:\n\n* `code`: The code snippet to highlight (as a string).\n* `language`: The name of the language to use for highlighting (optional; if omitted, auto-detection is attempted).\n\nThis function highlights code directly; it doesn't modify the DOM.  The returned string can then be inserted into the HTML. For example:\n\n```javascript\nlet highlightedCode = hljs.highlight('javascript', `console.log(\"Hello\");`);\ndocument.getElementById('my-code').innerHTML = highlightedCode.value;\n```\n\n\n### highlight.highlightBlock() method\n\nThis method highlights a code block within the DOM. It takes one argument:\n\n* `block`: A DOM element representing the `<pre>` or `<code>` block containing the code.\n\nThis method directly modifies the DOM, highlighting the code within the given element. This is often preferred for highlighting elements already in the page, as it updates the element itself rather than returning a string.\n\n```javascript\nlet codeBlock = document.getElementById('my-code-block');\nhljs.highlightBlock(codeBlock);\n```\n\n\n### highlight.getLanguage() method\n\nThis method retrieves the language definition object for a given language name. It takes one argument:\n\n* `languageName`: A string representing the language name.\n\nIt returns the language definition object if found; otherwise, it returns `null`. This can be helpful when you need to programmatically access the properties of a specific language definition.\n\n\n### highlight.fixMarkup() method\n\nThis method attempts to correct potential issues in the HTML markup of a code block before highlighting. This can be useful for handling code snippets that contain malformed HTML.  It takes one argument:\n\n* `html`: The HTML string containing the code.\n\nThe method returns the corrected HTML string.  It is intended to assist in handling unusual or problematic input but shouldn't be relied upon to repair severe markup issues.\n\n\n### Language Objects\n\nEach registered language is represented internally by a language object. This object contains the definition and metadata for a specific language. You can access some information from this object, but it's generally not necessary to directly interact with these objects in typical usage; they are mostly used internally by `hljs` methods.  Accessing them directly is usually handled implicitly via `hljs.highlight` and similar functions.\n\n\n## Troubleshooting\n\n### Common Issues\n\n* **No highlighting:** Ensure that both the CSS and JavaScript files for Highlight.js are correctly included in your HTML, and that the JavaScript is loaded *after* the CSS.  Double-check file paths and ensure there are no typos in the `<link>` and `<script>` tags.  Also verify that `hljs.highlightAll()` (or a similar highlighting method) is called after the Highlight.js files have loaded and the code is present in the DOM.\n\n* **Incorrect language highlighting:** Verify that the `language-XXX` class is correctly assigned to the `<pre>` or `<code>` tags, using the correct language name.  If using auto-detection, ensure the code snippet is sufficiently unambiguous to allow accurate detection.  Review the supported languages and ensure the language you're using is included in your build.\n\n* **CSS conflicts:**  If the highlighting styles are not applied correctly, there might be a conflict with other CSS styles in your project. Use your browser's developer tools to inspect the highlighted code elements and identify potential CSS conflicts that override the Highlight.js styles.\n\n* **JavaScript errors:**  Check your browser's developer console (usually accessed by pressing F12) for any JavaScript errors that might be preventing Highlight.js from working correctly.  These errors often pinpoint the source of the problem.\n\n\n### Debugging Tips\n\n* **Inspect elements:** Use your browser's developer tools to inspect the HTML structure of the code blocks you are trying to highlight.  This will allow you to verify if the necessary classes are added correctly and to check the CSS styles applied to those classes.\n\n* **Simplify the code:** If you're experiencing issues with a complex code snippet, try simplifying it to a smaller, minimal example to see if the problem persists.  This can help in isolating the source of the problem.\n\n* **Check the console:** Regularly check your browser's console for any errors or warnings that might be related to Highlight.js.  Error messages can provide valuable clues to diagnose issues.\n\n* **Test with a minimal setup:** Create a minimal HTML file that includes only the necessary Highlight.js files and a small code snippet.  If the highlighting works in this simplified environment, the problem lies in the interaction with other parts of your project.\n\n\n### Troubleshooting Language Issues\n\n* **Language not supported:** Ensure that the language you're attempting to highlight is actually supported by the version of Highlight.js you're using. Check the list of supported languages. If it's not supported, you'll have to add support yourself by creating a language definition file.\n\n* **Incorrect language definition:**  If you are using a custom language definition, double-check the syntax and ensure it adheres to the correct structure and uses valid regular expressions.\n\n* **Missing language file:** If you've included a custom language file, ensure it's correctly loaded and registered using `hljs.registerLanguage()`. Verify that the file is correctly included using the correct path.\n\n\n### Performance Problems\n\n* **Large code blocks:**  Highlighting very large code blocks can impact performance.  Consider using lazy loading or highlighting on demand to improve performance, especially for blocks that are not initially visible.\n\n* **Many code blocks:**  If your application includes many code blocks, highlighting all of them at once might slow things down.  Consider using `hljs.highlightBlock()` or `hljs.highlightElement()` on individual blocks as needed instead of `hljs.highlightAll()`.\n\n* **Inefficient language definitions:**  Poorly written language definitions can significantly affect performance.  If you've created a custom language definition, review its efficiency; overly complex regular expressions can be particularly problematic.  Avoid unnecessary backtracking or redundant patterns.\n\n* **Unminified files:** Always use the minified versions of the Highlight.js files and any included language definitions for better performance in a production environment.\n\n\n## Contributing\n\n### Setting up Development Environment\n\nTo contribute to Highlight.js, you'll need to set up a development environment.  This generally involves:\n\n1. **Forking the repository:** Create a fork of the official Highlight.js repository on GitHub.\n\n2. **Cloning your fork:** Clone your forked repository to your local machine using Git:  `git clone <your-fork-url>`\n\n3. **Installing dependencies:**  Navigate to the cloned directory and install the necessary Node.js packages using npm or yarn. The `package.json` file in the root directory will list the required dependencies.  Typically, this involves running `npm install` or `yarn install`.\n\n4. **Building the project:**  Highlight.js uses a build process to create the distributable files. The build process is typically defined in a script within `package.json`.  This might involve commands like `npm run build` or similar.  Familiarize yourself with the build process described in the project's documentation.\n\n5. **Running tests:**  Before making any changes, ensure the test suite is passing.  The project likely contains instructions for running tests; it's typically a command like `npm test` or `yarn test`.\n\n\n### Coding Style Guide\n\nAdhere to the existing coding style used in the Highlight.js project.  This will typically involve consistent indentation, naming conventions, and commenting practices. Review the existing codebase to familiarize yourself with the style guide.  The project might have a `.editorconfig` file or other style guide documentation to aid you.  Maintaining consistency ensures a clean and readable codebase.\n\n\n### Testing Procedures\n\nHighlight.js has a comprehensive test suite.  Before submitting any pull request, ensure your changes do not break existing functionality and that all tests pass.  The testing process is usually described in the project's documentation, possibly including instructions on running unit tests and potentially integration tests.  Writing new tests for any new features or bug fixes is crucial to ensure that the changes work correctly and maintain the quality of the project.\n\n\n### Submitting Pull Requests\n\n1. **Create a branch:** Create a new branch for your changes using `git checkout -b <your-branch-name>`.  Use descriptive branch names that reflect the purpose of your changes.\n\n2. **Make your changes:** Implement your changes, adhering to the coding style guide and ensuring all tests pass.\n\n3. **Commit your changes:** Commit your changes with clear and concise commit messages.  Follow a consistent commit message style (e.g., using imperative mood for the subject line).\n\n4. **Push your branch:** Push your branch to your forked repository: `git push origin <your-branch-name>`.\n\n5. **Create a pull request:** On GitHub, create a pull request from your branch to the main branch of the original Highlight.js repository.  Provide a clear description of your changes and address any comments or suggestions made by the maintainers.  Ensure your pull request follows any guidelines outlined by the project maintainers.\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"highlightjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Highlight.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}