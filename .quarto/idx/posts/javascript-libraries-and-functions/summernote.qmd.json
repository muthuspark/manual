{"title":"Summernote - A Developer's Handbook","markdown":{"yaml":{"title":"Summernote - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nSummernote can be integrated into your project through various methods:\n\n**1. Using the CDN:** The easiest way to get started is by including Summernote via a CDN link in your HTML file. Add the following lines within the `<head>` section of your HTML:\n\n```html\n<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css\" rel=\"stylesheet\">\n<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js\"></script>\n```\nReplace `0.8.18` with the desired version number if needed.  Note that `summernote-lite.min.js` and `summernote-lite.min.css` are for the lite version. For the full version use `summernote.min.js` and `summernote.min.css`\n\n\n**2. Using npm (Node Package Manager):** If you are using npm, install Summernote using the following command:\n\n```bash\nnpm install summernote --save\n```\n\nThen include the CSS and JS files in your project.  The exact location will depend on your project structure.  Refer to your build process documentation for specifics.\n\n**3. Using yarn (Yarn Package Manager):**  Similar to npm:\n\n```bash\nyarn add summernote\n```\n\nAgain, include the CSS and JS files appropriately within your project.\n\n\n### Basic Usage\n\nAfter including Summernote (using either CDN or npm/yarn), you need to initialize it on a `<textarea>` element.  This is done by calling the `summernote()` method on your textarea element using jQuery.  Ensure you have jQuery included in your project as Summernote relies on it.\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote();\n});\n```\n\nReplace `#summernote` with the ID of your `<textarea>` element. For example:\n\n```html\n<textarea id=\"summernote\"></textarea>\n```\n\nThis will transform your textarea into a WYSIWYG editor.\n\n\n### First Example\n\nLet's create a simple HTML file demonstrating basic Summernote integration:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Summernote Example</title>\n<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<textarea id=\"summernote\"></textarea>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js\"></script>\n<script>\n$(document).ready(function() {\n  $('#summernote').summernote();\n});\n</script>\n</body>\n</html>\n```\n\nThis code includes Summernote via CDN, initializes it on a textarea with the ID \"summernote\", and provides a basic example. Remember to replace the CDN links with local paths if you've installed Summernote using npm or yarn.\n\n\n### Configuration Options\n\nSummernote offers many configuration options to customize its behavior and appearance. These options are passed as a JavaScript object to the `summernote()` method.  Here are a few examples:\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote({\n    airMode: true, // Enables Air Mode (fullscreen editing)\n    height: 300, // Sets the editor height in pixels\n    callbacks: {\n      onInit: function(e) {\n        console.log('Summernote initialized!');\n      },\n      onImageUpload: function(files, editor, welEditable) {\n        // Custom image upload handling\n      }\n    },\n    toolbar: [\n      ['style', ['style']],\n      ['font', ['bold', 'italic', 'underline', 'clear']],\n      ['para', ['ul', 'ol', 'paragraph']],\n      ['insert', ['link', 'picture', 'video']],\n      ['view', ['fullscreen', 'codeview']]\n    ]\n  });\n});\n```\n\nThe full list of configuration options can be found in the Summernote documentation.  Refer to the official documentation for detailed explanations and usage examples for each option.  This allows for extensive customization to fit your application's needs.\n\n\n## Core Features\n\n### Editor Initialization\n\nSummernote's core functionality revolves around initializing the editor on a `<textarea>` element.  This is achieved using jQuery's `.summernote()` method, passing an optional configuration object as an argument.  The simplest initialization looks like this:\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote();\n});\n```\n\nThis replaces the `<textarea>` with the Summernote editor.  The ID `#summernote` should match the ID of your `<textarea>` element.  You can customize the editor's behavior and appearance extensively through the configuration object (see the Configuration Options section for details).  Remember that jQuery is a required dependency for Summernote.\n\n\n### Toolbar Customization\n\nThe Summernote toolbar is highly customizable. You can add, remove, or rearrange buttons to fit your specific requirements. This is done through the `toolbar` configuration option.  The `toolbar` option accepts a nested array, where each inner array represents a group of buttons.\n\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote({\n    toolbar: [\n      ['style', ['style']], // Style group\n      ['font', ['bold', 'italic', 'underline', 'clear']], // Font group\n      ['para', ['ul', 'ol', 'paragraph']], // Paragraph group\n      ['insert', ['link', 'picture', 'video']], // Insert group\n      ['view', ['fullscreen', 'codeview']] // View group\n    ]\n  });\n});\n```\n\nEach button within a group is represented by a string that corresponds to a Summernote command.  You can consult the Summernote documentation for a complete list of available commands.  Removing a group is as simple as omitting it from the array.  Experiment with different configurations to create your ideal toolbar.\n\n\n### Air Mode\n\nAir Mode provides a distraction-free, fullscreen editing experience.  It's enabled by setting the `airMode` configuration option to `true`:\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote({\n    airMode: true\n  });\n});\n```\n\nIn Air Mode, the toolbar is minimized, and the editor takes up the entire screen.  This is ideal for users who prefer a clean writing environment.  Switching back to the standard editor view can be done through the toolbar.\n\n\n### Content Manipulation\n\nSummernote provides methods for manipulating the editor's content programmatically.  You can access the content using the following methods:\n\n* **`code()`:** Returns the HTML content of the editor.\n* **`destroy()`:**  Destroys the Summernote editor, restoring the original `<textarea>`.\n* **`empty()`:** Clears the editor's content.\n* **`pasteHTML(html)`:** Pastes HTML content into the editor.\n* **`insertNode(node)`:** Inserts a DOM node into the editor.\n* **`insertText(text)`:** Inserts plain text into the editor.\n* **`setContents(html)`:** Sets the editor's content to the provided HTML.\n\n\nExample of setting content:\n\n```javascript\n$('#summernote').summernote('setContents', '<h1>Hello, World!</h1>');\n```\n\nExample of getting content:\n\n```javascript\nvar content = $('#summernote').summernote('code');\nconsole.log(content);\n```\n\n\n### Event Handling\n\nSummernote offers several events that you can listen for to respond to user actions or editor changes.  These events are bound using jQuery's `.on()` method:\n\n```javascript\n$('#summernote').on('summernote.change', function(we, contents, $editable) {\n  console.log('Content changed:', contents);\n});\n```\n\nThis example logs a message to the console whenever the editor's content changes.  Other notable events include:\n\n* `summernote.init`: Triggered when the editor is initialized.\n* `summernote.focus`: Triggered when the editor gains focus.\n* `summernote.blur`: Triggered when the editor loses focus.\n* `summernote.paste`: Triggered when content is pasted into the editor.\n* `summernote.keyup`: Triggered when a key is released.\n* `summernote.keydown`: Triggered when a key is pressed.\n\n\nRefer to the Summernote documentation for a comprehensive list of available events and their details.  Event handling provides powerful capabilities to integrate Summernote seamlessly into your applications and customize its functionality further.\n\n\n## Advanced Features\n\n### Plugins\n\nSummernote's functionality can be extended significantly through the use of plugins.  Plugins provide additional features and capabilities that are not included in the core library.  While Summernote doesn't have a built-in plugin manager, you can integrate external plugins by including their JavaScript and CSS files in your project and then initializing them alongside Summernote.\n\nMany community-contributed plugins are available online.  You'll need to carefully review the plugin's documentation for specific instructions on how to integrate it into your project. This typically involves including the plugin's files and then calling the plugin's initialization function, often passing a configuration object.\n\nFor example, a hypothetical plugin might be initialized like this:\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote({\n    // ... other Summernote options ...\n  }).myCustomPlugin({option1: 'value1', option2: 'value2'}); // Assuming 'myCustomPlugin' is the plugin's initialization function\n});\n\n```\n\nRemember to always check the license of any external plugins before integrating them into your project.\n\n\n### Extending Summernote\n\nFor more substantial modifications or custom features not easily achievable with plugins, you can directly extend Summernote's functionality. This involves modifying the Summernote codebase itself or creating custom functions that interact with the Summernote API.  This approach requires a deeper understanding of Summernote's internal workings and JavaScript development.  Be cautious when modifying the core codebase, as updates to Summernote may overwrite your changes. It is generally recommended to create separate functions and utilize Summernote's API as much as possible for extending functionality.\n\n\n\n### Customizing the UI\n\nSummernote's UI can be customized to match your application's design.  This can involve modifying the CSS styles of the editor or creating entirely new UI elements using JavaScript.  Modifying the CSS is usually the simplest method, allowing you to change colors, fonts, sizes, and spacing.  More complex UI changes might require writing custom JavaScript code to manipulate the DOM elements of the Summernote editor.  It's important to remember that directly manipulating the internal structure of the editor is generally discouraged, due to potential conflicts with future Summernote updates. Using CSS to override existing styles is the safer and recommended approach.\n\n\n### Integration with Frameworks\n\nSummernote can be integrated with various JavaScript frameworks like React, Angular, and Vue.js.  The integration process typically involves using the framework's component model to wrap the Summernote editor.  For example, in React you might create a custom component that renders the `<textarea>` and initializes Summernote within its lifecycle methods.  This approach requires familiarity with the specific framework's patterns and best practices.  Consult the documentation of your chosen framework for more details on how to integrate Summernote.\n\n\n### Accessibility\n\nBuilding accessible web applications is crucial.  Summernote strives to provide accessibility features, but further considerations are often needed depending on your specific use-case.   Ensure proper ARIA attributes are used, and the editor's content remains semantically correct.  Provide alternative text for images.  Consider keyboard navigation and screen reader compatibility. Thorough testing with assistive technologies is essential to ensure the editor is accessible to users with disabilities.  Using semantic HTML within the editor is crucial for screen readers to interpret the content correctly.  Regularly review and update your accessibility implementation to adhere to current best practices and standards (e.g., WCAG).\n\n\n## API Reference\n\n### Summernote Object\n\nThe core of Summernote's API is the Summernote object itself, which is created when you initialize the editor on a `<textarea>` element using `$(selector).summernote()`.  This object provides access to various methods and properties for manipulating the editor.  You access methods and properties of the Summernote object using the jQuery chaining syntax.  For example, `$('#summernote').summernote('code')` calls the `code()` method of the Summernote object associated with the element with the ID \"summernote\".\n\n\n### Methods\n\nSummernote provides numerous methods to interact with the editor programmatically. Some key methods include:\n\n* **`code()`:** Returns the HTML content of the editor.  Example: `$('#summernote').summernote('code')`\n* **`destroy()`:** Destroys the Summernote editor and restores the original `<textarea>`. Example: `$('#summernote').summernote('destroy')`\n* **`editor.insertText(text)`:** Inserts plain text at the current cursor position. Example: `$('#summernote').summernote('insertText', 'Hello')`\n* **`editor.insertNode(node)`:** Inserts a DOM node at the current cursor position. Example:  `$('#summernote').summernote('insertNode', $('<img src=\"image.jpg\">')[0])`\n* **`editor.pasteHTML(html)`:** Pastes HTML content at the current cursor position. Example: `$('#summernote').summernote('pasteHTML', '<h1>Heading</h1>')`\n* **`editor.setContents(html)`:** Sets the editor's content to the given HTML. Example: `$('#summernote').summernote('setContents', '<p>Paragraph</p>')`\n* **`empty()`:** Clears the editor's content. Example: `$('#summernote').summernote('empty')`\n* **`disable()`:** Disables the editor. Example: `$('#summernote').summernote('disable')`\n* **`enable()`:** Enables the editor. Example: `$('#summernote').summernote('enable')`\n* **`focus()`:** Focuses the editor. Example: `$('#summernote').summernote('focus')`\n* **`blur()`:** Removes focus from the editor. Example: `$('#summernote').summernote('blur')`\n* **`getSelection()`:** Returns the current selection in the editor.  This returns a complex object representing the selection.\n* **`insertImage(url, filename)`:** Inserts an image into the editor.\n* **`save()`:** Saves the current editor content (often used in conjunction with other methods like `code()`).\n* **`initialize()`:** Initializes (or re-initializes) Summernote on the given element.\n\n\n\n\nA comprehensive list of available methods, along with detailed descriptions and examples, can be found in the official Summernote documentation.  Consult the documentation for the most up-to-date information on all available methods and their parameters.\n\n\n### Events\n\nSummernote triggers various events during its operation.  These events allow developers to respond to specific actions or changes within the editor.  Events are bound using jQuery's `.on()` method, targeting the `summernote` namespace.  For example:\n\n```javascript\n$('#summernote').on('summernote.change', function(we, contents, $editable) {\n  console.log('Content changed:', contents);\n});\n```\n\nThis code snippet listens for the `summernote.change` event and logs the new content to the console whenever the editor content is modified.  Other important events include `summernote.init`, `summernote.focus`, `summernote.blur`, `summernote.paste`, `summernote.keyup`, and `summernote.keydown`.  Refer to the Summernote documentation for a complete list of available events.\n\n\n\n### Callbacks\n\nCallbacks provide a way to execute custom functions at specific points during the editor's lifecycle.  Callbacks are defined within the configuration object passed to the `summernote()` method.  Common callbacks include:\n\n* **`onInit`:** Called when the editor is initialized.\n* **`onFocus`:** Called when the editor gains focus.\n* **`onBlur`:** Called when the editor loses focus.\n* **`onChange`:** Called when the editor content changes.\n* **`onPaste`:** Called when content is pasted into the editor.\n* **`onImageUpload`:** Called when an image is uploaded.  This is often used to handle custom image upload logic.\n\n\nExample:\n\n```javascript\n$('#summernote').summernote({\n  callbacks: {\n    onInit: function() {\n      console.log('Summernote initialized!');\n    },\n    onImageUpload: function(files) {\n      // Handle image upload\n    }\n  }\n});\n```\n\nConsult the Summernote documentation for a complete list of available callbacks and their parameters.  Callbacks offer a powerful mechanism to extend and customize Summernote's functionality to meet your application's specific requirements.\n\n\n## Troubleshooting\n\n### Common Issues\n\nThis section addresses some frequently encountered issues when using Summernote:\n\n* **Summernote not initializing:**  Ensure that you have correctly included the necessary CSS and JavaScript files (both `summernote.css` and `summernote.js` or their minified counterparts). Double-check that the paths to these files are accurate.  Also verify that jQuery is included and loaded *before* Summernote's JavaScript file.  Inspect your browser's developer console for JavaScript errors.\n\n* **Incorrect toolbar:** Verify that the `toolbar` configuration option is correctly structured as a nested array of button groups and commands.  Refer to the documentation for the correct syntax.  Typographical errors in button names are a common cause of problems.\n\n* **Content not rendering correctly:** Check for invalid or malformed HTML in your content.  Ensure that your content is properly escaped before being inserted into the editor.  If pasting content, try stripping out unnecessary formatting first.\n\n* **Plugin conflicts:** If you're using plugins, ensure they are compatible with your version of Summernote and that they are correctly initialized.  Plugin conflicts can lead to unexpected behavior or errors.\n\n* **CSS conflicts:** Summernote's styling might conflict with your application's CSS. Use your browser's developer tools to inspect the CSS and resolve any conflicts.  Consider using more specific CSS selectors to target Summernote elements.\n\n\n### Debugging Tips\n\nWhen troubleshooting Summernote, these tips can be helpful:\n\n* **Browser's developer console:**  The browser's developer console (usually opened by pressing F12) is your best friend.  It will display JavaScript errors, warnings, and other diagnostic information that can help pinpoint the cause of problems.\n\n* **Simplify your code:** If you are having trouble with complex configurations or custom code, try simplifying your setup to isolate the problem.  Comment out sections of your code to see if that resolves the issue.\n\n* **Check your network requests:** If you are having issues loading Summernote or its dependencies, use your browser's developer tools to inspect the network requests to make sure the files are being loaded correctly and without errors.\n\n* **Examine the HTML structure:** Inspect the HTML structure of your Summernote editor using your browser's developer tools.  This can help you identify unexpected elements or styling issues.\n\n* **Use the Summernote source code:** If you are comfortable with debugging JavaScript code, inspect the Summernote source code to trace the execution flow and identify potential problems.\n\n\n### Error Messages\n\nSummernote may produce error messages in your browser's console.  These messages should provide clues about the nature of the problem.  Pay close attention to error messages and search online for solutions related to the specific error.  The error message might indicate problems with:\n\n* **Incorrect file paths:**  Summernote cannot find the required CSS or JS files.\n* **Missing dependencies:** A required library, such as jQuery, isn't included or properly loaded.\n* **Incorrect configuration:**  A configuration option might have an invalid value or syntax.\n* **JavaScript errors in your custom code:**  An error in your custom callbacks or extensions is preventing Summernote from functioning properly.\n\n\n### Community Support\n\nIf you're unable to resolve an issue using the above methods, consider seeking help from the Summernote community.  Online forums, issue trackers, or the Summernote's official website may provide answers to your questions or assistance from other developers.  When seeking help, be sure to provide the following information:\n\n* **Summernote version:** Specify the exact version of Summernote you are using.\n* **Browser and version:**  Indicate the browser and version you're experiencing the issue on.\n* **Relevant code snippets:** Include the relevant portions of your code that are causing the problem.\n* **Error messages:**  Provide any error messages you are receiving.\n* **Steps to reproduce:** Describe the steps necessary to reproduce the problem.\n\nClear and concise information will significantly help others in the community assist you more effectively.\n\n\n## Examples\n\n### Simple Example\n\nThis example demonstrates the most basic Summernote integration:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Summernote Simple Example</title>\n<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<textarea id=\"summernote\"></textarea>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js\"></script>\n<script>\n  $(document).ready(function() {\n    $('#summernote').summernote();\n  });\n</script>\n</body>\n</html>\n```\n\nThis code includes Summernote via CDN, initializes it on a `<textarea>` with the ID \"summernote\", and uses the default configuration.  Remember to replace the CDN links with local paths if you've installed Summernote using npm or yarn.  This provides a fully functional WYSIWYG editor with the default toolbar.\n\n\n### Advanced Example\n\nThis example showcases more advanced features, including custom toolbar, Air Mode, and a callback function:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Summernote Advanced Example</title>\n<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<textarea id=\"summernote\"></textarea>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js\"></script>\n<script>\n$(document).ready(function() {\n  $('#summernote').summernote({\n    airMode: true,\n    toolbar: [\n      ['style', ['style']],\n      ['font', ['bold', 'italic', 'underline']],\n      ['para', ['ul', 'ol', 'paragraph']],\n      ['insert', ['link', 'picture']]\n    ],\n    callbacks: {\n      onChange: function(contents, $editable) {\n        console.log('Content changed: ', contents);\n      }\n    }\n  });\n});\n</script>\n</body>\n</html>\n```\n\nThis example uses Air Mode, customizes the toolbar to include only specific buttons, and adds a callback function that logs the content changes to the console. This illustrates how to customize Summernote's functionality and appearance to fit specific application requirements.  Remember to adjust paths to your local files if you're not using the CDN.\n\n\n### Integration with other libraries\n\nIntegrating Summernote with other libraries depends heavily on the specific library. There isn't a universal approach.  However, the general principle involves initializing Summernote after the other library has been set up and ensuring that there are no conflicts between their JavaScript or CSS.\n\nFor example, integrating with a date picker library:\n\n1. **Include Libraries:** Include both Summernote and the date picker library's CSS and JS files in your project.\n\n2. **Initialize Libraries:** Initialize the date picker library *before* initializing Summernote. This ensures the date picker is ready before Summernote attempts to interact with it.\n\n3. **Custom Callback (if needed):** If the date picker needs specific integration within Summernote (for example, adding a button to insert a date), create a custom callback function within Summernote's configuration to handle this interaction.  This callback might involve adding a button to the toolbar and handling the associated event to insert the selected date into the editor.\n\n4. **Handle potential conflicts:** Carefully review the documentation of both libraries for potential CSS or JavaScript conflicts.  Resolve these conflicts by overriding CSS classes or adjusting the order of inclusion in your HTML.\n\n\nRemember that the exact implementation will depend significantly on the specific libraries involved. Always refer to the individual libraries' documentation for detailed integration instructions.\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nSummernote can be integrated into your project through various methods:\n\n**1. Using the CDN:** The easiest way to get started is by including Summernote via a CDN link in your HTML file. Add the following lines within the `<head>` section of your HTML:\n\n```html\n<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css\" rel=\"stylesheet\">\n<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js\"></script>\n```\nReplace `0.8.18` with the desired version number if needed.  Note that `summernote-lite.min.js` and `summernote-lite.min.css` are for the lite version. For the full version use `summernote.min.js` and `summernote.min.css`\n\n\n**2. Using npm (Node Package Manager):** If you are using npm, install Summernote using the following command:\n\n```bash\nnpm install summernote --save\n```\n\nThen include the CSS and JS files in your project.  The exact location will depend on your project structure.  Refer to your build process documentation for specifics.\n\n**3. Using yarn (Yarn Package Manager):**  Similar to npm:\n\n```bash\nyarn add summernote\n```\n\nAgain, include the CSS and JS files appropriately within your project.\n\n\n### Basic Usage\n\nAfter including Summernote (using either CDN or npm/yarn), you need to initialize it on a `<textarea>` element.  This is done by calling the `summernote()` method on your textarea element using jQuery.  Ensure you have jQuery included in your project as Summernote relies on it.\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote();\n});\n```\n\nReplace `#summernote` with the ID of your `<textarea>` element. For example:\n\n```html\n<textarea id=\"summernote\"></textarea>\n```\n\nThis will transform your textarea into a WYSIWYG editor.\n\n\n### First Example\n\nLet's create a simple HTML file demonstrating basic Summernote integration:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Summernote Example</title>\n<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<textarea id=\"summernote\"></textarea>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js\"></script>\n<script>\n$(document).ready(function() {\n  $('#summernote').summernote();\n});\n</script>\n</body>\n</html>\n```\n\nThis code includes Summernote via CDN, initializes it on a textarea with the ID \"summernote\", and provides a basic example. Remember to replace the CDN links with local paths if you've installed Summernote using npm or yarn.\n\n\n### Configuration Options\n\nSummernote offers many configuration options to customize its behavior and appearance. These options are passed as a JavaScript object to the `summernote()` method.  Here are a few examples:\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote({\n    airMode: true, // Enables Air Mode (fullscreen editing)\n    height: 300, // Sets the editor height in pixels\n    callbacks: {\n      onInit: function(e) {\n        console.log('Summernote initialized!');\n      },\n      onImageUpload: function(files, editor, welEditable) {\n        // Custom image upload handling\n      }\n    },\n    toolbar: [\n      ['style', ['style']],\n      ['font', ['bold', 'italic', 'underline', 'clear']],\n      ['para', ['ul', 'ol', 'paragraph']],\n      ['insert', ['link', 'picture', 'video']],\n      ['view', ['fullscreen', 'codeview']]\n    ]\n  });\n});\n```\n\nThe full list of configuration options can be found in the Summernote documentation.  Refer to the official documentation for detailed explanations and usage examples for each option.  This allows for extensive customization to fit your application's needs.\n\n\n## Core Features\n\n### Editor Initialization\n\nSummernote's core functionality revolves around initializing the editor on a `<textarea>` element.  This is achieved using jQuery's `.summernote()` method, passing an optional configuration object as an argument.  The simplest initialization looks like this:\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote();\n});\n```\n\nThis replaces the `<textarea>` with the Summernote editor.  The ID `#summernote` should match the ID of your `<textarea>` element.  You can customize the editor's behavior and appearance extensively through the configuration object (see the Configuration Options section for details).  Remember that jQuery is a required dependency for Summernote.\n\n\n### Toolbar Customization\n\nThe Summernote toolbar is highly customizable. You can add, remove, or rearrange buttons to fit your specific requirements. This is done through the `toolbar` configuration option.  The `toolbar` option accepts a nested array, where each inner array represents a group of buttons.\n\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote({\n    toolbar: [\n      ['style', ['style']], // Style group\n      ['font', ['bold', 'italic', 'underline', 'clear']], // Font group\n      ['para', ['ul', 'ol', 'paragraph']], // Paragraph group\n      ['insert', ['link', 'picture', 'video']], // Insert group\n      ['view', ['fullscreen', 'codeview']] // View group\n    ]\n  });\n});\n```\n\nEach button within a group is represented by a string that corresponds to a Summernote command.  You can consult the Summernote documentation for a complete list of available commands.  Removing a group is as simple as omitting it from the array.  Experiment with different configurations to create your ideal toolbar.\n\n\n### Air Mode\n\nAir Mode provides a distraction-free, fullscreen editing experience.  It's enabled by setting the `airMode` configuration option to `true`:\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote({\n    airMode: true\n  });\n});\n```\n\nIn Air Mode, the toolbar is minimized, and the editor takes up the entire screen.  This is ideal for users who prefer a clean writing environment.  Switching back to the standard editor view can be done through the toolbar.\n\n\n### Content Manipulation\n\nSummernote provides methods for manipulating the editor's content programmatically.  You can access the content using the following methods:\n\n* **`code()`:** Returns the HTML content of the editor.\n* **`destroy()`:**  Destroys the Summernote editor, restoring the original `<textarea>`.\n* **`empty()`:** Clears the editor's content.\n* **`pasteHTML(html)`:** Pastes HTML content into the editor.\n* **`insertNode(node)`:** Inserts a DOM node into the editor.\n* **`insertText(text)`:** Inserts plain text into the editor.\n* **`setContents(html)`:** Sets the editor's content to the provided HTML.\n\n\nExample of setting content:\n\n```javascript\n$('#summernote').summernote('setContents', '<h1>Hello, World!</h1>');\n```\n\nExample of getting content:\n\n```javascript\nvar content = $('#summernote').summernote('code');\nconsole.log(content);\n```\n\n\n### Event Handling\n\nSummernote offers several events that you can listen for to respond to user actions or editor changes.  These events are bound using jQuery's `.on()` method:\n\n```javascript\n$('#summernote').on('summernote.change', function(we, contents, $editable) {\n  console.log('Content changed:', contents);\n});\n```\n\nThis example logs a message to the console whenever the editor's content changes.  Other notable events include:\n\n* `summernote.init`: Triggered when the editor is initialized.\n* `summernote.focus`: Triggered when the editor gains focus.\n* `summernote.blur`: Triggered when the editor loses focus.\n* `summernote.paste`: Triggered when content is pasted into the editor.\n* `summernote.keyup`: Triggered when a key is released.\n* `summernote.keydown`: Triggered when a key is pressed.\n\n\nRefer to the Summernote documentation for a comprehensive list of available events and their details.  Event handling provides powerful capabilities to integrate Summernote seamlessly into your applications and customize its functionality further.\n\n\n## Advanced Features\n\n### Plugins\n\nSummernote's functionality can be extended significantly through the use of plugins.  Plugins provide additional features and capabilities that are not included in the core library.  While Summernote doesn't have a built-in plugin manager, you can integrate external plugins by including their JavaScript and CSS files in your project and then initializing them alongside Summernote.\n\nMany community-contributed plugins are available online.  You'll need to carefully review the plugin's documentation for specific instructions on how to integrate it into your project. This typically involves including the plugin's files and then calling the plugin's initialization function, often passing a configuration object.\n\nFor example, a hypothetical plugin might be initialized like this:\n\n```javascript\n$(document).ready(function() {\n  $('#summernote').summernote({\n    // ... other Summernote options ...\n  }).myCustomPlugin({option1: 'value1', option2: 'value2'}); // Assuming 'myCustomPlugin' is the plugin's initialization function\n});\n\n```\n\nRemember to always check the license of any external plugins before integrating them into your project.\n\n\n### Extending Summernote\n\nFor more substantial modifications or custom features not easily achievable with plugins, you can directly extend Summernote's functionality. This involves modifying the Summernote codebase itself or creating custom functions that interact with the Summernote API.  This approach requires a deeper understanding of Summernote's internal workings and JavaScript development.  Be cautious when modifying the core codebase, as updates to Summernote may overwrite your changes. It is generally recommended to create separate functions and utilize Summernote's API as much as possible for extending functionality.\n\n\n\n### Customizing the UI\n\nSummernote's UI can be customized to match your application's design.  This can involve modifying the CSS styles of the editor or creating entirely new UI elements using JavaScript.  Modifying the CSS is usually the simplest method, allowing you to change colors, fonts, sizes, and spacing.  More complex UI changes might require writing custom JavaScript code to manipulate the DOM elements of the Summernote editor.  It's important to remember that directly manipulating the internal structure of the editor is generally discouraged, due to potential conflicts with future Summernote updates. Using CSS to override existing styles is the safer and recommended approach.\n\n\n### Integration with Frameworks\n\nSummernote can be integrated with various JavaScript frameworks like React, Angular, and Vue.js.  The integration process typically involves using the framework's component model to wrap the Summernote editor.  For example, in React you might create a custom component that renders the `<textarea>` and initializes Summernote within its lifecycle methods.  This approach requires familiarity with the specific framework's patterns and best practices.  Consult the documentation of your chosen framework for more details on how to integrate Summernote.\n\n\n### Accessibility\n\nBuilding accessible web applications is crucial.  Summernote strives to provide accessibility features, but further considerations are often needed depending on your specific use-case.   Ensure proper ARIA attributes are used, and the editor's content remains semantically correct.  Provide alternative text for images.  Consider keyboard navigation and screen reader compatibility. Thorough testing with assistive technologies is essential to ensure the editor is accessible to users with disabilities.  Using semantic HTML within the editor is crucial for screen readers to interpret the content correctly.  Regularly review and update your accessibility implementation to adhere to current best practices and standards (e.g., WCAG).\n\n\n## API Reference\n\n### Summernote Object\n\nThe core of Summernote's API is the Summernote object itself, which is created when you initialize the editor on a `<textarea>` element using `$(selector).summernote()`.  This object provides access to various methods and properties for manipulating the editor.  You access methods and properties of the Summernote object using the jQuery chaining syntax.  For example, `$('#summernote').summernote('code')` calls the `code()` method of the Summernote object associated with the element with the ID \"summernote\".\n\n\n### Methods\n\nSummernote provides numerous methods to interact with the editor programmatically. Some key methods include:\n\n* **`code()`:** Returns the HTML content of the editor.  Example: `$('#summernote').summernote('code')`\n* **`destroy()`:** Destroys the Summernote editor and restores the original `<textarea>`. Example: `$('#summernote').summernote('destroy')`\n* **`editor.insertText(text)`:** Inserts plain text at the current cursor position. Example: `$('#summernote').summernote('insertText', 'Hello')`\n* **`editor.insertNode(node)`:** Inserts a DOM node at the current cursor position. Example:  `$('#summernote').summernote('insertNode', $('<img src=\"image.jpg\">')[0])`\n* **`editor.pasteHTML(html)`:** Pastes HTML content at the current cursor position. Example: `$('#summernote').summernote('pasteHTML', '<h1>Heading</h1>')`\n* **`editor.setContents(html)`:** Sets the editor's content to the given HTML. Example: `$('#summernote').summernote('setContents', '<p>Paragraph</p>')`\n* **`empty()`:** Clears the editor's content. Example: `$('#summernote').summernote('empty')`\n* **`disable()`:** Disables the editor. Example: `$('#summernote').summernote('disable')`\n* **`enable()`:** Enables the editor. Example: `$('#summernote').summernote('enable')`\n* **`focus()`:** Focuses the editor. Example: `$('#summernote').summernote('focus')`\n* **`blur()`:** Removes focus from the editor. Example: `$('#summernote').summernote('blur')`\n* **`getSelection()`:** Returns the current selection in the editor.  This returns a complex object representing the selection.\n* **`insertImage(url, filename)`:** Inserts an image into the editor.\n* **`save()`:** Saves the current editor content (often used in conjunction with other methods like `code()`).\n* **`initialize()`:** Initializes (or re-initializes) Summernote on the given element.\n\n\n\n\nA comprehensive list of available methods, along with detailed descriptions and examples, can be found in the official Summernote documentation.  Consult the documentation for the most up-to-date information on all available methods and their parameters.\n\n\n### Events\n\nSummernote triggers various events during its operation.  These events allow developers to respond to specific actions or changes within the editor.  Events are bound using jQuery's `.on()` method, targeting the `summernote` namespace.  For example:\n\n```javascript\n$('#summernote').on('summernote.change', function(we, contents, $editable) {\n  console.log('Content changed:', contents);\n});\n```\n\nThis code snippet listens for the `summernote.change` event and logs the new content to the console whenever the editor content is modified.  Other important events include `summernote.init`, `summernote.focus`, `summernote.blur`, `summernote.paste`, `summernote.keyup`, and `summernote.keydown`.  Refer to the Summernote documentation for a complete list of available events.\n\n\n\n### Callbacks\n\nCallbacks provide a way to execute custom functions at specific points during the editor's lifecycle.  Callbacks are defined within the configuration object passed to the `summernote()` method.  Common callbacks include:\n\n* **`onInit`:** Called when the editor is initialized.\n* **`onFocus`:** Called when the editor gains focus.\n* **`onBlur`:** Called when the editor loses focus.\n* **`onChange`:** Called when the editor content changes.\n* **`onPaste`:** Called when content is pasted into the editor.\n* **`onImageUpload`:** Called when an image is uploaded.  This is often used to handle custom image upload logic.\n\n\nExample:\n\n```javascript\n$('#summernote').summernote({\n  callbacks: {\n    onInit: function() {\n      console.log('Summernote initialized!');\n    },\n    onImageUpload: function(files) {\n      // Handle image upload\n    }\n  }\n});\n```\n\nConsult the Summernote documentation for a complete list of available callbacks and their parameters.  Callbacks offer a powerful mechanism to extend and customize Summernote's functionality to meet your application's specific requirements.\n\n\n## Troubleshooting\n\n### Common Issues\n\nThis section addresses some frequently encountered issues when using Summernote:\n\n* **Summernote not initializing:**  Ensure that you have correctly included the necessary CSS and JavaScript files (both `summernote.css` and `summernote.js` or their minified counterparts). Double-check that the paths to these files are accurate.  Also verify that jQuery is included and loaded *before* Summernote's JavaScript file.  Inspect your browser's developer console for JavaScript errors.\n\n* **Incorrect toolbar:** Verify that the `toolbar` configuration option is correctly structured as a nested array of button groups and commands.  Refer to the documentation for the correct syntax.  Typographical errors in button names are a common cause of problems.\n\n* **Content not rendering correctly:** Check for invalid or malformed HTML in your content.  Ensure that your content is properly escaped before being inserted into the editor.  If pasting content, try stripping out unnecessary formatting first.\n\n* **Plugin conflicts:** If you're using plugins, ensure they are compatible with your version of Summernote and that they are correctly initialized.  Plugin conflicts can lead to unexpected behavior or errors.\n\n* **CSS conflicts:** Summernote's styling might conflict with your application's CSS. Use your browser's developer tools to inspect the CSS and resolve any conflicts.  Consider using more specific CSS selectors to target Summernote elements.\n\n\n### Debugging Tips\n\nWhen troubleshooting Summernote, these tips can be helpful:\n\n* **Browser's developer console:**  The browser's developer console (usually opened by pressing F12) is your best friend.  It will display JavaScript errors, warnings, and other diagnostic information that can help pinpoint the cause of problems.\n\n* **Simplify your code:** If you are having trouble with complex configurations or custom code, try simplifying your setup to isolate the problem.  Comment out sections of your code to see if that resolves the issue.\n\n* **Check your network requests:** If you are having issues loading Summernote or its dependencies, use your browser's developer tools to inspect the network requests to make sure the files are being loaded correctly and without errors.\n\n* **Examine the HTML structure:** Inspect the HTML structure of your Summernote editor using your browser's developer tools.  This can help you identify unexpected elements or styling issues.\n\n* **Use the Summernote source code:** If you are comfortable with debugging JavaScript code, inspect the Summernote source code to trace the execution flow and identify potential problems.\n\n\n### Error Messages\n\nSummernote may produce error messages in your browser's console.  These messages should provide clues about the nature of the problem.  Pay close attention to error messages and search online for solutions related to the specific error.  The error message might indicate problems with:\n\n* **Incorrect file paths:**  Summernote cannot find the required CSS or JS files.\n* **Missing dependencies:** A required library, such as jQuery, isn't included or properly loaded.\n* **Incorrect configuration:**  A configuration option might have an invalid value or syntax.\n* **JavaScript errors in your custom code:**  An error in your custom callbacks or extensions is preventing Summernote from functioning properly.\n\n\n### Community Support\n\nIf you're unable to resolve an issue using the above methods, consider seeking help from the Summernote community.  Online forums, issue trackers, or the Summernote's official website may provide answers to your questions or assistance from other developers.  When seeking help, be sure to provide the following information:\n\n* **Summernote version:** Specify the exact version of Summernote you are using.\n* **Browser and version:**  Indicate the browser and version you're experiencing the issue on.\n* **Relevant code snippets:** Include the relevant portions of your code that are causing the problem.\n* **Error messages:**  Provide any error messages you are receiving.\n* **Steps to reproduce:** Describe the steps necessary to reproduce the problem.\n\nClear and concise information will significantly help others in the community assist you more effectively.\n\n\n## Examples\n\n### Simple Example\n\nThis example demonstrates the most basic Summernote integration:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Summernote Simple Example</title>\n<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<textarea id=\"summernote\"></textarea>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js\"></script>\n<script>\n  $(document).ready(function() {\n    $('#summernote').summernote();\n  });\n</script>\n</body>\n</html>\n```\n\nThis code includes Summernote via CDN, initializes it on a `<textarea>` with the ID \"summernote\", and uses the default configuration.  Remember to replace the CDN links with local paths if you've installed Summernote using npm or yarn.  This provides a fully functional WYSIWYG editor with the default toolbar.\n\n\n### Advanced Example\n\nThis example showcases more advanced features, including custom toolbar, Air Mode, and a callback function:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Summernote Advanced Example</title>\n<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<textarea id=\"summernote\"></textarea>\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js\"></script>\n<script>\n$(document).ready(function() {\n  $('#summernote').summernote({\n    airMode: true,\n    toolbar: [\n      ['style', ['style']],\n      ['font', ['bold', 'italic', 'underline']],\n      ['para', ['ul', 'ol', 'paragraph']],\n      ['insert', ['link', 'picture']]\n    ],\n    callbacks: {\n      onChange: function(contents, $editable) {\n        console.log('Content changed: ', contents);\n      }\n    }\n  });\n});\n</script>\n</body>\n</html>\n```\n\nThis example uses Air Mode, customizes the toolbar to include only specific buttons, and adds a callback function that logs the content changes to the console. This illustrates how to customize Summernote's functionality and appearance to fit specific application requirements.  Remember to adjust paths to your local files if you're not using the CDN.\n\n\n### Integration with other libraries\n\nIntegrating Summernote with other libraries depends heavily on the specific library. There isn't a universal approach.  However, the general principle involves initializing Summernote after the other library has been set up and ensuring that there are no conflicts between their JavaScript or CSS.\n\nFor example, integrating with a date picker library:\n\n1. **Include Libraries:** Include both Summernote and the date picker library's CSS and JS files in your project.\n\n2. **Initialize Libraries:** Initialize the date picker library *before* initializing Summernote. This ensures the date picker is ready before Summernote attempts to interact with it.\n\n3. **Custom Callback (if needed):** If the date picker needs specific integration within Summernote (for example, adding a button to insert a date), create a custom callback function within Summernote's configuration to handle this interaction.  This callback might involve adding a button to the toolbar and handling the associated event to insert the selected date into the editor.\n\n4. **Handle potential conflicts:** Carefully review the documentation of both libraries for potential CSS or JavaScript conflicts.  Resolve these conflicts by overriding CSS classes or adjusting the order of inclusion in your HTML.\n\n\nRemember that the exact implementation will depend significantly on the specific libraries involved. Always refer to the individual libraries' documentation for detailed integration instructions.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"summernote.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"Summernote - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}