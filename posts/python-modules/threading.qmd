---
title: "threading - Documentation"
categories: [ "Python Modules" ]
---


### What is Threading?

Threading is a powerful technique in Python that allows you to run multiple parts of your program concurrently within a single process.  Instead of executing instructions one after another, threads enable the execution of multiple instruction sequences seemingly at the same time.  Each thread shares the same memory space as other threads within the same process, allowing for easy communication and data sharing between them.  This is in contrast to processes, which have their own independent memory spaces.  In Python, threads are managed using the `threading` module.

### Why Use Threading?

Threading offers several key advantages:

* **Improved Responsiveness:**  In applications with long-running tasks (e.g., network requests, file I/O), threads can prevent the application from freezing. While one thread handles the time-consuming operation, other threads can continue responding to user input or performing other tasks.

* **Enhanced Performance (in certain scenarios):**  For I/O-bound tasks (tasks that spend a significant amount of time waiting for external resources), threading can lead to performance improvements by overlapping waiting periods with computation.  While one thread waits, another can execute.  However, it's crucial to understand the limitations imposed by the Global Interpreter Lock (GIL), discussed below.

* **Simplified Concurrency:**  Threads are generally easier to create and manage than processes, especially when dealing with data sharing between concurrent tasks.  The shared memory space simplifies inter-thread communication.


### Threading vs. Multiprocessing

While both threading and multiprocessing offer concurrency, they differ significantly:

* **Memory Space:** Threads share the same memory space within a process, while processes have independent memory spaces.  This shared memory makes inter-thread communication simpler but introduces potential challenges related to data consistency and race conditions.  Processes avoid these issues through memory isolation but incur higher overhead in communication due to the need for inter-process communication (IPC) mechanisms.

* **Overhead:**  Creating and managing threads has lower overhead than creating and managing processes.  However, the GIL (explained below) limits the true parallelism achievable with threads in Python.

* **Parallelism vs. Concurrency:** Multiprocessing achieves true parallelism (multiple CPU cores executing instructions simultaneously) on multi-core systems, whereas threading primarily offers concurrency (the appearance of simultaneous execution) due to the GIL in CPython.


### The Global Interpreter Lock (GIL)

The Global Interpreter Lock (GIL) is a mechanism in CPython (the standard implementation of Python) that allows only one native thread to hold control of the Python interpreter at any one time.  This means that even on multi-core systems, only one thread can execute Python bytecodes at a given moment.  The GIL is released and acquired frequently, giving the illusion of parallelism, especially for I/O-bound tasks.  However, for CPU-bound tasks (tasks that heavily utilize the CPU), the GIL becomes a significant bottleneck, preventing true parallelism.

The GIL doesn't affect all Python code.  Extensions written in C or C++ can release the GIL, allowing true parallelism in those sections of the code.  For CPU-bound tasks, multiprocessing is generally preferred over threading to overcome the GIL limitations and leverage multiple cores effectively.


## Basic Threading Concepts

### Creating Threads with the `threading` Module

Python's `threading` module provides the primary tools for working with threads. The most common way to create a thread is by subclassing the `Thread` class or using the `Thread` class directly with a target function.

**Method 1: Subclassing `Thread`**

This approach is useful when you need to customize thread behavior beyond simply running a function.

```python
import threading
import time

class MyThread(threading.Thread):
    def __init__(self, name):
        threading.Thread.__init__(self)
        self.name = name

    def run(self):
        print(f"Thread {self.name}: starting")
        time.sleep(2)  # Simulate some work
        print(f"Thread {self.name}: finishing")

# Create and start threads
thread1 = MyThread("Thread-1")
thread2 = MyThread("Thread-2")
thread1.start()
thread2.start()
```

**Method 2: Using `Thread` with a target function**

This is a more concise approach for simpler thread tasks.

```python
import threading
import time

def my_function(name):
    print(f"Thread {name}: starting")
    time.sleep(2)
    print(f"Thread {name}: finishing")

# Create and start threads
thread1 = threading.Thread(target=my_function, args=("Thread-1",))
thread2 = threading.Thread(target=my_function, args=("Thread-2",))
thread1.start()
thread2.start()

```

### The `Thread` Class

The `threading.Thread` class is central to thread management. Key attributes and methods include:

* **`__init__(self, group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)`:** The constructor.  `target` specifies the function to run in the thread, `args` and `kwargs` provide arguments to the target function, and `daemon` controls whether it's a daemon thread.

* **`start(self)`:** Starts the thread's activity.

* **`run(self)`:**  This method contains the code that will be executed in the thread. If you subclass `Thread`, you override this method.  If you use `target`, this method is automatically defined to call the target function.

* **`join(self, timeout=None)`:** Waits for the thread to complete.  Optional `timeout` specifies a maximum waiting time.

* **`getName(self)` and `setName(self, name)`:** Get and set the thread's name.

* **`is_alive(self)`:** Checks if the thread is currently running.


### Starting and Joining Threads

Threads are started using the `start()` method. This initiates the execution of the thread's `run()` method.  To ensure that a thread completes before your main program continues, use the `join()` method.  This will block the main thread until the specified thread finishes its execution.

```python
import threading
import time

def my_task():
    time.sleep(1)
    print("Task completed")

thread = threading.Thread(target=my_task)
thread.start()
thread.join()  # Wait for the thread to finish
print("Main program continues")
```

### Daemon Threads

Daemon threads are background threads that don't prevent the program from exiting.  If the main thread completes and only daemon threads are left running, the Python interpreter will exit without waiting for the daemon threads to finish.  This is useful for tasks like monitoring or cleanup that don't need to run to completion.  Daemon threads are set using the `daemon=True` keyword argument in the `Thread` constructor.

```python
import threading
import time

def daemon_task():
    while True:
        print("Daemon thread running...")
        time.sleep(1)

daemon_thread = threading.Thread(target=daemon_task, daemon=True)
daemon_thread.start()
time.sleep(3) # Main thread will exit even if daemon is running
print("Main program exiting")
```

### Thread Safety and Race Conditions

Because threads share the same memory space, you must be careful to avoid race conditions. A race condition occurs when multiple threads try to access and modify the same shared resource simultaneously, leading to unpredictable and potentially incorrect results.

To ensure thread safety, use synchronization mechanisms like locks (`threading.Lock`), semaphores (`threading.Semaphore`), or other suitable synchronization primitives.  A lock ensures that only one thread can access a shared resource at a time.

```python
import threading

shared_resource = 0
lock = threading.Lock()

def increment():
    global shared_resource
    for _ in range(100000):
        with lock: # Acquire the lock before accessing the resource
            shared_resource += 1

thread1 = threading.Thread(target=increment)
thread2 = threading.Thread(target=increment)
thread1.start()
thread2.start()
thread1.join()
thread2.join()

print(f"Final value of shared_resource: {shared_resource}") # Should be 200000 without race condition
```

Without the lock, the final value would likely be less than 200000 due to race conditions.  The `with lock:` statement ensures that the `shared_resource` is accessed atomically and prevents race conditions.


## Thread Synchronization

### Locks (`threading.Lock`)

A `threading.Lock` object is the simplest synchronization primitive. It acts as a mutual exclusion lock, ensuring that only one thread can acquire the lock at a time.  Other threads attempting to acquire the lock will block until it's released.  This prevents race conditions when multiple threads access shared resources.

```python
import threading
import time

lock = threading.Lock()
shared_resource = 0

def worker():
    global shared_resource
    with lock:  # Acquire the lock using a context manager
        shared_resource += 1
        time.sleep(0.1) # Simulate work
        print(f"Worker thread incremented, shared_resource = {shared_resource}")


threads = []
for i in range(5):
    thread = threading.Thread(target=worker)
    threads.append(thread)
    thread.start()

for thread in threads:
    thread.join()

print(f"Final value of shared_resource: {shared_resource}") # Should be 5
```


### RLocks (`threading.RLock`)

An `RLock` (reentrant lock) is similar to a `Lock`, but it allows a thread to acquire the same lock multiple times without blocking.  This is useful in situations where a function might recursively call itself, and you need to protect shared resources within that recursion.

```python
import threading

rlock = threading.RLock()
counter = 0

def my_function():
    global counter
    with rlock:
        counter += 1
        my_function() # Recursive call - safe with RLock

thread = threading.Thread(target=my_function)
thread.start()
thread.join()

print(f"Counter value: {counter}")
```


### Semaphores (`threading.Semaphore`)

A `threading.Semaphore` controls access to a shared resource by a limited number of threads simultaneously. It maintains a counter that represents the number of available resources.  Threads acquire the semaphore (decrementing the counter) to access the resource and release it (incrementing the counter) when finished.  If the counter is zero, threads attempting to acquire the semaphore will block.

```python
import threading
import time

semaphore = threading.Semaphore(2) # Allow 2 threads to access simultaneously

def access_resource():
    with semaphore:
        print(f"Thread {threading.current_thread().name} accessing resource")
        time.sleep(1)
        print(f"Thread {threading.current_thread().name} releasing resource")

threads = []
for i in range(5):
    thread = threading.Thread(target=access_resource)
    threads.append(thread)
    thread.start()

for thread in threads:
    thread.join()
```


### Events (`threading.Event`)

An `Event` object is a simple signaling mechanism.  Threads can wait on an event using `wait()`, and another thread can signal the event using `set()`.  The `clear()` method resets the event.

```python
import threading
import time

event = threading.Event()

def worker():
    print("Worker thread waiting for event...")
    event.wait()
    print("Worker thread received event!")

thread = threading.Thread(target=worker)
thread.start()

time.sleep(2)
print("Main thread setting event...")
event.set()
thread.join()

```


### Condition Variables (`threading.Condition`)

A `Condition` object provides more sophisticated synchronization than locks or events. It allows threads to wait for a specific condition to become true before proceeding.  It's typically used in conjunction with a lock.

```python
import threading
import time

condition = threading.Condition()
data_ready = False

def producer():
    global data_ready
    with condition:
        print("Producer: producing data...")
        time.sleep(2)
        data_ready = True
        condition.notify() # Notify waiting consumer

def consumer():
    global data_ready
    with condition:
        print("Consumer: waiting for data...")
        condition.wait_for(lambda: data_ready)  # Wait until data_ready is True
        print("Consumer: processing data...")

producer_thread = threading.Thread(target=producer)
consumer_thread = threading.Thread(target=consumer)
producer_thread.start()
consumer_thread.start()
producer_thread.join()
consumer_thread.join()

```


### Using Queues for Inter-thread Communication (`queue.Queue`)

The `queue.Queue` class provides a thread-safe way for threads to exchange data.  Producer threads can put items into the queue, and consumer threads can get items from the queue.  The queue handles synchronization internally.

```python
import threading
import queue

q = queue.Queue()

def producer(num_items):
    for i in range(num_items):
        q.put(i)
        print(f"Producer put item {i}")

def consumer():
    while True:
        try:
            item = q.get(True, 1) # Get with timeout for graceful exit
            print(f"Consumer got item {item}")
            q.task_done() # Signal item processing is complete
        except queue.Empty:
            break


producer_thread = threading.Thread(target=producer, args=(5,))
consumer_thread = threading.Thread(target=consumer)

producer_thread.start()
consumer_thread.start()
producer_thread.join()
q.join() # Block until all items are processed
consumer_thread.join()

```


## Advanced Threading Techniques

### Thread Pools (`concurrent.futures.ThreadPoolExecutor`)

For managing a fixed-size pool of worker threads, the `concurrent.futures.ThreadPoolExecutor` is highly recommended.  It simplifies the creation and management of threads, especially when dealing with many short-lived tasks.  The executor handles thread creation, reuse, and cleanup automatically.

```python
import concurrent.futures
import time

def task(n):
    time.sleep(1)
    return n * n

with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
    futures = [executor.submit(task, i) for i in range(10)]
    for future in concurrent.futures.as_completed(futures):
        result = future.result()
        print(f"Result: {result}")

print("All tasks completed")
```

This code creates a pool of 5 worker threads.  Each task is submitted to the executor, which assigns it to an available thread. `as_completed` iterates over the results as they become available, preventing blocking until all tasks are finished.


### Context Managers for Threading

Context managers (`with` statement) can enhance code readability and ensure proper resource management, including thread synchronization. For example, acquiring and releasing a lock can be cleanly handled within a `with` block.

```python
import threading

lock = threading.Lock()
shared_resource = 0

def my_function():
    global shared_resource
    with lock:
        shared_resource += 1

# The lock is automatically released when exiting the 'with' block, even if exceptions occur.
```

This pattern avoids potential errors from forgetting to release the lock, improving code robustness.  Similar context manager usage is beneficial with other synchronization primitives.


### Thread-Local Storage (`threading.local`)

Thread-local storage allows each thread to have its own copy of a variable.  Changes made to the variable by one thread don't affect other threads.  This avoids the need for explicit synchronization and simplifies code when thread-specific data is needed.

```python
import threading

local_storage = threading.local()

def my_function():
    local_storage.my_value = threading.current_thread().name
    print(f"Thread {local_storage.my_value}: My value is {local_storage.my_value}")

threads = []
for i in range(3):
    thread = threading.Thread(target=my_function)
    threads.append(thread)
    thread.start()

for thread in threads:
    thread.join()
```

Each thread will have its own independent `my_value` attribute within `local_storage`.


### Debugging and Profiling Threads

Debugging and profiling multithreaded applications can be more challenging than single-threaded ones.  Tools like debuggers (e.g., pdb) can be used, but you need to be aware that stepping through code might alter timing and behavior.  Profilers can help identify performance bottlenecks within threads.  Adding logging statements at strategic points in the code can assist in understanding thread execution flow and identifying race conditions or deadlocks.  Furthermore, specialized tools for thread analysis exist, allowing for visualizing thread interactions and identifying concurrency issues.  Careful design and use of logging are often the most effective debugging approaches for multithreaded programs.


## Threading in Specific Modules

### Threading in Network Programming

Threading is frequently used in network programming to handle multiple clients concurrently.  A server can create a separate thread to manage each client connection, allowing it to handle many clients simultaneously without blocking.  This improves responsiveness and scalability.  Libraries like `socket` are commonly used alongside threading.  However, it's essential to use appropriate thread safety mechanisms (e.g., locks) to protect shared resources accessed by multiple threads handling different client connections, such as shared connection pools or logging structures.

```python
import socket
import threading

def handle_client(client_socket, address):
    print(f"Accepted connection from {address}")
    while True:
        try:
            data = client_socket.recv(1024)
            if not data:
                break
            # Process the received data
            client_socket.sendall(data)
        except:
            break
    client_socket.close()

def start_server(host, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((host, port))
        s.listen()
        while True:
            client_socket, address = s.accept()
            thread = threading.Thread(target=handle_client, args=(client_socket, address))
            thread.start()

# Example usage:
start_server('localhost', 8080)

```

This example demonstrates a simple threaded server. Each client connection gets its own thread to avoid blocking.  Error handling and robust resource management are crucial in production-level network applications.


### Threading in GUI Programming

Threading in GUI programming is essential to prevent the main GUI thread from becoming unresponsive during long-running operations.  Long tasks should be offloaded to separate worker threads, while updates to the GUI are performed back on the main thread (using techniques like signals and slots in Qt, or callbacks in Tkinter).  Libraries like PyQt, Tkinter, or wxPython provide mechanisms for thread-safe GUI updates.  Failure to update the GUI only from the main thread usually leads to unpredictable behavior and crashes.

```python
import tkinter as tk
import threading
import time

def long_running_task():
    time.sleep(5)
    root.after(0, lambda: label.config(text="Task completed!"))  #Update the GUI back on main thread

root = tk.Tk()
label = tk.Label(root, text="Starting task...")
label.pack()

thread = threading.Thread(target=long_running_task)
thread.start()

root.mainloop()
```

This example uses `root.after(0, ...)` in Tkinter to schedule a GUI update on the main thread after the long-running task.


### Threading in Database Interactions

When interacting with databases, threading can improve performance by allowing multiple database operations to occur concurrently.  However, you must be mindful of database connection pooling and thread safety.   Most database connectors (e.g., psycopg2 for PostgreSQL, mysql.connector for MySQL) are thread-safe in the sense that multiple threads can use the same connection pool simultaneously.  However, a single database connection usually should only be used by one thread at a time to avoid data corruption. Connection pools manage this efficiently.



### Threading with External Libraries

Many external libraries are designed to be thread-safe, allowing their use within multithreaded applications.  However, it is crucial to check the library's documentation to verify its thread safety guarantees.  If a library isn't explicitly thread-safe, you might need to implement your own synchronization mechanisms (locks, semaphores, etc.) to prevent race conditions when accessing its resources from multiple threads.  Failure to do so can lead to unpredictable results or program crashes.  Always consult the library's documentation regarding thread safety before integrating it into a multithreaded application.


## Best Practices and Common Pitfalls

### Avoiding Race Conditions

Race conditions occur when multiple threads access and modify shared resources concurrently, leading to unpredictable results.  The primary way to avoid race conditions is to use appropriate synchronization primitives (locks, semaphores, etc.) to protect shared resources.  Ensure that only one thread can access a shared resource at any given time.  Consider using context managers (`with` statements) for cleaner and safer lock acquisition and release.  Careful design of data structures and algorithms is also crucial; consider using thread-safe data structures where appropriate (e.g., `queue.Queue`).

### Deadlocks

A deadlock occurs when two or more threads are blocked indefinitely, waiting for each other to release resources that they need.  This typically involves circular dependencies: thread A is waiting for a resource held by thread B, and thread B is waiting for a resource held by thread A.  To prevent deadlocks, avoid circular dependencies in resource acquisition, and ensure resources are acquired in a consistent order across all threads.  Consider using timeouts when acquiring locks to prevent indefinite blocking, allowing the program to detect and potentially recover from a potential deadlock situation.

### Livelocks

A livelock is a situation where two or more threads are constantly changing their state in response to each other, but none of them are able to make progress.  Unlike deadlocks, threads are not blocked, but they are continually retrying and failing to make forward progress.  Livelocks are more subtle than deadlocks and are harder to detect.  Carefully designing the thread interaction patterns and algorithms helps to avoid livelocks.  Strategies like using random delays or backoff mechanisms can help to break out of livelock situations.

### Efficient Threading Strategies

Efficient threading involves choosing appropriate strategies for different tasks.  For I/O-bound tasks (where the program spends much time waiting for external operations like network requests), threading is generally effective because the waiting time is overlapped.  For CPU-bound tasks (where the CPU is constantly utilized), threading might not offer significant performance improvements due to the Global Interpreter Lock (GIL) in CPython.  Multiprocessing is usually preferred for CPU-bound tasks.  Consider using thread pools (`concurrent.futures.ThreadPoolExecutor`) to manage a limited number of threads, avoiding excessive overhead from thread creation and destruction.


### Performance Considerations

The benefits of threading are limited by the GIL in CPython.  True parallelism is only possible for I/O-bound tasks or when using extensions that release the GIL.  Overusing threads can lead to performance degradation due to excessive context switching overhead.  Profiling tools are helpful in identifying performance bottlenecks.  Appropriate use of thread pools is crucial to prevent thread explosion and improve efficiency.  Always benchmark and analyze performance to ensure that threading improves rather than harms your application.


### Testing and Debugging Multithreaded Code

Testing and debugging multithreaded code requires specialized techniques.  Traditional debugging tools may not provide enough visibility into concurrent execution.  Techniques like adding extensive logging to track thread activity, using specialized debugging tools, and designing testable units are essential.  Reproducing race conditions can be challenging; you may need to run tests repeatedly or use controlled scenarios to increase the chances of triggering them.  Consider using tools that aid in visualizing thread interactions and identifying deadlocks.  Thorough testing and careful code design are essential to producing reliable multithreaded applications.




## Example Applications

### A Simple Multithreaded Web Server

This example demonstrates a basic multithreaded web server using the `socket` module and the `threading` module.  It's a simplified illustration and lacks many features of a production-ready server.

```python
import socket
import threading

def handle_client(client_socket, addr):
    print(f"Accepted connection from {addr}")
    request = client_socket.recv(1024).decode()
    print(f"Received request: {request}")
    response = "HTTP/1.1 200 OK\r\n\r\nHello, world!"
    client_socket.sendall(response.encode())
    client_socket.close()

def start_server(host, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((host, port))
        s.listen()
        while True:
            client_socket, addr = s.accept()
            thread = threading.Thread(target=handle_client, args=(client_socket, addr))
            thread.start()

if __name__ == "__main__":
    start_server('127.0.0.1', 8000)
```

This server accepts connections, creates a new thread for each client, sends a simple "Hello, world!" response, and then closes the connection.  Remember to replace `'127.0.0.1'` and `8000` with your desired host and port.  This example lacks error handling and is not suitable for production use.


### Multithreaded File Processing

This example demonstrates processing multiple files concurrently using threads.  It simulates a task (e.g., analyzing file contents) on each file.

```python
import threading
import time
import os

def process_file(filename):
    print(f"Processing {filename}...")
    time.sleep(2)  # Simulate some work
    print(f"Finished processing {filename}")

filenames = ["file1.txt", "file2.txt", "file3.txt", "file4.txt"]  # Replace with actual filenames

threads = []
for filename in filenames:
    thread = threading.Thread(target=process_file, args=(filename,))
    threads.append(thread)
    thread.start()

for thread in threads:
    thread.join()

print("All files processed.")
```

This creates a thread for each file and waits for all threads to complete before exiting.  Remember to create dummy files named "file1.txt", "file2.txt", etc.  Error handling and more robust file processing logic would be needed in a production setting.


### Concurrent Data Processing with Thread Pools

This example uses `concurrent.futures.ThreadPoolExecutor` to process data concurrently.

```python
import concurrent.futures
import time

def process_item(item):
    time.sleep(1)  # Simulate processing
    return item * 2

data = list(range(10))

with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
    results = list(executor.map(process_item, data))

print(f"Results: {results}")
```

This code processes each item in the `data` list concurrently, leveraging a thread pool to manage the worker threads efficiently.  The `executor.map` function applies the `process_item` function to each item and returns the results in order.


### A GUI Application with Background Threads

This example uses Tkinter to demonstrate a GUI application with a background thread.

```python
import tkinter as tk
import threading
import time

def long_running_task():
    time.sleep(5)
    root.after(0, lambda: label.config(text="Task completed!"))

root = tk.Tk()
label = tk.Label(root, text="Starting task...")
label.pack()
button = tk.Button(root, text="Start", command=lambda: threading.Thread(target=long_running_task).start())
button.pack()
root.mainloop()
```

This creates a simple GUI with a button that starts a long-running task in a background thread.  The GUI remains responsive while the background task is running.  The result is updated on the main thread using `root.after` to ensure thread safety.  More sophisticated GUI frameworks might utilize signals and slots or other techniques for inter-thread communication. Remember to adapt this to your preferred GUI toolkit.


## Appendix: Further Reading and Resources

### Books and Articles on Concurrency

Several excellent books and articles delve deeper into the complexities of concurrency and parallel programming:

* **"Programming Concurrency on the JVM" by Venkat Subramaniam:** While Java-focused, the concepts are broadly applicable to other languages and provide a strong foundation in concurrency patterns.

* **"Seven Concurrency Models in Seven Weeks" by Paul Butcher:** Explores various concurrency models, offering a comparative perspective.

* **"Concurrency in Go" by Katherine Cox-Buday:** A practical guide to concurrency in Go, providing valuable insights into goroutines and channels, concepts that have parallels in other concurrent programming paradigms.

* **Articles on the Python `threading` module and related topics from sites like Real Python, Towards Data Science, and similar publications:** Searching these sites for "Python threading," "Python multiprocessing," or "Python concurrency" will yield numerous articles covering various aspects of the subject.  Look for articles that cover advanced topics such as thread pools, synchronization primitives, and common pitfalls.


### Online Courses and Tutorials

Many online platforms offer courses and tutorials on concurrency and parallel programming:

* **Coursera, edX, Udacity, and Udemy:** Search these platforms for courses on "parallel programming," "concurrent programming," "multithreading," or "distributed systems."  These courses often cover theoretical foundations and practical applications of concurrent programming.

* **YouTube channels dedicated to programming and software engineering:** Many channels offer video tutorials on specific aspects of multithreading and concurrency in Python and other programming languages.


### Python Documentation on Threading

The official Python documentation provides comprehensive information on the `threading` module and related concepts:

* **The Python `threading` module documentation:** This is the primary resource for learning about the functions and classes provided by the `threading` module.  Pay close attention to the details of synchronization primitives and their usage.

* **The Python `concurrent.futures` module documentation:** This module provides higher-level interfaces for working with threads and processes, simplifying the management of concurrent tasks.

* **The Python `multiprocessing` module documentation:** While not strictly threading, it's closely related and often used as an alternative for CPU-bound tasks that are affected by the GIL.  Understanding the differences and trade-offs between threading and multiprocessing is important for efficient concurrent programming in Python.


Remember to always consult the latest versions of the Python documentation, as it gets updated periodically.  Combining the official documentation with tutorials and books will give you a comprehensive understanding of threading in Python.

