{"title":"overLIB - Documentation","markdown":{"yaml":{"title":"overLIB - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is overLIB?","containsRefs":false,"markdown":"\n\n\n\noverLIB is a small, lightweight JavaScript library designed to create dynamic, customizable tooltips and rollovers on web pages.  It allows you to display additional information—text, images, or even other HTML content—when a user hovers their mouse over a specific element. This information is displayed in a separate layer (\"overlay\") positioned relative to the triggering element.  The library offers a flexible approach to styling and positioning these overlays, allowing for diverse visual effects and user experiences.\n\n### Why use overLIB?\n\noverLIB offers several advantages:\n\n* **Simplicity:**  It's easy to implement and requires minimal code.  The core functionality is concise and straightforward.\n* **Lightweight:** The library's small file size contributes to faster page load times. This is important for optimal user experience.\n* **Customization:** A rich set of configuration options allows for highly customized tooltips.  You can control appearance, position, content, and behavior.\n* **Cross-browser compatibility (with caveats):** While not perfectly compatible across all browsers and versions, it strives for wide compatibility.  (See Browser Compatibility section below for details).\n* **No external dependencies:** overLIB doesn't rely on any other JavaScript libraries, making integration cleaner.\n\n### Setting up overLIB\n\nTo use overLIB, you need to:\n\n1. **Download:** Download the `overlib.js` file from the official source (link to source should be provided here if available).\n2. **Include:** Include the JavaScript file in your HTML document using a `<script>` tag.  Typically, this is placed within the `<head>` section or just before the closing `</body>` tag:\n\n   ```html\n   <script src=\"overlib.js\"></script>\n   ```\n\n3. **Implement:** Use the `overlib()` function in your HTML to create tooltips.  This usually involves adding an `onmouseover` event handler to the element triggering the tooltip, calling `overlib()` with the tooltip content as an argument.  Refer to the detailed usage examples and API documentation for comprehensive instructions.\n\n### Browser Compatibility\n\noverLIB aims for broad browser compatibility, but some limitations exist, particularly with older browsers or those with less robust JavaScript support. While it generally works across major browsers like Chrome, Firefox, Safari, and Edge,  some features might not function identically or might require specific workarounds depending on the browser version and its rendering engine. Thorough testing across target browsers is recommended to ensure consistent behavior.  Specific compatibility issues and known workarounds should be documented separately (link to that documentation would go here).  It's important to be aware that very outdated browsers might not support the library at all.\n\n\n## Basic Usage\n\n### Creating Simple Tooltips\n\nThe simplest way to create a tooltip with overLIB is by using the `overlib()` function within an `onmouseover` event handler.  This function takes the tooltip text as its primary argument.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('This is a simple tooltip');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nThis code creates a link. When the mouse hovers over the link, a tooltip displaying \"This is a simple tooltip\" appears.  The `nd()` function (provided by overLIB) hides the tooltip on mouseout.\n\n\n### Positioning Tooltips\n\noverLIB offers various ways to control tooltip positioning. By default, tooltips appear below the triggering element.  You can modify the positioning using parameters passed to the `overlib()` function. For example:\n\n```html\n<a href=\"#\" onmouseover=\"overlib('Tooltip above',CAPTION,'Tooltip above',ABOVE);\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nThis positions the tooltip *above* the link.  `CAPTION` and `ABOVE` are pre-defined constants. The documentation should provide a complete list of available positioning constants (e.g., `BELOW`, `LEFT`, `RIGHT`, `CENTER`, etc.) and how to combine them for fine-grained control.\n\nFurthermore, you can use additional parameters to fine-tune the positioning's offset from the triggering element. The specifics of these offset parameters should be described in a separate section.\n\n\n### Styling Tooltips with CSS\n\nYou can style the appearance of tooltips using CSS.  While overLIB might provide some default styles, you can override these using custom CSS rules.  Target the tooltip element using a specific class or ID assigned by overLIB (the exact selector should be specified in the documentation). For example:\n\n\n```html\n<style>\n  .overlib {\n    background-color: #f0f0f0;\n    border: 1px solid #ccc;\n    padding: 5px;\n    font-size: 14px;\n  }\n</style>\n\n<a href=\"#\" onmouseover=\"overlib('Styled Tooltip');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nThis adds a background, border, and padding to the tooltip.  The `.overlib` class (or whatever class overLIB uses) is crucial for targeting the tooltip element with your CSS.  Remember that the specific class name might vary depending on the overLIB version.\n\n\n### Adding Content to Tooltips\n\nTooltips can contain more than just plain text. You can add HTML elements, images, and other content:\n\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<img src=\\\"image.jpg\\\" alt=\\\"Image\\\"> This is a tooltip with an image.');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nThis example displays an image along with text.  Note the proper escaping of quotes within the HTML string passed to `overlib()`. The full capabilities for embedding HTML and the potential limitations or necessary escaping should be fully detailed.\n\n\n### Handling Multiple Tooltips\n\nManaging multiple tooltips involves ensuring that only one tooltip is visible at any given time.  While basic usage might not explicitly address this issue,  the documentation needs to explain strategies to handle potential conflicts.  This may involve carefully managing the `onmouseover` and `onmouseout` events, or utilizing overLIB's advanced features to control tooltip visibility or prioritization (if any such features exist).  Examples illustrating the best practices for handling multiple tooltips on a page would be very valuable.\n\n\n## Advanced Techniques\n\n### Using JavaScript Variables in Tooltips\n\nInstead of hardcoding tooltip text, you can use JavaScript variables to create dynamic tooltips.  This allows you to easily change the tooltip content based on user interactions or data changes.\n\n```javascript\nlet myVariable = \"Dynamic Tooltip Text\";\nlet myElement = document.getElementById(\"myElement\");\n\nmyElement.onmouseover = function() {\n  overlib(myVariable);\n};\nmyElement.onmouseout = nd;\n```\n\nThis code uses the `myVariable` to populate the tooltip content.  Remember to ensure that the variable is correctly scoped and accessible within the `overlib()` call.\n\n\n### Dynamically Updating Tooltips\n\nYou can update the content of an existing tooltip dynamically.  However, overLIB's core functionality doesn't directly support this.  Techniques to achieve dynamic updates would involve manipulating the DOM directly, potentially by creating the tooltip using methods that allow for later modification.  This might require accessing the tooltip element through its class name or ID, then updating its content using JavaScript's DOM manipulation methods. The precise implementation will depend on the specific version of overLIB and the way it generates its tooltips, details of which should be provided in the documentation.  This section should include code examples to demonstrate how this could be implemented if possible, or why it's not feasible with the library.\n\n\n### Using Images in Tooltips\n\nImages can be easily integrated into tooltips by embedding the `<img>` tag directly within the HTML string passed to `overlib()`.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<img src=\\\"myimage.png\\\" alt=\\\"Description\\\">');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nEnsure that the image path (`src`) is correct and that the `alt` attribute provides accessible text for users who cannot see the image.  Consider adding error handling in case the image fails to load.  Guidelines for image optimization (size, format) for better performance should also be included.\n\n\n### Creating Complex Layouts\n\nCreating complex layouts involves using more sophisticated HTML within the tooltip content.  You can use tables, lists, or any other HTML element to structure the tooltip.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<table><tr><td>Data 1</td><td>Data 2</td></tr></table>');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nHowever, complex layouts might impact tooltip readability and usability, particularly on smaller screens.  Style the content carefully using CSS to maintain a clean and user-friendly presentation.  Consider responsive design techniques to adapt the layout based on screen size.\n\n\n### Working with Events\n\nBeyond the basic `onmouseover` and `onmouseout` events, the documentation should describe how to integrate overLIB with other JavaScript events (e.g., `onclick`, `onfocus`).  This might involve creating more complex event handlers that dynamically control the appearance or behavior of the tooltips.\n\n\n### Customizing Tooltip Appearance\n\nIn addition to CSS, overLIB might provide parameters or functions to customize aspects beyond styling (e.g., changing the tooltip's background color dynamically, adjusting its opacity, adding shadows). If such parameters exist, document them clearly with examples. If not, detail how these customizations can be achieved using JavaScript and CSS manipulation after the tooltip is created.\n\n\n### Accessibility Considerations\n\nAccessibility is crucial for inclusive web design. This section should highlight best practices for making tooltips accessible to users with disabilities:\n\n* **Sufficient Contrast:** Ensure sufficient color contrast between tooltip text and background for readability.\n* **Alternative Text:** Always use meaningful `alt` text for images within tooltips.\n* **Keyboard Navigation:** Tooltips should ideally be navigable using the keyboard.  Discuss methods for achieving this, such as using appropriate ARIA attributes.  (overLIB's capabilities for this should be clearly stated).\n* **Screen Reader Compatibility:**  Explain how to make tooltip content understandable by screen readers.  This often involves using appropriate HTML semantic elements and ARIA roles.  Mention any limitations of overLIB in this regard.\n* **Timing and Flashing:** Avoid overly fast appearance/disappearance or flashing effects which could trigger seizures in photosensitive users.\n\n\n\n\n## Configuration Options\n\n### Understanding overLIB's Configuration Parameters\n\noverLIB's behavior and appearance are heavily customizable through configuration parameters. These parameters are passed as arguments to the `overlib()` function, typically after the main content string.  Each parameter follows a specific format, often consisting of a keyword followed by a value.  The order of parameters can be important, and certain parameters might depend on others.  The complete list of parameters and their accepted values should be provided in a separate reference table.  This section provides a general overview and explains how to utilize these parameters effectively.\n\n\n### Common Configuration Options Explained\n\nSeveral parameters are frequently used to adjust the basic behavior and appearance of tooltips. Some common examples include:\n\n* **`CAPTION`:** This parameter allows you to add a caption or title to the tooltip.  It is usually followed by the caption text.  Example: `overlib(\"Tooltip content\", CAPTION, \"My Tooltip Title\");`\n\n* **`STICKY`:** This parameter makes the tooltip remain visible even after the mouse cursor moves away from the triggering element.  This is particularly useful for tooltips containing a large amount of information. Example: `overlib(\"Long content\", STICKY);`\n\n* **`AUTOWIDTH`:** This parameter adjusts the width of the tooltip automatically to fit its content.  If omitted, the tooltip width might be limited, potentially causing text wrapping or truncation. Example: `overlib(\"Some text\", AUTOWIDTH);`\n\n* **`FGCOLOR` and `BGCOLOR`:** These parameters allow you to specify the foreground (text) and background colors of the tooltip, respectively.  They take color values as strings (e.g., \"#FF0000\", \"red\"). Example: `overlib(\"Colored tooltip\", FGCOLOR, \"white\", BGCOLOR, \"blue\");`\n\n* **`TEXTSIZE`:** This parameter allows setting the font size of the tooltip text. It typically takes a numerical value representing the size in pixels or a relative size (e.g., \"12px\", \"large\").\n\nThese examples illustrate the typical parameter-value pair structure.  The exact syntax and accepted values might vary based on the overLIB version, so careful consultation of the version-specific documentation is crucial.\n\n\n### Advanced Configuration Options\n\nBeyond the common options, overLIB might provide advanced parameters for more fine-grained control.  These could include:\n\n* **Positioning parameters:**  Precise control over tooltip placement relative to the triggering element (e.g., specifying offsets, alignment).  (Details of these options should be described in a dedicated section with clear examples).\n\n* **Event handling parameters:**  Modifying default event behaviors (e.g., controlling the delay before a tooltip appears, customizing the mouseout behavior).\n\n* **Appearance parameters:**  Advanced styling options, potentially including parameters to control borders, padding, shadows, and other visual aspects.\n\n* **Content parameters:**  Parameters that influence how the tooltip handles different types of content (e.g., how it renders HTML, handles images, or interacts with iframes).\n\nDetails on these parameters, their syntax, and their effect on tooltip behavior, should be provided with clear explanations and examples.\n\n### Example Configurations\n\nThis section should provide a series of illustrative code snippets showcasing different configurations.  Examples should demonstrate the use of multiple parameters combined, highlighting various tooltip styles and behaviors.  This section can be a powerful way to quickly communicate the capabilities of different parameters and inspire developers to find the ideal configuration for their projects.  Examples should address cases like:\n\n* A sticky tooltip with a specific caption and background color.\n* A centered tooltip with custom dimensions.\n* A tooltip with an image and specific text formatting.\n* A tooltip that appears only after a short delay.\n\nBy providing a range of practical examples, developers can easily grasp the combined effects of different parameters and adapt them to their specific needs.\n\n\n## Troubleshooting\n\n### Common Problems and Solutions\n\nThis section addresses frequently encountered issues when using overLIB, providing solutions and workarounds.  Examples include:\n\n* **Tooltip not appearing:**  This could be due to incorrect JavaScript inclusion, typos in the `overlib()` function call, conflicts with other JavaScript libraries, or browser-specific issues (see Browser-Specific Issues section).  Verify that `overlib.js` is correctly linked, check for errors in the browser's developer console, and test with a minimal example to isolate the problem.\n\n* **Tooltip appearing in the wrong position:** Check the positioning parameters passed to `overlib()`.  Incorrect values for parameters that control horizontal and vertical offsets can lead to misalignment.  Ensure you're using the correct constants (ABOVE, BELOW, etc.) and that any offsets are appropriately configured.\n\n* **Tooltip content not rendering correctly:**  If HTML content within the tooltip is not displayed as expected, ensure that the HTML is properly formatted and escaped within the string passed to `overlib()`.  Incorrect escaping of quotes or other special characters can prevent correct rendering.  Also, check for conflicts between overLIB's default CSS and your custom styles.\n\n* **Tooltip overlapping other elements:** This is often due to incorrect positioning or the presence of elements with higher z-index values.  Adjust the positioning parameters or use CSS to control the z-index of the tooltip to ensure it's displayed correctly.\n\n* **JavaScript errors:**  The browser's developer console provides valuable information about JavaScript errors. Look for errors related to `overlib()` or related functions. These errors often point directly to the cause of the problem.\n\n\n### Debugging Techniques\n\nEffective debugging practices are crucial for resolving complex issues:\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML and CSS of the tooltip.  Check the console for JavaScript errors and warnings.  The network tab can help identify loading issues with external resources used in the tooltip.\n\n* **Simplify the code:**  Isolate the problematic part of your code by creating a minimal, reproducible example. This helps narrow down the source of the issue, making it easier to identify the root cause.\n\n* **Test in different browsers:** Test your implementation in various browsers (Chrome, Firefox, Safari, Edge) to identify browser-specific issues and ensure cross-browser compatibility.\n\n* **Check for JavaScript conflicts:** If you're using other JavaScript libraries, ensure there are no conflicts between overLIB and those libraries.  Try disabling other scripts temporarily to see if they're interfering.\n\n* **Inspect the overLIB source (if needed):** For very complex issues, carefully examining the overLIB source code might provide insight into its internal mechanisms and help pinpoint the problem.\n\n\n### Troubleshooting Browser-Specific Issues\n\nCertain browsers might have specific quirks or limitations when working with overLIB. This section should list known browser-specific issues, such as:\n\n* **Rendering differences:** Tooltips might render slightly differently across different browsers due to variations in rendering engines.  This is often a matter of fine-tuning CSS to achieve consistent visual appearance.\n\n* **Event handling inconsistencies:**  The way browsers handle mouseover and mouseout events can vary slightly.   This might require adjustments to the event handling code to ensure consistent tooltip behavior across browsers.\n\n* **Compatibility with older browsers:**  Older browsers might have limited support for JavaScript features used by overLIB.  You may need to implement workarounds or consider using a polyfill for older browser compatibility.\n\n\nThis section should provide browser-specific examples and suggest approaches to address these issues, ideally including specific code adjustments or alternative techniques.  Maintaining an up-to-date list of known browser-specific problems and solutions is vital for this manual.\n\n\n## Examples and Use Cases\n\nThis section provides practical examples demonstrating various uses of overLIB, ranging from simple tooltips to more complex implementations.  Remember that the exact syntax and available options might depend slightly on the specific version of overLIB you're using.  Always refer to the version-specific documentation for precise details.\n\n### Example: Simple Tooltip on Hover\n\nThis example shows the most basic usage: a tooltip appearing on mouse hover over a link.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('This is a simple tooltip.');\" onmouseout=\"nd();\">Hover over me</a>\n<script src=\"overlib.js\"></script> </body>\n```\n\nThis code creates a hyperlink; when the mouse hovers over it, a tooltip with the text \"This is a simple tooltip\" appears. The `nd()` function, provided by overLIB, hides the tooltip when the mouse moves away.\n\n\n### Example: Tooltip with Image\n\nThis example demonstrates embedding an image within the tooltip.  Ensure that \"myimage.png\" exists in the same directory as your HTML file.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<img src=\\\"myimage.png\\\" alt=\\\"My Image\\\">');\" onmouseout=\"nd();\">Hover over me</a>\n<script src=\"overlib.js\"></script> </body>\n```\n\nThis creates a tooltip containing the image.  The `alt` attribute provides alternative text for accessibility.  Error handling (e.g., displaying a message if the image fails to load) could be added for robustness.\n\n\n### Example: Dynamic Tooltip Update\n\nDynamically updating a tooltip requires manipulating the DOM directly after the tooltip is created. OverLIB's core doesn't directly support dynamic updates; this example shows a basic approach (this requires knowledge of how overLIB generates its tooltips; adapt as needed based on the version).  This approach assumes overLIB applies a class name like `overlib_content` to the tooltip content:\n\n\n```html\n<div id=\"myElement\" onmouseover=\"createTooltip(this);\" onmouseout=\"nd();\">Hover over me</div>\n<script src=\"overlib.js\"></script>\n<script>\nfunction createTooltip(element) {\n  overlib('Initial Text');  // Create the tooltip\n  let tooltipContent = document.querySelector('.overlib_content'); // Selects the tooltip content (Adjust selector as necessary).\n  setTimeout(() => {\n    tooltipContent.innerHTML = 'Updated Text'; // Update the tooltip content after a delay.\n  }, 2000);\n}\n</script>\n```\n\nThis code initially displays \"Initial Text\" and updates to \"Updated Text\" after 2 seconds.  **This implementation is highly dependent on the internal structure of the tooltips generated by overLIB and might need adjustment depending on the version.**  Refer to the specific overLIB documentation for details on its DOM structure.\n\n\n### Example: Complex Tooltip Layout\n\nThis example uses a table to create a more structured tooltip:\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<table><tr><td>Name:</td><td>John Doe</td></tr><tr><td>Age:</td><td>30</td></tr></table>');\" onmouseout=\"nd();\">Hover over me</a>\n<script src=\"overlib.js\"></script> </body>\n```\n\nThis creates a tooltip displaying information in a tabular format.  Consider using CSS for better styling and responsiveness.\n\n\n### Example: Tooltip with Custom Styling\n\nThis example utilizes CSS to customize the tooltip appearance:\n\n```html\n<style>\n.overlib { /* Adjust the class name if necessary */\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  padding: 10px;\n}\n</style>\n<a href=\"#\" onmouseover=\"overlib('Styled Tooltip');\" onmouseout=\"nd();\">Hover over me</a>\n<script src=\"overlib.js\"></script> </body>\n```\n\nThis applies custom background color, border, and padding to the tooltip.  The class name `.overlib` needs to be adapted if overLIB uses a different class name for its tooltips.  Always inspect the generated HTML using your browser's developer tools to identify the correct class name.\n\n\n## API Reference\n\nThis section provides a comprehensive reference for overLIB's functions and parameters.  The specific functions and parameters available might vary slightly depending on the version of overLIB you are using.  Always consult the documentation for your specific version for the most accurate and up-to-date information.\n\n\n### Detailed Function Descriptions\n\nThis subsection should list all the functions provided by the overLIB library, with detailed descriptions for each.  For each function, include:\n\n* **Function Name:** The name of the function (e.g., `overlib()`, `nd()`, etc.).\n* **Description:** A clear and concise explanation of what the function does.\n* **Syntax:**  The correct syntax for calling the function, including parameters and their data types.\n* **Example:**  A code example illustrating how to use the function.\n\n\n**Example entry (adapt as needed for actual overLIB functions):**\n\n**`overlib(content, [param1, value1], [param2, value2], ...)`**\n\n* **Description:** This is the core function of overLIB. It creates and displays a tooltip with the specified content and parameters.\n\n* **Parameters:**\n    * `content`: (String) The main content of the tooltip (HTML is allowed).\n    * `param1, value1`, etc.: (String, Number, Boolean)  Optional parameters that control various aspects of the tooltip's appearance and behavior.  (See Parameter Explanations section for details).\n\n* **Return Value:**  (typically `void` or `undefined`)\n\n* **Example:**  `overlib(\"This is my tooltip\", CAPTION, \"My Tooltip Title\", STICKY);`\n\n\n**`nd()`**\n\n* **Description:** This function hides the currently displayed tooltip.\n\n* **Parameters:** None.\n\n* **Return Value:** (typically `void` or `undefined`)\n\n* **Example:**  `onmouseout=\"nd();\"`\n\n\n*(Add similar entries for all functions provided by overLIB.  Include functions for handling events, customizing appearance, and any other functionality offered by the library.)*\n\n\n### Parameter Explanations\n\nThis subsection provides detailed explanations of all the parameters that can be passed to the `overlib()` function and potentially to other functions.  For each parameter:\n\n* **Parameter Name:** The name of the parameter (e.g., `CAPTION`, `STICKY`, `FGCOLOR`, `BGCOLOR`, etc.).\n* **Description:**  A detailed description of what the parameter controls.\n* **Data Type:** The type of value the parameter accepts (String, Number, Boolean, etc.).\n* **Default Value:** The default value if the parameter is omitted.\n* **Possible Values:** A list of valid values for the parameter (if applicable).\n* **Example:**  A code example showing how to use the parameter.\n\n\n**Example entry:**\n\n**`CAPTION`**\n\n* **Description:** Specifies a caption or title for the tooltip.\n\n* **Data Type:** String\n\n* **Default Value:** None.\n\n* **Possible Values:** Any string.\n\n* **Example:** `overlib(\"Tooltip text\", CAPTION, \"My Tooltip Title\");`\n\n\n*(Add similar entries for all parameters.  Include parameters related to positioning, appearance, behavior, and any other aspects customizable through the API.)*\n\n\n### Return Values\n\nThis section should clearly state the return value of each function. Many functions may not explicitly return a value (returning `undefined` or `void`), but this should be explicitly mentioned.  For functions that *do* return values, specify the type and meaning of the returned value.\n\n\n### Error Handling\n\nThis section describes how overLIB handles errors.  Explain whether it throws JavaScript exceptions, provides error messages (e.g., via the console), or employs other mechanisms for handling unexpected situations or invalid input. Detail what happens if:\n\n* Invalid parameters are passed to a function.\n* Required resources (e.g., images) fail to load.\n* There are conflicts with other JavaScript libraries.\n\nProvide advice on how to detect and handle these errors gracefully within your application.  Suggest strategies for debugging and recovering from errors.  Include examples showcasing error handling techniques.\n\n","srcMarkdownNoYaml":"\n\n\n### What is overLIB?\n\noverLIB is a small, lightweight JavaScript library designed to create dynamic, customizable tooltips and rollovers on web pages.  It allows you to display additional information—text, images, or even other HTML content—when a user hovers their mouse over a specific element. This information is displayed in a separate layer (\"overlay\") positioned relative to the triggering element.  The library offers a flexible approach to styling and positioning these overlays, allowing for diverse visual effects and user experiences.\n\n### Why use overLIB?\n\noverLIB offers several advantages:\n\n* **Simplicity:**  It's easy to implement and requires minimal code.  The core functionality is concise and straightforward.\n* **Lightweight:** The library's small file size contributes to faster page load times. This is important for optimal user experience.\n* **Customization:** A rich set of configuration options allows for highly customized tooltips.  You can control appearance, position, content, and behavior.\n* **Cross-browser compatibility (with caveats):** While not perfectly compatible across all browsers and versions, it strives for wide compatibility.  (See Browser Compatibility section below for details).\n* **No external dependencies:** overLIB doesn't rely on any other JavaScript libraries, making integration cleaner.\n\n### Setting up overLIB\n\nTo use overLIB, you need to:\n\n1. **Download:** Download the `overlib.js` file from the official source (link to source should be provided here if available).\n2. **Include:** Include the JavaScript file in your HTML document using a `<script>` tag.  Typically, this is placed within the `<head>` section or just before the closing `</body>` tag:\n\n   ```html\n   <script src=\"overlib.js\"></script>\n   ```\n\n3. **Implement:** Use the `overlib()` function in your HTML to create tooltips.  This usually involves adding an `onmouseover` event handler to the element triggering the tooltip, calling `overlib()` with the tooltip content as an argument.  Refer to the detailed usage examples and API documentation for comprehensive instructions.\n\n### Browser Compatibility\n\noverLIB aims for broad browser compatibility, but some limitations exist, particularly with older browsers or those with less robust JavaScript support. While it generally works across major browsers like Chrome, Firefox, Safari, and Edge,  some features might not function identically or might require specific workarounds depending on the browser version and its rendering engine. Thorough testing across target browsers is recommended to ensure consistent behavior.  Specific compatibility issues and known workarounds should be documented separately (link to that documentation would go here).  It's important to be aware that very outdated browsers might not support the library at all.\n\n\n## Basic Usage\n\n### Creating Simple Tooltips\n\nThe simplest way to create a tooltip with overLIB is by using the `overlib()` function within an `onmouseover` event handler.  This function takes the tooltip text as its primary argument.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('This is a simple tooltip');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nThis code creates a link. When the mouse hovers over the link, a tooltip displaying \"This is a simple tooltip\" appears.  The `nd()` function (provided by overLIB) hides the tooltip on mouseout.\n\n\n### Positioning Tooltips\n\noverLIB offers various ways to control tooltip positioning. By default, tooltips appear below the triggering element.  You can modify the positioning using parameters passed to the `overlib()` function. For example:\n\n```html\n<a href=\"#\" onmouseover=\"overlib('Tooltip above',CAPTION,'Tooltip above',ABOVE);\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nThis positions the tooltip *above* the link.  `CAPTION` and `ABOVE` are pre-defined constants. The documentation should provide a complete list of available positioning constants (e.g., `BELOW`, `LEFT`, `RIGHT`, `CENTER`, etc.) and how to combine them for fine-grained control.\n\nFurthermore, you can use additional parameters to fine-tune the positioning's offset from the triggering element. The specifics of these offset parameters should be described in a separate section.\n\n\n### Styling Tooltips with CSS\n\nYou can style the appearance of tooltips using CSS.  While overLIB might provide some default styles, you can override these using custom CSS rules.  Target the tooltip element using a specific class or ID assigned by overLIB (the exact selector should be specified in the documentation). For example:\n\n\n```html\n<style>\n  .overlib {\n    background-color: #f0f0f0;\n    border: 1px solid #ccc;\n    padding: 5px;\n    font-size: 14px;\n  }\n</style>\n\n<a href=\"#\" onmouseover=\"overlib('Styled Tooltip');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nThis adds a background, border, and padding to the tooltip.  The `.overlib` class (or whatever class overLIB uses) is crucial for targeting the tooltip element with your CSS.  Remember that the specific class name might vary depending on the overLIB version.\n\n\n### Adding Content to Tooltips\n\nTooltips can contain more than just plain text. You can add HTML elements, images, and other content:\n\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<img src=\\\"image.jpg\\\" alt=\\\"Image\\\"> This is a tooltip with an image.');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nThis example displays an image along with text.  Note the proper escaping of quotes within the HTML string passed to `overlib()`. The full capabilities for embedding HTML and the potential limitations or necessary escaping should be fully detailed.\n\n\n### Handling Multiple Tooltips\n\nManaging multiple tooltips involves ensuring that only one tooltip is visible at any given time.  While basic usage might not explicitly address this issue,  the documentation needs to explain strategies to handle potential conflicts.  This may involve carefully managing the `onmouseover` and `onmouseout` events, or utilizing overLIB's advanced features to control tooltip visibility or prioritization (if any such features exist).  Examples illustrating the best practices for handling multiple tooltips on a page would be very valuable.\n\n\n## Advanced Techniques\n\n### Using JavaScript Variables in Tooltips\n\nInstead of hardcoding tooltip text, you can use JavaScript variables to create dynamic tooltips.  This allows you to easily change the tooltip content based on user interactions or data changes.\n\n```javascript\nlet myVariable = \"Dynamic Tooltip Text\";\nlet myElement = document.getElementById(\"myElement\");\n\nmyElement.onmouseover = function() {\n  overlib(myVariable);\n};\nmyElement.onmouseout = nd;\n```\n\nThis code uses the `myVariable` to populate the tooltip content.  Remember to ensure that the variable is correctly scoped and accessible within the `overlib()` call.\n\n\n### Dynamically Updating Tooltips\n\nYou can update the content of an existing tooltip dynamically.  However, overLIB's core functionality doesn't directly support this.  Techniques to achieve dynamic updates would involve manipulating the DOM directly, potentially by creating the tooltip using methods that allow for later modification.  This might require accessing the tooltip element through its class name or ID, then updating its content using JavaScript's DOM manipulation methods. The precise implementation will depend on the specific version of overLIB and the way it generates its tooltips, details of which should be provided in the documentation.  This section should include code examples to demonstrate how this could be implemented if possible, or why it's not feasible with the library.\n\n\n### Using Images in Tooltips\n\nImages can be easily integrated into tooltips by embedding the `<img>` tag directly within the HTML string passed to `overlib()`.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<img src=\\\"myimage.png\\\" alt=\\\"Description\\\">');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nEnsure that the image path (`src`) is correct and that the `alt` attribute provides accessible text for users who cannot see the image.  Consider adding error handling in case the image fails to load.  Guidelines for image optimization (size, format) for better performance should also be included.\n\n\n### Creating Complex Layouts\n\nCreating complex layouts involves using more sophisticated HTML within the tooltip content.  You can use tables, lists, or any other HTML element to structure the tooltip.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<table><tr><td>Data 1</td><td>Data 2</td></tr></table>');\" onmouseout=\"nd();\">Hover over me</a>\n```\n\nHowever, complex layouts might impact tooltip readability and usability, particularly on smaller screens.  Style the content carefully using CSS to maintain a clean and user-friendly presentation.  Consider responsive design techniques to adapt the layout based on screen size.\n\n\n### Working with Events\n\nBeyond the basic `onmouseover` and `onmouseout` events, the documentation should describe how to integrate overLIB with other JavaScript events (e.g., `onclick`, `onfocus`).  This might involve creating more complex event handlers that dynamically control the appearance or behavior of the tooltips.\n\n\n### Customizing Tooltip Appearance\n\nIn addition to CSS, overLIB might provide parameters or functions to customize aspects beyond styling (e.g., changing the tooltip's background color dynamically, adjusting its opacity, adding shadows). If such parameters exist, document them clearly with examples. If not, detail how these customizations can be achieved using JavaScript and CSS manipulation after the tooltip is created.\n\n\n### Accessibility Considerations\n\nAccessibility is crucial for inclusive web design. This section should highlight best practices for making tooltips accessible to users with disabilities:\n\n* **Sufficient Contrast:** Ensure sufficient color contrast between tooltip text and background for readability.\n* **Alternative Text:** Always use meaningful `alt` text for images within tooltips.\n* **Keyboard Navigation:** Tooltips should ideally be navigable using the keyboard.  Discuss methods for achieving this, such as using appropriate ARIA attributes.  (overLIB's capabilities for this should be clearly stated).\n* **Screen Reader Compatibility:**  Explain how to make tooltip content understandable by screen readers.  This often involves using appropriate HTML semantic elements and ARIA roles.  Mention any limitations of overLIB in this regard.\n* **Timing and Flashing:** Avoid overly fast appearance/disappearance or flashing effects which could trigger seizures in photosensitive users.\n\n\n\n\n## Configuration Options\n\n### Understanding overLIB's Configuration Parameters\n\noverLIB's behavior and appearance are heavily customizable through configuration parameters. These parameters are passed as arguments to the `overlib()` function, typically after the main content string.  Each parameter follows a specific format, often consisting of a keyword followed by a value.  The order of parameters can be important, and certain parameters might depend on others.  The complete list of parameters and their accepted values should be provided in a separate reference table.  This section provides a general overview and explains how to utilize these parameters effectively.\n\n\n### Common Configuration Options Explained\n\nSeveral parameters are frequently used to adjust the basic behavior and appearance of tooltips. Some common examples include:\n\n* **`CAPTION`:** This parameter allows you to add a caption or title to the tooltip.  It is usually followed by the caption text.  Example: `overlib(\"Tooltip content\", CAPTION, \"My Tooltip Title\");`\n\n* **`STICKY`:** This parameter makes the tooltip remain visible even after the mouse cursor moves away from the triggering element.  This is particularly useful for tooltips containing a large amount of information. Example: `overlib(\"Long content\", STICKY);`\n\n* **`AUTOWIDTH`:** This parameter adjusts the width of the tooltip automatically to fit its content.  If omitted, the tooltip width might be limited, potentially causing text wrapping or truncation. Example: `overlib(\"Some text\", AUTOWIDTH);`\n\n* **`FGCOLOR` and `BGCOLOR`:** These parameters allow you to specify the foreground (text) and background colors of the tooltip, respectively.  They take color values as strings (e.g., \"#FF0000\", \"red\"). Example: `overlib(\"Colored tooltip\", FGCOLOR, \"white\", BGCOLOR, \"blue\");`\n\n* **`TEXTSIZE`:** This parameter allows setting the font size of the tooltip text. It typically takes a numerical value representing the size in pixels or a relative size (e.g., \"12px\", \"large\").\n\nThese examples illustrate the typical parameter-value pair structure.  The exact syntax and accepted values might vary based on the overLIB version, so careful consultation of the version-specific documentation is crucial.\n\n\n### Advanced Configuration Options\n\nBeyond the common options, overLIB might provide advanced parameters for more fine-grained control.  These could include:\n\n* **Positioning parameters:**  Precise control over tooltip placement relative to the triggering element (e.g., specifying offsets, alignment).  (Details of these options should be described in a dedicated section with clear examples).\n\n* **Event handling parameters:**  Modifying default event behaviors (e.g., controlling the delay before a tooltip appears, customizing the mouseout behavior).\n\n* **Appearance parameters:**  Advanced styling options, potentially including parameters to control borders, padding, shadows, and other visual aspects.\n\n* **Content parameters:**  Parameters that influence how the tooltip handles different types of content (e.g., how it renders HTML, handles images, or interacts with iframes).\n\nDetails on these parameters, their syntax, and their effect on tooltip behavior, should be provided with clear explanations and examples.\n\n### Example Configurations\n\nThis section should provide a series of illustrative code snippets showcasing different configurations.  Examples should demonstrate the use of multiple parameters combined, highlighting various tooltip styles and behaviors.  This section can be a powerful way to quickly communicate the capabilities of different parameters and inspire developers to find the ideal configuration for their projects.  Examples should address cases like:\n\n* A sticky tooltip with a specific caption and background color.\n* A centered tooltip with custom dimensions.\n* A tooltip with an image and specific text formatting.\n* A tooltip that appears only after a short delay.\n\nBy providing a range of practical examples, developers can easily grasp the combined effects of different parameters and adapt them to their specific needs.\n\n\n## Troubleshooting\n\n### Common Problems and Solutions\n\nThis section addresses frequently encountered issues when using overLIB, providing solutions and workarounds.  Examples include:\n\n* **Tooltip not appearing:**  This could be due to incorrect JavaScript inclusion, typos in the `overlib()` function call, conflicts with other JavaScript libraries, or browser-specific issues (see Browser-Specific Issues section).  Verify that `overlib.js` is correctly linked, check for errors in the browser's developer console, and test with a minimal example to isolate the problem.\n\n* **Tooltip appearing in the wrong position:** Check the positioning parameters passed to `overlib()`.  Incorrect values for parameters that control horizontal and vertical offsets can lead to misalignment.  Ensure you're using the correct constants (ABOVE, BELOW, etc.) and that any offsets are appropriately configured.\n\n* **Tooltip content not rendering correctly:**  If HTML content within the tooltip is not displayed as expected, ensure that the HTML is properly formatted and escaped within the string passed to `overlib()`.  Incorrect escaping of quotes or other special characters can prevent correct rendering.  Also, check for conflicts between overLIB's default CSS and your custom styles.\n\n* **Tooltip overlapping other elements:** This is often due to incorrect positioning or the presence of elements with higher z-index values.  Adjust the positioning parameters or use CSS to control the z-index of the tooltip to ensure it's displayed correctly.\n\n* **JavaScript errors:**  The browser's developer console provides valuable information about JavaScript errors. Look for errors related to `overlib()` or related functions. These errors often point directly to the cause of the problem.\n\n\n### Debugging Techniques\n\nEffective debugging practices are crucial for resolving complex issues:\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML and CSS of the tooltip.  Check the console for JavaScript errors and warnings.  The network tab can help identify loading issues with external resources used in the tooltip.\n\n* **Simplify the code:**  Isolate the problematic part of your code by creating a minimal, reproducible example. This helps narrow down the source of the issue, making it easier to identify the root cause.\n\n* **Test in different browsers:** Test your implementation in various browsers (Chrome, Firefox, Safari, Edge) to identify browser-specific issues and ensure cross-browser compatibility.\n\n* **Check for JavaScript conflicts:** If you're using other JavaScript libraries, ensure there are no conflicts between overLIB and those libraries.  Try disabling other scripts temporarily to see if they're interfering.\n\n* **Inspect the overLIB source (if needed):** For very complex issues, carefully examining the overLIB source code might provide insight into its internal mechanisms and help pinpoint the problem.\n\n\n### Troubleshooting Browser-Specific Issues\n\nCertain browsers might have specific quirks or limitations when working with overLIB. This section should list known browser-specific issues, such as:\n\n* **Rendering differences:** Tooltips might render slightly differently across different browsers due to variations in rendering engines.  This is often a matter of fine-tuning CSS to achieve consistent visual appearance.\n\n* **Event handling inconsistencies:**  The way browsers handle mouseover and mouseout events can vary slightly.   This might require adjustments to the event handling code to ensure consistent tooltip behavior across browsers.\n\n* **Compatibility with older browsers:**  Older browsers might have limited support for JavaScript features used by overLIB.  You may need to implement workarounds or consider using a polyfill for older browser compatibility.\n\n\nThis section should provide browser-specific examples and suggest approaches to address these issues, ideally including specific code adjustments or alternative techniques.  Maintaining an up-to-date list of known browser-specific problems and solutions is vital for this manual.\n\n\n## Examples and Use Cases\n\nThis section provides practical examples demonstrating various uses of overLIB, ranging from simple tooltips to more complex implementations.  Remember that the exact syntax and available options might depend slightly on the specific version of overLIB you're using.  Always refer to the version-specific documentation for precise details.\n\n### Example: Simple Tooltip on Hover\n\nThis example shows the most basic usage: a tooltip appearing on mouse hover over a link.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('This is a simple tooltip.');\" onmouseout=\"nd();\">Hover over me</a>\n<script src=\"overlib.js\"></script> </body>\n```\n\nThis code creates a hyperlink; when the mouse hovers over it, a tooltip with the text \"This is a simple tooltip\" appears. The `nd()` function, provided by overLIB, hides the tooltip when the mouse moves away.\n\n\n### Example: Tooltip with Image\n\nThis example demonstrates embedding an image within the tooltip.  Ensure that \"myimage.png\" exists in the same directory as your HTML file.\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<img src=\\\"myimage.png\\\" alt=\\\"My Image\\\">');\" onmouseout=\"nd();\">Hover over me</a>\n<script src=\"overlib.js\"></script> </body>\n```\n\nThis creates a tooltip containing the image.  The `alt` attribute provides alternative text for accessibility.  Error handling (e.g., displaying a message if the image fails to load) could be added for robustness.\n\n\n### Example: Dynamic Tooltip Update\n\nDynamically updating a tooltip requires manipulating the DOM directly after the tooltip is created. OverLIB's core doesn't directly support dynamic updates; this example shows a basic approach (this requires knowledge of how overLIB generates its tooltips; adapt as needed based on the version).  This approach assumes overLIB applies a class name like `overlib_content` to the tooltip content:\n\n\n```html\n<div id=\"myElement\" onmouseover=\"createTooltip(this);\" onmouseout=\"nd();\">Hover over me</div>\n<script src=\"overlib.js\"></script>\n<script>\nfunction createTooltip(element) {\n  overlib('Initial Text');  // Create the tooltip\n  let tooltipContent = document.querySelector('.overlib_content'); // Selects the tooltip content (Adjust selector as necessary).\n  setTimeout(() => {\n    tooltipContent.innerHTML = 'Updated Text'; // Update the tooltip content after a delay.\n  }, 2000);\n}\n</script>\n```\n\nThis code initially displays \"Initial Text\" and updates to \"Updated Text\" after 2 seconds.  **This implementation is highly dependent on the internal structure of the tooltips generated by overLIB and might need adjustment depending on the version.**  Refer to the specific overLIB documentation for details on its DOM structure.\n\n\n### Example: Complex Tooltip Layout\n\nThis example uses a table to create a more structured tooltip:\n\n```html\n<a href=\"#\" onmouseover=\"overlib('<table><tr><td>Name:</td><td>John Doe</td></tr><tr><td>Age:</td><td>30</td></tr></table>');\" onmouseout=\"nd();\">Hover over me</a>\n<script src=\"overlib.js\"></script> </body>\n```\n\nThis creates a tooltip displaying information in a tabular format.  Consider using CSS for better styling and responsiveness.\n\n\n### Example: Tooltip with Custom Styling\n\nThis example utilizes CSS to customize the tooltip appearance:\n\n```html\n<style>\n.overlib { /* Adjust the class name if necessary */\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  padding: 10px;\n}\n</style>\n<a href=\"#\" onmouseover=\"overlib('Styled Tooltip');\" onmouseout=\"nd();\">Hover over me</a>\n<script src=\"overlib.js\"></script> </body>\n```\n\nThis applies custom background color, border, and padding to the tooltip.  The class name `.overlib` needs to be adapted if overLIB uses a different class name for its tooltips.  Always inspect the generated HTML using your browser's developer tools to identify the correct class name.\n\n\n## API Reference\n\nThis section provides a comprehensive reference for overLIB's functions and parameters.  The specific functions and parameters available might vary slightly depending on the version of overLIB you are using.  Always consult the documentation for your specific version for the most accurate and up-to-date information.\n\n\n### Detailed Function Descriptions\n\nThis subsection should list all the functions provided by the overLIB library, with detailed descriptions for each.  For each function, include:\n\n* **Function Name:** The name of the function (e.g., `overlib()`, `nd()`, etc.).\n* **Description:** A clear and concise explanation of what the function does.\n* **Syntax:**  The correct syntax for calling the function, including parameters and their data types.\n* **Example:**  A code example illustrating how to use the function.\n\n\n**Example entry (adapt as needed for actual overLIB functions):**\n\n**`overlib(content, [param1, value1], [param2, value2], ...)`**\n\n* **Description:** This is the core function of overLIB. It creates and displays a tooltip with the specified content and parameters.\n\n* **Parameters:**\n    * `content`: (String) The main content of the tooltip (HTML is allowed).\n    * `param1, value1`, etc.: (String, Number, Boolean)  Optional parameters that control various aspects of the tooltip's appearance and behavior.  (See Parameter Explanations section for details).\n\n* **Return Value:**  (typically `void` or `undefined`)\n\n* **Example:**  `overlib(\"This is my tooltip\", CAPTION, \"My Tooltip Title\", STICKY);`\n\n\n**`nd()`**\n\n* **Description:** This function hides the currently displayed tooltip.\n\n* **Parameters:** None.\n\n* **Return Value:** (typically `void` or `undefined`)\n\n* **Example:**  `onmouseout=\"nd();\"`\n\n\n*(Add similar entries for all functions provided by overLIB.  Include functions for handling events, customizing appearance, and any other functionality offered by the library.)*\n\n\n### Parameter Explanations\n\nThis subsection provides detailed explanations of all the parameters that can be passed to the `overlib()` function and potentially to other functions.  For each parameter:\n\n* **Parameter Name:** The name of the parameter (e.g., `CAPTION`, `STICKY`, `FGCOLOR`, `BGCOLOR`, etc.).\n* **Description:**  A detailed description of what the parameter controls.\n* **Data Type:** The type of value the parameter accepts (String, Number, Boolean, etc.).\n* **Default Value:** The default value if the parameter is omitted.\n* **Possible Values:** A list of valid values for the parameter (if applicable).\n* **Example:**  A code example showing how to use the parameter.\n\n\n**Example entry:**\n\n**`CAPTION`**\n\n* **Description:** Specifies a caption or title for the tooltip.\n\n* **Data Type:** String\n\n* **Default Value:** None.\n\n* **Possible Values:** Any string.\n\n* **Example:** `overlib(\"Tooltip text\", CAPTION, \"My Tooltip Title\");`\n\n\n*(Add similar entries for all parameters.  Include parameters related to positioning, appearance, behavior, and any other aspects customizable through the API.)*\n\n\n### Return Values\n\nThis section should clearly state the return value of each function. Many functions may not explicitly return a value (returning `undefined` or `void`), but this should be explicitly mentioned.  For functions that *do* return values, specify the type and meaning of the returned value.\n\n\n### Error Handling\n\nThis section describes how overLIB handles errors.  Explain whether it throws JavaScript exceptions, provides error messages (e.g., via the console), or employs other mechanisms for handling unexpected situations or invalid input. Detail what happens if:\n\n* Invalid parameters are passed to a function.\n* Required resources (e.g., images) fail to load.\n* There are conflicts with other JavaScript libraries.\n\nProvide advice on how to detect and handle these errors gracefully within your application.  Suggest strategies for debugging and recovering from errors.  Include examples showcasing error handling techniques.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"overlib.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"overLIB - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}