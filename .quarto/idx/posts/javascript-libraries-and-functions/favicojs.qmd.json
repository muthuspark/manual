{"title":"favico.js - A Developer's Handbook","markdown":{"yaml":{"title":"favico.js - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is favico.js?\n\nFavico.js is a lightweight JavaScript library that allows you to dynamically update your website's favicon.  Instead of being limited to a single static favicon image, favico.js enables you to change the favicon's appearance based on various events or conditions on your website. This can include displaying unread notification counts, showing different icons for different pages, or even creating animated favicons.  It achieves this by manipulating the `<link>` tag that references the favicon, cleverly handling browser-specific quirks and ensuring compatibility across a wide range of browsers.\n\n### Why use favico.js?\n\nUsing favico.js offers several key advantages:\n\n* **Enhanced User Experience:** Dynamically updated favicons provide users with immediate visual feedback, such as unread message counts or ongoing activity, improving engagement and usability.\n* **Improved Communication:**  Communicate the state of your application (e.g., new messages, processing, etc.) without requiring users to actively check for updates.\n* **Easy Implementation:**  Favico.js provides a simple and intuitive API, making integration into your web application straightforward.\n* **Cross-Browser Compatibility:** It handles the complexities of favicon implementation across different browsers, saving you development time and ensuring consistent functionality.\n* **Lightweight and Efficient:** The library is designed to be small and performant, minimizing its impact on your website's loading speed.\n\n\n### Key Features\n\n* **Dynamic Favicon Updates:** Change the favicon image on the fly.\n* **Badge Support:**  Display a small numerical badge (e.g., unread count) on the favicon.\n* **Multiple Favicon Support:**  Manage and switch between different favicon images.\n* **Animation Support:** Create simple animations within the favicon (though browser support may vary).\n* **Customizable Appearance:** Fine-grained control over badge position, color, and styling.\n* **Simple API:**  Easy-to-use functions for controlling favicon updates.\n\n\n### Browser Compatibility\n\nFavico.js strives for broad browser compatibility, supporting modern versions of the following:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n* Opera\n\nWhile older browsers may have limited or no support for dynamic favicon updates, favico.js gracefully handles these situations, ensuring that your website remains functional even in less-supported environments.  For optimal results, targeting modern browsers is recommended.  Specific compatibility details for older browser versions should be checked in the library's documentation and release notes.\n\n\n## Getting Started\n\n### Installation\n\nFavico.js can be installed via several methods:\n\n* **Using a CDN:** The easiest way is to include favico.js directly from a CDN (Content Delivery Network).  This avoids the need to download and manage the library locally.  A popular CDN option is jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>  <!-- Replace 0.3.10 with the latest version number -->\n```\n\nRemember to replace `0.3.10` with the latest version number available on jsDelivr or your preferred CDN.  Check the official favico.js repository for the most up-to-date version.\n\n* **Using npm (Node Package Manager):** If you're using npm in your project, install favico.js via the command line:\n\n```bash\nnpm install favico.js\n```\n\nThis will download the library to your project's `node_modules` directory.  You'll then need to include it in your HTML file (see the \"Including favico.js in your project\" section below).\n\n* **Direct Download:** You can also download the library directly from the official repository and include it in your project manually. This method requires you to manually manage updates.\n\n### Basic Usage\n\nAfter including favico.js in your project, you can use its API to easily manage your favicon.  The core functionality revolves around creating a `favico` object and using its methods to update the favicon.  The most common methods are `badge`, `reset`, and `update`.  `badge` adds a numerical badge to the favicon, `reset` removes any badges or customizations, and `update` allows for completely replacing the favicon image.\n\n### Including favico.js in your project\n\nRegardless of your installation method, you'll need to include favico.js in your HTML file using a `<script>` tag.  If you used npm, the path will be relative to your project's structure.  For example:\n\n**Using CDN:** (Already shown in the Installation section)\n\n**Using npm:** Assuming you've placed your favicon images in a `public/images` folder:\n\n```html\n<script src=\"./node_modules/favico.js/dist/favico.js\"></script>\n```\n\nPlace this `<script>` tag ideally just before the closing `</body>` tag of your HTML, to ensure the DOM is fully loaded before favico.js attempts to manipulate the favicon.\n\n\n### First Example\n\nThis example demonstrates adding a badge to your favicon:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Favico.js Example</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script> </head>\n<body>\n\n  <script>\n    const favicon = new Favico({\n      animation: 'none' //Optional: Set animation type\n    });\n\n    // Add a badge with the number 5\n    favicon.badge(5);\n\n\n    // after 3 seconds, reset the favicon to default\n    setTimeout(()=>{\n        favicon.reset();\n    }, 3000)\n\n\n  </script>\n\n</body>\n</html>\n```\n\nThis code first includes favico.js from a CDN. Then, it creates a `Favico` object.  Finally, it uses the `badge()` method to display a badge with the number 5 on the favicon.  Remember to replace the CDN link with your preferred method of including the library.  Also, ensure you have a favicon.ico file in your project's root directory.  You might need to adjust paths depending on your project setup.  The `animation` option is used to prevent unwanted animations if you don't need them.\n\n\n\n\n## API Reference\n\n### favico().badge(number, options)\n\nAdds a numerical badge to the favicon.\n\n* **`number` (integer):** The number to display in the badge.  Can be 0 to remove the badge.\n* **`options` (object, optional):**  Allows customization of the badge's appearance.  See \"Options and parameters\" section below for details.\n\n**Example:**\n\n```javascript\nfavicon.badge(5); // Adds a badge with the number 5\nfavicon.badge(0); // Removes the badge\nfavicon.badge(12, { color: 'red' }); //Adds a red badge with number 12\n```\n\n### favico().reset()\n\nResets the favicon to its default state. Removes any badges or custom images applied previously.\n\n**Example:**\n\n```javascript\nfavicon.reset();\n```\n\n### favico().update(image [, options])\n\nUpdates the favicon with a new image.\n\n* **`image` (string or object):**  The path to the new favicon image (string) or an object containing image data (see below for details).\n* **`options` (object, optional):** Allows further customization (e.g., for animations).  See \"Options and parameters\" section below for details.\n\n\n**Example (using image path):**\n\n```javascript\nfavicon.update('/path/to/new-favicon.png');\n```\n\n**Example (using image object - for more control):**\n\n```javascript\nfavicon.update({\n    src: '/path/to/new-favicon.png',\n    type: 'image/png' //Optional\n});\n```\n\n### favico().show()\n\nMakes the favicon visible if it was previously hidden.\n\n**Example:**\n\n```javascript\nfavicon.show();\n```\n\n### favico().hide()\n\nHides the favicon.  Useful for temporarily disabling the favicon or showing a different element instead.\n\n**Example:**\n\n```javascript\nfavicon.hide();\n```\n\n\n### Options and parameters\n\nSeveral options can be used with `badge()` and `update()` methods:\n\n* **`animation` (string, optional):** Specifies the animation type.  Possible values: `\"none\"`, `\"pop\"`, `\"slide\"`, `\"pulse\"`, `\"rotate\"`, `\"shake\"`. Defaults to `\"none\"`.  Browser support for animations may vary.\n\n* **`bgColor` (string, optional):** Sets the background color of the badge.  Must be a valid CSS color value (e.g., `'#FF0000'`, `\"red\"`).\n\n* **`type` (string, optional, for `update()`):** Specifies the MIME type of the image being used for updating the favicon. For instance: `image/png` or `image/svg+xml`.\n\n* **`position` (string, optional):** Controls the position of the badge (For example: 'top-left', 'top-right', 'bottom-left', 'bottom-right'). The default value is 'top-right'.\n\n\n### Customizing the favicon\n\nFavico.js allows for significant customization. You can control the appearance of the badge (color, position) and even replace the entire favicon image with a different one using the `update()` method. For more advanced customization you might consider manipulating the favicon image itself or using advanced animation techniques and options provided by the library.  Refer to the library's documentation for the most complete and up-to-date list of options and examples of advanced customization.\n\n\n## Advanced Usage\n\n### Using with frameworks (React, Angular, Vue)\n\nFavico.js is framework-agnostic and can be easily integrated into popular JavaScript frameworks like React, Angular, and Vue. The core integration remains the same: include the library and use its API.  However, the way you manage the favicon state and trigger updates will depend on your chosen framework's state management and lifecycle methods.\n\n**Example (Conceptual React):**\n\n```javascript\nimport React, { useState, useEffect } from 'react';\nimport Favico from 'favico.js'; //Import after installation using npm\n\nfunction MyComponent() {\n  const [notificationCount, setNotificationCount] = useState(0);\n  const favicon = new Favico();\n\n  useEffect(() => {\n    favicon.badge(notificationCount);\n    //Cleanup function for component unmount:\n    return () => favicon.reset();\n  }, [notificationCount, favicon]);\n\n  const handleNewNotification = () => {\n    setNotificationCount(notificationCount + 1);\n  };\n\n  return (\n    <div>\n      <button onClick={handleNewNotification}>New Notification</button>\n    </div>\n  );\n}\n```\n\nThis React example demonstrates a simple counter that updates the favicon badge.  Remember to adapt this based on your specific framework's patterns for handling state and side effects. For Angular and Vue, similar principles apply; you'll use the framework's lifecycle hooks and state management systems to integrate favico.js effectively.\n\n\n### Handling multiple favicons\n\nWhile favico.js primarily manages a single favicon, you can achieve the effect of multiple favicons by strategically using the `update()` method. For instance, you could have different favicon images for different states and switch between them based on your application's logic.  You could create an array of favicon URLs and update dynamically.\n\n```javascript\nconst favicon = new Favico();\nconst faviconUrls = ['/path/to/favicon1.png', '/path/to/favicon2.png'];\nlet currentFaviconIndex = 0;\n\nfunction changeFavicon(index){\n    if(index >= faviconUrls.length) {return;}\n    favicon.update(faviconUrls[index]);\n    currentFaviconIndex = index;\n}\n\n// ...later in your code...\nchangeFavicon(1); //Use the second favicon image\n```\n\n### Dynamically updating favicons\n\nDynamic favicon updates are a core feature of favico.js. The examples above already demonstrated this by updating the badge or changing favicon images based on changing application state.   Use the `badge()` and `update()` methods within event handlers, timers, or other parts of your application's logic to trigger favicon changes.  For instance, you might update the badge when new notifications arrive via WebSockets or AJAX requests.  Make sure you handle potential race conditions carefully if multiple updates are occurring simultaneously.\n\n### Error Handling\n\nFavico.js generally handles browser inconsistencies gracefully. However, there are potential points of failure, particularly when working with invalid image URLs or unsupported browser features.  For robust error handling, you could:\n\n* **Validate image URLs:** Ensure that the paths provided to the `update()` method are correct before attempting to load them.\n* **Check browser support:** Although favico.js tries to maintain compatibility, it's always good practice to check for browser support for features you rely on (especially animations).  You might provide fallback mechanisms or inform users if a feature is unavailable.\n* **Use try-catch blocks:** For operations that could throw errors (e.g., fetching image data from a remote source), wrap them in `try...catch` blocks to handle exceptions and prevent your application from crashing.\n* **Monitor console for errors:**  Keep an eye on your browser's developer console for any errors related to favico.js.\n\n\nBy addressing these points, you can create a more robust and user-friendly application that utilizes the full power of favico.js.\n\n\n## Examples\n\n### Simple counter\n\nThis example shows a simple counter that updates a numerical badge on the favicon:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Counter Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<button id=\"increment\">Increment</button>\n<p id=\"count\">0</p>\n\n<script>\n  const countElement = document.getElementById('count');\n  const incrementButton = document.getElementById('increment');\n  let count = 0;\n  const favicon = new Favico({ animation: 'none' });\n\n  incrementButton.addEventListener('click', () => {\n    count++;\n    countElement.textContent = count;\n    favicon.badge(count);\n  });\n</script>\n\n</body>\n</html>\n```\n\nThis code creates a button that increments a counter displayed on the page and updates the favicon badge accordingly.  Remember to have a favicon.ico in your project's root directory.\n\n\n### Notification badge\n\nThis example simulates receiving notifications and updates a badge accordingly:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Notification Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<button id=\"addNotification\">Add Notification</button>\n\n<script>\n  const addNotificationButton = document.getElementById('addNotification');\n  let notificationCount = 0;\n  const favicon = new Favico({ animation: 'pop' });\n\n  addNotificationButton.addEventListener('click', () => {\n    notificationCount++;\n    favicon.badge(notificationCount);\n  });\n</script>\n\n</body>\n</html>\n```\n\nThis uses the 'pop' animation for the badge. Clicking the button simulates a new notification.\n\n### Progress bar\n\nThis example is more complex and requires additional logic to manage the progress:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Progress Bar Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<div id=\"progressBar\"></div>\n\n<script>\n  const progressBar = document.getElementById('progressBar');\n  let progress = 0;\n  const favicon = new Favico();\n\n  const interval = setInterval(() => {\n    progress++;\n    if (progress > 100) {\n      clearInterval(interval);\n      favicon.reset();\n    } else {\n      progressBar.style.width = `${progress}%`;\n      favicon.badge(progress);\n    }\n  }, 100);\n</script>\n\n</body>\n</html>\n```\n\nThis example simulates a progress bar using a div element and updates the favicon badge to reflect the progress.\n\n\n### Custom image favicon\n\nThis example updates the favicon with a custom image:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Custom Image Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<button id=\"changeFavicon\">Change Favicon</button>\n\n<script>\n  const changeFaviconButton = document.getElementById('changeFavicon');\n  const favicon = new Favico();\n  const customFavicon = '/path/to/your/custom-favicon.png'; // Replace with your image path\n\n  changeFaviconButton.addEventListener('click', () => {\n    favicon.update(customFavicon);\n  });\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `/path/to/your/custom-favicon.png` with the actual path to your custom favicon image.\n\n### Complex example integrating multiple features\n\nThis example combines multiple features: a counter, a custom favicon, and animation:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Complex Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<button id=\"increment\">Increment</button>\n<button id=\"changeFavicon\">Change Favicon</button>\n\n<script>\n  let count = 0;\n  const favicon = new Favico({animation: 'pulse'});\n  const incrementButton = document.getElementById('increment');\n  const changeFaviconButton = document.getElementById('changeFavicon');\n  const customFavicon = '/path/to/your/custom-favicon.png'; //Replace with your path\n\n  incrementButton.addEventListener('click', () => {\n    count++;\n    favicon.badge(count);\n  });\n\n  changeFaviconButton.addEventListener('click', () => {\n    favicon.update(customFavicon);\n  });\n</script>\n\n</body>\n</html>\n```\n\nThis combines incrementing a counter with a badge, and changing the favicon image using a button.  Remember to replace the placeholder image path.  Adjust the animation as needed.  These examples illustrate the basic usage and some advanced features;  more sophisticated applications may require more intricate logic and state management.  Always refer to the library's documentation for the latest features and detailed explanations.\n\n\n## Troubleshooting\n\n### Common issues and solutions\n\n* **Favicon not updating:**  This is often caused by incorrect paths to your favicon images or issues with your HTML structure. Double-check that your favicon image files exist at the specified paths and that you've correctly included the favico.js script in your HTML, preferably just before the closing `</body>` tag.  Also, ensure that your server is configured correctly to serve the favicon images.  Inspect your browser's developer console for any JavaScript errors.\n\n* **Badge not appearing:** Verify that you're correctly using the `badge()` method and providing a valid number.  Check the browser's developer console for errors.  Ensure that you haven't accidentally reset the favicon using the `reset()` method.  Incorrect positioning options might also prevent the badge from being visible.\n\n* **Animation not working:**  Browser support for favicon animations varies. Some browsers may not support all animation types.  Try using the `animation: 'none'` option to disable animation and see if the favicon updates correctly, eliminating animation as the source of the problem.   Check browser-specific notes or documentation for compatibility.  Some animations may require specific browser configurations or extensions.\n\n* **Image not loading:**  Ensure the image path in your `update()` method is correct, the image file exists and is accessible, and the image format is supported.  Check for any network errors that might prevent the image from loading.  Incorrectly specified MIME type in the `type` option for `update()` can also cause loading issues.\n\n* **Favicon not changing after an update:**  This could indicate race conditions if multiple updates are happening concurrently, or that the browser's cache is preventing the changes from being visible.  Try clearing your browser's cache and restarting the browser to force a reload of the favicon.  For testing, add a timestamp or unique identifier to your favicon URLs to ensure the browser is not using a cached copy.\n\n\n### Debugging tips\n\n* **Use your browser's developer tools:** The console in your browser's developer tools is crucial for identifying JavaScript errors and inspecting network requests related to favicon loading.\n* **Simplify your code:** If you're experiencing unexpected behavior, create a minimal, reproducible example to isolate the problem.\n* **Check the favico.js documentation:** Refer to the official documentation for the most up-to-date information, including detailed explanations of the API, options, and common troubleshooting steps.\n* **Test across different browsers:** Favicon behavior can vary slightly between browsers. Test your code in different browsers (Chrome, Firefox, Safari, Edge) to identify browser-specific issues.\n* **Inspect the network requests:** Use your browser's network tab to analyze the requests made to load your favicon images.  This helps detect problems with image loading or server configuration.\n\n\n### Troubleshooting browser-specific issues\n\nWhile favico.js attempts to handle browser differences, some quirks may still arise.  Here are some browser-specific considerations:\n\n* **Internet Explorer and Edge (legacy):**  Older versions of Internet Explorer and Edge may have limited or no support for dynamic favicon updates.  Consider providing fallback mechanisms for these older browsers or directing users to update their browser.\n\n* **Safari:** Safari might have caching issues.  Clearing the cache or using a unique URL (with a timestamp, for example) might solve problems with updates not reflecting immediately.\n\n* **Mobile browsers:**  Mobile browsers often have limitations and caching mechanisms that differ from desktop browsers.  Testing on various mobile devices and browsers is recommended.\n\n* **CORS (Cross-Origin Resource Sharing):** If you are loading favicon images from a different domain than your website, ensure that CORS is properly configured on the server serving the images to prevent errors.\n\n\nRemember to always consult the official favico.js documentation and release notes for the most current information on browser compatibility and troubleshooting.\n\n\n## Contributing\n\n### Contributing to the project\n\nWe welcome contributions to favico.js!  If you find a bug, have a feature request, or want to improve the code, please follow these steps:\n\n1. **Fork the repository:** Create your own fork of the favico.js repository on GitHub.\n\n2. **Create a new branch:** Create a new branch for your changes.  Use a descriptive name that reflects the purpose of your contribution (e.g., `fix-bug-123`, `add-feature-xyz`).\n\n3. **Make your changes:**  Make your code changes, following the code style guide (see below).  Ensure your changes are well-documented and tested.\n\n4. **Test your changes:** Thoroughly test your changes to ensure they work correctly and don't introduce new bugs.  See the \"Testing and CI/CD process\" section for details.\n\n5. **Commit your changes:** Commit your changes with clear and concise commit messages that explain what you've done and why.\n\n6. **Push your branch:** Push your branch to your forked repository on GitHub.\n\n7. **Create a pull request:** Create a pull request from your branch to the main `main` or `master` branch of the original favico.js repository.  Provide a clear description of your changes in the pull request, including any relevant context or background information.\n\n8. **Address feedback:**  Address any feedback or suggestions from the maintainers of the favico.js project.  Make necessary revisions and push them to your branch.\n\n\n### Code style guide\n\nFavico.js follows a consistent code style to maintain readability and maintainability.  The specific style guide may be documented in a separate file within the repository (e.g., `.editorconfig`, `.eslintrc`). Adherence to this style guide is essential for all contributions.  Generally, this will involve:\n\n* **Consistent indentation:**  Use consistent indentation (usually 2 spaces).\n* **Meaningful variable and function names:**  Choose descriptive names that clearly indicate the purpose of variables and functions.\n* **Comments:**  Add clear and concise comments to explain complex logic or non-obvious code.\n* **Linting:** Use a linter (e.g., ESLint) to automatically check for style violations and potential errors.\n\n\n### Testing and CI/CD process\n\nFavico.js utilizes automated testing to ensure code quality and prevent regressions.  The specific testing framework and CI/CD (Continuous Integration/Continuous Delivery) pipeline may be detailed in the repository's documentation (e.g., a `README.md` file).  Generally, this process might involve:\n\n* **Unit tests:**  Unit tests verify the correctness of individual functions and components.\n* **Integration tests:** Integration tests check the interaction between different parts of the code.\n* **Browser tests:** Browser tests are crucial to ensure favico.js works correctly across different browsers.  This might involve using a tool like Selenium or a browser testing platform.\n* **CI/CD pipeline:** A CI/CD pipeline automatically builds, tests, and deploys the code whenever changes are pushed to the repository.  This helps to quickly identify and address issues.\n\nBefore submitting a pull request, ensure your changes pass all tests in the CI/CD pipeline.  The repository's documentation will provide more specific instructions on how to run the tests locally.\n\n\n## License\n\n### License information\n\nFavico.js is typically released under an open-source license, allowing for free use, modification, and distribution.  However, the *specific* license (e.g., MIT, GPL, Apache 2.0) will be clearly stated within the project's repository, usually in a file named `LICENSE` or `LICENSE.txt`.  Always refer to that file for the exact terms and conditions governing the use of favico.js.  The license file will outline the permitted uses, restrictions, and disclaimers associated with the software.  It's crucial to understand and comply with the terms of the license before using, modifying, or distributing favico.js.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is favico.js?\n\nFavico.js is a lightweight JavaScript library that allows you to dynamically update your website's favicon.  Instead of being limited to a single static favicon image, favico.js enables you to change the favicon's appearance based on various events or conditions on your website. This can include displaying unread notification counts, showing different icons for different pages, or even creating animated favicons.  It achieves this by manipulating the `<link>` tag that references the favicon, cleverly handling browser-specific quirks and ensuring compatibility across a wide range of browsers.\n\n### Why use favico.js?\n\nUsing favico.js offers several key advantages:\n\n* **Enhanced User Experience:** Dynamically updated favicons provide users with immediate visual feedback, such as unread message counts or ongoing activity, improving engagement and usability.\n* **Improved Communication:**  Communicate the state of your application (e.g., new messages, processing, etc.) without requiring users to actively check for updates.\n* **Easy Implementation:**  Favico.js provides a simple and intuitive API, making integration into your web application straightforward.\n* **Cross-Browser Compatibility:** It handles the complexities of favicon implementation across different browsers, saving you development time and ensuring consistent functionality.\n* **Lightweight and Efficient:** The library is designed to be small and performant, minimizing its impact on your website's loading speed.\n\n\n### Key Features\n\n* **Dynamic Favicon Updates:** Change the favicon image on the fly.\n* **Badge Support:**  Display a small numerical badge (e.g., unread count) on the favicon.\n* **Multiple Favicon Support:**  Manage and switch between different favicon images.\n* **Animation Support:** Create simple animations within the favicon (though browser support may vary).\n* **Customizable Appearance:** Fine-grained control over badge position, color, and styling.\n* **Simple API:**  Easy-to-use functions for controlling favicon updates.\n\n\n### Browser Compatibility\n\nFavico.js strives for broad browser compatibility, supporting modern versions of the following:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n* Opera\n\nWhile older browsers may have limited or no support for dynamic favicon updates, favico.js gracefully handles these situations, ensuring that your website remains functional even in less-supported environments.  For optimal results, targeting modern browsers is recommended.  Specific compatibility details for older browser versions should be checked in the library's documentation and release notes.\n\n\n## Getting Started\n\n### Installation\n\nFavico.js can be installed via several methods:\n\n* **Using a CDN:** The easiest way is to include favico.js directly from a CDN (Content Delivery Network).  This avoids the need to download and manage the library locally.  A popular CDN option is jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>  <!-- Replace 0.3.10 with the latest version number -->\n```\n\nRemember to replace `0.3.10` with the latest version number available on jsDelivr or your preferred CDN.  Check the official favico.js repository for the most up-to-date version.\n\n* **Using npm (Node Package Manager):** If you're using npm in your project, install favico.js via the command line:\n\n```bash\nnpm install favico.js\n```\n\nThis will download the library to your project's `node_modules` directory.  You'll then need to include it in your HTML file (see the \"Including favico.js in your project\" section below).\n\n* **Direct Download:** You can also download the library directly from the official repository and include it in your project manually. This method requires you to manually manage updates.\n\n### Basic Usage\n\nAfter including favico.js in your project, you can use its API to easily manage your favicon.  The core functionality revolves around creating a `favico` object and using its methods to update the favicon.  The most common methods are `badge`, `reset`, and `update`.  `badge` adds a numerical badge to the favicon, `reset` removes any badges or customizations, and `update` allows for completely replacing the favicon image.\n\n### Including favico.js in your project\n\nRegardless of your installation method, you'll need to include favico.js in your HTML file using a `<script>` tag.  If you used npm, the path will be relative to your project's structure.  For example:\n\n**Using CDN:** (Already shown in the Installation section)\n\n**Using npm:** Assuming you've placed your favicon images in a `public/images` folder:\n\n```html\n<script src=\"./node_modules/favico.js/dist/favico.js\"></script>\n```\n\nPlace this `<script>` tag ideally just before the closing `</body>` tag of your HTML, to ensure the DOM is fully loaded before favico.js attempts to manipulate the favicon.\n\n\n### First Example\n\nThis example demonstrates adding a badge to your favicon:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Favico.js Example</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script> </head>\n<body>\n\n  <script>\n    const favicon = new Favico({\n      animation: 'none' //Optional: Set animation type\n    });\n\n    // Add a badge with the number 5\n    favicon.badge(5);\n\n\n    // after 3 seconds, reset the favicon to default\n    setTimeout(()=>{\n        favicon.reset();\n    }, 3000)\n\n\n  </script>\n\n</body>\n</html>\n```\n\nThis code first includes favico.js from a CDN. Then, it creates a `Favico` object.  Finally, it uses the `badge()` method to display a badge with the number 5 on the favicon.  Remember to replace the CDN link with your preferred method of including the library.  Also, ensure you have a favicon.ico file in your project's root directory.  You might need to adjust paths depending on your project setup.  The `animation` option is used to prevent unwanted animations if you don't need them.\n\n\n\n\n## API Reference\n\n### favico().badge(number, options)\n\nAdds a numerical badge to the favicon.\n\n* **`number` (integer):** The number to display in the badge.  Can be 0 to remove the badge.\n* **`options` (object, optional):**  Allows customization of the badge's appearance.  See \"Options and parameters\" section below for details.\n\n**Example:**\n\n```javascript\nfavicon.badge(5); // Adds a badge with the number 5\nfavicon.badge(0); // Removes the badge\nfavicon.badge(12, { color: 'red' }); //Adds a red badge with number 12\n```\n\n### favico().reset()\n\nResets the favicon to its default state. Removes any badges or custom images applied previously.\n\n**Example:**\n\n```javascript\nfavicon.reset();\n```\n\n### favico().update(image [, options])\n\nUpdates the favicon with a new image.\n\n* **`image` (string or object):**  The path to the new favicon image (string) or an object containing image data (see below for details).\n* **`options` (object, optional):** Allows further customization (e.g., for animations).  See \"Options and parameters\" section below for details.\n\n\n**Example (using image path):**\n\n```javascript\nfavicon.update('/path/to/new-favicon.png');\n```\n\n**Example (using image object - for more control):**\n\n```javascript\nfavicon.update({\n    src: '/path/to/new-favicon.png',\n    type: 'image/png' //Optional\n});\n```\n\n### favico().show()\n\nMakes the favicon visible if it was previously hidden.\n\n**Example:**\n\n```javascript\nfavicon.show();\n```\n\n### favico().hide()\n\nHides the favicon.  Useful for temporarily disabling the favicon or showing a different element instead.\n\n**Example:**\n\n```javascript\nfavicon.hide();\n```\n\n\n### Options and parameters\n\nSeveral options can be used with `badge()` and `update()` methods:\n\n* **`animation` (string, optional):** Specifies the animation type.  Possible values: `\"none\"`, `\"pop\"`, `\"slide\"`, `\"pulse\"`, `\"rotate\"`, `\"shake\"`. Defaults to `\"none\"`.  Browser support for animations may vary.\n\n* **`bgColor` (string, optional):** Sets the background color of the badge.  Must be a valid CSS color value (e.g., `'#FF0000'`, `\"red\"`).\n\n* **`type` (string, optional, for `update()`):** Specifies the MIME type of the image being used for updating the favicon. For instance: `image/png` or `image/svg+xml`.\n\n* **`position` (string, optional):** Controls the position of the badge (For example: 'top-left', 'top-right', 'bottom-left', 'bottom-right'). The default value is 'top-right'.\n\n\n### Customizing the favicon\n\nFavico.js allows for significant customization. You can control the appearance of the badge (color, position) and even replace the entire favicon image with a different one using the `update()` method. For more advanced customization you might consider manipulating the favicon image itself or using advanced animation techniques and options provided by the library.  Refer to the library's documentation for the most complete and up-to-date list of options and examples of advanced customization.\n\n\n## Advanced Usage\n\n### Using with frameworks (React, Angular, Vue)\n\nFavico.js is framework-agnostic and can be easily integrated into popular JavaScript frameworks like React, Angular, and Vue. The core integration remains the same: include the library and use its API.  However, the way you manage the favicon state and trigger updates will depend on your chosen framework's state management and lifecycle methods.\n\n**Example (Conceptual React):**\n\n```javascript\nimport React, { useState, useEffect } from 'react';\nimport Favico from 'favico.js'; //Import after installation using npm\n\nfunction MyComponent() {\n  const [notificationCount, setNotificationCount] = useState(0);\n  const favicon = new Favico();\n\n  useEffect(() => {\n    favicon.badge(notificationCount);\n    //Cleanup function for component unmount:\n    return () => favicon.reset();\n  }, [notificationCount, favicon]);\n\n  const handleNewNotification = () => {\n    setNotificationCount(notificationCount + 1);\n  };\n\n  return (\n    <div>\n      <button onClick={handleNewNotification}>New Notification</button>\n    </div>\n  );\n}\n```\n\nThis React example demonstrates a simple counter that updates the favicon badge.  Remember to adapt this based on your specific framework's patterns for handling state and side effects. For Angular and Vue, similar principles apply; you'll use the framework's lifecycle hooks and state management systems to integrate favico.js effectively.\n\n\n### Handling multiple favicons\n\nWhile favico.js primarily manages a single favicon, you can achieve the effect of multiple favicons by strategically using the `update()` method. For instance, you could have different favicon images for different states and switch between them based on your application's logic.  You could create an array of favicon URLs and update dynamically.\n\n```javascript\nconst favicon = new Favico();\nconst faviconUrls = ['/path/to/favicon1.png', '/path/to/favicon2.png'];\nlet currentFaviconIndex = 0;\n\nfunction changeFavicon(index){\n    if(index >= faviconUrls.length) {return;}\n    favicon.update(faviconUrls[index]);\n    currentFaviconIndex = index;\n}\n\n// ...later in your code...\nchangeFavicon(1); //Use the second favicon image\n```\n\n### Dynamically updating favicons\n\nDynamic favicon updates are a core feature of favico.js. The examples above already demonstrated this by updating the badge or changing favicon images based on changing application state.   Use the `badge()` and `update()` methods within event handlers, timers, or other parts of your application's logic to trigger favicon changes.  For instance, you might update the badge when new notifications arrive via WebSockets or AJAX requests.  Make sure you handle potential race conditions carefully if multiple updates are occurring simultaneously.\n\n### Error Handling\n\nFavico.js generally handles browser inconsistencies gracefully. However, there are potential points of failure, particularly when working with invalid image URLs or unsupported browser features.  For robust error handling, you could:\n\n* **Validate image URLs:** Ensure that the paths provided to the `update()` method are correct before attempting to load them.\n* **Check browser support:** Although favico.js tries to maintain compatibility, it's always good practice to check for browser support for features you rely on (especially animations).  You might provide fallback mechanisms or inform users if a feature is unavailable.\n* **Use try-catch blocks:** For operations that could throw errors (e.g., fetching image data from a remote source), wrap them in `try...catch` blocks to handle exceptions and prevent your application from crashing.\n* **Monitor console for errors:**  Keep an eye on your browser's developer console for any errors related to favico.js.\n\n\nBy addressing these points, you can create a more robust and user-friendly application that utilizes the full power of favico.js.\n\n\n## Examples\n\n### Simple counter\n\nThis example shows a simple counter that updates a numerical badge on the favicon:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Counter Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<button id=\"increment\">Increment</button>\n<p id=\"count\">0</p>\n\n<script>\n  const countElement = document.getElementById('count');\n  const incrementButton = document.getElementById('increment');\n  let count = 0;\n  const favicon = new Favico({ animation: 'none' });\n\n  incrementButton.addEventListener('click', () => {\n    count++;\n    countElement.textContent = count;\n    favicon.badge(count);\n  });\n</script>\n\n</body>\n</html>\n```\n\nThis code creates a button that increments a counter displayed on the page and updates the favicon badge accordingly.  Remember to have a favicon.ico in your project's root directory.\n\n\n### Notification badge\n\nThis example simulates receiving notifications and updates a badge accordingly:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Notification Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<button id=\"addNotification\">Add Notification</button>\n\n<script>\n  const addNotificationButton = document.getElementById('addNotification');\n  let notificationCount = 0;\n  const favicon = new Favico({ animation: 'pop' });\n\n  addNotificationButton.addEventListener('click', () => {\n    notificationCount++;\n    favicon.badge(notificationCount);\n  });\n</script>\n\n</body>\n</html>\n```\n\nThis uses the 'pop' animation for the badge. Clicking the button simulates a new notification.\n\n### Progress bar\n\nThis example is more complex and requires additional logic to manage the progress:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Progress Bar Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<div id=\"progressBar\"></div>\n\n<script>\n  const progressBar = document.getElementById('progressBar');\n  let progress = 0;\n  const favicon = new Favico();\n\n  const interval = setInterval(() => {\n    progress++;\n    if (progress > 100) {\n      clearInterval(interval);\n      favicon.reset();\n    } else {\n      progressBar.style.width = `${progress}%`;\n      favicon.badge(progress);\n    }\n  }, 100);\n</script>\n\n</body>\n</html>\n```\n\nThis example simulates a progress bar using a div element and updates the favicon badge to reflect the progress.\n\n\n### Custom image favicon\n\nThis example updates the favicon with a custom image:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Custom Image Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<button id=\"changeFavicon\">Change Favicon</button>\n\n<script>\n  const changeFaviconButton = document.getElementById('changeFavicon');\n  const favicon = new Favico();\n  const customFavicon = '/path/to/your/custom-favicon.png'; // Replace with your image path\n\n  changeFaviconButton.addEventListener('click', () => {\n    favicon.update(customFavicon);\n  });\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `/path/to/your/custom-favicon.png` with the actual path to your custom favicon image.\n\n### Complex example integrating multiple features\n\nThis example combines multiple features: a counter, a custom favicon, and animation:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Favico.js Complex Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/favico.js@0.3.10/dist/favico.js\"></script>\n</head>\n<body>\n\n<button id=\"increment\">Increment</button>\n<button id=\"changeFavicon\">Change Favicon</button>\n\n<script>\n  let count = 0;\n  const favicon = new Favico({animation: 'pulse'});\n  const incrementButton = document.getElementById('increment');\n  const changeFaviconButton = document.getElementById('changeFavicon');\n  const customFavicon = '/path/to/your/custom-favicon.png'; //Replace with your path\n\n  incrementButton.addEventListener('click', () => {\n    count++;\n    favicon.badge(count);\n  });\n\n  changeFaviconButton.addEventListener('click', () => {\n    favicon.update(customFavicon);\n  });\n</script>\n\n</body>\n</html>\n```\n\nThis combines incrementing a counter with a badge, and changing the favicon image using a button.  Remember to replace the placeholder image path.  Adjust the animation as needed.  These examples illustrate the basic usage and some advanced features;  more sophisticated applications may require more intricate logic and state management.  Always refer to the library's documentation for the latest features and detailed explanations.\n\n\n## Troubleshooting\n\n### Common issues and solutions\n\n* **Favicon not updating:**  This is often caused by incorrect paths to your favicon images or issues with your HTML structure. Double-check that your favicon image files exist at the specified paths and that you've correctly included the favico.js script in your HTML, preferably just before the closing `</body>` tag.  Also, ensure that your server is configured correctly to serve the favicon images.  Inspect your browser's developer console for any JavaScript errors.\n\n* **Badge not appearing:** Verify that you're correctly using the `badge()` method and providing a valid number.  Check the browser's developer console for errors.  Ensure that you haven't accidentally reset the favicon using the `reset()` method.  Incorrect positioning options might also prevent the badge from being visible.\n\n* **Animation not working:**  Browser support for favicon animations varies. Some browsers may not support all animation types.  Try using the `animation: 'none'` option to disable animation and see if the favicon updates correctly, eliminating animation as the source of the problem.   Check browser-specific notes or documentation for compatibility.  Some animations may require specific browser configurations or extensions.\n\n* **Image not loading:**  Ensure the image path in your `update()` method is correct, the image file exists and is accessible, and the image format is supported.  Check for any network errors that might prevent the image from loading.  Incorrectly specified MIME type in the `type` option for `update()` can also cause loading issues.\n\n* **Favicon not changing after an update:**  This could indicate race conditions if multiple updates are happening concurrently, or that the browser's cache is preventing the changes from being visible.  Try clearing your browser's cache and restarting the browser to force a reload of the favicon.  For testing, add a timestamp or unique identifier to your favicon URLs to ensure the browser is not using a cached copy.\n\n\n### Debugging tips\n\n* **Use your browser's developer tools:** The console in your browser's developer tools is crucial for identifying JavaScript errors and inspecting network requests related to favicon loading.\n* **Simplify your code:** If you're experiencing unexpected behavior, create a minimal, reproducible example to isolate the problem.\n* **Check the favico.js documentation:** Refer to the official documentation for the most up-to-date information, including detailed explanations of the API, options, and common troubleshooting steps.\n* **Test across different browsers:** Favicon behavior can vary slightly between browsers. Test your code in different browsers (Chrome, Firefox, Safari, Edge) to identify browser-specific issues.\n* **Inspect the network requests:** Use your browser's network tab to analyze the requests made to load your favicon images.  This helps detect problems with image loading or server configuration.\n\n\n### Troubleshooting browser-specific issues\n\nWhile favico.js attempts to handle browser differences, some quirks may still arise.  Here are some browser-specific considerations:\n\n* **Internet Explorer and Edge (legacy):**  Older versions of Internet Explorer and Edge may have limited or no support for dynamic favicon updates.  Consider providing fallback mechanisms for these older browsers or directing users to update their browser.\n\n* **Safari:** Safari might have caching issues.  Clearing the cache or using a unique URL (with a timestamp, for example) might solve problems with updates not reflecting immediately.\n\n* **Mobile browsers:**  Mobile browsers often have limitations and caching mechanisms that differ from desktop browsers.  Testing on various mobile devices and browsers is recommended.\n\n* **CORS (Cross-Origin Resource Sharing):** If you are loading favicon images from a different domain than your website, ensure that CORS is properly configured on the server serving the images to prevent errors.\n\n\nRemember to always consult the official favico.js documentation and release notes for the most current information on browser compatibility and troubleshooting.\n\n\n## Contributing\n\n### Contributing to the project\n\nWe welcome contributions to favico.js!  If you find a bug, have a feature request, or want to improve the code, please follow these steps:\n\n1. **Fork the repository:** Create your own fork of the favico.js repository on GitHub.\n\n2. **Create a new branch:** Create a new branch for your changes.  Use a descriptive name that reflects the purpose of your contribution (e.g., `fix-bug-123`, `add-feature-xyz`).\n\n3. **Make your changes:**  Make your code changes, following the code style guide (see below).  Ensure your changes are well-documented and tested.\n\n4. **Test your changes:** Thoroughly test your changes to ensure they work correctly and don't introduce new bugs.  See the \"Testing and CI/CD process\" section for details.\n\n5. **Commit your changes:** Commit your changes with clear and concise commit messages that explain what you've done and why.\n\n6. **Push your branch:** Push your branch to your forked repository on GitHub.\n\n7. **Create a pull request:** Create a pull request from your branch to the main `main` or `master` branch of the original favico.js repository.  Provide a clear description of your changes in the pull request, including any relevant context or background information.\n\n8. **Address feedback:**  Address any feedback or suggestions from the maintainers of the favico.js project.  Make necessary revisions and push them to your branch.\n\n\n### Code style guide\n\nFavico.js follows a consistent code style to maintain readability and maintainability.  The specific style guide may be documented in a separate file within the repository (e.g., `.editorconfig`, `.eslintrc`). Adherence to this style guide is essential for all contributions.  Generally, this will involve:\n\n* **Consistent indentation:**  Use consistent indentation (usually 2 spaces).\n* **Meaningful variable and function names:**  Choose descriptive names that clearly indicate the purpose of variables and functions.\n* **Comments:**  Add clear and concise comments to explain complex logic or non-obvious code.\n* **Linting:** Use a linter (e.g., ESLint) to automatically check for style violations and potential errors.\n\n\n### Testing and CI/CD process\n\nFavico.js utilizes automated testing to ensure code quality and prevent regressions.  The specific testing framework and CI/CD (Continuous Integration/Continuous Delivery) pipeline may be detailed in the repository's documentation (e.g., a `README.md` file).  Generally, this process might involve:\n\n* **Unit tests:**  Unit tests verify the correctness of individual functions and components.\n* **Integration tests:** Integration tests check the interaction between different parts of the code.\n* **Browser tests:** Browser tests are crucial to ensure favico.js works correctly across different browsers.  This might involve using a tool like Selenium or a browser testing platform.\n* **CI/CD pipeline:** A CI/CD pipeline automatically builds, tests, and deploys the code whenever changes are pushed to the repository.  This helps to quickly identify and address issues.\n\nBefore submitting a pull request, ensure your changes pass all tests in the CI/CD pipeline.  The repository's documentation will provide more specific instructions on how to run the tests locally.\n\n\n## License\n\n### License information\n\nFavico.js is typically released under an open-source license, allowing for free use, modification, and distribution.  However, the *specific* license (e.g., MIT, GPL, Apache 2.0) will be clearly stated within the project's repository, usually in a file named `LICENSE` or `LICENSE.txt`.  Always refer to that file for the exact terms and conditions governing the use of favico.js.  The license file will outline the permitted uses, restrictions, and disclaimers associated with the software.  It's crucial to understand and comply with the terms of the license before using, modifying, or distributing favico.js.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"favicojs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"favico.js - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}