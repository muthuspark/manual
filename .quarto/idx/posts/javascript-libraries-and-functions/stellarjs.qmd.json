{"title":"Stellar.js - Documentation","markdown":{"yaml":{"title":"Stellar.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Stellar.js?","containsRefs":false,"markdown":"\n\n\n\nStellar.js is a lightweight, open-source JavaScript library that provides parallax scrolling effects for websites and web applications. It simplifies the process of creating visually engaging and immersive user experiences by allowing you to easily add parallax scrolling to any element on your page.  Stellar.js works by intelligently adjusting the position of elements relative to the viewport as the user scrolls, creating a sense of depth and movement.  It's designed to be easily integrated into existing projects and requires minimal configuration.\n\n\n### Key Features and Benefits\n\n* **Simple API:** Stellar.js boasts a clean and intuitive API, making it easy to learn and use, even for developers with limited experience.\n* **Lightweight:**  The library is incredibly small in size, minimizing the impact on page load times and performance.\n* **Cross-browser Compatibility:** Stellar.js is designed to work seamlessly across a wide range of modern web browsers.\n* **Customizable:**  You have significant control over the parallax effect, allowing you to fine-tune the speed, direction, and other aspects to match your design vision.\n* **Responsive Design:** Stellar.js adapts to different screen sizes and resolutions, ensuring a consistent experience across devices.\n* **Easy Integration:** The library integrates seamlessly with other JavaScript frameworks and libraries.\n* **No Dependencies:** Stellar.js doesn't rely on any other external libraries, simplifying the setup and reducing potential conflicts.\n\n\n### Setting up the Development Environment\n\nBefore you begin working with Stellar.js, ensure you have a basic development environment set up. This typically includes:\n\n* **A code editor:**  Popular choices include VS Code, Sublime Text, Atom, or Brackets.\n* **A web browser:**  Chrome, Firefox, Safari, and Edge are all suitable for testing your code.\n* **Basic HTML, CSS, and JavaScript knowledge:** A fundamental understanding of these technologies is essential for effectively using Stellar.js.  While Stellar.js simplifies parallax effects, understanding the underlying principles will help you tailor the effects to your needs.\n\n\n### Installation and Setup Guide\n\nStellar.js is easily integrated into your projects using a couple of methods:\n\n**1. Using a CDN:**\n\nThe simplest way to include Stellar.js is by using a Content Delivery Network (CDN). Add the following `<script>` tag within the `<head>` of your HTML file:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/stellar.js/1.0.0/jquery.stellar.min.js\"></script>\n```\nRemember that this method requires jQuery to be included as well. You should include the jQuery library *before* the Stellar.js script. For example:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/stellar.js/1.0.0/jquery.stellar.min.js\"></script>\n```\n\n**2. Using npm (Node Package Manager):**\n\nIf you're using npm for your project's dependencies, install Stellar.js using the following command in your terminal:\n\n```bash\nnpm install stellar.js\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport Stellar from 'stellar.js';\n\n// Initialize Stellar.js (see usage examples below)\n```\n\n**After Installation:**\n\nOnce Stellar.js is included, you can initialize it on your elements by adding the class `stellar` to the container element and calling `$.stellar()` in your JavaScript code (for CDN method). For the npm method you will need to refer to the specific documentation of the installed library.  Refer to the Stellar.js documentation for detailed usage examples and API reference.  Remember to consult the updated documentation for the most current instructions and API.\n\n\n## Core Concepts\n\n### Parallax Effects\n\nStellar.js fundamentally relies on parallax effects to create the illusion of depth.  Parallax is the displacement or difference in the apparent position of an object viewed along two different lines of sight, and is used here to simulate a 3D effect within a 2D webpage.  As the user scrolls, elements with different parallax values move at different speeds relative to the viewport.  Elements with a higher parallax value will move faster than those with a lower value, creating the sense that some objects are closer to the viewer than others.  Stellar.js achieves this by manipulating the CSS `transform` property of elements, specifically using `translate3d` for optimal performance.\n\n\n### Scene and Layer Management\n\nStellar.js implicitly handles scene management. The entire page, or a specific container element with the class `stellar`, acts as the scene.  Within this scene, individual HTML elements represent layers. These layers are independent and can be assigned individual parallax values or other properties, influencing how they react to scrolling.  You don't explicitly define scenes or layersâ€”they're implicitly managed by Stellar.js based on the HTML structure and the `data-*` attributes (or equivalent JavaScript configuration) applied to the elements.  The `data-stellar-ratio` attribute is key to adjusting the movement speed of each layer.\n\n\n### Camera and Perspective Control\n\nWhile Stellar.js doesn't explicitly represent a camera in the traditional 3D sense, the concept of perspective is integral to its parallax effects.  The viewport acts as the viewer's perspective.  By changing parallax values, you effectively control the perceived distance of elements from this viewport \"camera.\"  The higher the `data-stellar-ratio` value (or equivalent JavaScript property), the further away the element appears, and the slower it moves relative to the viewport.  Lower values make the element appear closer and move faster.  You don't directly manipulate a camera object but instead indirectly influence perspective by controlling the movement speed and position of elements.\n\n\n### Animation and Transitions\n\nStellar.js itself doesn't provide built-in animation features beyond the parallax scrolling effect.  To incorporate additional animations or transitions, you'll need to use other JavaScript libraries or CSS animations alongside Stellar.js.  Stellar.js provides the framework for the parallax movement; you can then layer on top of this other animation or transition effects using libraries like GSAP, Animate.css, or CSS transitions, triggered by scrolling events or other user interactions.\n\n\n### Event Handling\n\nStellar.js doesn't directly expose a large range of custom events. However, you can leverage standard JavaScript event listeners to detect and respond to the parallax scrolling effect.  For instance, you could use the `scroll` event to trigger additional actions or animations based on the scroll position.  By monitoring the scroll position and correlating it with the parallax movement of elements, you can create complex interactions and animations synchronized with the parallax effect.  Remember that overusing events might impact performance, especially on complex pages.  Efficient event handling is crucial for a smooth user experience.\n\n\n## Working with Scenes\n\n### Creating and Configuring Scenes\n\nIn Stellar.js, a \"scene\" is implicitly defined by any element to which you apply the parallax effect.  This is typically done by adding the class `stellar` to a container `<div>` element.  This container element then becomes the root of your parallax scene.  While there isn't explicit scene creation, the configuration happens via the `$.stellar()` function (or its equivalent in the npm version)  and any options passed to it.  These options allow you to globally control aspects of the parallax effect within that scene, like horizontal parallax, vertical parallax, responsiveness, and more.  For example, disabling horizontal scrolling might be configured via an option passed to `$.stellar()`.  The entire subtree within the container with the `stellar` class will be affected.\n\n### Adding Layers to a Scene\n\nAdding layers is simply a matter of adding HTML elements *within* the container element that has the `stellar` class. Each child element becomes a layer within the scene.   The key to controlling the parallax effect on each layer is setting its `data-stellar-ratio` attribute. This attribute determines how fast the layer moves relative to the viewport during scrolling. A value of `1` means it moves at the same speed as the viewport, `2` means it moves twice as fast (in the opposite direction), `0.5` means it moves half as fast, and so on.  You can also use `data-stellar-horizontal-offset` and `data-stellar-vertical-offset` attributes to position elements within the scene.\n\n\n### Managing Layer Properties\n\nLayer properties are primarily controlled through custom data attributes on the HTML elements.  These attributes include:\n\n* `data-stellar-ratio`: Controls the parallax speed (movement relative to viewport).\n* `data-stellar-vertical-offset`: Adjusts the vertical position of the layer.\n* `data-stellar-horizontal-offset`: Adjusts the horizontal position of the layer.\n* `data-stellar-background-ratio`:  For background images, this controls parallax speed.\n* `data-stellar-background-attachment`: Controls the background image's attachment behavior (fixed, scroll).\n\nThese attributes provide a declarative way to manage layer properties directly in your HTML. You can also programmatically control these properties using JavaScript, although this is less common for simple setups.   Remember to use appropriate CSS for positioning and styling your layers effectively.\n\n### Scene Composition Techniques\n\nEffective scene composition involves strategically arranging layers and their parallax properties to create depth and visual interest.\n\n* **Layering:** Use multiple elements at different Z-indexes to create a layered look.\n* **Parallax Values:** Experiment with different `data-stellar-ratio` values to create a sense of depth; elements with higher ratios will appear further away.\n* **Offset Values:** Use `data-stellar-vertical-offset` and `data-stellar-horizontal-offset` to fine-tune layer positions within the scene.\n* **Background Images:** Use background images with appropriate `data-stellar-background-ratio` for subtle parallax effects within background elements.\n\n\n### Scene Loading and Unloading\n\nStellar.js doesn't explicitly define \"loading\" and \"unloading\" scenes in the sense of dynamically creating and destroying them. However, you can control when the parallax effect is active.   The parallax effect begins when the `$.stellar()` function is called (or its equivalent in the npm version) on your designated container element.  You can stop the parallax effect by calling `$.stellar('destroy')` on that same element. This effectively removes the parallax effects from the scene. You might use this functionality in situations where you want to temporarily disable parallax scrolling, for example, when an overlay is active, or when you transition to a different page section with different parallax behavior.  Remember that any parallax effects will restart when you call `$.stellar()` again on that element.\n\n\n## Layer Manipulation\n\n### Creating and Positioning Layers\n\nLayers in Stellar.js are simply HTML elements within the container element that has the `stellar` class applied.  Creating layers involves adding standard HTML elements (e.g., `<div>`, `<img>`, `<span>`) inside this container.  Positioning is handled through standard CSS techniques (e.g., `position: absolute;`, `top`, `left`, `right`, `bottom`, `transform`). Stellar.js itself doesn't provide specific functions for creating or positioning layers; it uses standard HTML and CSS.  The parallax effect then manipulates the position of these elements based on their `data-stellar-ratio`, `data-stellar-vertical-offset`, and `data-stellar-horizontal-offset` attributes.\n\n\n### Layer Transformation (Scaling, Rotation, Translation)\n\nStellar.js primarily handles translation (movement) of layers through its parallax effect. However, you can apply scaling, rotation, and other transformations using standard CSS transforms.   For example, you can add CSS like `transform: scale(1.2) rotate(10deg);` directly to a layer's style to scale it by 120% and rotate it 10 degrees.  These CSS transformations will be applied *in addition* to the parallax translation handled by Stellar.js. You can also use JavaScript to dynamically modify these CSS transforms to create more complex animations and interactions synchronized with the scrolling.\n\n\n### Layer Visibility and Z-index\n\nLayer visibility is controlled using standard CSS properties like `visibility` or `display`.  You can show or hide layers using JavaScript by changing these properties.  The `z-index` CSS property is crucial for controlling the stacking order of layers. Layers with higher `z-index` values will appear on top of layers with lower values.   Properly managing `z-index` is essential for creating layered effects where certain elements appear in front of or behind others.  Stellar.js itself doesn't directly manage visibility or z-index; it relies on standard CSS mechanisms.\n\n\n### Layer Grouping and Parenting\n\nStellar.js doesn't offer built-in layer grouping or parenting features. To group layers logically, use standard HTML techniques like nesting elements within `<div>` containers.  This allows you to apply styles and transformations to groups of layers together. For example, you could group several related image layers within a parent `<div>` and apply a class to that parent to control the parallax behaviour for the whole group,  using standard CSS selectors to affect all child layers.  Remember that Stellar.js's parallax effect affects each element individually based on its attributes; grouping only affects the CSS styles and positioning of those elements.\n\n\n### Advanced Layer Effects\n\nStellar.js primarily provides a basic parallax scrolling effect. To achieve more advanced layer effects, such as complex animations, transitions, or other visual enhancements, you should leverage other JavaScript libraries or CSS techniques in conjunction with Stellar.js.  For instance, you can use libraries like GSAP (GreenSock Animation Platform) for complex animation sequences synchronized with the parallax scrolling.  Remember that using many external libraries can increase the overall size and complexity of your project.  Carefully consider the performance implications of adding significant layers of complexity beyond the core parallax functionality of Stellar.js.\n\n\n## Camera Controls\n\n### Camera Movement and Positioning\n\nStellar.js doesn't provide explicit camera objects or direct camera control in the traditional 3D sense. The \"camera\" is implicitly represented by the viewport.  The parallax effect simulates camera movement by changing the position of elements relative to the viewport as the user scrolls.  You don't directly move a camera; you control the apparent movement by adjusting the parallax values (`data-stellar-ratio`, `data-stellar-horizontal-offset`, `data-stellar-vertical-offset`) of the individual layers.  The faster a layer moves relative to the viewport, the greater the illusion of camera movement.\n\n### Camera Zoom and Field of View\n\nStellar.js doesn't offer direct zoom or field-of-view (FOV) control.  To simulate zooming, you would typically use CSS transforms (e.g., `transform: scale()`) applied to layers or containers.  Changing the scale of elements will create a visual effect similar to zooming.  Similarly, to simulate changes in FOV, you'd need to adjust the size and position of elements and their parallax behavior to create the impression of a wider or narrower field of view.  This would require careful manipulation of layer properties and CSS styles, and is not a direct feature of Stellar.js.\n\n### Custom Camera Controls\n\nSince Stellar.js doesn't have built-in camera controls, creating custom controls requires using JavaScript to manipulate layer properties dynamically.  You would need to listen for user input events (e.g., mouse clicks, keyboard presses, touch gestures) and then programmatically update the `data-stellar-ratio`, `data-stellar-horizontal-offset`, and `data-stellar-vertical-offset` attributes of relevant layers.  This level of customization allows for advanced interactions and non-standard parallax behaviors beyond simple scrolling-based parallax.\n\n### Camera Animations and Transitions\n\nCreating camera animations requires combining Stellar.js with other JavaScript animation libraries (like GSAP) or CSS animations.  You'd use JavaScript to change layer properties over time, creating smooth transitions and dynamic parallax effects.  This might involve smoothly changing parallax ratios, offsets, or even CSS transforms (scale, rotation) to simulate camera movement and create cinematic effects.  Stellar.js itself handles only the basic parallax based on scrolling; more advanced animations require external libraries.\n\n### Camera Event Handling\n\nStellar.js doesn't expose specific \"camera\" events. However, you can use standard JavaScript event listeners (e.g., `scroll`, `resize`, `mousemove`) to track user interactions and trigger updates to your parallax scene.  For example, you might listen to `scroll` events to update layer positions based on the scroll position and simulate smooth camera panning.  Or you could use `mousemove` to link mouse movements to subtle camera adjustments.  The events are standard JavaScript events; Stellar.js doesn't provide specialized camera-centric events.  Remember that efficient event handling is crucial for performance, especially when handling complex custom camera controls.\n\n\n## Animation and Interactions\n\n### Basic Animations\n\nStellar.js itself provides only the basic parallax scrolling animation.  To create more complex animations, you must use additional JavaScript libraries or CSS animations.  A simple example of a basic animation might involve changing the opacity of a layer as the user scrolls using JavaScript and CSS transitions.  This can be triggered by an event listener that checks the scroll position.  Stellar.js only provides the parallax movement; all other animation effects must be implemented separately.\n\n### Keyframe Animations\n\nKeyframe animations, typically using CSS animations or libraries like Animate.css, can be synchronized with Stellar.js's parallax scrolling. You define keyframes for different stages of an animation, and then trigger those animations based on scroll position or other events.  For example, you might create a keyframe animation that changes the scale and rotation of a layer as the user scrolls past a specific section of the page.  The key is to use JavaScript event listeners to detect the relevant scroll position and trigger the CSS animation.\n\n### Tweening and Interpolation\n\nTo create smooth transitions between animation states, you would typically use tweening libraries such as GSAP (GreenSock Animation Platform). GSAP provides powerful tools for creating sophisticated animations with easing functions, allowing you to precisely control the speed and timing of animation changes.   You can use GSAP (or similar libraries) to animate changes to layer properties (position, opacity, scale, rotation, etc.)  These animations can be synchronized with the Stellar.js parallax effect, creating seamless and visually appealing interactions.\n\n\n### Event-Driven Animations\n\nAnimations can be triggered by various events, including scroll events, mouse events (hover, click), and window resize events.  You would use JavaScript event listeners to detect these events and start or stop animations accordingly. For instance, a hover event on a layer could trigger a scale animation, while scrolling past a certain point could trigger a fade-in animation.  Remember to balance responsiveness with performance; excessive event listeners could negatively impact page performance.\n\n\n### Custom Animation Functions\n\nFor highly specialized animation requirements, you may need to write custom animation functions.  These functions would likely use requestAnimationFrame for smooth animation and would directly manipulate CSS properties of elements using JavaScript.  This approach gives you maximum control, but requires a more in-depth understanding of animation principles and JavaScript's capabilities.  You can integrate these custom animation functions with Stellar.js by triggering them based on scroll events or other user interactions, synchronizing them with the parallax scrolling.  Well-structured custom functions will improve maintainability and readability of your animation code.\n\n\n## Advanced Techniques\n\n### Performance Optimization\n\nStellar.js is generally lightweight, but performance can become an issue with many layers or complex animations.  Optimization strategies include:\n\n* **Minimize Layers:**  Use fewer layers whenever possible.  Combine elements that can move together into single layers.\n* **Reduce Unnecessary Animations:** Avoid overly complex animations or animations on many layers simultaneously.\n* **Use Hardware Acceleration:** Ensure your CSS transforms utilize hardware acceleration (using `translate3d`, `scale3d`, `rotate3d`).\n* **Efficient Event Handling:**  Avoid excessive event listeners and optimize event handling to minimize performance overhead.\n* **Lazy Loading:** For large images or assets, consider lazy loading techniques to improve initial page load times.\n* **Reduce DOM Manipulation:** Minimize frequent changes to the DOM, as this can be computationally expensive.\n\n\n### 3D Transformations and Rendering\n\nWhile Stellar.js primarily works in 2D, you can create the illusion of 3D using CSS 3D transforms and perspective. This involves setting the `perspective` property on a parent container and using `transform-style: preserve-3d` on child elements.  However, Stellar.js itself doesn't directly handle 3D rendering.  You will need to combine it with other techniques and potentially libraries to manage the complexities of 3D transformations and perspective.  Complex 3D scenes will likely require more advanced techniques and potentially a more powerful library dedicated to 3D rendering.\n\n\n### Integration with Other Libraries\n\nStellar.js can be integrated with other JavaScript libraries to enhance functionality.  Common integrations include:\n\n* **Animation Libraries:** GSAP, Animate.css, or other animation libraries for smoother and more complex animations synchronized with the parallax effect.\n* **UI Libraries:** React, Vue, Angular, etc., to build interactive components that integrate seamlessly with the parallax scrolling.\n* **Image Loading Libraries:** Lazy loading libraries like LazySizes to improve performance when using many images.\n* **Scroll Libraries:** Smooth scrolling libraries to enhance the overall user experience.  However, be mindful of potential conflicts or redundant functionality.\n\n\n### Custom Shader Implementation\n\nStellar.js doesn't directly support custom shader implementation.  Custom shaders require WebGL and are generally used for advanced graphics rendering beyond the scope of Stellar.js's capabilities.  If you need advanced shader-based effects, you'd likely need a completely different approach using WebGL or a dedicated 3D graphics library.  Stellar.js focuses on efficient 2D parallax scrolling and doesn't provide an interface for custom shader manipulation.\n\n\n### Debugging and Troubleshooting\n\nDebugging Stellar.js issues typically involves:\n\n* **Browser Developer Tools:** Use your browser's developer tools to inspect CSS styles, JavaScript errors, and network activity.\n* **Console Logging:**  Add `console.log` statements to track variable values and function execution.\n* **Check for Conflicts:** Ensure no other JavaScript libraries conflict with Stellar.js.\n* **Verify HTML Structure:** Double-check your HTML structure and the `data-*` attributes applied to layers.  Incorrect attributes are a frequent source of problems.\n* **Test in Different Browsers:**  Test your implementation across multiple browsers to identify browser-specific issues.  Incompatibilities are rare but possible.\n* **Simplify:**  To isolate problems, temporarily remove or simplify elements in your parallax scene to see if the issue persists.\n\n\n\n\n\n## API Reference\n\n**Note:**  The Stellar.js API is relatively simple and primarily relies on data attributes in the HTML and standard JavaScript event handling.  The following describes the conceptual structure of the objects and functions, but the exact implementation details may vary slightly depending on the version and whether you are using the CDN version or the npm package. The CDN version relies heavily on jQuery, whereas the npm version may have a different API structure. Consult the most up-to-date documentation for precise details.\n\n\n### Scene Object\n\nStellar.js doesn't expose a dedicated \"Scene\" object in the traditional sense.  A scene is implicitly defined by the element to which you apply the `stellar` class and call the initialization function (`$.stellar()` in the CDN version).  The configuration options passed to the initialization function effectively configure the scene's behavior.  There are no methods to directly manipulate a \"Scene\" object as a distinct entity.  The scene's behavior is controlled indirectly by manipulating individual layers and their attributes.\n\n\n### Layer Object\n\nStellar.js does not expose a dedicated \"Layer\" object.  Each layer is represented by an HTML element within the scene container.  Layer properties are accessed and modified through the element's data attributes (e.g., `data-stellar-ratio`, `data-stellar-horizontal-offset`, `data-stellar-vertical-offset`) or by directly manipulating the element's CSS using JavaScript.  There are no specific layer object methods provided by the Stellar.js library.  The library works implicitly on the DOM elements themselves.\n\n\n### Camera Object\n\nThere is no \"Camera\" object in Stellar.js. The viewport acts as the camera. Camera effects are simulated by changing layer positions and parallax speeds.  Any \"camera\" control is achieved by manipulating layer properties (through data attributes or direct DOM manipulation), not by directly controlling a camera object.\n\n\n### Animation Object\n\nStellar.js itself doesn't provide a dedicated \"Animation\" object.  Animations are implemented using external JavaScript libraries (like GSAP) or CSS animations.  Stellar.js simply provides the parallax scrolling effect as a base upon which other animations are built using other libraries or direct DOM manipulation.  Any animation-related functionality is entirely handled by the external libraries used, not by Stellar.js itself.\n\n\n### Utility Functions\n\nThe primary utility function in the CDN version is `$.stellar()`. This function initializes the parallax effect on the selected element.  Depending on the version and implementation, additional functions may exist (for example, a destroy function to remove the parallax effect).  The npm package version may offer a slightly different API or a more object-oriented approach, but the core functionality remains focused on initialization and handling the parallax effect based on data attributes and DOM manipulation. Refer to the library's specific documentation for the exact functions available and their usage.\n\n\n\n\n## Examples and Tutorials\n\nThese examples assume you've included Stellar.js using a CDN or npm as described in the Installation and Setup Guide.  Remember that the specific implementation might vary slightly based on whether you are using the CDN version which heavily relies on jQuery or the npm package which may use a different API.  Always refer to the most current documentation for your specific version.\n\n\n### Basic Parallax Example\n\nThis example demonstrates a simple parallax effect with two layers: a background image and a foreground element.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Stellar.js Basic Example</title>\n<style>\nbody, html { height: 100%; margin: 0; }\n#background { background-image: url('background.jpg'); height: 100%; background-size: cover; }\n#foreground { position: absolute; bottom: 0; left: 0; width: 100%; }\n</style>\n</head>\n<body>\n<div id=\"background\" class=\"stellar\" data-stellar-background-ratio=\"0.5\">\n  <div id=\"foreground\" data-stellar-ratio=\"1.5\">Foreground Content</div>\n</div>\n\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/stellar.js/1.0.0/jquery.stellar.min.js\"></script>\n<script>\n$(document).ready(function() {\n  $('.stellar').stellar();\n});\n</script>\n</body>\n</html>\n```\n\nReplace `'background.jpg'` with the actual path to your background image. The `data-stellar-background-ratio` attribute controls the background image's parallax speed, while `data-stellar-ratio` controls the foreground element's speed.\n\n\n### Complex Scene Example\n\nThis example illustrates a more complex scene with multiple layers and varying parallax speeds.  You would add more `<div>` elements within the `#container` with different `data-stellar-ratio` and potentially offset values.  Remember to style these elements with CSS to create the desired visual effect.\n\n```html\n<div id=\"container\" class=\"stellar\">\n  <div id=\"layer1\" data-stellar-ratio=\"0.2\"></div>\n  <div id=\"layer2\" data-stellar-ratio=\"0.5\"></div>\n  <div id=\"layer3\" data-stellar-ratio=\"1.0\"></div>\n  <div id=\"layer4\" data-stellar-ratio=\"2.0\"></div>\n</div>\n```\n\nYou would then style each layer individually using CSS and possibly add more advanced effects using JavaScript libraries.\n\n\n### Custom Animation Example\n\nThis example uses GSAP to animate a layer's opacity as the user scrolls. You'll need to include the GSAP library.\n\n```javascript\n$(document).ready(function() {\n  $('.stellar').stellar();\n  let tl = gsap.timeline();\n  tl.to(\"#myLayer\", { opacity: 0, scrollTrigger: { trigger: \"#myLayer\", start: \"top 80%\", end: \"bottom 20%\" } });\n});\n```\n\nThis assumes you have a `<div id=\"myLayer\">` element within your Stellar.js scene.  The GSAP scrollTrigger will manage the animation based on the scroll position.\n\n\n\n### Interactive Scene Example\n\nThis example uses JavaScript to change a layer's position based on mouse movement.\n\n```javascript\n$(document).ready(function() {\n  $('.stellar').stellar();\n  $(document).mousemove(function(e) {\n    let x = e.pageX / $(window).width() * 100;\n    let y = e.pageY / $(window).height() * 100;\n    $('#myLayer').css('left', x + '%');\n    $('#myLayer').css('top', y + '%');\n  });\n});\n```\n\nThis example requires a `<div id=\"myLayer\">` element within your scene and will reposition that layer dynamically as the mouse moves.  You'll need to handle the position within the bounds of the scene.  This is just a basic example; you can greatly expand it for more sophisticated interactive effects.  Remember that excessive event handling could impact performance.\n\n\nRemember to replace placeholder elements and paths with your actual content and adjust the values as needed to achieve your desired effect.  These are starting points; you can significantly expand upon them to create complex and visually stunning parallax scenes.\n\n\n## Troubleshooting and Support\n\n### Common Issues and Solutions\n\n* **Parallax not working:**  Double-check that you've correctly included the Stellar.js library (CDN or npm), that the `stellar` class is applied to the correct container element, and that the `data-stellar-ratio` attributes are correctly set on your layers.  Ensure jQuery is included correctly if using the CDN version.  Inspect your browser's developer console for JavaScript errors.\n\n* **Layers not moving correctly:** Verify that the `data-stellar-ratio`, `data-stellar-horizontal-offset`, and `data-stellar-vertical-offset` attributes are set appropriately for each layer. Incorrect values or missing attributes can lead to unexpected behavior.  Check your CSS to ensure that elements are positioned correctly.\n\n* **Performance issues:**  If your parallax scene is slow, consider reducing the number of layers, simplifying animations, using hardware acceleration (using `translate3d`), and optimizing images.  Avoid overly complex animations or interactions.\n\n* **Conflicts with other libraries:** If you're using other JavaScript libraries, ensure they don't conflict with Stellar.js.  Try disabling other libraries temporarily to see if they cause the problem.  Check for jQuery conflicts if applicable.\n\n* **Browser compatibility:** Although Stellar.js is generally well-supported across modern browsers, ensure you test across multiple browsers to identify and address any compatibility issues.  Older browsers may require additional handling or may not support the parallax effects adequately.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:** Inspect CSS styles, check for JavaScript errors, and monitor network activity using your browser's built-in developer tools.  These tools are invaluable for pinpointing the source of problems.\n\n* **Add `console.log` statements:** Insert `console.log` statements in your JavaScript code to track variable values, function calls, and the flow of execution. This is a fundamental debugging technique.\n\n* **Simplify your scene:** If you're having trouble with a complex scene, temporarily remove or simplify elements to isolate the source of the issue.  This is a classic approach to isolating problems within large applications.\n\n* **Check your HTML structure:** Ensure your HTML is correctly structured and that your parallax layers are nested within the appropriate container element.  An incorrect HTML structure can prevent Stellar.js from functioning correctly.\n\n* **Test with a minimal example:**  Create a minimal example with only a few layers and minimal styling to rule out any issues caused by complex code or interactions.  This isolates whether the core Stellar.js functionality is the source of the issue.\n\n\n### Community Support and Forums\n\nWhile Stellar.js might not have a dedicated, large community forum, you can find support through general JavaScript or web development forums and communities (like Stack Overflow).  Search for solutions to your specific problem; someone else may have encountered and solved a similar issue.  Be sure to provide relevant details, including your Stellar.js version, browser, and any relevant code snippets when seeking help.\n\n\n### Contributing to Stellar.js\n\nIf you find a bug or want to add a feature, refer to the project's repository (GitHub or other platform where the project is hosted) for contribution guidelines.  Many open-source projects welcome contributions, especially bug fixes and improvements to documentation.  Before contributing, check the project's issue tracker to see if a similar issue has already been reported or addressed.  Ensure your contributions adhere to the project's coding style and standards.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Stellar.js?\n\nStellar.js is a lightweight, open-source JavaScript library that provides parallax scrolling effects for websites and web applications. It simplifies the process of creating visually engaging and immersive user experiences by allowing you to easily add parallax scrolling to any element on your page.  Stellar.js works by intelligently adjusting the position of elements relative to the viewport as the user scrolls, creating a sense of depth and movement.  It's designed to be easily integrated into existing projects and requires minimal configuration.\n\n\n### Key Features and Benefits\n\n* **Simple API:** Stellar.js boasts a clean and intuitive API, making it easy to learn and use, even for developers with limited experience.\n* **Lightweight:**  The library is incredibly small in size, minimizing the impact on page load times and performance.\n* **Cross-browser Compatibility:** Stellar.js is designed to work seamlessly across a wide range of modern web browsers.\n* **Customizable:**  You have significant control over the parallax effect, allowing you to fine-tune the speed, direction, and other aspects to match your design vision.\n* **Responsive Design:** Stellar.js adapts to different screen sizes and resolutions, ensuring a consistent experience across devices.\n* **Easy Integration:** The library integrates seamlessly with other JavaScript frameworks and libraries.\n* **No Dependencies:** Stellar.js doesn't rely on any other external libraries, simplifying the setup and reducing potential conflicts.\n\n\n### Setting up the Development Environment\n\nBefore you begin working with Stellar.js, ensure you have a basic development environment set up. This typically includes:\n\n* **A code editor:**  Popular choices include VS Code, Sublime Text, Atom, or Brackets.\n* **A web browser:**  Chrome, Firefox, Safari, and Edge are all suitable for testing your code.\n* **Basic HTML, CSS, and JavaScript knowledge:** A fundamental understanding of these technologies is essential for effectively using Stellar.js.  While Stellar.js simplifies parallax effects, understanding the underlying principles will help you tailor the effects to your needs.\n\n\n### Installation and Setup Guide\n\nStellar.js is easily integrated into your projects using a couple of methods:\n\n**1. Using a CDN:**\n\nThe simplest way to include Stellar.js is by using a Content Delivery Network (CDN). Add the following `<script>` tag within the `<head>` of your HTML file:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/stellar.js/1.0.0/jquery.stellar.min.js\"></script>\n```\nRemember that this method requires jQuery to be included as well. You should include the jQuery library *before* the Stellar.js script. For example:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/stellar.js/1.0.0/jquery.stellar.min.js\"></script>\n```\n\n**2. Using npm (Node Package Manager):**\n\nIf you're using npm for your project's dependencies, install Stellar.js using the following command in your terminal:\n\n```bash\nnpm install stellar.js\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport Stellar from 'stellar.js';\n\n// Initialize Stellar.js (see usage examples below)\n```\n\n**After Installation:**\n\nOnce Stellar.js is included, you can initialize it on your elements by adding the class `stellar` to the container element and calling `$.stellar()` in your JavaScript code (for CDN method). For the npm method you will need to refer to the specific documentation of the installed library.  Refer to the Stellar.js documentation for detailed usage examples and API reference.  Remember to consult the updated documentation for the most current instructions and API.\n\n\n## Core Concepts\n\n### Parallax Effects\n\nStellar.js fundamentally relies on parallax effects to create the illusion of depth.  Parallax is the displacement or difference in the apparent position of an object viewed along two different lines of sight, and is used here to simulate a 3D effect within a 2D webpage.  As the user scrolls, elements with different parallax values move at different speeds relative to the viewport.  Elements with a higher parallax value will move faster than those with a lower value, creating the sense that some objects are closer to the viewer than others.  Stellar.js achieves this by manipulating the CSS `transform` property of elements, specifically using `translate3d` for optimal performance.\n\n\n### Scene and Layer Management\n\nStellar.js implicitly handles scene management. The entire page, or a specific container element with the class `stellar`, acts as the scene.  Within this scene, individual HTML elements represent layers. These layers are independent and can be assigned individual parallax values or other properties, influencing how they react to scrolling.  You don't explicitly define scenes or layersâ€”they're implicitly managed by Stellar.js based on the HTML structure and the `data-*` attributes (or equivalent JavaScript configuration) applied to the elements.  The `data-stellar-ratio` attribute is key to adjusting the movement speed of each layer.\n\n\n### Camera and Perspective Control\n\nWhile Stellar.js doesn't explicitly represent a camera in the traditional 3D sense, the concept of perspective is integral to its parallax effects.  The viewport acts as the viewer's perspective.  By changing parallax values, you effectively control the perceived distance of elements from this viewport \"camera.\"  The higher the `data-stellar-ratio` value (or equivalent JavaScript property), the further away the element appears, and the slower it moves relative to the viewport.  Lower values make the element appear closer and move faster.  You don't directly manipulate a camera object but instead indirectly influence perspective by controlling the movement speed and position of elements.\n\n\n### Animation and Transitions\n\nStellar.js itself doesn't provide built-in animation features beyond the parallax scrolling effect.  To incorporate additional animations or transitions, you'll need to use other JavaScript libraries or CSS animations alongside Stellar.js.  Stellar.js provides the framework for the parallax movement; you can then layer on top of this other animation or transition effects using libraries like GSAP, Animate.css, or CSS transitions, triggered by scrolling events or other user interactions.\n\n\n### Event Handling\n\nStellar.js doesn't directly expose a large range of custom events. However, you can leverage standard JavaScript event listeners to detect and respond to the parallax scrolling effect.  For instance, you could use the `scroll` event to trigger additional actions or animations based on the scroll position.  By monitoring the scroll position and correlating it with the parallax movement of elements, you can create complex interactions and animations synchronized with the parallax effect.  Remember that overusing events might impact performance, especially on complex pages.  Efficient event handling is crucial for a smooth user experience.\n\n\n## Working with Scenes\n\n### Creating and Configuring Scenes\n\nIn Stellar.js, a \"scene\" is implicitly defined by any element to which you apply the parallax effect.  This is typically done by adding the class `stellar` to a container `<div>` element.  This container element then becomes the root of your parallax scene.  While there isn't explicit scene creation, the configuration happens via the `$.stellar()` function (or its equivalent in the npm version)  and any options passed to it.  These options allow you to globally control aspects of the parallax effect within that scene, like horizontal parallax, vertical parallax, responsiveness, and more.  For example, disabling horizontal scrolling might be configured via an option passed to `$.stellar()`.  The entire subtree within the container with the `stellar` class will be affected.\n\n### Adding Layers to a Scene\n\nAdding layers is simply a matter of adding HTML elements *within* the container element that has the `stellar` class. Each child element becomes a layer within the scene.   The key to controlling the parallax effect on each layer is setting its `data-stellar-ratio` attribute. This attribute determines how fast the layer moves relative to the viewport during scrolling. A value of `1` means it moves at the same speed as the viewport, `2` means it moves twice as fast (in the opposite direction), `0.5` means it moves half as fast, and so on.  You can also use `data-stellar-horizontal-offset` and `data-stellar-vertical-offset` attributes to position elements within the scene.\n\n\n### Managing Layer Properties\n\nLayer properties are primarily controlled through custom data attributes on the HTML elements.  These attributes include:\n\n* `data-stellar-ratio`: Controls the parallax speed (movement relative to viewport).\n* `data-stellar-vertical-offset`: Adjusts the vertical position of the layer.\n* `data-stellar-horizontal-offset`: Adjusts the horizontal position of the layer.\n* `data-stellar-background-ratio`:  For background images, this controls parallax speed.\n* `data-stellar-background-attachment`: Controls the background image's attachment behavior (fixed, scroll).\n\nThese attributes provide a declarative way to manage layer properties directly in your HTML. You can also programmatically control these properties using JavaScript, although this is less common for simple setups.   Remember to use appropriate CSS for positioning and styling your layers effectively.\n\n### Scene Composition Techniques\n\nEffective scene composition involves strategically arranging layers and their parallax properties to create depth and visual interest.\n\n* **Layering:** Use multiple elements at different Z-indexes to create a layered look.\n* **Parallax Values:** Experiment with different `data-stellar-ratio` values to create a sense of depth; elements with higher ratios will appear further away.\n* **Offset Values:** Use `data-stellar-vertical-offset` and `data-stellar-horizontal-offset` to fine-tune layer positions within the scene.\n* **Background Images:** Use background images with appropriate `data-stellar-background-ratio` for subtle parallax effects within background elements.\n\n\n### Scene Loading and Unloading\n\nStellar.js doesn't explicitly define \"loading\" and \"unloading\" scenes in the sense of dynamically creating and destroying them. However, you can control when the parallax effect is active.   The parallax effect begins when the `$.stellar()` function is called (or its equivalent in the npm version) on your designated container element.  You can stop the parallax effect by calling `$.stellar('destroy')` on that same element. This effectively removes the parallax effects from the scene. You might use this functionality in situations where you want to temporarily disable parallax scrolling, for example, when an overlay is active, or when you transition to a different page section with different parallax behavior.  Remember that any parallax effects will restart when you call `$.stellar()` again on that element.\n\n\n## Layer Manipulation\n\n### Creating and Positioning Layers\n\nLayers in Stellar.js are simply HTML elements within the container element that has the `stellar` class applied.  Creating layers involves adding standard HTML elements (e.g., `<div>`, `<img>`, `<span>`) inside this container.  Positioning is handled through standard CSS techniques (e.g., `position: absolute;`, `top`, `left`, `right`, `bottom`, `transform`). Stellar.js itself doesn't provide specific functions for creating or positioning layers; it uses standard HTML and CSS.  The parallax effect then manipulates the position of these elements based on their `data-stellar-ratio`, `data-stellar-vertical-offset`, and `data-stellar-horizontal-offset` attributes.\n\n\n### Layer Transformation (Scaling, Rotation, Translation)\n\nStellar.js primarily handles translation (movement) of layers through its parallax effect. However, you can apply scaling, rotation, and other transformations using standard CSS transforms.   For example, you can add CSS like `transform: scale(1.2) rotate(10deg);` directly to a layer's style to scale it by 120% and rotate it 10 degrees.  These CSS transformations will be applied *in addition* to the parallax translation handled by Stellar.js. You can also use JavaScript to dynamically modify these CSS transforms to create more complex animations and interactions synchronized with the scrolling.\n\n\n### Layer Visibility and Z-index\n\nLayer visibility is controlled using standard CSS properties like `visibility` or `display`.  You can show or hide layers using JavaScript by changing these properties.  The `z-index` CSS property is crucial for controlling the stacking order of layers. Layers with higher `z-index` values will appear on top of layers with lower values.   Properly managing `z-index` is essential for creating layered effects where certain elements appear in front of or behind others.  Stellar.js itself doesn't directly manage visibility or z-index; it relies on standard CSS mechanisms.\n\n\n### Layer Grouping and Parenting\n\nStellar.js doesn't offer built-in layer grouping or parenting features. To group layers logically, use standard HTML techniques like nesting elements within `<div>` containers.  This allows you to apply styles and transformations to groups of layers together. For example, you could group several related image layers within a parent `<div>` and apply a class to that parent to control the parallax behaviour for the whole group,  using standard CSS selectors to affect all child layers.  Remember that Stellar.js's parallax effect affects each element individually based on its attributes; grouping only affects the CSS styles and positioning of those elements.\n\n\n### Advanced Layer Effects\n\nStellar.js primarily provides a basic parallax scrolling effect. To achieve more advanced layer effects, such as complex animations, transitions, or other visual enhancements, you should leverage other JavaScript libraries or CSS techniques in conjunction with Stellar.js.  For instance, you can use libraries like GSAP (GreenSock Animation Platform) for complex animation sequences synchronized with the parallax scrolling.  Remember that using many external libraries can increase the overall size and complexity of your project.  Carefully consider the performance implications of adding significant layers of complexity beyond the core parallax functionality of Stellar.js.\n\n\n## Camera Controls\n\n### Camera Movement and Positioning\n\nStellar.js doesn't provide explicit camera objects or direct camera control in the traditional 3D sense. The \"camera\" is implicitly represented by the viewport.  The parallax effect simulates camera movement by changing the position of elements relative to the viewport as the user scrolls.  You don't directly move a camera; you control the apparent movement by adjusting the parallax values (`data-stellar-ratio`, `data-stellar-horizontal-offset`, `data-stellar-vertical-offset`) of the individual layers.  The faster a layer moves relative to the viewport, the greater the illusion of camera movement.\n\n### Camera Zoom and Field of View\n\nStellar.js doesn't offer direct zoom or field-of-view (FOV) control.  To simulate zooming, you would typically use CSS transforms (e.g., `transform: scale()`) applied to layers or containers.  Changing the scale of elements will create a visual effect similar to zooming.  Similarly, to simulate changes in FOV, you'd need to adjust the size and position of elements and their parallax behavior to create the impression of a wider or narrower field of view.  This would require careful manipulation of layer properties and CSS styles, and is not a direct feature of Stellar.js.\n\n### Custom Camera Controls\n\nSince Stellar.js doesn't have built-in camera controls, creating custom controls requires using JavaScript to manipulate layer properties dynamically.  You would need to listen for user input events (e.g., mouse clicks, keyboard presses, touch gestures) and then programmatically update the `data-stellar-ratio`, `data-stellar-horizontal-offset`, and `data-stellar-vertical-offset` attributes of relevant layers.  This level of customization allows for advanced interactions and non-standard parallax behaviors beyond simple scrolling-based parallax.\n\n### Camera Animations and Transitions\n\nCreating camera animations requires combining Stellar.js with other JavaScript animation libraries (like GSAP) or CSS animations.  You'd use JavaScript to change layer properties over time, creating smooth transitions and dynamic parallax effects.  This might involve smoothly changing parallax ratios, offsets, or even CSS transforms (scale, rotation) to simulate camera movement and create cinematic effects.  Stellar.js itself handles only the basic parallax based on scrolling; more advanced animations require external libraries.\n\n### Camera Event Handling\n\nStellar.js doesn't expose specific \"camera\" events. However, you can use standard JavaScript event listeners (e.g., `scroll`, `resize`, `mousemove`) to track user interactions and trigger updates to your parallax scene.  For example, you might listen to `scroll` events to update layer positions based on the scroll position and simulate smooth camera panning.  Or you could use `mousemove` to link mouse movements to subtle camera adjustments.  The events are standard JavaScript events; Stellar.js doesn't provide specialized camera-centric events.  Remember that efficient event handling is crucial for performance, especially when handling complex custom camera controls.\n\n\n## Animation and Interactions\n\n### Basic Animations\n\nStellar.js itself provides only the basic parallax scrolling animation.  To create more complex animations, you must use additional JavaScript libraries or CSS animations.  A simple example of a basic animation might involve changing the opacity of a layer as the user scrolls using JavaScript and CSS transitions.  This can be triggered by an event listener that checks the scroll position.  Stellar.js only provides the parallax movement; all other animation effects must be implemented separately.\n\n### Keyframe Animations\n\nKeyframe animations, typically using CSS animations or libraries like Animate.css, can be synchronized with Stellar.js's parallax scrolling. You define keyframes for different stages of an animation, and then trigger those animations based on scroll position or other events.  For example, you might create a keyframe animation that changes the scale and rotation of a layer as the user scrolls past a specific section of the page.  The key is to use JavaScript event listeners to detect the relevant scroll position and trigger the CSS animation.\n\n### Tweening and Interpolation\n\nTo create smooth transitions between animation states, you would typically use tweening libraries such as GSAP (GreenSock Animation Platform). GSAP provides powerful tools for creating sophisticated animations with easing functions, allowing you to precisely control the speed and timing of animation changes.   You can use GSAP (or similar libraries) to animate changes to layer properties (position, opacity, scale, rotation, etc.)  These animations can be synchronized with the Stellar.js parallax effect, creating seamless and visually appealing interactions.\n\n\n### Event-Driven Animations\n\nAnimations can be triggered by various events, including scroll events, mouse events (hover, click), and window resize events.  You would use JavaScript event listeners to detect these events and start or stop animations accordingly. For instance, a hover event on a layer could trigger a scale animation, while scrolling past a certain point could trigger a fade-in animation.  Remember to balance responsiveness with performance; excessive event listeners could negatively impact page performance.\n\n\n### Custom Animation Functions\n\nFor highly specialized animation requirements, you may need to write custom animation functions.  These functions would likely use requestAnimationFrame for smooth animation and would directly manipulate CSS properties of elements using JavaScript.  This approach gives you maximum control, but requires a more in-depth understanding of animation principles and JavaScript's capabilities.  You can integrate these custom animation functions with Stellar.js by triggering them based on scroll events or other user interactions, synchronizing them with the parallax scrolling.  Well-structured custom functions will improve maintainability and readability of your animation code.\n\n\n## Advanced Techniques\n\n### Performance Optimization\n\nStellar.js is generally lightweight, but performance can become an issue with many layers or complex animations.  Optimization strategies include:\n\n* **Minimize Layers:**  Use fewer layers whenever possible.  Combine elements that can move together into single layers.\n* **Reduce Unnecessary Animations:** Avoid overly complex animations or animations on many layers simultaneously.\n* **Use Hardware Acceleration:** Ensure your CSS transforms utilize hardware acceleration (using `translate3d`, `scale3d`, `rotate3d`).\n* **Efficient Event Handling:**  Avoid excessive event listeners and optimize event handling to minimize performance overhead.\n* **Lazy Loading:** For large images or assets, consider lazy loading techniques to improve initial page load times.\n* **Reduce DOM Manipulation:** Minimize frequent changes to the DOM, as this can be computationally expensive.\n\n\n### 3D Transformations and Rendering\n\nWhile Stellar.js primarily works in 2D, you can create the illusion of 3D using CSS 3D transforms and perspective. This involves setting the `perspective` property on a parent container and using `transform-style: preserve-3d` on child elements.  However, Stellar.js itself doesn't directly handle 3D rendering.  You will need to combine it with other techniques and potentially libraries to manage the complexities of 3D transformations and perspective.  Complex 3D scenes will likely require more advanced techniques and potentially a more powerful library dedicated to 3D rendering.\n\n\n### Integration with Other Libraries\n\nStellar.js can be integrated with other JavaScript libraries to enhance functionality.  Common integrations include:\n\n* **Animation Libraries:** GSAP, Animate.css, or other animation libraries for smoother and more complex animations synchronized with the parallax effect.\n* **UI Libraries:** React, Vue, Angular, etc., to build interactive components that integrate seamlessly with the parallax scrolling.\n* **Image Loading Libraries:** Lazy loading libraries like LazySizes to improve performance when using many images.\n* **Scroll Libraries:** Smooth scrolling libraries to enhance the overall user experience.  However, be mindful of potential conflicts or redundant functionality.\n\n\n### Custom Shader Implementation\n\nStellar.js doesn't directly support custom shader implementation.  Custom shaders require WebGL and are generally used for advanced graphics rendering beyond the scope of Stellar.js's capabilities.  If you need advanced shader-based effects, you'd likely need a completely different approach using WebGL or a dedicated 3D graphics library.  Stellar.js focuses on efficient 2D parallax scrolling and doesn't provide an interface for custom shader manipulation.\n\n\n### Debugging and Troubleshooting\n\nDebugging Stellar.js issues typically involves:\n\n* **Browser Developer Tools:** Use your browser's developer tools to inspect CSS styles, JavaScript errors, and network activity.\n* **Console Logging:**  Add `console.log` statements to track variable values and function execution.\n* **Check for Conflicts:** Ensure no other JavaScript libraries conflict with Stellar.js.\n* **Verify HTML Structure:** Double-check your HTML structure and the `data-*` attributes applied to layers.  Incorrect attributes are a frequent source of problems.\n* **Test in Different Browsers:**  Test your implementation across multiple browsers to identify browser-specific issues.  Incompatibilities are rare but possible.\n* **Simplify:**  To isolate problems, temporarily remove or simplify elements in your parallax scene to see if the issue persists.\n\n\n\n\n\n## API Reference\n\n**Note:**  The Stellar.js API is relatively simple and primarily relies on data attributes in the HTML and standard JavaScript event handling.  The following describes the conceptual structure of the objects and functions, but the exact implementation details may vary slightly depending on the version and whether you are using the CDN version or the npm package. The CDN version relies heavily on jQuery, whereas the npm version may have a different API structure. Consult the most up-to-date documentation for precise details.\n\n\n### Scene Object\n\nStellar.js doesn't expose a dedicated \"Scene\" object in the traditional sense.  A scene is implicitly defined by the element to which you apply the `stellar` class and call the initialization function (`$.stellar()` in the CDN version).  The configuration options passed to the initialization function effectively configure the scene's behavior.  There are no methods to directly manipulate a \"Scene\" object as a distinct entity.  The scene's behavior is controlled indirectly by manipulating individual layers and their attributes.\n\n\n### Layer Object\n\nStellar.js does not expose a dedicated \"Layer\" object.  Each layer is represented by an HTML element within the scene container.  Layer properties are accessed and modified through the element's data attributes (e.g., `data-stellar-ratio`, `data-stellar-horizontal-offset`, `data-stellar-vertical-offset`) or by directly manipulating the element's CSS using JavaScript.  There are no specific layer object methods provided by the Stellar.js library.  The library works implicitly on the DOM elements themselves.\n\n\n### Camera Object\n\nThere is no \"Camera\" object in Stellar.js. The viewport acts as the camera. Camera effects are simulated by changing layer positions and parallax speeds.  Any \"camera\" control is achieved by manipulating layer properties (through data attributes or direct DOM manipulation), not by directly controlling a camera object.\n\n\n### Animation Object\n\nStellar.js itself doesn't provide a dedicated \"Animation\" object.  Animations are implemented using external JavaScript libraries (like GSAP) or CSS animations.  Stellar.js simply provides the parallax scrolling effect as a base upon which other animations are built using other libraries or direct DOM manipulation.  Any animation-related functionality is entirely handled by the external libraries used, not by Stellar.js itself.\n\n\n### Utility Functions\n\nThe primary utility function in the CDN version is `$.stellar()`. This function initializes the parallax effect on the selected element.  Depending on the version and implementation, additional functions may exist (for example, a destroy function to remove the parallax effect).  The npm package version may offer a slightly different API or a more object-oriented approach, but the core functionality remains focused on initialization and handling the parallax effect based on data attributes and DOM manipulation. Refer to the library's specific documentation for the exact functions available and their usage.\n\n\n\n\n## Examples and Tutorials\n\nThese examples assume you've included Stellar.js using a CDN or npm as described in the Installation and Setup Guide.  Remember that the specific implementation might vary slightly based on whether you are using the CDN version which heavily relies on jQuery or the npm package which may use a different API.  Always refer to the most current documentation for your specific version.\n\n\n### Basic Parallax Example\n\nThis example demonstrates a simple parallax effect with two layers: a background image and a foreground element.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Stellar.js Basic Example</title>\n<style>\nbody, html { height: 100%; margin: 0; }\n#background { background-image: url('background.jpg'); height: 100%; background-size: cover; }\n#foreground { position: absolute; bottom: 0; left: 0; width: 100%; }\n</style>\n</head>\n<body>\n<div id=\"background\" class=\"stellar\" data-stellar-background-ratio=\"0.5\">\n  <div id=\"foreground\" data-stellar-ratio=\"1.5\">Foreground Content</div>\n</div>\n\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/stellar.js/1.0.0/jquery.stellar.min.js\"></script>\n<script>\n$(document).ready(function() {\n  $('.stellar').stellar();\n});\n</script>\n</body>\n</html>\n```\n\nReplace `'background.jpg'` with the actual path to your background image. The `data-stellar-background-ratio` attribute controls the background image's parallax speed, while `data-stellar-ratio` controls the foreground element's speed.\n\n\n### Complex Scene Example\n\nThis example illustrates a more complex scene with multiple layers and varying parallax speeds.  You would add more `<div>` elements within the `#container` with different `data-stellar-ratio` and potentially offset values.  Remember to style these elements with CSS to create the desired visual effect.\n\n```html\n<div id=\"container\" class=\"stellar\">\n  <div id=\"layer1\" data-stellar-ratio=\"0.2\"></div>\n  <div id=\"layer2\" data-stellar-ratio=\"0.5\"></div>\n  <div id=\"layer3\" data-stellar-ratio=\"1.0\"></div>\n  <div id=\"layer4\" data-stellar-ratio=\"2.0\"></div>\n</div>\n```\n\nYou would then style each layer individually using CSS and possibly add more advanced effects using JavaScript libraries.\n\n\n### Custom Animation Example\n\nThis example uses GSAP to animate a layer's opacity as the user scrolls. You'll need to include the GSAP library.\n\n```javascript\n$(document).ready(function() {\n  $('.stellar').stellar();\n  let tl = gsap.timeline();\n  tl.to(\"#myLayer\", { opacity: 0, scrollTrigger: { trigger: \"#myLayer\", start: \"top 80%\", end: \"bottom 20%\" } });\n});\n```\n\nThis assumes you have a `<div id=\"myLayer\">` element within your Stellar.js scene.  The GSAP scrollTrigger will manage the animation based on the scroll position.\n\n\n\n### Interactive Scene Example\n\nThis example uses JavaScript to change a layer's position based on mouse movement.\n\n```javascript\n$(document).ready(function() {\n  $('.stellar').stellar();\n  $(document).mousemove(function(e) {\n    let x = e.pageX / $(window).width() * 100;\n    let y = e.pageY / $(window).height() * 100;\n    $('#myLayer').css('left', x + '%');\n    $('#myLayer').css('top', y + '%');\n  });\n});\n```\n\nThis example requires a `<div id=\"myLayer\">` element within your scene and will reposition that layer dynamically as the mouse moves.  You'll need to handle the position within the bounds of the scene.  This is just a basic example; you can greatly expand it for more sophisticated interactive effects.  Remember that excessive event handling could impact performance.\n\n\nRemember to replace placeholder elements and paths with your actual content and adjust the values as needed to achieve your desired effect.  These are starting points; you can significantly expand upon them to create complex and visually stunning parallax scenes.\n\n\n## Troubleshooting and Support\n\n### Common Issues and Solutions\n\n* **Parallax not working:**  Double-check that you've correctly included the Stellar.js library (CDN or npm), that the `stellar` class is applied to the correct container element, and that the `data-stellar-ratio` attributes are correctly set on your layers.  Ensure jQuery is included correctly if using the CDN version.  Inspect your browser's developer console for JavaScript errors.\n\n* **Layers not moving correctly:** Verify that the `data-stellar-ratio`, `data-stellar-horizontal-offset`, and `data-stellar-vertical-offset` attributes are set appropriately for each layer. Incorrect values or missing attributes can lead to unexpected behavior.  Check your CSS to ensure that elements are positioned correctly.\n\n* **Performance issues:**  If your parallax scene is slow, consider reducing the number of layers, simplifying animations, using hardware acceleration (using `translate3d`), and optimizing images.  Avoid overly complex animations or interactions.\n\n* **Conflicts with other libraries:** If you're using other JavaScript libraries, ensure they don't conflict with Stellar.js.  Try disabling other libraries temporarily to see if they cause the problem.  Check for jQuery conflicts if applicable.\n\n* **Browser compatibility:** Although Stellar.js is generally well-supported across modern browsers, ensure you test across multiple browsers to identify and address any compatibility issues.  Older browsers may require additional handling or may not support the parallax effects adequately.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:** Inspect CSS styles, check for JavaScript errors, and monitor network activity using your browser's built-in developer tools.  These tools are invaluable for pinpointing the source of problems.\n\n* **Add `console.log` statements:** Insert `console.log` statements in your JavaScript code to track variable values, function calls, and the flow of execution. This is a fundamental debugging technique.\n\n* **Simplify your scene:** If you're having trouble with a complex scene, temporarily remove or simplify elements to isolate the source of the issue.  This is a classic approach to isolating problems within large applications.\n\n* **Check your HTML structure:** Ensure your HTML is correctly structured and that your parallax layers are nested within the appropriate container element.  An incorrect HTML structure can prevent Stellar.js from functioning correctly.\n\n* **Test with a minimal example:**  Create a minimal example with only a few layers and minimal styling to rule out any issues caused by complex code or interactions.  This isolates whether the core Stellar.js functionality is the source of the issue.\n\n\n### Community Support and Forums\n\nWhile Stellar.js might not have a dedicated, large community forum, you can find support through general JavaScript or web development forums and communities (like Stack Overflow).  Search for solutions to your specific problem; someone else may have encountered and solved a similar issue.  Be sure to provide relevant details, including your Stellar.js version, browser, and any relevant code snippets when seeking help.\n\n\n### Contributing to Stellar.js\n\nIf you find a bug or want to add a feature, refer to the project's repository (GitHub or other platform where the project is hosted) for contribution guidelines.  Many open-source projects welcome contributions, especially bug fixes and improvements to documentation.  Before contributing, check the project's issue tracker to see if a similar issue has already been reported or addressed.  Ensure your contributions adhere to the project's coding style and standards.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"stellarjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Stellar.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}