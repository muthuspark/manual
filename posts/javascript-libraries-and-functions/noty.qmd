---
title: "Noty - Documentation"
categories: [ "JavaScript Libraries and Functions" ]
---
## Introduction

### What is Noty?

Noty is a lightweight and customizable notification plugin for JavaScript.  It allows you to easily display beautiful and informative notifications to your users within your web applications.  These notifications can be used to provide feedback on user actions, display important messages, or alert users to events. Noty is designed to be unobtrusive and integrate seamlessly into your existing projects.

### Key Features

* **Lightweight and fast:** Noty is built to minimize its impact on your application's performance.
* **Highly customizable:** You can easily tailor the appearance and behavior of notifications using a variety of options.  Customize colors, layouts, animations, and more.
* **Multiple notification types:**  Create different types of notifications (success, error, warning, information) to visually represent the message's importance.
* **Easy integration:**  Noty is simple to integrate into any JavaScript project, regardless of your framework or library.
* **Dismissable notifications:**  Allow users to dismiss notifications manually, improving the user experience.
* **Multiple themes:**  Pre-defined themes allow quick styling. You can also create and use your own custom themes.
* **Queue management:**  Handles multiple notifications gracefully, preventing overlap and ensuring visibility.
* **Accessibility support:**  Designed with accessibility best practices in mind for better inclusivity.

### Getting Started

Noty is designed for ease of use.  The basic process involves including the Noty library in your project, then creating and displaying notifications using its simple API.  This manual will guide you through the process and show you how to leverage its powerful features.


### Installation

Noty can be installed in a few different ways:


**1. Using a CDN:**

The easiest way to get started is to include the Noty JavaScript file from a CDN in your HTML file.  This allows you to use Noty without installing any packages.  You can find a CDN link on the Noty project website.  Add the `<script>` tag to your HTML's `<head>` or before the closing `</body>` tag:

```html
<script src="https://cdn.jsdelivr.net/npm/noty@3.1.4/lib/noty.min.js"></script>
```

**2. Using npm (Node Package Manager):**

If you are using npm for managing your project's dependencies, you can install Noty via the command line:

```bash
npm install noty
```

Then, import Noty into your JavaScript file:

```javascript
import Noty from 'noty';
```

**3. Using yarn (Yarn Package Manager):**

Similar to npm, if you are using yarn, you can install Noty with:

```bash
yarn add noty
```

Then, import Noty into your JavaScript file:

```javascript
import Noty from 'noty';
```

After installation, you can proceed to use the Noty API as detailed in the following sections of this manual. Remember to check the Noty project website for the latest version number and potential updates to installation instructions.


## Basic Usage

### Creating a Simple Notification

The simplest way to create a notification with Noty is to create a new `Noty` instance and call its `show()` method.  The `show()` method accepts a single argument â€“ an object containing the notification's options.  At a minimum, you'll need to provide the `text` option, which specifies the message to display.


```javascript
import Noty from 'noty';

new Noty({
  text: 'This is a simple notification!',
}).show();
```

This will display a basic notification containing the specified text.  The notification will automatically disappear after a short delay (by default).


### Types of Notifications

Noty allows you to create different types of notifications to visually represent the message's context.  This is done through the `type` option.  Available types include:

* `'success'`: Typically displays in green, indicating a positive outcome.
* `'error'`:  Usually red, indicating an error or failure.
* `'warning'`: Often yellow or orange, highlighting a potential problem or caution.
* `'information'`:  Often blue, conveying informational messages.

Example:

```javascript
new Noty({
  text: 'This is a success notification!',
  type: 'success'
}).show();

new Noty({
  text: 'This is an error notification!',
  type: 'error'
}).show();
```


### Customizing Appearance

Noty offers extensive customization options to tailor the appearance of notifications to match your application's styling.  You can customize aspects such as:

* **`theme`:**  Choose a pre-defined theme or create your own custom theme (see advanced usage for details).
* **`layout`:**  Control the positioning of the notification on the screen (top, topCenter, topRight, etc.).
* **`timeout`:**  Specify how long the notification remains visible (in milliseconds).  Set to `false` for persistent notifications.
* **`progressBar`:**  Show a progress bar indicating the remaining time before the notification closes.
* **`closeWith`:** Specify how the notification can be closed (e.g., 'click', 'button').
* **`buttons`:** Add custom buttons to the notification.


Example:

```javascript
new Noty({
  text: 'This is a customized notification!',
  type: 'warning',
  timeout: 5000, // 5 seconds
  progressBar: true,
  layout: 'topRight',
  theme: 'mint' // Requires the 'mint' theme to be included, see theme documentation.
}).show();
```


### Layout Options

Noty supports several layout options to control the position of notifications on the screen.  These options are specified using the `layout` property:

* `'top'`:  Top of the viewport.
* `'topCenter'`: Centered horizontally at the top of the viewport.
* `'topRight'`: Top right corner of the viewport.
* `'bottom'`: Bottom of the viewport.
* `'bottomCenter'`: Centered horizontally at the bottom of the viewport.
* `'bottomRight'`: Bottom right corner of the viewport.


Choose the layout that best suits your application's design and user interface.


### Closing Notifications

Notifications can be closed automatically after a specified timeout (using the `timeout` option), or manually by the user.  By default, clicking on the notification closes it.  You can customize this behavior using the `closeWith` option:

* `'click'`:  Clicking anywhere on the notification closes it.
* `'button'`: A close button will be shown, closing only when clicked.
* `'both'`:  Allows closing with both a click and a close button.


Example of controlling how to close:

```javascript
new Noty({
  text: 'This notification closes only with the button.',
  closeWith: 'button'
}).show();
```

To programmatically close a notification after it's been shown you can use the `close()` method on the Noty instance:

```javascript
const notification = new Noty({
    text: "This notification will close after 3 seconds",
    timeout: 3000
}).show();

setTimeout(() => {
    notification.close();
}, 2000);
```

This will close the notification after 2 seconds, even though the `timeout` option was set for 3 seconds. Remember that the `close()` method must be called on the specific Noty instance returned by `.show()`.


## Configuration Options

Noty offers a wide array of configuration options to fine-tune the appearance and behavior of your notifications.  These options are passed as an object to the `Noty()` constructor.  Below is a detailed description of each option:

### `text`

**(Type: String, Required):** The main text content of the notification. This is the only required option.

### `type`

**(Type: String, Default: 'information'):** Specifies the type of notification, influencing its visual appearance (color, icon).  Common types include:  `'success'`, `'error'`, `'warning'`, `'information'`, `'alert'`, `'notification'`.  Custom types can also be defined with corresponding CSS styling.

### `layout`

**(Type: String, Default: 'topRight'):**  Determines the position of the notification on the screen.  Options include: `'top'`, `'topCenter'`, `'topRight'`, `'bottom'`, `'bottomCenter'`, `'bottomRight'`.

### `theme`

**(Type: String, Default: 'relax'):** Selects a pre-defined theme for styling.  Noty includes several built-in themes; you can also create and use custom themes.  Check the Noty documentation or source code for available themes.

### `timeout`

**(Type: Number or Boolean, Default: 3000 [3 seconds]):** Specifies the display duration of the notification in milliseconds.  Set to `false` to create a persistent notification that requires manual closing.

### `progressBar`

**(Type: Boolean, Default: false):** Displays a progress bar at the bottom of the notification indicating the remaining time before automatic closure.  Only active when `timeout` is a number greater than 0.

### `closeWith`

**(Type: String or Array, Default: ['click', 'button']):** Specifies how the notification can be closed. Options include: `'click'`, `'button'`, and `'both'`.  Using an array allows specifying multiple closing methods.

### `killer`

**(Type: Boolean, Default: true):** When set to `true`,  displays only one notification of a specific type at a time.  Subsequent notifications of the same type will replace the existing one.


### `modal`

**(Type: Boolean, Default: false):** If set to `true`, the notification will overlay the page content, preventing interaction until closed.

### `speed`

**(Type: Number, Default: 500 [milliseconds]):**  Controls the animation speed of the notification's appearance and disappearance.

### `sounds`

**(Type: Boolean, Default: false):**  Plays a sound notification (requires including a sound file and configuring the appropriate paths, consult the documentation for further details on how to enable sound notifications)

### `callback`

**(Type: Function):** A callback function that is executed after the notification is shown. Useful for performing actions after the notification is displayed.

### `position`

**(Type: Object):** Allows fine-grained control over the notification's position using `x` and `y` coordinates (deprecated in favor of `layout`).

### `container`

**(Type: String or HTMLElement):** Specifies a custom container element where the notification will be appended. Useful for integrating notifications into specific sections of your layout. If a string is passed, Noty will try to select the element using `document.querySelector()`.  If a null value is passed, Noty will append the notification to the `<body>`.

### `animation`

**(Type: Object):** Allows customization of the animation used for showing and hiding the notification.  Requires detailed understanding of CSS animations and transitions.  Consult the Noty documentation for specifics on how to utilize this option.

### `queue`

**(Type: Boolean, Default: true):** Enables queuing of multiple notifications.  If `true`, subsequent notifications will be displayed one after another. If `false`, new notifications will override existing ones.


### `maxVisible`

**(Type: Number, Default: 5):**  Limits the number of simultaneously visible notifications.  When this limit is reached, older notifications will be removed to make space for newer ones.


## Advanced Usage

### Customizing Styles

While Noty provides several themes, you might need to customize the appearance further to match your application's design. This can be done by overriding the default CSS styles or creating entirely new themes.

**Overriding Styles:** You can add custom CSS rules to your stylesheet that target the specific Noty classes.  Inspect the rendered Noty notification using your browser's developer tools to identify the relevant classes and create more specific CSS rules to override defaults. Be mindful of CSS specificity rules to ensure your custom styles are applied correctly.

**Creating Custom Themes:** For more extensive customization, create a new CSS file containing your custom styles and reference it in your HTML.  You can then select your custom theme using the `theme` option in the Noty configuration.  Remember to structure your CSS file to properly target the elements within the Noty notification structure.


### Using Templates

Noty allows you to create custom templates to fully control the HTML structure of your notifications.  This is ideal for complex layouts or integrations with other UI frameworks.  You would define your template using HTML, and then reference it within the Noty configuration.  Consult the Noty documentation for specific instructions on implementing custom templates â€“ this generally involves using the `template` option within the Noty configuration.

### Handling Multiple Notifications

Noty is designed to handle multiple notifications gracefully.  However, understanding the implications of queuing and the `maxVisible` setting is crucial for a smooth user experience.  Using the `queue` option (default: `true`), notifications are displayed sequentially, ensuring that they don't overlap and are all visible to the user.   `maxVisible` controls the maximum number of simultaneously visible notifications; exceeding this limit will automatically remove older notifications to maintain the specified limit.  Consider the user experience and context when choosing appropriate values for these options; a large number of notifications might overwhelm the user.

### Queue Management

By default, Noty uses a queue to manage multiple notifications. This ensures notifications are displayed one after another, preventing visual clutter.  You can control the queue behavior using the `queue` option.  Setting `queue` to `false` will cause new notifications to replace older ones immediately, which may be suitable in certain scenarios, such as displaying only the most recent error message.  Consider the implications of your chosen queue management strategy on the user experience.

### Integration with other libraries

Noty can be integrated with various JavaScript libraries and frameworks.  Because itâ€™s a simple and lightweight notification library, it should integrate well with most frameworks without significant conflicts.  The key aspect is understanding how to properly include Noty within your frameworkâ€™s setup and leverage its API to trigger notifications from your applicationâ€™s code.  This might involve using a framework-specific module loader (such as `import` for ES modules) or including the Noty library via a CDN in the appropriate location within your application's HTML structure.

### Accessibility Considerations

Accessibility is important for inclusivity.  Ensure your notifications are usable by everyone, including users with disabilities.   This includes:

* **Semantic HTML:** Use appropriate HTML elements for structure and meaning.
* **ARIA attributes:**  Use ARIA attributes to provide additional information to assistive technologies (e.g., screen readers).
* **Keyboard navigation:**  Ensure users can interact with notifications using only the keyboard.
* **Sufficient color contrast:**  Choose colors that provide adequate contrast for readability.
* **Alternative text for images:** If you use icons, provide alternative text descriptions for screen readers.
* **Announcing notifications:**  Consider using the browser's notification API or similar techniques to announce notifications to users with screen readers for maximum visibility.


By considering these accessibility best practices, you can create informative and inclusive notifications in your application.  Remember to test your implementation with various assistive technologies to ensure its accessibility.


## API Reference

This section details the core API methods provided by Noty.

### `noty()`

This is the main constructor function for creating Noty instances.  It takes a single argument: an options object.  All configuration options described previously (e.g., `text`, `type`, `timeout`, etc.) are passed as key-value pairs within this object.  The `noty()` function returns a Noty instance.  You then call the `.show()` method on that instance to actually display the notification.

```javascript
const notification = new Noty({
  text: 'This is a notification!',
  type: 'success'
});

notification.show(); //Displays the notification
```

### `close()`

This method is called on a Noty instance to manually close the notification.  It takes no arguments.

```javascript
const notification = new Noty({ text: 'Close me!', timeout: 5000 }).show();
setTimeout(() => {
    notification.close(); //Closes the notification after 2 seconds
}, 2000);
```

### `cancel()`

This method cancels a notification that is queued but hasn't been displayed yet.  This method is called on the Noty instance, and it takes the notification's ID as an argument.  You obtain notification IDs through the `getQueue()` method (see below).

```javascript
const notification1 = new Noty({ text: 'Notification 1', timeout: 5000 }).show();
const notification2 = new Noty({ text: 'Notification 2', timeout: 5000 });
const queue = notification1.getQueue(); //get the queue
notification1.cancel(queue[0].id); //cancels the first notification in the queue.  This method will have no effect if the notification has already been displayed.
notification2.show()

```


### `getQueue()`

This method, called on a Noty instance, returns an array of objects representing the current notification queue.  Each object in the array contains information about a queued notification, including its ID and configuration options.  This is useful for managing and manipulating the queue, such as identifying and cancelling specific notifications.

```javascript
const notification = new Noty({ text: 'Get the Queue!' }).show();
const queue = notification.getQueue();
console.log(queue); // Outputs the queue array
```

### `queue()`

This method adds a new notification to the queue. It takes a configuration object as an argument, similar to the `noty()` constructor. This method is called on the Noty instance.

```javascript
const notification = new Noty({ text: 'Notification' }).show();
notification.queue({ text: 'Queued Notification', type: 'success' });
```


### `setMaxVisible()`

This method, called on a Noty instance, sets the maximum number of simultaneously visible notifications.  It takes a single numerical argument specifying the new maximum.  Any notifications exceeding this limit will be removed from the queue and will not be shown.

```javascript
const notification = new Noty({ text: 'Set Max Visible' }).show();
notification.setMaxVisible(2); //Sets the maximum to 2 visible notifications
```


## Troubleshooting

This section provides guidance on resolving common issues and debugging Noty implementations.

### Common Issues

* **Notifications not appearing:**  This is often due to incorrect inclusion of the Noty library in your project, typos in your code, or CSS conflicts. Double-check that the Noty JavaScript file is correctly linked and that there are no errors in your browser's console.  Ensure that your CSS isn't unintentionally hiding the notifications (check for `display: none;` or similar styles applied to the Noty notification elements).


* **Styling issues:** If notifications don't appear as expected, inspect the rendered HTML and CSS using your browser's developer tools.  Look for conflicts between Noty's styles and your own CSS.  Use your browser's developer tools to examine the applied CSS and determine if there are any overriding styles. If using a custom theme, verify that your theme CSS is correctly linked and that your selectors accurately target the Noty elements.


* **Queue not working correctly:**  Make sure the `queue` option is set to `true` if you want notifications to be queued sequentially. If notifications are overlapping, review your queue management strategy and consider adjusting the `maxVisible` setting.


* **Notifications not closing:**  Ensure the `timeout` option is correctly set (to a number greater than 0 for auto-closing) and that there are no JavaScript errors preventing the notification from closing.  If using the `closeWith` option, ensure it is configured correctly to allow closing via the method(s) you intended.  Check your browser's developer console for JavaScript errors.


* **Multiple instances of Noty:** Including the Noty library multiple times in your HTML might cause unexpected behavior. Ensure it is only included once.


* **Conflicting Libraries:** In rare cases, conflicts with other JavaScript libraries might occur.  Try disabling other libraries temporarily to see if it resolves the issue.  Check your browser's developer console for any JavaScript errors related to library conflicts.


### Debugging Tips

* **Browser Developer Tools:** Utilize your browser's developer tools (usually accessed by pressing F12) to inspect the HTML, CSS, and JavaScript of your Noty notifications.  Check the console for any errors or warnings.  The Network tab can help you confirm the Noty library is being loaded correctly.


* **Console Logging:** Strategically use `console.log()` statements to track the values of variables, check if functions are being called, and inspect the notification configuration objects.


* **Simplify:**  Create a minimal, reproducible example to isolate the problem.  Start with a very basic Noty configuration and gradually add complexity until you identify the source of the issue.


* **Check the Noty Documentation:**  The official Noty documentation contains many examples, explanations, and troubleshooting tips.


### Error Handling

Noty itself doesn't throw many errors, but issues in your code or conflicts with other libraries might trigger errors.  Always check your browser's developer console for errors.  If an error occurs within a Noty callback function, make sure that your callback function is correctly handling potential exceptions or errors, and that it is robust enough to prevent the error from causing your application to crash.

Consider using a global error handler to catch any uncaught exceptions, which will help in identifying and debugging issues within your Noty setup or your application code interacting with Noty.  This will provide more context when addressing error conditions.


## Examples

This section provides practical examples demonstrating various Noty functionalities.  Remember to include the Noty library in your project before running these examples.  Refer to the installation section for details on how to include the library.

### Example 1: Basic Notification

This example demonstrates the simplest way to create and display a notification:

```javascript
import Noty from 'noty';

new Noty({
  text: 'This is a basic notification!'
}).show();
```

This will display a simple notification with the text "This is a basic notification!".


### Example 2: Custom Notification with Template

This example shows how to create a custom notification using a template:  (Note:  The exact implementation of templates might vary slightly depending on the Noty version; consult the Noty documentation for the most current details).

```javascript
import Noty from 'noty';

const template = `<div class="noty-custom-template">
                    <div class="noty-title">Custom Notification</div>
                    <div class="noty-message">{body}</div>
                  </div>`;


new Noty({
  text: 'This is a custom notification!',
  type: 'success',
  template: template, // Use the custom template
  layout: 'center'
}).show();
```

This will create a notification with a custom layout defined within the `template` variable.  You would need to define the corresponding CSS to style the `.noty-custom-template`, `.noty-title`, and `.noty-message` classes within your stylesheet.


### Example 3: Using Different Notification Types

This example showcases notifications of different types:

```javascript
import Noty from 'noty';

new Noty({ text: 'Success!', type: 'success' }).show();
new Noty({ text: 'Error!', type: 'error' }).show();
new Noty({ text: 'Warning!', type: 'warning' }).show();
new Noty({ text: 'Information!', type: 'information' }).show();
```

This will display four notifications, each with a different type and corresponding visual style.


### Example 4: Managing Notification Queue

This example demonstrates queue management:

```javascript
import Noty from 'noty';

new Noty({ text: 'Notification 1', timeout: 2000 }).show();
new Noty({ text: 'Notification 2', timeout: 2000 }).show();
new Noty({ text: 'Notification 3', timeout: 2000 }).show();
```

This will display the notifications sequentially, one after the other, demonstrating the default queue behavior.  Adjusting the `timeout` and using `setMaxVisible()` will modify the queue behavior.


### Example 5: Integrating with other Frameworks

The integration with other frameworks depends heavily on the specific framework.  This example provides a conceptual approach; the exact implementation will vary:

**(React Example - Conceptual):**

```javascript
import React, { useState } from 'react';
import Noty from 'noty'; // Assuming you've configured Noty for your React project

function MyComponent() {
  const [message, setMessage] = useState('');

  const showNotification = () => {
    new Noty({ text: message }).show();
  };

  return (
    <div>
      <input type="text" value={message} onChange={e => setMessage(e.target.value)} />
      <button onClick={showNotification}>Show Notification</button>
    </div>
  );
}
```

This shows a basic React component that uses Noty to display notifications based on user input.  The key here is the appropriate inclusion of Noty within your React build process (e.g., using a module bundler like Webpack or using a CDN).  Similar concepts apply to other frameworks like Angular, Vue, etc.,  but the specific implementation will vary according to the framework's module system and lifecycle methods.  Consult the framework's documentation on how to incorporate third-party libraries.


Remember to adapt these examples to your specific needs and project structure.  Consult the Noty documentation for advanced features and detailed API information.

