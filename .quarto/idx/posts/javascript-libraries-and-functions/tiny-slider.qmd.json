{"title":"Tiny Slider - A Developer's Handbook","markdown":{"yaml":{"title":"Tiny Slider - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nTiny Slider can be installed via npm, yarn, or by directly including the JavaScript and CSS files.\n\n**npm:**\n\n```bash\nnpm install tiny-slider-react\n```\n\n**yarn:**\n\n```bash\nyarn add tiny-slider-react\n```\n\n**Direct Download:**\n\nDownload the latest release from [link to release page] and include the `tiny-slider.js` and `tiny-slider.css` files in your project.\n\n\n### Basic Usage\n\nTiny Slider provides a simple and intuitive API.  You initialize the slider by selecting your container element and providing configuration options.  The core functionality is controlled through JavaScript, while styling is primarily managed via CSS.  Refer to the configuration options section for detailed information on customizing the slider's behavior.\n\n\n### Including Tiny Slider in your project\n\nAfter installation (using whichever method you prefer), you need to include the necessary files in your HTML.  If using the direct download method, include the CSS file in the `<head>` section and the JavaScript file before the closing `</body>` tag. For npm or yarn installations, you'll need to import them into your JavaScript file using your module bundler's (like Webpack or Parcel) import syntax.\n\n\n**Direct Download Example:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"tiny-slider.css\">\n</head>\n<body>\n  <div class=\"my-slider\"></div>\n  <script src=\"tiny-slider.js\"></script>\n  <script>\n    //Your JavaScript initialization code here\n  </script>\n</body>\n</html>\n```\n\n**npm/yarn Example (using a module bundler):**\n\n```javascript\nimport 'tiny-slider/dist/tiny-slider.css'; // import CSS first\nimport tns from 'tiny-slider';\n\n\n//Your JavaScript initialization code here\n```\n\n### First slider example\n\nThis example demonstrates a basic slider setup.  Replace `#my-slider` with the ID of your slider container. Remember to include the necessary CSS and JavaScript as described in the previous section.\n\n```html\n<div id=\"my-slider\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#my-slider',\n    items: 1, // Display 1 item at a time\n    slideBy: 'page', //Move one page at a time\n    autoplay: false //Disable autoplay\n  });\n</script>\n```\n\nThis code creates a slider with three slides, displaying one slide at a time. You can easily customize this further by adding more slides and modifying the options provided to `tns()`. Refer to the configuration section for available options.\n\n\n## Core Functionality\n\n### Slider Initialization\n\nTiny Slider is initialized using the `tns()` function. This function takes a single argument: an object containing configuration options.  The most basic initialization requires specifying the container element.  All other options are optional and provide granular control over the slider's behavior.\n\n**Basic Initialization:**\n\n```javascript\nconst slider = tns({\n  container: '#my-slider' // Required: CSS selector or DOM element for the slider container\n});\n```\n\n**Initialization with Options:**\n\n```javascript\nconst slider = tns({\n  container: '#my-slider',\n  items: 3,\n  autoWidth: true,\n  autoplay: true\n});\n```\n\nRemember to include the Tiny Slider CSS and JavaScript files in your project before initializing the slider.  The `tns()` function returns an object representing the slider instance, allowing you to access methods and events.  Failure to initialize correctly will result in no slider being created.  Always check your browser's console for errors.\n\n\n### Options Reference\n\nThe `tns()` function accepts a wide range of options to customize the slider's appearance and functionality.  Below are some of the most commonly used options. A complete list with detailed explanations can be found in the [full options reference](link_to_full_reference).\n\n* **`container` (required):**  CSS selector or DOM element of the slider container.\n* **`items`:** Number of items visible at once.\n* **`slideBy`:** Number of items to move on each swipe or click.  Can be a number or 'page'.\n* **`autoplay`:** Boolean to enable/disable autoplay.\n* **`autoplayTimeout`:** Milliseconds between autoplay transitions.\n* **`controls`:** Boolean to enable/disable next/prev buttons.\n* **`nav`:** Boolean to enable/disable navigation.\n* **`autoWidth`:** Boolean to automatically adjust item widths based on content.\n* **`responsive`:** Object to define responsive settings for different screen sizes.\n\n\n### Methods\n\nThe slider instance returned by `tns()` provides several methods to control the slider's behavior programmatically.\n\n* **`goTo(index)`:** Navigates to a specific slide at the given index (0-based).\n* **`next()`:** Moves to the next slide.\n* **`prev()`:** Moves to the previous slide.\n* **`destroy()`:** Completely removes the slider and its event listeners.\n* **`rebuild()`:**  Rebuilds the slider, useful after dynamically adding or removing slides.\n\n\n**Example usage:**\n\n```javascript\nconst slider = tns({ /* ... options ... */ });\n\n// Go to the third slide (index 2)\nslider.goTo(2);\n\n// Go to the next slide\nslider.next();\n\n// Destroy the slider\nslider.destroy();\n\n//Rebuild after DOM changes\nslider.rebuild();\n```\n\nRefer to the [complete methods reference](link_to_methods_reference) for a full list and detailed descriptions.\n\n\n### Events\n\nTiny Slider triggers several custom events that you can listen for to perform actions based on slider state changes.  These events are dispatched on the slider container element.\n\n* **`tns:loaded`:** Fired when the slider has finished initializing.\n* **`tns:transitionStart`:** Fired when a transition begins.\n* **`tns:transitionEnd`:** Fired when a transition completes.\n* **`tns:indexChanged`:** Fired when the current index changes.\n\n\n**Example usage (using jQuery):**\n\n```javascript\n$('#my-slider').on('tns:loaded', function(){\n  console.log('Slider loaded!');\n});\n```\n\n**Example usage (using vanilla JavaScript):**\n\n```javascript\ndocument.getElementById('my-slider').addEventListener('tns:loaded', function(){\n  console.log('Slider loaded!');\n});\n\n```\n\nRefer to the [complete events reference](link_to_events_reference) for a full list and detailed descriptions.  Remember to replace `#my-slider` with the actual ID of your slider container.  Event handling methods may vary slightly depending on your preferred JavaScript library or framework.\n\n\n## Customization\n\n### Styling the Slider\n\nTiny Slider provides a basic CSS stylesheet for its core components.  You can easily customize the slider's appearance by overriding these styles in your own CSS.  The CSS classes are designed to be intuitive and easy to target.  For example, you can target individual slides using the `.tns-item` class, or the navigation controls using `.tns-controls` and its child elements.\n\n**Overriding default styles:**\n\nAdd your custom CSS rules after including the Tiny Slider CSS file to ensure they take precedence.  For instance, to change the background color of slides:\n\n```css\n.tns-item {\n  background-color: #f0f0f0;\n}\n```\n\nRemember to inspect the generated HTML and CSS to identify the specific classes you need to target for your customizations.  Consult the Tiny Slider CSS file for a complete list of available classes.\n\n### Customizing Navigation\n\nTiny Slider offers options to customize the navigation controls (arrows and pagination).  You can enable or disable them via the `controls` and `nav` options during initialization. You can also create your own custom navigation elements and integrate them with Tiny Slider's API.\n\n**Custom Navigation Example:**\n\nYou can create custom navigation buttons and then link their click events to the `next()` and `prev()` methods of the slider instance.\n\n```html\n<button id=\"prev-button\">Previous</button>\n<button id=\"next-button\">Next</button>\n\n<script>\n  const slider = tns({ /* ...options... */ });\n  document.getElementById('prev-button').addEventListener('click', () => slider.prev());\n  document.getElementById('next-button').addEventListener('click', () => slider.next());\n</script>\n```\n\nThis allows for complete creative control over the navigation's design and placement.\n\n\n### Responsive Design\n\nTiny Slider supports responsive design through the `responsive` option. This option takes an object where keys are breakpoint widths (in pixels) and values are objects containing options to be applied at that breakpoint.\n\n**Responsive Configuration Example:**\n\n```javascript\nconst slider = tns({\n  container: '#my-slider',\n  items: 3,\n  responsive: {\n    640: { // Screen width 640px and below\n      items: 1\n    },\n    1024: { // Screen width 1024px and below\n      items: 2\n    }\n  }\n});\n```\n\nThis configuration displays 3 items on larger screens, 2 items on screens 1024px wide or less, and 1 item on screens 640px wide or less.  You can define as many breakpoints as needed to suit your design.\n\n\n### Accessibility\n\nBuilding accessible sliders is crucial for inclusivity. Tiny Slider doesn't automatically enforce all accessibility best practices, but it offers options and features to make it easier to build an accessible experience.\n\n* **Keyboard Navigation:**  Tiny Slider inherently supports keyboard navigation through arrow keys for moving between slides.\n\n* **ARIA Attributes:** It's recommended to add appropriate ARIA attributes to your slider elements to enhance screen reader compatibility.  For example, use `aria-label` to describe slides, `aria-current` to indicate the active slide, and `role=\"button\"` for navigation controls.\n\n* **Semantic HTML:** Use semantically appropriate HTML elements. Avoid using divs when more specific elements could be applied.\n\n* **Focus Management:** Ensure proper focus management, particularly when using custom navigation.  Use `focus()` method as needed for better keyboard navigation flow.\n\nExample of adding ARIA attributes:\n\n```html\n<div id=\"my-slider\" role=\"region\" aria-label=\"Product Showcase\">\n  <div class=\"tns-item\" aria-label=\"Product 1\"></div>\n  <div class=\"tns-item\" aria-label=\"Product 2\"></div>\n  </div>\n```\n\nImplementing these suggestions will significantly improve the accessibility of your Tiny Slider. Always test your slider with assistive technologies like screen readers to ensure its usability for all users.\n\n\n## Advanced Usage\n\n### Programmatic Control\n\nBeyond basic initialization, Tiny Slider offers extensive programmatic control over its behavior.  You can interact with the slider instance using its methods to dynamically manage slides, navigation, and transitions. This allows for highly customized user interactions and complex integrations.\n\n* **Dynamically adding/removing slides:** Modify the DOM content of the slider container and then call the `rebuild()` method to update the slider.  This allows you to seamlessly integrate with dynamic content loading and updates.\n\n* **Responding to events:** Use the events system to trigger custom actions based on slider state changes (e.g., `tns:transitionEnd`). This enables synchronized animations, content updates, or user feedback.\n\n* **Controlling autoplay:** You can start, stop, or pause the autoplay functionality using the instance methods (though autoplay is typically controlled through options at initialization).\n\n* **Custom Navigation Integration:** Develop highly customized navigation by creating your own controls and binding them to slider's `next()` and `prev()` methods.\n\n\n### Working with multiple sliders\n\nYou can initialize multiple Tiny Slider instances on a single page without conflicts. Each instance operates independently.  Make sure each slider has a unique container selector or DOM element.\n\n\n```javascript\nconst slider1 = tns({ container: '#slider1' });\nconst slider2 = tns({ container: '#slider2' });\n```\n\nThis example initializes two separate sliders, one with the ID `slider1` and another with the ID `slider2`.  They will function independently, with no interference between them.  Properly identifying each slider with unique selectors is crucial for avoiding unintended behavior.\n\n\n### Integrating with other libraries\n\nTiny Slider can be integrated with various JavaScript libraries and frameworks.  Its API is designed for flexibility.  However, remember to handle potential conflicts between libraries, especially those manipulating the DOM or event handling.  Ensure correct order of inclusion and potential compatibility issues.\n\nFor example, when integrating with a framework like React, Vue, or Angular, you'll need to incorporate Tiny Slider into your component lifecycle and appropriately handle updates to the slider after DOM manipulation.\n\n\n### Troubleshooting common issues\n\nCommon issues with Tiny Slider often involve incorrect initialization, CSS conflicts, or DOM manipulation.\n\n* **Slider not initializing:** Double-check your container selector, ensure Tiny Slider's CSS and JavaScript are correctly included, and inspect the browser's console for error messages.\n\n* **CSS conflicts:** Ensure your custom CSS overrides don't interfere with Tiny Slider's default styles. Use your browser's developer tools to inspect styles and identify conflicting rules.\n\n* **Unexpected behavior after DOM updates:** If dynamically adding or removing slides, always call the `rebuild()` method on the slider instance to reflect changes correctly.\n\n* **Performance issues:**  See the \"Performance Optimization\" section below.\n\nConsult the [FAQ section](link_to_faq) for frequently asked questions and solutions.\n\n\n### Performance Optimization\n\nFor optimal performance, especially with large numbers of slides or complex configurations:\n\n* **Minimize DOM manipulation:** Avoid frequent modifications to the slider's DOM structure.  Instead, update content and then call `rebuild()`.\n\n* **Optimize images:** Use appropriately sized images and optimize them for web performance.\n\n* **Lazy loading:** Implement lazy loading for images to improve initial load times, especially if you have many large images.\n\n* **Avoid unnecessary calculations:**  Be mindful of computationally expensive operations within your custom event handlers or functions that interact with the slider.\n\n* **Use appropriate data structures:** If working with many slides, consider using efficient data structures to manage information related to slides, avoiding performance bottlenecks from excessive data lookups or manipulations.\n\nBy addressing these factors you can keep your slider performing smoothly even with a large amount of content.\n\n\n## Examples\n\n### Basic Slider\n\nThis example shows the most basic slider setup.  It displays three slides, one at a time.\n\n```html\n<div id=\"basic-slider\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#basic-slider',\n    items: 1\n  });\n</script>\n```\n\nRemember to include the Tiny Slider CSS and JavaScript files in your project.  This example uses only the essential `container` and `items` options.\n\n\n### Slider with Navigation\n\nThis example adds navigation controls (next/prev buttons and pagination) to the basic slider.\n\n```html\n<div id=\"slider-with-nav\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#slider-with-nav',\n    items: 1,\n    controls: true,\n    nav: true\n  });\n</script>\n```\n\nSetting `controls: true` and `nav: true` enables the default navigation features.\n\n\n### Slider with Autoplay\n\nThis example adds autoplay functionality to the slider.\n\n```html\n<div id=\"slider-with-autoplay\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#slider-with-autoplay',\n    items: 1,\n    autoplay: true,\n    autoplayTimeout: 3000 // 3 seconds\n  });\n</script>\n```\n\n`autoplay: true` enables autoplay, and `autoplayTimeout` sets the interval between transitions (in milliseconds).\n\n\n### Slider with Lazy Loading\n\nThis example demonstrates lazy loading images.  Replace placeholders with your actual image URLs.\n\n```html\n<div id=\"slider-with-lazyload\">\n  <div><img data-src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div><img data-src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div><img data-src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#slider-with-lazyload',\n    items: 1,\n    lazyload: true\n  });\n</script>\n```\n\n`lazyload: true` enables lazy loading.  Images are loaded only when they become visible.  Use `data-src` attribute to specify the image source.\n\n\n### Slider with Infinite Loop\n\nThis example creates a slider that loops infinitely.\n\n```html\n<div id=\"slider-infinite\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#slider-infinite',\n    items: 1,\n    loop: true\n  });\n</script>\n```\n\n`loop: true` enables infinite looping.  The slider will seamlessly transition from the last slide back to the first.\n\n\n### Responsive Slider\n\nThis example demonstrates a responsive slider that adjusts the number of visible items based on screen size.\n\n```html\n<div id=\"responsive-slider\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n  <div>Slide 4</div>\n  <div>Slide 5</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#responsive-slider',\n    items: 3,\n    responsive: {\n      768: { items: 2 },\n      500: { items: 1 }\n    }\n  });\n</script>\n```\n\nThe `responsive` option allows specifying different configurations for various screen widths.  Here, it displays 3 items on larger screens, 2 items on screens 768px or less, and 1 item on screens 500px or less.  Remember to adjust breakpoints to fit your design.\n\nRemember to replace placeholder image URLs and text with your actual content.  These examples are designed to be starting points for your own custom sliders.  Refer to the options reference for a complete list of available configurations and further customization.\n\n\n## API Reference\n\n### Options\n\nTiny Slider's functionality is extensively controlled through options passed to the `tns()` initialization function.  These options allow fine-grained control over various aspects of the slider's behavior, appearance, and responsiveness. Below is a summary; refer to the complete documentation for detailed explanations and default values.  Options are generally case-sensitive.\n\n\n**Core Options:**\n\n* `container`: (required) CSS selector or DOM element of the slider container.\n* `items`: Number of items visible at once.\n* `slideBy`: Number of items or 'page' to move on each transition.\n* `autoWidth`: Boolean; if true, items will automatically adjust width to content.\n* `edgePadding`: Number or string; padding on edges for autoWidth mode.\n* `gutter`: Spacing between items.\n\n\n**Navigation Options:**\n\n* `controls`: Boolean; enables/disables next/prev buttons.\n* `controlsText`: Array; custom text for next/prev buttons.\n* `nav`: Boolean; enables/disables pagination.\n* `navPosition`: String; position of pagination ('top', 'bottom', 'left', 'right').\n\n\n**Autoplay Options:**\n\n* `autoplay`: Boolean; enables/disables autoplay.\n* `autoplayTimeout`: Milliseconds between autoplay transitions.\n* `autoplayButton`: Boolean; enables/disables autoplay button.\n* `autoplayButtonOutput`: Boolean; controls the autoplay button output.\n* `autoplayPosition`: String; position of autoplay button.\n\n\n**Looping and Responsiveness:**\n\n* `loop`: Boolean; enables/disables infinite loop.\n* `responsive`: Object; defines responsive settings for different screen sizes.\n\n\n**Accessibility and Miscellaneous:**\n\n* `lazyload`: Boolean; enables/disables lazy loading of images.\n* `speed`: Transition speed (milliseconds).\n* `startIndex`: Index of the starting slide (0-based).\n* `preventScrollOnTouch`: Boolean; prevent page scroll on touch.\n* `swipeAngle`: Maximum swipe angle to initiate slider transition.\n* `axis`: Axis of the slider ('horizontal' or 'vertical').\n* `animateIn`: Animation effect when items are entering viewport.\n* `animateOut`: Animation effect when items are leaving viewport.\n* `animateInElements`: Array of CSS selectors for elements to animate-in.\n* `animateOutElements`: Array of CSS selectors for elements to animate-out.\n* `onInit`: Callback function executed after slider initialization.\n* `onComplete`: Callback function executed when slider transition ends.\n* `onUpdated`: Callback function executed when slider is updated (e.g., by `rebuild()`).\n\n\n**Advanced Options (Consult full documentation):**\n\nNumerous other options exist for advanced customizations like custom easing, callbacks for various events, and fine-tuning the behavior of individual components.\n\n\n### Methods\n\nThe slider instance, returned by `tns()`, exposes several methods for programmatic control:\n\n\n* `goTo(index)`: Navigates to the slide at the specified index (0-based).\n* `next()`: Moves to the next slide.\n* `prev()`: Moves to the previous slide.\n* `destroy()`: Destroys the slider instance and removes all event listeners.\n* `rebuild()`: Rebuilds the slider, useful after dynamic content changes.\n* `getInfo()`: Returns an object containing information about the slider's current state.\n* `getCurrentIndex()`: Returns the current slide index.\n* `getSliderSize()`: Returns an object containing size details of the slider.\n* `getSlideSize()`: Returns size details of the slides.\n* `getVisibleItemsNumber()`: Returns number of currently visible items.\n* `getUpdatedIndex(index)`: Returns updated index after applying loop.\n* `resetSlider()`: Resets the slider to initial state (as defined by options).\n* `updateSlider()`: Updates the slider settings based on new options provided.\n\n\n### Events\n\nTiny Slider dispatches custom events on the slider container element.  These events provide callbacks for various slider actions:\n\n\n* `tns:loaded`: Fired when the slider is fully initialized.\n* `tns:transitionStart`: Fired when a slide transition begins.\n* `tns:transitionEnd`: Fired when a slide transition ends.\n* `tns:indexChanged`: Fired when the current slide index changes.\n* `tns:playing`: Fired when autoplay starts.\n* `tns:paused`: Fired when autoplay pauses.\n* `tns:destroyed`: Fired when the slider is destroyed.\n* `tns:updated`: Fired after `updateSlider` method is called.\n\n\nThese events can be listened for using standard DOM event listeners (addEventListener) or any appropriate library method (e.g., jQuery's `on()`).  They allow reacting to slider state changes and integrating custom functionality.  Remember that event names are case-sensitive.  Consult full documentation for details on parameters passed with each event.\n\n\n## Contributing\n\nWe welcome contributions to Tiny Slider! Whether it's fixing bugs, adding features, or improving documentation, your help is appreciated.  Before contributing, please take a moment to review these guidelines.\n\n### Setting up the development environment\n\n1. **Clone the repository:** Fork the Tiny Slider repository on GitHub and clone your fork to your local machine.\n\n2. **Install dependencies:** Navigate to the project directory and install the necessary packages using npm or yarn:\n\n   ```bash\n   npm install\n   ```\n   or\n   ```bash\n   yarn install\n   ```\n\n3. **Start the development server:**  Tiny Slider uses a development server for live reloading during development.  Start the server using:\n\n   ```bash\n   npm run dev\n   ```\n   or\n   ```bash\n   yarn dev\n   ```\n\nThis will start a local web server and open the Tiny Slider demo page in your browser.  Changes you make to the code will be automatically reflected in the browser.\n\n\n### Running tests\n\nTiny Slider uses [testing framework name, e.g., Jest] for testing.  To run the tests, execute the following command:\n\n```bash\nnpm test\n```\nor\n```bash\nyarn test\n```\n\nBefore submitting a pull request, ensure all tests pass.  Adding new tests for any changes you make is highly encouraged.\n\n\n### Coding style guidelines\n\nTiny Slider follows [specific coding style guidelines, e.g., Airbnb JavaScript Style Guide].  Please ensure your code adheres to these guidelines before submitting a pull request.  Consistent formatting helps maintain readability and maintainability.  Using a code formatter (e.g., Prettier) is recommended to automate formatting.\n\n\n### Submitting pull requests\n\n1. **Create a new branch:** Create a new branch from the `main` branch for your changes.  Use descriptive branch names (e.g., `feature/add-new-option`, `bugfix/resolve-issue-123`).\n\n2. **Make your changes:** Implement your changes and ensure they are thoroughly tested.\n\n3. **Commit your changes:** Commit your changes with clear and concise commit messages.  Follow conventional commit message format (e.g., `feat: add new feature`, `fix: resolve bug`).\n\n4. **Push your branch:** Push your branch to your forked repository on GitHub.\n\n5. **Create a pull request:** Create a pull request from your branch to the `main` branch of the Tiny Slider repository.  Provide a clear description of your changes and address any feedback provided by the reviewers.\n\n\nRemember to follow the project's contribution license agreement (CLA).  We appreciate your contributions and look forward to reviewing your pull request!\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nTiny Slider can be installed via npm, yarn, or by directly including the JavaScript and CSS files.\n\n**npm:**\n\n```bash\nnpm install tiny-slider-react\n```\n\n**yarn:**\n\n```bash\nyarn add tiny-slider-react\n```\n\n**Direct Download:**\n\nDownload the latest release from [link to release page] and include the `tiny-slider.js` and `tiny-slider.css` files in your project.\n\n\n### Basic Usage\n\nTiny Slider provides a simple and intuitive API.  You initialize the slider by selecting your container element and providing configuration options.  The core functionality is controlled through JavaScript, while styling is primarily managed via CSS.  Refer to the configuration options section for detailed information on customizing the slider's behavior.\n\n\n### Including Tiny Slider in your project\n\nAfter installation (using whichever method you prefer), you need to include the necessary files in your HTML.  If using the direct download method, include the CSS file in the `<head>` section and the JavaScript file before the closing `</body>` tag. For npm or yarn installations, you'll need to import them into your JavaScript file using your module bundler's (like Webpack or Parcel) import syntax.\n\n\n**Direct Download Example:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"tiny-slider.css\">\n</head>\n<body>\n  <div class=\"my-slider\"></div>\n  <script src=\"tiny-slider.js\"></script>\n  <script>\n    //Your JavaScript initialization code here\n  </script>\n</body>\n</html>\n```\n\n**npm/yarn Example (using a module bundler):**\n\n```javascript\nimport 'tiny-slider/dist/tiny-slider.css'; // import CSS first\nimport tns from 'tiny-slider';\n\n\n//Your JavaScript initialization code here\n```\n\n### First slider example\n\nThis example demonstrates a basic slider setup.  Replace `#my-slider` with the ID of your slider container. Remember to include the necessary CSS and JavaScript as described in the previous section.\n\n```html\n<div id=\"my-slider\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#my-slider',\n    items: 1, // Display 1 item at a time\n    slideBy: 'page', //Move one page at a time\n    autoplay: false //Disable autoplay\n  });\n</script>\n```\n\nThis code creates a slider with three slides, displaying one slide at a time. You can easily customize this further by adding more slides and modifying the options provided to `tns()`. Refer to the configuration section for available options.\n\n\n## Core Functionality\n\n### Slider Initialization\n\nTiny Slider is initialized using the `tns()` function. This function takes a single argument: an object containing configuration options.  The most basic initialization requires specifying the container element.  All other options are optional and provide granular control over the slider's behavior.\n\n**Basic Initialization:**\n\n```javascript\nconst slider = tns({\n  container: '#my-slider' // Required: CSS selector or DOM element for the slider container\n});\n```\n\n**Initialization with Options:**\n\n```javascript\nconst slider = tns({\n  container: '#my-slider',\n  items: 3,\n  autoWidth: true,\n  autoplay: true\n});\n```\n\nRemember to include the Tiny Slider CSS and JavaScript files in your project before initializing the slider.  The `tns()` function returns an object representing the slider instance, allowing you to access methods and events.  Failure to initialize correctly will result in no slider being created.  Always check your browser's console for errors.\n\n\n### Options Reference\n\nThe `tns()` function accepts a wide range of options to customize the slider's appearance and functionality.  Below are some of the most commonly used options. A complete list with detailed explanations can be found in the [full options reference](link_to_full_reference).\n\n* **`container` (required):**  CSS selector or DOM element of the slider container.\n* **`items`:** Number of items visible at once.\n* **`slideBy`:** Number of items to move on each swipe or click.  Can be a number or 'page'.\n* **`autoplay`:** Boolean to enable/disable autoplay.\n* **`autoplayTimeout`:** Milliseconds between autoplay transitions.\n* **`controls`:** Boolean to enable/disable next/prev buttons.\n* **`nav`:** Boolean to enable/disable navigation.\n* **`autoWidth`:** Boolean to automatically adjust item widths based on content.\n* **`responsive`:** Object to define responsive settings for different screen sizes.\n\n\n### Methods\n\nThe slider instance returned by `tns()` provides several methods to control the slider's behavior programmatically.\n\n* **`goTo(index)`:** Navigates to a specific slide at the given index (0-based).\n* **`next()`:** Moves to the next slide.\n* **`prev()`:** Moves to the previous slide.\n* **`destroy()`:** Completely removes the slider and its event listeners.\n* **`rebuild()`:**  Rebuilds the slider, useful after dynamically adding or removing slides.\n\n\n**Example usage:**\n\n```javascript\nconst slider = tns({ /* ... options ... */ });\n\n// Go to the third slide (index 2)\nslider.goTo(2);\n\n// Go to the next slide\nslider.next();\n\n// Destroy the slider\nslider.destroy();\n\n//Rebuild after DOM changes\nslider.rebuild();\n```\n\nRefer to the [complete methods reference](link_to_methods_reference) for a full list and detailed descriptions.\n\n\n### Events\n\nTiny Slider triggers several custom events that you can listen for to perform actions based on slider state changes.  These events are dispatched on the slider container element.\n\n* **`tns:loaded`:** Fired when the slider has finished initializing.\n* **`tns:transitionStart`:** Fired when a transition begins.\n* **`tns:transitionEnd`:** Fired when a transition completes.\n* **`tns:indexChanged`:** Fired when the current index changes.\n\n\n**Example usage (using jQuery):**\n\n```javascript\n$('#my-slider').on('tns:loaded', function(){\n  console.log('Slider loaded!');\n});\n```\n\n**Example usage (using vanilla JavaScript):**\n\n```javascript\ndocument.getElementById('my-slider').addEventListener('tns:loaded', function(){\n  console.log('Slider loaded!');\n});\n\n```\n\nRefer to the [complete events reference](link_to_events_reference) for a full list and detailed descriptions.  Remember to replace `#my-slider` with the actual ID of your slider container.  Event handling methods may vary slightly depending on your preferred JavaScript library or framework.\n\n\n## Customization\n\n### Styling the Slider\n\nTiny Slider provides a basic CSS stylesheet for its core components.  You can easily customize the slider's appearance by overriding these styles in your own CSS.  The CSS classes are designed to be intuitive and easy to target.  For example, you can target individual slides using the `.tns-item` class, or the navigation controls using `.tns-controls` and its child elements.\n\n**Overriding default styles:**\n\nAdd your custom CSS rules after including the Tiny Slider CSS file to ensure they take precedence.  For instance, to change the background color of slides:\n\n```css\n.tns-item {\n  background-color: #f0f0f0;\n}\n```\n\nRemember to inspect the generated HTML and CSS to identify the specific classes you need to target for your customizations.  Consult the Tiny Slider CSS file for a complete list of available classes.\n\n### Customizing Navigation\n\nTiny Slider offers options to customize the navigation controls (arrows and pagination).  You can enable or disable them via the `controls` and `nav` options during initialization. You can also create your own custom navigation elements and integrate them with Tiny Slider's API.\n\n**Custom Navigation Example:**\n\nYou can create custom navigation buttons and then link their click events to the `next()` and `prev()` methods of the slider instance.\n\n```html\n<button id=\"prev-button\">Previous</button>\n<button id=\"next-button\">Next</button>\n\n<script>\n  const slider = tns({ /* ...options... */ });\n  document.getElementById('prev-button').addEventListener('click', () => slider.prev());\n  document.getElementById('next-button').addEventListener('click', () => slider.next());\n</script>\n```\n\nThis allows for complete creative control over the navigation's design and placement.\n\n\n### Responsive Design\n\nTiny Slider supports responsive design through the `responsive` option. This option takes an object where keys are breakpoint widths (in pixels) and values are objects containing options to be applied at that breakpoint.\n\n**Responsive Configuration Example:**\n\n```javascript\nconst slider = tns({\n  container: '#my-slider',\n  items: 3,\n  responsive: {\n    640: { // Screen width 640px and below\n      items: 1\n    },\n    1024: { // Screen width 1024px and below\n      items: 2\n    }\n  }\n});\n```\n\nThis configuration displays 3 items on larger screens, 2 items on screens 1024px wide or less, and 1 item on screens 640px wide or less.  You can define as many breakpoints as needed to suit your design.\n\n\n### Accessibility\n\nBuilding accessible sliders is crucial for inclusivity. Tiny Slider doesn't automatically enforce all accessibility best practices, but it offers options and features to make it easier to build an accessible experience.\n\n* **Keyboard Navigation:**  Tiny Slider inherently supports keyboard navigation through arrow keys for moving between slides.\n\n* **ARIA Attributes:** It's recommended to add appropriate ARIA attributes to your slider elements to enhance screen reader compatibility.  For example, use `aria-label` to describe slides, `aria-current` to indicate the active slide, and `role=\"button\"` for navigation controls.\n\n* **Semantic HTML:** Use semantically appropriate HTML elements. Avoid using divs when more specific elements could be applied.\n\n* **Focus Management:** Ensure proper focus management, particularly when using custom navigation.  Use `focus()` method as needed for better keyboard navigation flow.\n\nExample of adding ARIA attributes:\n\n```html\n<div id=\"my-slider\" role=\"region\" aria-label=\"Product Showcase\">\n  <div class=\"tns-item\" aria-label=\"Product 1\"></div>\n  <div class=\"tns-item\" aria-label=\"Product 2\"></div>\n  </div>\n```\n\nImplementing these suggestions will significantly improve the accessibility of your Tiny Slider. Always test your slider with assistive technologies like screen readers to ensure its usability for all users.\n\n\n## Advanced Usage\n\n### Programmatic Control\n\nBeyond basic initialization, Tiny Slider offers extensive programmatic control over its behavior.  You can interact with the slider instance using its methods to dynamically manage slides, navigation, and transitions. This allows for highly customized user interactions and complex integrations.\n\n* **Dynamically adding/removing slides:** Modify the DOM content of the slider container and then call the `rebuild()` method to update the slider.  This allows you to seamlessly integrate with dynamic content loading and updates.\n\n* **Responding to events:** Use the events system to trigger custom actions based on slider state changes (e.g., `tns:transitionEnd`). This enables synchronized animations, content updates, or user feedback.\n\n* **Controlling autoplay:** You can start, stop, or pause the autoplay functionality using the instance methods (though autoplay is typically controlled through options at initialization).\n\n* **Custom Navigation Integration:** Develop highly customized navigation by creating your own controls and binding them to slider's `next()` and `prev()` methods.\n\n\n### Working with multiple sliders\n\nYou can initialize multiple Tiny Slider instances on a single page without conflicts. Each instance operates independently.  Make sure each slider has a unique container selector or DOM element.\n\n\n```javascript\nconst slider1 = tns({ container: '#slider1' });\nconst slider2 = tns({ container: '#slider2' });\n```\n\nThis example initializes two separate sliders, one with the ID `slider1` and another with the ID `slider2`.  They will function independently, with no interference between them.  Properly identifying each slider with unique selectors is crucial for avoiding unintended behavior.\n\n\n### Integrating with other libraries\n\nTiny Slider can be integrated with various JavaScript libraries and frameworks.  Its API is designed for flexibility.  However, remember to handle potential conflicts between libraries, especially those manipulating the DOM or event handling.  Ensure correct order of inclusion and potential compatibility issues.\n\nFor example, when integrating with a framework like React, Vue, or Angular, you'll need to incorporate Tiny Slider into your component lifecycle and appropriately handle updates to the slider after DOM manipulation.\n\n\n### Troubleshooting common issues\n\nCommon issues with Tiny Slider often involve incorrect initialization, CSS conflicts, or DOM manipulation.\n\n* **Slider not initializing:** Double-check your container selector, ensure Tiny Slider's CSS and JavaScript are correctly included, and inspect the browser's console for error messages.\n\n* **CSS conflicts:** Ensure your custom CSS overrides don't interfere with Tiny Slider's default styles. Use your browser's developer tools to inspect styles and identify conflicting rules.\n\n* **Unexpected behavior after DOM updates:** If dynamically adding or removing slides, always call the `rebuild()` method on the slider instance to reflect changes correctly.\n\n* **Performance issues:**  See the \"Performance Optimization\" section below.\n\nConsult the [FAQ section](link_to_faq) for frequently asked questions and solutions.\n\n\n### Performance Optimization\n\nFor optimal performance, especially with large numbers of slides or complex configurations:\n\n* **Minimize DOM manipulation:** Avoid frequent modifications to the slider's DOM structure.  Instead, update content and then call `rebuild()`.\n\n* **Optimize images:** Use appropriately sized images and optimize them for web performance.\n\n* **Lazy loading:** Implement lazy loading for images to improve initial load times, especially if you have many large images.\n\n* **Avoid unnecessary calculations:**  Be mindful of computationally expensive operations within your custom event handlers or functions that interact with the slider.\n\n* **Use appropriate data structures:** If working with many slides, consider using efficient data structures to manage information related to slides, avoiding performance bottlenecks from excessive data lookups or manipulations.\n\nBy addressing these factors you can keep your slider performing smoothly even with a large amount of content.\n\n\n## Examples\n\n### Basic Slider\n\nThis example shows the most basic slider setup.  It displays three slides, one at a time.\n\n```html\n<div id=\"basic-slider\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#basic-slider',\n    items: 1\n  });\n</script>\n```\n\nRemember to include the Tiny Slider CSS and JavaScript files in your project.  This example uses only the essential `container` and `items` options.\n\n\n### Slider with Navigation\n\nThis example adds navigation controls (next/prev buttons and pagination) to the basic slider.\n\n```html\n<div id=\"slider-with-nav\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#slider-with-nav',\n    items: 1,\n    controls: true,\n    nav: true\n  });\n</script>\n```\n\nSetting `controls: true` and `nav: true` enables the default navigation features.\n\n\n### Slider with Autoplay\n\nThis example adds autoplay functionality to the slider.\n\n```html\n<div id=\"slider-with-autoplay\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#slider-with-autoplay',\n    items: 1,\n    autoplay: true,\n    autoplayTimeout: 3000 // 3 seconds\n  });\n</script>\n```\n\n`autoplay: true` enables autoplay, and `autoplayTimeout` sets the interval between transitions (in milliseconds).\n\n\n### Slider with Lazy Loading\n\nThis example demonstrates lazy loading images.  Replace placeholders with your actual image URLs.\n\n```html\n<div id=\"slider-with-lazyload\">\n  <div><img data-src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div><img data-src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div><img data-src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#slider-with-lazyload',\n    items: 1,\n    lazyload: true\n  });\n</script>\n```\n\n`lazyload: true` enables lazy loading.  Images are loaded only when they become visible.  Use `data-src` attribute to specify the image source.\n\n\n### Slider with Infinite Loop\n\nThis example creates a slider that loops infinitely.\n\n```html\n<div id=\"slider-infinite\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#slider-infinite',\n    items: 1,\n    loop: true\n  });\n</script>\n```\n\n`loop: true` enables infinite looping.  The slider will seamlessly transition from the last slide back to the first.\n\n\n### Responsive Slider\n\nThis example demonstrates a responsive slider that adjusts the number of visible items based on screen size.\n\n```html\n<div id=\"responsive-slider\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n  <div>Slide 4</div>\n  <div>Slide 5</div>\n</div>\n\n<script>\n  const slider = tns({\n    container: '#responsive-slider',\n    items: 3,\n    responsive: {\n      768: { items: 2 },\n      500: { items: 1 }\n    }\n  });\n</script>\n```\n\nThe `responsive` option allows specifying different configurations for various screen widths.  Here, it displays 3 items on larger screens, 2 items on screens 768px or less, and 1 item on screens 500px or less.  Remember to adjust breakpoints to fit your design.\n\nRemember to replace placeholder image URLs and text with your actual content.  These examples are designed to be starting points for your own custom sliders.  Refer to the options reference for a complete list of available configurations and further customization.\n\n\n## API Reference\n\n### Options\n\nTiny Slider's functionality is extensively controlled through options passed to the `tns()` initialization function.  These options allow fine-grained control over various aspects of the slider's behavior, appearance, and responsiveness. Below is a summary; refer to the complete documentation for detailed explanations and default values.  Options are generally case-sensitive.\n\n\n**Core Options:**\n\n* `container`: (required) CSS selector or DOM element of the slider container.\n* `items`: Number of items visible at once.\n* `slideBy`: Number of items or 'page' to move on each transition.\n* `autoWidth`: Boolean; if true, items will automatically adjust width to content.\n* `edgePadding`: Number or string; padding on edges for autoWidth mode.\n* `gutter`: Spacing between items.\n\n\n**Navigation Options:**\n\n* `controls`: Boolean; enables/disables next/prev buttons.\n* `controlsText`: Array; custom text for next/prev buttons.\n* `nav`: Boolean; enables/disables pagination.\n* `navPosition`: String; position of pagination ('top', 'bottom', 'left', 'right').\n\n\n**Autoplay Options:**\n\n* `autoplay`: Boolean; enables/disables autoplay.\n* `autoplayTimeout`: Milliseconds between autoplay transitions.\n* `autoplayButton`: Boolean; enables/disables autoplay button.\n* `autoplayButtonOutput`: Boolean; controls the autoplay button output.\n* `autoplayPosition`: String; position of autoplay button.\n\n\n**Looping and Responsiveness:**\n\n* `loop`: Boolean; enables/disables infinite loop.\n* `responsive`: Object; defines responsive settings for different screen sizes.\n\n\n**Accessibility and Miscellaneous:**\n\n* `lazyload`: Boolean; enables/disables lazy loading of images.\n* `speed`: Transition speed (milliseconds).\n* `startIndex`: Index of the starting slide (0-based).\n* `preventScrollOnTouch`: Boolean; prevent page scroll on touch.\n* `swipeAngle`: Maximum swipe angle to initiate slider transition.\n* `axis`: Axis of the slider ('horizontal' or 'vertical').\n* `animateIn`: Animation effect when items are entering viewport.\n* `animateOut`: Animation effect when items are leaving viewport.\n* `animateInElements`: Array of CSS selectors for elements to animate-in.\n* `animateOutElements`: Array of CSS selectors for elements to animate-out.\n* `onInit`: Callback function executed after slider initialization.\n* `onComplete`: Callback function executed when slider transition ends.\n* `onUpdated`: Callback function executed when slider is updated (e.g., by `rebuild()`).\n\n\n**Advanced Options (Consult full documentation):**\n\nNumerous other options exist for advanced customizations like custom easing, callbacks for various events, and fine-tuning the behavior of individual components.\n\n\n### Methods\n\nThe slider instance, returned by `tns()`, exposes several methods for programmatic control:\n\n\n* `goTo(index)`: Navigates to the slide at the specified index (0-based).\n* `next()`: Moves to the next slide.\n* `prev()`: Moves to the previous slide.\n* `destroy()`: Destroys the slider instance and removes all event listeners.\n* `rebuild()`: Rebuilds the slider, useful after dynamic content changes.\n* `getInfo()`: Returns an object containing information about the slider's current state.\n* `getCurrentIndex()`: Returns the current slide index.\n* `getSliderSize()`: Returns an object containing size details of the slider.\n* `getSlideSize()`: Returns size details of the slides.\n* `getVisibleItemsNumber()`: Returns number of currently visible items.\n* `getUpdatedIndex(index)`: Returns updated index after applying loop.\n* `resetSlider()`: Resets the slider to initial state (as defined by options).\n* `updateSlider()`: Updates the slider settings based on new options provided.\n\n\n### Events\n\nTiny Slider dispatches custom events on the slider container element.  These events provide callbacks for various slider actions:\n\n\n* `tns:loaded`: Fired when the slider is fully initialized.\n* `tns:transitionStart`: Fired when a slide transition begins.\n* `tns:transitionEnd`: Fired when a slide transition ends.\n* `tns:indexChanged`: Fired when the current slide index changes.\n* `tns:playing`: Fired when autoplay starts.\n* `tns:paused`: Fired when autoplay pauses.\n* `tns:destroyed`: Fired when the slider is destroyed.\n* `tns:updated`: Fired after `updateSlider` method is called.\n\n\nThese events can be listened for using standard DOM event listeners (addEventListener) or any appropriate library method (e.g., jQuery's `on()`).  They allow reacting to slider state changes and integrating custom functionality.  Remember that event names are case-sensitive.  Consult full documentation for details on parameters passed with each event.\n\n\n## Contributing\n\nWe welcome contributions to Tiny Slider! Whether it's fixing bugs, adding features, or improving documentation, your help is appreciated.  Before contributing, please take a moment to review these guidelines.\n\n### Setting up the development environment\n\n1. **Clone the repository:** Fork the Tiny Slider repository on GitHub and clone your fork to your local machine.\n\n2. **Install dependencies:** Navigate to the project directory and install the necessary packages using npm or yarn:\n\n   ```bash\n   npm install\n   ```\n   or\n   ```bash\n   yarn install\n   ```\n\n3. **Start the development server:**  Tiny Slider uses a development server for live reloading during development.  Start the server using:\n\n   ```bash\n   npm run dev\n   ```\n   or\n   ```bash\n   yarn dev\n   ```\n\nThis will start a local web server and open the Tiny Slider demo page in your browser.  Changes you make to the code will be automatically reflected in the browser.\n\n\n### Running tests\n\nTiny Slider uses [testing framework name, e.g., Jest] for testing.  To run the tests, execute the following command:\n\n```bash\nnpm test\n```\nor\n```bash\nyarn test\n```\n\nBefore submitting a pull request, ensure all tests pass.  Adding new tests for any changes you make is highly encouraged.\n\n\n### Coding style guidelines\n\nTiny Slider follows [specific coding style guidelines, e.g., Airbnb JavaScript Style Guide].  Please ensure your code adheres to these guidelines before submitting a pull request.  Consistent formatting helps maintain readability and maintainability.  Using a code formatter (e.g., Prettier) is recommended to automate formatting.\n\n\n### Submitting pull requests\n\n1. **Create a new branch:** Create a new branch from the `main` branch for your changes.  Use descriptive branch names (e.g., `feature/add-new-option`, `bugfix/resolve-issue-123`).\n\n2. **Make your changes:** Implement your changes and ensure they are thoroughly tested.\n\n3. **Commit your changes:** Commit your changes with clear and concise commit messages.  Follow conventional commit message format (e.g., `feat: add new feature`, `fix: resolve bug`).\n\n4. **Push your branch:** Push your branch to your forked repository on GitHub.\n\n5. **Create a pull request:** Create a pull request from your branch to the `main` branch of the Tiny Slider repository.  Provide a clear description of your changes and address any feedback provided by the reviewers.\n\n\nRemember to follow the project's contribution license agreement (CLA).  We appreciate your contributions and look forward to reviewing your pull request!\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"tiny-slider.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"Tiny Slider - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}