{"title":"instant.page - A Developer's Handbook","markdown":{"yaml":{"title":"instant.page - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is instant.page?\n\ninstant.page is a JavaScript library that preloads links on your website in the background, significantly reducing page load times for users.  It works by detecting user mouse movements and proactively fetching the HTML of the next page the user is likely to click. When the user clicks the link, the preloaded page is instantly displayed, creating a seamless and snappy browsing experience. This results in a perceived performance boost, leading to improved user satisfaction and potentially higher engagement.  Unlike other preloading solutions, instant.page focuses on being lightweight and unobtrusive, minimizing its impact on your site's performance and avoiding unnecessary resource consumption.\n\n\n### Key Features and Benefits\n\n* **Instantaneous Page Loads:**  Dramatically reduces perceived page load times by preloading links.\n* **Lightweight and Efficient:** Minimal impact on your website's performance and resource usage.\n* **Smart Preloading:**  Intelligently predicts which links the user is likely to click next, optimizing resource utilization.\n* **Easy Integration:** Simple installation and configuration, requiring minimal code changes.\n* **Customization Options:**  Allows for fine-grained control over preloading behavior through configuration settings.\n* **Improved User Experience:** Results in a faster, smoother, and more enjoyable browsing experience.\n* **Better SEO:** While not a direct ranking factor, faster loading times contribute positively to overall SEO performance.\n\n\n### Use Cases\n\ninstant.page is beneficial for a wide range of websites, including:\n\n* **Blogs and News Sites:**  Where users frequently navigate between articles.\n* **E-commerce Websites:**  To improve the browsing experience for product catalogs and shopping carts.\n* **Documentation Sites:**  To enable quick navigation between documentation pages.\n* **Internal Portals:**  To enhance the speed and efficiency of internal workflows.\n* **Websites with extensive internal linking:** Any site where users commonly click internal links will benefit from instant.page.\n\n\n### Getting Started: Installation and Setup\n\nThere are two primary methods for installing instant.page: using a CDN or via npm.\n\n**Method 1: CDN (Recommended for quick setup)**\n\nInclude the following `<script>` tag in the `<head>` of your HTML pages:\n\n```html\n<script src=\"https://instant.page/instantpage.js\" type=\"module\"></script>\n```\n\nThis will automatically load and initialize instant.page on your website.  You can start using it immediately.  Refer to the configuration section of the documentation for customization options.\n\n**Method 2: npm (For advanced users and project management)**\n\n1. Install the package:\n   ```bash\n   npm install instant.page\n   ```\n\n2. Import and initialize instant.page in your JavaScript code:\n\n   ```javascript\n   import instantpage from 'instant.page';\n\n   instantpage();\n   ```\n\nRemember to adjust the import path if your project structure differs.  This method allows for more control over the loading and configuration of instant.page, integrating it directly into your build process.  Consult the configuration section of the documentation for more advanced usage and configuration options.\n\n\n## Core Functionality\n\n### How instant.page Works\n\ninstant.page leverages the browser's built-in capabilities to prefetch resources without blocking the main thread.  It operates by monitoring user mouse movements. When the user's cursor hovers over a link for a specified duration (configurable), instant.page initiates a request to fetch the linked page's HTML in the background.  This happens discreetly, without impacting the user's current browsing experience.  Once the HTML is fetched, it's cached. When the user clicks the link, instant.page instantly renders the preloaded content, resulting in a near-instantaneous page transition. If the user doesn't click the link within a certain timeframe, or moves the mouse away, the prefetch is cancelled to avoid wasting resources.\n\nThe process relies on a combination of event listeners (mouse movements), resource fetching (using the browser's `fetch` API), and clever caching to minimize bandwidth consumption and maximize performance.  The library is designed to be lightweight and unobtrusive, ensuring it doesn't negatively impact your website's overall performance.\n\n### Preloading Mechanisms\n\ninstant.page uses several techniques to enhance its preloading effectiveness:\n\n* **Hover Detection:**  The primary mechanism.  It detects when the user's cursor hovers over a link for a specified duration, triggering the preloading process.\n* **Link Prediction:** The library prioritizes links that are deemed most likely to be clicked next based on user behavior patterns.  This helps focus preloading on the most beneficial resources.\n* **Resource Prioritization:** Preloading prioritizes the HTML first; only after it is successfully fetched, does instant.page start fetching other resources like CSS and JavaScript, if they are not already cached. This helps to get the page content to the user as quickly as possible, even with slow network connections.\n* **Intelligent Caching:**  The library intelligently caches preloaded pages to reduce redundant fetches.\n\n\n### Configuration Options\n\ninstant.page offers several configuration options to customize its behavior.  These options can be set by passing a configuration object to the `instantpage()` function (e.g., `instantpage({delay: 500})` ).  The most common options include:\n\n* **`delay` (number, milliseconds):** The delay (in milliseconds) before preloading begins after the cursor hovers over a link.  Defaults to 200ms.\n* **`threshold` (number):** The minimum time (in milliseconds) the cursor must hover over a link before preloading is initiated. Defaults to 200ms.\n* **`timeout` (number, milliseconds):** The maximum time allowed (in milliseconds) for a preload request to complete. Defaults to 2500ms.\n* **`ignore` (string|array of strings):**  CSS selector(s) to specify links that should be excluded from preloading.  This allows you to prevent preloading on specific links or types of links (e.g., external links, links to specific pages).\n* **`debug` (boolean):** Enables verbose logging to the browser's console for debugging purposes.  Defaults to `false`.\n* **`requests` (number):** Maximum simultaneous preload requests. Defaults to 5.\n* **`scrollDelay` (number):** Delay after the user scrolls before instant.page checks for new links to preload.\n\n\n### Event Handling and Callbacks\n\nWhile instant.page automatically handles most aspects of preloading, it provides callbacks for monitoring key events:\n\n* **`instantpage.on('fetch')`:** Triggered when a link's preload request is initiated.\n* **`instantpage.on('receive')`:** Triggered when the preload request is successful, and the HTML has been received.\n* **`instantpage.on('render')`:** Triggered when a preloaded page is rendered.\n* **`instantpage.on('error')`:** Triggered when a preload request fails.\n* **`instantpage.on('cancel')`:** Triggered when a preload request is cancelled (e.g., if the cursor moves away from the link).\n\nThese callbacks can be used to integrate custom functionality or to monitor the performance of the preloading process.\n\n\n### Customizing Preloading Behavior\n\nBeyond the configuration options, you can fine-tune instant.page's behavior through several techniques:\n\n* **Using the `ignore` option:** This provides a simple way to exclude links from preloading.\n* **Custom Event Listeners:** You can add your own event listeners to selectively trigger or inhibit preloading based on specific criteria (e.g., only preload links within specific containers).\n* **Advanced JavaScript:**  More advanced customization might require direct manipulation of instant.page's internal state, although this is generally discouraged unless absolutely necessary.   Refer to the source code and the API documentation for more details.\n\n\n## Advanced Usage\n\n### Integration with Other Libraries\n\ninstant.page is designed to be compatible with most JavaScript libraries and frameworks. However, potential conflicts might arise depending on how other libraries handle DOM manipulation or event handling.  Here are some considerations:\n\n* **Routing Libraries (e.g., React Router, Vue Router, Angular Router):**  Ensure that your routing library doesn't interfere with instant.page's link detection or event handling.  You might need to adjust event listeners or selectors to ensure compatibility.  In some cases, it might be necessary to integrate instant.page's functionality directly within your routing system's lifecycle.\n* **SPA Frameworks:**  instant.page works well with Single Page Applications (SPAs) by preloading entire pages.  However, it won't replace the SPA's internal routing mechanisms; instead, it improves navigation *between* pages on your site.  Consider how instant.page's preloading complements your SPA's internal client-side routing.\n* **Other Preloading Libraries:**  Avoid using instant.page concurrently with other preloading libraries to prevent conflicts and resource duplication.  instant.page is designed to be a comprehensive solution.\n\nThe best approach often involves carefully considering the interaction between instant.page and other libraries, ensuring that event handling and DOM manipulation are not conflicting.\n\n### Handling Different Content Types\n\nWhile instant.page primarily focuses on preloading HTML, it can indirectly improve performance for other content types:\n\n* **Images:**  Preloading HTML often involves fetching images as well, improving overall page load speed.  If you have large images or use lazy loading, consider optimizing image loading separately for best results.\n* **Videos:**  Similar to images, preloading HTML can initiate the download of video files if the video is included in the HTML.  For very large videos, consider using separate video preload mechanisms.\n* **Web Components:** instant.page handles web components in the same way as other HTML elements.  It preloads the entire page, including any web components present.\n* **Dynamically Loaded Content:**  Content loaded via JavaScript after the initial HTML render might not be preloaded. To address this, ensure that the crucial portions of your content are included within the initial HTML response.\n\n\n### Troubleshooting and Debugging\n\nDebugging instant.page issues usually involves checking the browser's developer console for errors and using the `debug` option.\n\n* **Check the Console:**  Look for errors in the browser's developer console (usually accessed by pressing F12).  Errors related to network requests, DOM manipulation, or JavaScript execution might indicate issues with instant.page's integration or configuration.\n* **Enable Debugging (`debug: true`):**  Adding `debug: true` to the instant.page configuration will print detailed logs to the console, showing the progress of preload requests and any issues encountered.  This is invaluable for diagnosing problems.\n* **Inspect Network Requests:**  Use your browser's developer tools to inspect the network requests made by instant.page.  This helps verify if preloading is initiated correctly and if resources are fetched successfully.\n* **Test with Different Browsers:**  Ensure instant.page works consistently across different browsers, as there might be minor compatibility differences.\n* **Check for Conflicts:**  If using other libraries, ensure there are no conflicts with instant.page's event listeners or DOM manipulation.\n\n### Performance Optimization\n\nTo maximize instant.page's performance, consider the following:\n\n* **Minimize HTML Size:**  Smaller HTML files translate to faster preloading times.  Optimize your HTML for size and efficiency.\n* **Optimize Images and Other Resources:**  Optimize your images and other assets to reduce their download size.  This will improve both the initial page load and the speed of preloading subsequent pages.\n* **Use a Content Delivery Network (CDN):**  Distribute your website's assets across multiple servers via a CDN to reduce latency and improve download speeds for users in different geographical locations.\n* **Cache Aggressively:**  Configure your web server and browser caching appropriately to reduce the need to repeatedly fetch the same resources.\n* **Monitor Performance:**  Regularly monitor the performance of instant.page using browser developer tools or performance monitoring services to identify bottlenecks and areas for improvement.\n\n\n### Advanced Configuration and Customization\n\nAdvanced customization of instant.page requires a deeper understanding of JavaScript and the library's internal workings.  While the provided configuration options are sufficient for most use cases, more advanced customization might be needed in exceptional circumstances.  This could involve:\n\n* **Creating custom event listeners:**  You could create custom listeners to handle specific preloading events based on your application’s logic.\n* **Modifying the default selectors:** You can modify the selectors used by instant.page to target specific links based on your application's structure.\n* **Extending the library:** You could potentially extend the library’s functionality with your own custom code; however, this should only be undertaken with a thorough understanding of the codebase.\n\nAlways thoroughly test any advanced customizations to ensure they don’t negatively impact the overall functionality or performance of the library.  Refer to the source code for more details on the library's inner workings.\n\n\n## API Reference\n\n### `instantpage.on(eventName, callback)`\n\nAdds an event listener to instant.page.  This allows you to respond to various events during the preloading process.\n\n* **`eventName` (string):** The name of the event.  Possible events include: `'fetch'`, `'receive'`, `'render'`, `'error'`, `'cancel'`.\n* **`callback` (function):** A function to be executed when the specified event occurs.  The callback function receives event data as an argument, which varies depending on the event type.\n\n\n**Example:**\n\n```javascript\ninstantpage.on('fetch', (event) => {\n  console.log('Preloading started:', event.url);\n});\n\ninstantpage.on('receive', (event) => {\n  console.log('Preload complete:', event.url);\n});\n```\n\n\n### `instantpage.off(eventName, callback)`\n\nRemoves an event listener previously added using `instantpage.on()`.\n\n* **`eventName` (string):** The name of the event to remove the listener from.\n* **`callback` (function):** The specific callback function to remove.  If omitted, all listeners for the specified event are removed.\n\n\n**Example:**\n\n```javascript\nconst myFetchCallback = (event) => { console.log('My custom fetch callback', event) };\ninstantpage.on('fetch', myFetchCallback);\n// ... later ...\ninstantpage.off('fetch', myFetchCallback); // Removes only myFetchCallback\ninstantpage.off('fetch'); // Removes all listeners for 'fetch' event\n```\n\n\n### `instantpage.init()`\n\nManually initializes instant.page.  Generally, this is not necessary as instant.page automatically initializes when the script is included, but it's useful for advanced scenarios where you want to control the initialization timing.\n\n\n**Example:**\n\n```javascript\n// ... some other initialization code ...\ninstantpage.init();\n```\n\n\n### `instantpage.destroy()`\n\nCompletely removes instant.page from the page. This stops all preloading activity and removes any event listeners.  It's useful for cleaning up when the library is no longer needed.\n\n\n**Example:**\n\n```javascript\ninstantpage.destroy();\n```\n\n\n### `instantpage.config(options)`\n\nAllows you to change the configuration options after instant.page has been initialized.\n\n* **`options` (object):**  An object containing the configuration options to update. See the Configuration Options section for a list of available options.\n\n**Example:**\n\n```javascript\ninstantpage.config({ delay: 500, ignore: '.external-link' });\n```\n\n\n### `instantpage.preload(url)`\n\nManually initiates the preloading of a specific URL. This is useful for preloading pages that might not be detected automatically by instant.page.\n\n* **`url` (string):** The URL of the page to preload.\n\n**Example:**\n\n```javascript\ninstantpage.preload('/next-page');\n```\n\n\n### `instantpage.isPreloading()`\n\nReturns `true` if instant.page is currently preloading a page; otherwise, returns `false`. This can be useful to check the status of the preloading mechanism.\n\n**Example:**\n\n```javascript\nif (instantpage.isPreloading()) {\n  console.log('Currently preloading a page');\n}\n```\n\n\n## Best Practices and Recommendations\n\n### Optimizing for Performance\n\nThe effectiveness of instant.page is heavily influenced by several factors. Optimizing these aspects will maximize its benefits:\n\n* **Reduce HTML Size:**  Smaller HTML files are faster to download and process.  Minimize unnecessary elements, use efficient HTML structures, and compress your HTML before serving it to the user.\n* **Optimize Images and Assets:**  Large images and other assets can significantly impact preload times. Optimize images for web use (compress, use appropriate formats), and consider lazy-loading for images that are not immediately visible on the page.\n* **Efficient JavaScript:**  Avoid overly complex or inefficient JavaScript code, as it can impact the responsiveness and speed of your site.  Minimize JavaScript execution time during the initial page load and the preloading process.\n* **Leverage Browser Caching:**  Configure your web server to enable aggressive caching of static assets (CSS, JavaScript, images). This reduces the need to repeatedly download these resources.\n* **Use a CDN:**  Distribute your assets across a CDN to reduce latency for users geographically distant from your server.\n* **Monitor Performance:**  Regularly monitor your website's performance using browser developer tools or performance monitoring services to identify potential bottlenecks and areas for improvement.  Pay attention to metrics such as Time to First Byte (TTFB), First Contentful Paint (FCP), and Largest Contentful Paint (LCP).\n* **Resource Prioritization:** Prioritize loading critical resources first (HTML, main CSS) before less critical resources (images, secondary JS) to ensure a fast initial render.\n\n\n### Avoiding Common Pitfalls\n\n* **Conflicting JavaScript Libraries:**  Ensure instant.page doesn't conflict with other libraries, especially those that heavily manipulate the DOM or handle events (e.g., certain frameworks' routing libraries).  Test thoroughly for any unexpected behavior.\n* **Excessive Preloading:**  While preloading is beneficial, excessive preloading can consume unnecessary bandwidth and negatively impact performance.  Use the `requests` config option to control the number of simultaneous preloads.\n* **Ignoring `ignore` Option:**  Utilize the `ignore` option to exclude links that shouldn't be preloaded (e.g., external links, links to pages that don't benefit from preloading).\n* **Overly Short Delays:** Setting the `delay` and `threshold` too low can lead to unwanted preloads and potentially resource wastage.  Experiment to find optimal values.\n* **Incorrect Event Handling:** If using custom event handling, ensure your code is correct to prevent unexpected behavior or errors.\n* **Improper Integration:**  Ensure correct integration with your website's structure and code, paying attention to the placement of the instant.page script tag and any custom modifications.\n\n\n### Accessibility Considerations\n\nWhile instant.page primarily focuses on performance, its proper implementation doesn't negatively impact accessibility:\n\n* **Focus Management:** Ensure your website handles focus management correctly after instant page loads.  Proper focus management is critical for keyboard navigation.\n* **Screen Readers:**  Instant.page's preloading mechanism should not interfere with screen reader functionality.  Always prioritize proper semantic HTML structure and ARIA attributes.\n* **Testing:**  Test your website with assistive technologies (screen readers, keyboard navigation) to ensure instant.page does not introduce accessibility issues.\n\n\n### Security Best Practices\n\n* **Content Security Policy (CSP):**  Implement a robust CSP to mitigate potential security risks. Carefully configure your CSP to allow only trusted sources and resources.\n* **HTTPS:**  Ensure your website uses HTTPS to protect user data during the preloading and browsing process.\n* **Subresource Integrity (SRI):**  Utilize SRI to ensure the integrity of external resources (JavaScript, CSS) loaded by instant.page.  This protects against malicious code injection.\n* **Regular Security Audits:**  Perform regular security audits of your website to identify and address any potential vulnerabilities.\n* **Update instant.page:** Always keep the instant.page library updated to benefit from the latest security patches and performance improvements.\n\nRemember that while instant.page enhances performance, secure coding practices are crucial for the overall security of your website.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\nThis section outlines common problems encountered when using instant.page and their solutions:\n\n* **No Preloading:**  If instant.page isn't preloading links, check:\n    * **Script Placement:**  Ensure the instant.page script is correctly placed in the `<head>` of your HTML.\n    * **Conflicts:**  Check for conflicts with other JavaScript libraries that might interfere with event handling or DOM manipulation.\n    * **Configuration:**  Review your configuration options (e.g., `delay`, `threshold`, `ignore`).  Incorrect settings can prevent preloading.\n    * **Network Issues:**  Check your network connection and ensure your server is responding correctly.\n    * **Console Errors:** Inspect the browser's developer console for any error messages.\n\n* **Slow Preloading:** Slow preloading might be due to:\n    * **Large HTML Files:** Optimize your HTML for size and efficiency.\n    * **Large Assets:** Optimize images and other assets. Use compression and consider lazy loading.\n    * **Network Latency:**  A slow network connection can significantly impact preloading times. Use a CDN to improve performance.\n    * **Server-Side Issues:**  Investigate server-side bottlenecks or slow response times.\n\n* **Preloading Incorrect Links:**  If instant.page preloads the wrong links, check:\n    * **Selectors:**  Verify that the default selectors used by instant.page are appropriate for your website structure.  Use the `ignore` option to exclude unintended links.\n    * **JavaScript Conflicts:**  Other JavaScript libraries might interfere with link selection.\n\n\n* **Errors in Console:**  Error messages in the browser's console provide valuable clues:\n    * **Network Errors:**  Check for network-related errors (e.g., 404 Not Found, 500 Internal Server Error).  These indicate problems with your server or the requested resources.\n    * **JavaScript Errors:**  Address JavaScript errors that might be caused by conflicts with other libraries or incorrect code.\n\n* **No Visual Improvement:**  If you don't see significant performance improvement, consider:\n    * **Page Structure:**  Ensure your page structure is optimized for speed.\n    * **Resource Optimization:**  Aggressively optimize all assets (images, CSS, JS).\n    * **Caching:**  Properly configure caching on your server and browser.\n\n\n### Debugging Techniques\n\nEffective debugging involves using the browser's developer tools and instant.page's features:\n\n* **Browser Developer Tools:**  Use the Network tab to analyze network requests, identify slow-loading resources, and debug network errors.  The Console tab displays error messages and logs.\n* **`debug: true`:**  Enable the `debug` option in the instant.page configuration (`instantpage({ debug: true })`). This will print detailed logs to the console, providing insights into the preloading process.\n* **Event Listeners:**  Use `instantpage.on()` to add custom event listeners for `fetch`, `receive`, `render`, `error`, and `cancel` events.  This provides granular control over monitoring the preloading process and helps pinpoint issues.\n* **Simplify:** If you have a complex website, try isolating the problem by testing instant.page on a simpler page or section of your website. This helps determine whether the issue stems from your website structure or instant.page itself.\n* **Test on Different Browsers:**  Test your website on different browsers to ensure compatibility and identify browser-specific issues.\n\n\n### Error Handling and Reporting\n\ninstant.page provides the `error` event for handling preloading errors.  Use `instantpage.on('error', callback)` to register an error handler.  The callback function receives an event object with details about the error.\n\n**Example:**\n\n```javascript\ninstantpage.on('error', (errorEvent) => {\n  console.error('instant.page error:', errorEvent.error, errorEvent.url);\n  // Optionally, implement custom error reporting (e.g., sending error data to a server)\n});\n```\n\nFor more complex error handling, consider:\n\n* **Centralized Error Logging:** Implement a centralized system for logging and tracking errors, potentially using a service like Sentry or Rollbar. This provides a better overview of errors occurring across your site.\n* **User Feedback:**  Consider providing users with a mechanism (e.g., a feedback form) to report errors or performance issues.\n* **Detailed Error Reports:**  In your error logging, include as much information as possible, such as the browser, operating system, instant.page version, affected URL, and a stack trace if applicable. This helps in identifying patterns and diagnosing problems efficiently.\n\n\n\n\n## Contributing\n\n### Contributing to the Project\n\nContributions to instant.page are welcome!  Whether it's reporting bugs, suggesting features, or submitting code changes, your involvement helps improve the library for everyone.  Here's how you can contribute:\n\n1. **Report Bugs:**  If you encounter any bugs or unexpected behavior, please open an issue on the GitHub repository.  Provide clear and concise descriptions of the problem, including steps to reproduce it, browser information, and any relevant error messages.\n\n2. **Suggest Features:**  If you have ideas for new features or improvements, feel free to open an issue on GitHub proposing your suggestion.  Clearly explain the proposed feature, its benefits, and any potential drawbacks.\n\n3. **Submit Code Changes:**  For code contributions, follow these steps:\n    * **Fork the Repository:** Create a fork of the instant.page repository on GitHub.\n    * **Create a Branch:** Create a new branch for your changes. Use descriptive branch names (e.g., `fix-bug-123`, `feature-new-option`).\n    * **Make Your Changes:**  Implement your changes, adhering to the code style guide (see below).  Ensure your code is well-tested and documented.\n    * **Commit Your Changes:** Commit your changes with clear and concise commit messages.  Follow conventional commit message formatting (e.g., `fix: resolve issue #123`).\n    * **Create a Pull Request:**  Create a pull request on GitHub, linking it to the relevant issue (if applicable).  Clearly describe your changes and why they are beneficial.\n\n\n### Code Style Guide\n\ninstant.page follows a consistent code style to maintain readability and maintainability.  Adherence to the style guide is essential for all code contributions.\n\n* **JavaScript:**  The code uses a standard JavaScript style with consistent indentation (using 2 spaces), clear variable naming, and concise code.  Avoid unnecessary complexity.\n* **Comments:**  Comments should be clear, concise, and explain the purpose of the code, not simply restate the obvious.  Use JSDoc for documenting functions and classes.\n* **Linting:**  Before submitting code, run a linter (such as ESLint) to ensure your code adheres to the style guidelines. The project might have a `.eslintrc` file specifying the exact linting rules.\n\nDetailed style guidelines, including specific rules for naming conventions, comments, and formatting might be available within the repository (e.g., a `.editorconfig` file or a separate style guide document).\n\n### Testing and CI\n\nTesting is crucial for ensuring the quality and stability of instant.page. The project uses a comprehensive suite of tests to cover different aspects of the library's functionality.\n\n* **Test Framework:** The project likely uses a testing framework like Jest or Mocha.  Familiarize yourself with the project's testing infrastructure before submitting any code changes.\n* **Writing Tests:** When contributing code, write unit tests that thoroughly cover your changes.  These tests should aim for high code coverage.\n* **Continuous Integration (CI):**  The project employs CI (e.g., GitHub Actions, Travis CI, CircleCI) to automate the testing process.  Your pull requests will automatically be tested as part of the CI pipeline.  Ensuring your code passes all CI tests is vital before it can be merged.  \n\nIf specific testing guidelines or tools are used, they will be detailed within the project's documentation or README file.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is instant.page?\n\ninstant.page is a JavaScript library that preloads links on your website in the background, significantly reducing page load times for users.  It works by detecting user mouse movements and proactively fetching the HTML of the next page the user is likely to click. When the user clicks the link, the preloaded page is instantly displayed, creating a seamless and snappy browsing experience. This results in a perceived performance boost, leading to improved user satisfaction and potentially higher engagement.  Unlike other preloading solutions, instant.page focuses on being lightweight and unobtrusive, minimizing its impact on your site's performance and avoiding unnecessary resource consumption.\n\n\n### Key Features and Benefits\n\n* **Instantaneous Page Loads:**  Dramatically reduces perceived page load times by preloading links.\n* **Lightweight and Efficient:** Minimal impact on your website's performance and resource usage.\n* **Smart Preloading:**  Intelligently predicts which links the user is likely to click next, optimizing resource utilization.\n* **Easy Integration:** Simple installation and configuration, requiring minimal code changes.\n* **Customization Options:**  Allows for fine-grained control over preloading behavior through configuration settings.\n* **Improved User Experience:** Results in a faster, smoother, and more enjoyable browsing experience.\n* **Better SEO:** While not a direct ranking factor, faster loading times contribute positively to overall SEO performance.\n\n\n### Use Cases\n\ninstant.page is beneficial for a wide range of websites, including:\n\n* **Blogs and News Sites:**  Where users frequently navigate between articles.\n* **E-commerce Websites:**  To improve the browsing experience for product catalogs and shopping carts.\n* **Documentation Sites:**  To enable quick navigation between documentation pages.\n* **Internal Portals:**  To enhance the speed and efficiency of internal workflows.\n* **Websites with extensive internal linking:** Any site where users commonly click internal links will benefit from instant.page.\n\n\n### Getting Started: Installation and Setup\n\nThere are two primary methods for installing instant.page: using a CDN or via npm.\n\n**Method 1: CDN (Recommended for quick setup)**\n\nInclude the following `<script>` tag in the `<head>` of your HTML pages:\n\n```html\n<script src=\"https://instant.page/instantpage.js\" type=\"module\"></script>\n```\n\nThis will automatically load and initialize instant.page on your website.  You can start using it immediately.  Refer to the configuration section of the documentation for customization options.\n\n**Method 2: npm (For advanced users and project management)**\n\n1. Install the package:\n   ```bash\n   npm install instant.page\n   ```\n\n2. Import and initialize instant.page in your JavaScript code:\n\n   ```javascript\n   import instantpage from 'instant.page';\n\n   instantpage();\n   ```\n\nRemember to adjust the import path if your project structure differs.  This method allows for more control over the loading and configuration of instant.page, integrating it directly into your build process.  Consult the configuration section of the documentation for more advanced usage and configuration options.\n\n\n## Core Functionality\n\n### How instant.page Works\n\ninstant.page leverages the browser's built-in capabilities to prefetch resources without blocking the main thread.  It operates by monitoring user mouse movements. When the user's cursor hovers over a link for a specified duration (configurable), instant.page initiates a request to fetch the linked page's HTML in the background.  This happens discreetly, without impacting the user's current browsing experience.  Once the HTML is fetched, it's cached. When the user clicks the link, instant.page instantly renders the preloaded content, resulting in a near-instantaneous page transition. If the user doesn't click the link within a certain timeframe, or moves the mouse away, the prefetch is cancelled to avoid wasting resources.\n\nThe process relies on a combination of event listeners (mouse movements), resource fetching (using the browser's `fetch` API), and clever caching to minimize bandwidth consumption and maximize performance.  The library is designed to be lightweight and unobtrusive, ensuring it doesn't negatively impact your website's overall performance.\n\n### Preloading Mechanisms\n\ninstant.page uses several techniques to enhance its preloading effectiveness:\n\n* **Hover Detection:**  The primary mechanism.  It detects when the user's cursor hovers over a link for a specified duration, triggering the preloading process.\n* **Link Prediction:** The library prioritizes links that are deemed most likely to be clicked next based on user behavior patterns.  This helps focus preloading on the most beneficial resources.\n* **Resource Prioritization:** Preloading prioritizes the HTML first; only after it is successfully fetched, does instant.page start fetching other resources like CSS and JavaScript, if they are not already cached. This helps to get the page content to the user as quickly as possible, even with slow network connections.\n* **Intelligent Caching:**  The library intelligently caches preloaded pages to reduce redundant fetches.\n\n\n### Configuration Options\n\ninstant.page offers several configuration options to customize its behavior.  These options can be set by passing a configuration object to the `instantpage()` function (e.g., `instantpage({delay: 500})` ).  The most common options include:\n\n* **`delay` (number, milliseconds):** The delay (in milliseconds) before preloading begins after the cursor hovers over a link.  Defaults to 200ms.\n* **`threshold` (number):** The minimum time (in milliseconds) the cursor must hover over a link before preloading is initiated. Defaults to 200ms.\n* **`timeout` (number, milliseconds):** The maximum time allowed (in milliseconds) for a preload request to complete. Defaults to 2500ms.\n* **`ignore` (string|array of strings):**  CSS selector(s) to specify links that should be excluded from preloading.  This allows you to prevent preloading on specific links or types of links (e.g., external links, links to specific pages).\n* **`debug` (boolean):** Enables verbose logging to the browser's console for debugging purposes.  Defaults to `false`.\n* **`requests` (number):** Maximum simultaneous preload requests. Defaults to 5.\n* **`scrollDelay` (number):** Delay after the user scrolls before instant.page checks for new links to preload.\n\n\n### Event Handling and Callbacks\n\nWhile instant.page automatically handles most aspects of preloading, it provides callbacks for monitoring key events:\n\n* **`instantpage.on('fetch')`:** Triggered when a link's preload request is initiated.\n* **`instantpage.on('receive')`:** Triggered when the preload request is successful, and the HTML has been received.\n* **`instantpage.on('render')`:** Triggered when a preloaded page is rendered.\n* **`instantpage.on('error')`:** Triggered when a preload request fails.\n* **`instantpage.on('cancel')`:** Triggered when a preload request is cancelled (e.g., if the cursor moves away from the link).\n\nThese callbacks can be used to integrate custom functionality or to monitor the performance of the preloading process.\n\n\n### Customizing Preloading Behavior\n\nBeyond the configuration options, you can fine-tune instant.page's behavior through several techniques:\n\n* **Using the `ignore` option:** This provides a simple way to exclude links from preloading.\n* **Custom Event Listeners:** You can add your own event listeners to selectively trigger or inhibit preloading based on specific criteria (e.g., only preload links within specific containers).\n* **Advanced JavaScript:**  More advanced customization might require direct manipulation of instant.page's internal state, although this is generally discouraged unless absolutely necessary.   Refer to the source code and the API documentation for more details.\n\n\n## Advanced Usage\n\n### Integration with Other Libraries\n\ninstant.page is designed to be compatible with most JavaScript libraries and frameworks. However, potential conflicts might arise depending on how other libraries handle DOM manipulation or event handling.  Here are some considerations:\n\n* **Routing Libraries (e.g., React Router, Vue Router, Angular Router):**  Ensure that your routing library doesn't interfere with instant.page's link detection or event handling.  You might need to adjust event listeners or selectors to ensure compatibility.  In some cases, it might be necessary to integrate instant.page's functionality directly within your routing system's lifecycle.\n* **SPA Frameworks:**  instant.page works well with Single Page Applications (SPAs) by preloading entire pages.  However, it won't replace the SPA's internal routing mechanisms; instead, it improves navigation *between* pages on your site.  Consider how instant.page's preloading complements your SPA's internal client-side routing.\n* **Other Preloading Libraries:**  Avoid using instant.page concurrently with other preloading libraries to prevent conflicts and resource duplication.  instant.page is designed to be a comprehensive solution.\n\nThe best approach often involves carefully considering the interaction between instant.page and other libraries, ensuring that event handling and DOM manipulation are not conflicting.\n\n### Handling Different Content Types\n\nWhile instant.page primarily focuses on preloading HTML, it can indirectly improve performance for other content types:\n\n* **Images:**  Preloading HTML often involves fetching images as well, improving overall page load speed.  If you have large images or use lazy loading, consider optimizing image loading separately for best results.\n* **Videos:**  Similar to images, preloading HTML can initiate the download of video files if the video is included in the HTML.  For very large videos, consider using separate video preload mechanisms.\n* **Web Components:** instant.page handles web components in the same way as other HTML elements.  It preloads the entire page, including any web components present.\n* **Dynamically Loaded Content:**  Content loaded via JavaScript after the initial HTML render might not be preloaded. To address this, ensure that the crucial portions of your content are included within the initial HTML response.\n\n\n### Troubleshooting and Debugging\n\nDebugging instant.page issues usually involves checking the browser's developer console for errors and using the `debug` option.\n\n* **Check the Console:**  Look for errors in the browser's developer console (usually accessed by pressing F12).  Errors related to network requests, DOM manipulation, or JavaScript execution might indicate issues with instant.page's integration or configuration.\n* **Enable Debugging (`debug: true`):**  Adding `debug: true` to the instant.page configuration will print detailed logs to the console, showing the progress of preload requests and any issues encountered.  This is invaluable for diagnosing problems.\n* **Inspect Network Requests:**  Use your browser's developer tools to inspect the network requests made by instant.page.  This helps verify if preloading is initiated correctly and if resources are fetched successfully.\n* **Test with Different Browsers:**  Ensure instant.page works consistently across different browsers, as there might be minor compatibility differences.\n* **Check for Conflicts:**  If using other libraries, ensure there are no conflicts with instant.page's event listeners or DOM manipulation.\n\n### Performance Optimization\n\nTo maximize instant.page's performance, consider the following:\n\n* **Minimize HTML Size:**  Smaller HTML files translate to faster preloading times.  Optimize your HTML for size and efficiency.\n* **Optimize Images and Other Resources:**  Optimize your images and other assets to reduce their download size.  This will improve both the initial page load and the speed of preloading subsequent pages.\n* **Use a Content Delivery Network (CDN):**  Distribute your website's assets across multiple servers via a CDN to reduce latency and improve download speeds for users in different geographical locations.\n* **Cache Aggressively:**  Configure your web server and browser caching appropriately to reduce the need to repeatedly fetch the same resources.\n* **Monitor Performance:**  Regularly monitor the performance of instant.page using browser developer tools or performance monitoring services to identify bottlenecks and areas for improvement.\n\n\n### Advanced Configuration and Customization\n\nAdvanced customization of instant.page requires a deeper understanding of JavaScript and the library's internal workings.  While the provided configuration options are sufficient for most use cases, more advanced customization might be needed in exceptional circumstances.  This could involve:\n\n* **Creating custom event listeners:**  You could create custom listeners to handle specific preloading events based on your application’s logic.\n* **Modifying the default selectors:** You can modify the selectors used by instant.page to target specific links based on your application's structure.\n* **Extending the library:** You could potentially extend the library’s functionality with your own custom code; however, this should only be undertaken with a thorough understanding of the codebase.\n\nAlways thoroughly test any advanced customizations to ensure they don’t negatively impact the overall functionality or performance of the library.  Refer to the source code for more details on the library's inner workings.\n\n\n## API Reference\n\n### `instantpage.on(eventName, callback)`\n\nAdds an event listener to instant.page.  This allows you to respond to various events during the preloading process.\n\n* **`eventName` (string):** The name of the event.  Possible events include: `'fetch'`, `'receive'`, `'render'`, `'error'`, `'cancel'`.\n* **`callback` (function):** A function to be executed when the specified event occurs.  The callback function receives event data as an argument, which varies depending on the event type.\n\n\n**Example:**\n\n```javascript\ninstantpage.on('fetch', (event) => {\n  console.log('Preloading started:', event.url);\n});\n\ninstantpage.on('receive', (event) => {\n  console.log('Preload complete:', event.url);\n});\n```\n\n\n### `instantpage.off(eventName, callback)`\n\nRemoves an event listener previously added using `instantpage.on()`.\n\n* **`eventName` (string):** The name of the event to remove the listener from.\n* **`callback` (function):** The specific callback function to remove.  If omitted, all listeners for the specified event are removed.\n\n\n**Example:**\n\n```javascript\nconst myFetchCallback = (event) => { console.log('My custom fetch callback', event) };\ninstantpage.on('fetch', myFetchCallback);\n// ... later ...\ninstantpage.off('fetch', myFetchCallback); // Removes only myFetchCallback\ninstantpage.off('fetch'); // Removes all listeners for 'fetch' event\n```\n\n\n### `instantpage.init()`\n\nManually initializes instant.page.  Generally, this is not necessary as instant.page automatically initializes when the script is included, but it's useful for advanced scenarios where you want to control the initialization timing.\n\n\n**Example:**\n\n```javascript\n// ... some other initialization code ...\ninstantpage.init();\n```\n\n\n### `instantpage.destroy()`\n\nCompletely removes instant.page from the page. This stops all preloading activity and removes any event listeners.  It's useful for cleaning up when the library is no longer needed.\n\n\n**Example:**\n\n```javascript\ninstantpage.destroy();\n```\n\n\n### `instantpage.config(options)`\n\nAllows you to change the configuration options after instant.page has been initialized.\n\n* **`options` (object):**  An object containing the configuration options to update. See the Configuration Options section for a list of available options.\n\n**Example:**\n\n```javascript\ninstantpage.config({ delay: 500, ignore: '.external-link' });\n```\n\n\n### `instantpage.preload(url)`\n\nManually initiates the preloading of a specific URL. This is useful for preloading pages that might not be detected automatically by instant.page.\n\n* **`url` (string):** The URL of the page to preload.\n\n**Example:**\n\n```javascript\ninstantpage.preload('/next-page');\n```\n\n\n### `instantpage.isPreloading()`\n\nReturns `true` if instant.page is currently preloading a page; otherwise, returns `false`. This can be useful to check the status of the preloading mechanism.\n\n**Example:**\n\n```javascript\nif (instantpage.isPreloading()) {\n  console.log('Currently preloading a page');\n}\n```\n\n\n## Best Practices and Recommendations\n\n### Optimizing for Performance\n\nThe effectiveness of instant.page is heavily influenced by several factors. Optimizing these aspects will maximize its benefits:\n\n* **Reduce HTML Size:**  Smaller HTML files are faster to download and process.  Minimize unnecessary elements, use efficient HTML structures, and compress your HTML before serving it to the user.\n* **Optimize Images and Assets:**  Large images and other assets can significantly impact preload times. Optimize images for web use (compress, use appropriate formats), and consider lazy-loading for images that are not immediately visible on the page.\n* **Efficient JavaScript:**  Avoid overly complex or inefficient JavaScript code, as it can impact the responsiveness and speed of your site.  Minimize JavaScript execution time during the initial page load and the preloading process.\n* **Leverage Browser Caching:**  Configure your web server to enable aggressive caching of static assets (CSS, JavaScript, images). This reduces the need to repeatedly download these resources.\n* **Use a CDN:**  Distribute your assets across a CDN to reduce latency for users geographically distant from your server.\n* **Monitor Performance:**  Regularly monitor your website's performance using browser developer tools or performance monitoring services to identify potential bottlenecks and areas for improvement.  Pay attention to metrics such as Time to First Byte (TTFB), First Contentful Paint (FCP), and Largest Contentful Paint (LCP).\n* **Resource Prioritization:** Prioritize loading critical resources first (HTML, main CSS) before less critical resources (images, secondary JS) to ensure a fast initial render.\n\n\n### Avoiding Common Pitfalls\n\n* **Conflicting JavaScript Libraries:**  Ensure instant.page doesn't conflict with other libraries, especially those that heavily manipulate the DOM or handle events (e.g., certain frameworks' routing libraries).  Test thoroughly for any unexpected behavior.\n* **Excessive Preloading:**  While preloading is beneficial, excessive preloading can consume unnecessary bandwidth and negatively impact performance.  Use the `requests` config option to control the number of simultaneous preloads.\n* **Ignoring `ignore` Option:**  Utilize the `ignore` option to exclude links that shouldn't be preloaded (e.g., external links, links to pages that don't benefit from preloading).\n* **Overly Short Delays:** Setting the `delay` and `threshold` too low can lead to unwanted preloads and potentially resource wastage.  Experiment to find optimal values.\n* **Incorrect Event Handling:** If using custom event handling, ensure your code is correct to prevent unexpected behavior or errors.\n* **Improper Integration:**  Ensure correct integration with your website's structure and code, paying attention to the placement of the instant.page script tag and any custom modifications.\n\n\n### Accessibility Considerations\n\nWhile instant.page primarily focuses on performance, its proper implementation doesn't negatively impact accessibility:\n\n* **Focus Management:** Ensure your website handles focus management correctly after instant page loads.  Proper focus management is critical for keyboard navigation.\n* **Screen Readers:**  Instant.page's preloading mechanism should not interfere with screen reader functionality.  Always prioritize proper semantic HTML structure and ARIA attributes.\n* **Testing:**  Test your website with assistive technologies (screen readers, keyboard navigation) to ensure instant.page does not introduce accessibility issues.\n\n\n### Security Best Practices\n\n* **Content Security Policy (CSP):**  Implement a robust CSP to mitigate potential security risks. Carefully configure your CSP to allow only trusted sources and resources.\n* **HTTPS:**  Ensure your website uses HTTPS to protect user data during the preloading and browsing process.\n* **Subresource Integrity (SRI):**  Utilize SRI to ensure the integrity of external resources (JavaScript, CSS) loaded by instant.page.  This protects against malicious code injection.\n* **Regular Security Audits:**  Perform regular security audits of your website to identify and address any potential vulnerabilities.\n* **Update instant.page:** Always keep the instant.page library updated to benefit from the latest security patches and performance improvements.\n\nRemember that while instant.page enhances performance, secure coding practices are crucial for the overall security of your website.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\nThis section outlines common problems encountered when using instant.page and their solutions:\n\n* **No Preloading:**  If instant.page isn't preloading links, check:\n    * **Script Placement:**  Ensure the instant.page script is correctly placed in the `<head>` of your HTML.\n    * **Conflicts:**  Check for conflicts with other JavaScript libraries that might interfere with event handling or DOM manipulation.\n    * **Configuration:**  Review your configuration options (e.g., `delay`, `threshold`, `ignore`).  Incorrect settings can prevent preloading.\n    * **Network Issues:**  Check your network connection and ensure your server is responding correctly.\n    * **Console Errors:** Inspect the browser's developer console for any error messages.\n\n* **Slow Preloading:** Slow preloading might be due to:\n    * **Large HTML Files:** Optimize your HTML for size and efficiency.\n    * **Large Assets:** Optimize images and other assets. Use compression and consider lazy loading.\n    * **Network Latency:**  A slow network connection can significantly impact preloading times. Use a CDN to improve performance.\n    * **Server-Side Issues:**  Investigate server-side bottlenecks or slow response times.\n\n* **Preloading Incorrect Links:**  If instant.page preloads the wrong links, check:\n    * **Selectors:**  Verify that the default selectors used by instant.page are appropriate for your website structure.  Use the `ignore` option to exclude unintended links.\n    * **JavaScript Conflicts:**  Other JavaScript libraries might interfere with link selection.\n\n\n* **Errors in Console:**  Error messages in the browser's console provide valuable clues:\n    * **Network Errors:**  Check for network-related errors (e.g., 404 Not Found, 500 Internal Server Error).  These indicate problems with your server or the requested resources.\n    * **JavaScript Errors:**  Address JavaScript errors that might be caused by conflicts with other libraries or incorrect code.\n\n* **No Visual Improvement:**  If you don't see significant performance improvement, consider:\n    * **Page Structure:**  Ensure your page structure is optimized for speed.\n    * **Resource Optimization:**  Aggressively optimize all assets (images, CSS, JS).\n    * **Caching:**  Properly configure caching on your server and browser.\n\n\n### Debugging Techniques\n\nEffective debugging involves using the browser's developer tools and instant.page's features:\n\n* **Browser Developer Tools:**  Use the Network tab to analyze network requests, identify slow-loading resources, and debug network errors.  The Console tab displays error messages and logs.\n* **`debug: true`:**  Enable the `debug` option in the instant.page configuration (`instantpage({ debug: true })`). This will print detailed logs to the console, providing insights into the preloading process.\n* **Event Listeners:**  Use `instantpage.on()` to add custom event listeners for `fetch`, `receive`, `render`, `error`, and `cancel` events.  This provides granular control over monitoring the preloading process and helps pinpoint issues.\n* **Simplify:** If you have a complex website, try isolating the problem by testing instant.page on a simpler page or section of your website. This helps determine whether the issue stems from your website structure or instant.page itself.\n* **Test on Different Browsers:**  Test your website on different browsers to ensure compatibility and identify browser-specific issues.\n\n\n### Error Handling and Reporting\n\ninstant.page provides the `error` event for handling preloading errors.  Use `instantpage.on('error', callback)` to register an error handler.  The callback function receives an event object with details about the error.\n\n**Example:**\n\n```javascript\ninstantpage.on('error', (errorEvent) => {\n  console.error('instant.page error:', errorEvent.error, errorEvent.url);\n  // Optionally, implement custom error reporting (e.g., sending error data to a server)\n});\n```\n\nFor more complex error handling, consider:\n\n* **Centralized Error Logging:** Implement a centralized system for logging and tracking errors, potentially using a service like Sentry or Rollbar. This provides a better overview of errors occurring across your site.\n* **User Feedback:**  Consider providing users with a mechanism (e.g., a feedback form) to report errors or performance issues.\n* **Detailed Error Reports:**  In your error logging, include as much information as possible, such as the browser, operating system, instant.page version, affected URL, and a stack trace if applicable. This helps in identifying patterns and diagnosing problems efficiently.\n\n\n\n\n## Contributing\n\n### Contributing to the Project\n\nContributions to instant.page are welcome!  Whether it's reporting bugs, suggesting features, or submitting code changes, your involvement helps improve the library for everyone.  Here's how you can contribute:\n\n1. **Report Bugs:**  If you encounter any bugs or unexpected behavior, please open an issue on the GitHub repository.  Provide clear and concise descriptions of the problem, including steps to reproduce it, browser information, and any relevant error messages.\n\n2. **Suggest Features:**  If you have ideas for new features or improvements, feel free to open an issue on GitHub proposing your suggestion.  Clearly explain the proposed feature, its benefits, and any potential drawbacks.\n\n3. **Submit Code Changes:**  For code contributions, follow these steps:\n    * **Fork the Repository:** Create a fork of the instant.page repository on GitHub.\n    * **Create a Branch:** Create a new branch for your changes. Use descriptive branch names (e.g., `fix-bug-123`, `feature-new-option`).\n    * **Make Your Changes:**  Implement your changes, adhering to the code style guide (see below).  Ensure your code is well-tested and documented.\n    * **Commit Your Changes:** Commit your changes with clear and concise commit messages.  Follow conventional commit message formatting (e.g., `fix: resolve issue #123`).\n    * **Create a Pull Request:**  Create a pull request on GitHub, linking it to the relevant issue (if applicable).  Clearly describe your changes and why they are beneficial.\n\n\n### Code Style Guide\n\ninstant.page follows a consistent code style to maintain readability and maintainability.  Adherence to the style guide is essential for all code contributions.\n\n* **JavaScript:**  The code uses a standard JavaScript style with consistent indentation (using 2 spaces), clear variable naming, and concise code.  Avoid unnecessary complexity.\n* **Comments:**  Comments should be clear, concise, and explain the purpose of the code, not simply restate the obvious.  Use JSDoc for documenting functions and classes.\n* **Linting:**  Before submitting code, run a linter (such as ESLint) to ensure your code adheres to the style guidelines. The project might have a `.eslintrc` file specifying the exact linting rules.\n\nDetailed style guidelines, including specific rules for naming conventions, comments, and formatting might be available within the repository (e.g., a `.editorconfig` file or a separate style guide document).\n\n### Testing and CI\n\nTesting is crucial for ensuring the quality and stability of instant.page. The project uses a comprehensive suite of tests to cover different aspects of the library's functionality.\n\n* **Test Framework:** The project likely uses a testing framework like Jest or Mocha.  Familiarize yourself with the project's testing infrastructure before submitting any code changes.\n* **Writing Tests:** When contributing code, write unit tests that thoroughly cover your changes.  These tests should aim for high code coverage.\n* **Continuous Integration (CI):**  The project employs CI (e.g., GitHub Actions, Travis CI, CircleCI) to automate the testing process.  Your pull requests will automatically be tested as part of the CI pipeline.  Ensuring your code passes all CI tests is vital before it can be merged.  \n\nIf specific testing guidelines or tools are used, they will be detailed within the project's documentation or README file.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"instantpage.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"instant.page - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}