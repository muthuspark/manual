---
title: "Parsley.js - A Developer's Handbook"
categories: [ "JavaScript Libraries and Functions" ]
---
## Introduction to Parsley.js

### What is Parsley.js?

Parsley.js is a lightweight, unobtrusive JavaScript library for form validation.  It leverages HTML5's built-in validation features but extends them significantly, providing a flexible and powerful way to manage form validation with minimal code.  It works by attaching itself to your existing forms, dynamically adding validation rules and feedback mechanisms without requiring major structural changes to your HTML.  Parsley.js focuses on ease of use and a clean, developer-friendly API.

### Why use Parsley.js?

Using Parsley.js offers several advantages:

* **Simplified Validation:**  Reduce boilerplate code compared to writing validation logic from scratch. Parsley.js handles much of the complexity involved in validating user input.
* **Improved User Experience:** Provide real-time feedback to users about the validity of their input, guiding them towards correct submission.
* **Easy Integration:**  Seamlessly integrates with existing projects with minimal setup required. It works well with various frameworks and libraries.
* **Extensible:** Parsley.js allows for the creation of custom validators to meet specific application requirements.
* **HTML5 Compliance:** Leverages native HTML5 form validation features for better browser compatibility and accessibility.
* **Accessibility:**  Provides accessible validation messages for users with disabilities.


### Key Features

* **Declarative Validation:** Define validation rules directly in your HTML using data attributes.
* **Real-time Feedback:** Provides immediate visual feedback to the user as they interact with the form.
* **Customizable Messages:**  Easily customize error messages to match your application's style and language.
* **Remote Validation:**  Support for validating input against a remote server.
* **Asynchronous Validation:** Handle asynchronous validation tasks, such as checking for unique usernames.
* **Multiple Triggers:**  Define different triggers for validation (e.g., `blur`, `change`, `submit`).
* **Easy to Extend:** Add custom validators and constraints to handle unique validation scenarios.
* **Lightweight and Fast:** Minimal impact on your application's performance.


### Setting up Parsley.js

There are several ways to include Parsley.js in your project:

* **CDN:**  The easiest way is to include Parsley.js via a CDN link in your HTML `<head>`:

```html
<script src="https://cdnjs.cloudflare.com/ajax/libs/parsley.js/2.9.2/parsley.min.js"></script>
```

* **NPM:** If you're using a Node.js-based workflow, you can install Parsley.js using npm:

```bash
npm install parsleyjs
```

Then, include it in your project using a module bundler like Webpack or Parcel.

* **Download:** Download the library directly from the Parsley.js website and include it locally.

Once included, Parsley.js will automatically initialize on forms with the `data-parsley-validate` attribute:

```html
<form data-parsley-validate>
  <!-- Your form fields here -->
</form>
```

Alternatively, you can initialize Parsley.js manually:

```javascript
$('form').parsley();
```

This will enable Parsley.js validation on all forms in your document.  More detailed initialization options and configuration are covered in subsequent sections.


## Basic Validation

### Adding Parsley to your forms

Parsley.js can be added to your forms in two primary ways: automatically or manually.

**Automatic Initialization:**  The simplest approach is to add the `data-parsley-validate` attribute to your `<form>` element.  Parsley.js will automatically detect and initialize validation on any form with this attribute.

```html
<form data-parsley-validate>
  <input type="text" name="name" required>
  <button type="submit">Submit</button>
</form>
```

**Manual Initialization:** For more control, you can initialize Parsley.js manually using JavaScript. This is useful if you need to customize initialization options or apply validation to forms dynamically.

```javascript
// Using jQuery (recommended)
$('form').parsley();

// Using plain JavaScript
const forms = document.querySelectorAll('form');
forms.forEach(form => Parsley.addForm(form));
```


### Defining Validation Rules

Validation rules are defined using data attributes on your input fields.  The attribute name follows the pattern `data-parsley-*`, where `*` represents the constraint name (e.g., `required`, `min`, `max`, etc.).  The value of the attribute specifies the constraint's parameter.

```html
<input type="text" name="name" data-parsley-required data-parsley-length="[3, 20]">
<input type="email" name="email" data-parsley-type="email">
```

In this example:

* `data-parsley-required` makes the field required.
* `data-parsley-length="[3, 20]"` specifies that the field must have a length between 3 and 20 characters.
* `data-parsley-type="email"` ensures the field contains a valid email address.

You can combine multiple constraints on a single field.


### Built-in Validation Constraints

Parsley.js provides a range of built-in validation constraints:

* `required`:  The field must have a value.
* `type`:  Validates the input type (e.g., "email", "number", "url").
* `length`:  Specifies the minimum and maximum length of the input (e.g., `[3, 20]`).
* `min`:  Specifies the minimum value for numeric or date inputs.
* `max`:  Specifies the maximum value for numeric or date inputs.
* `range`: Specifies the allowed range for numeric inputs (e.g., `[10, 100]`).
* `pattern`:  Validates the input against a regular expression.
* `equalto`:  Checks if the field value matches another field's value.
* `minwords`: Minimum number of words.
* `maxwords`: Maximum number of words.
* `minlength`: Minimum number of characters.
* `maxlength`: Maximum number of characters.


### Custom Validation Constraints

For validation needs not covered by built-in constraints, you can create custom constraints.  This involves defining a JavaScript function that performs the validation logic and registering it with Parsley.js.

```javascript
Parsley.addValidator('customValidator', {
  validateString: function(value) {
    return value.length > 10;
  },
  messages: {
    en: 'Value must be longer than 10 characters'
  }
});
```

Then, use the custom constraint in your form:

```html
<input type="text" name="customField" data-parsley-custom-validator>
```


### Working with different input types

Parsley.js supports various input types, automatically applying appropriate validation rules based on the type.  For example, `type="email"` triggers email validation, `type="number"` enables numeric validation, and so on.  You can still override or add constraints using data attributes as needed.


### Real-time validation

By default, Parsley.js performs validation on input `blur` (when the input loses focus) and on form submission.  However, you can adjust the validation trigger using the `data-parsley-trigger` attribute.

```html
<input type="text" name="name" data-parsley-required data-parsley-trigger="keyup">
```

This example triggers validation on every keyup event, providing immediate feedback to the user.  Other possible trigger values include `focus`, `change`, and a combination of triggers (e.g., `focus blur`).


## Advanced Validation Techniques

### Conditional Validation

Conditional validation allows you to apply validation rules based on the values of other fields or the state of the form.  This is achieved using the `data-parsley-required-if`, `data-parsley-required-if-checked`, and similar attributes, which can reference other fields using their selectors.

```html
<input type="checkbox" id="newsletter" name="newsletter"> Subscribe to Newsletter
<input type="text" id="email" name="email" data-parsley-required-if="#newsletter:checked">
```

In this example, the `email` field becomes required only if the `newsletter` checkbox is checked.  Other conditional attributes include `data-parsley-required-if-value`, `data-parsley-min`, `data-parsley-max`,  and more, allowing sophisticated conditional logic.


### Remote Validation

Parsley.js supports remote validation, where the validity of an input is checked against a server-side script. This is particularly useful for checking for unique usernames, verifying email addresses, or performing other server-dependent checks.  Use the `data-parsley-remote` attribute to specify the URL of the remote validation script.

```html
<input type="text" name="username" data-parsley-remote="/api/check-username">
```

The remote script should return a JSON response with a `valid` property (true or false).


### Asynchronous Validation

Asynchronous validation handles validation tasks that require time, such as making API calls. Parsley.js seamlessly integrates with asynchronous validation through the `data-parsley-remote` attribute and promises. The `ParsleyField.asyncValidate` method gives more control over asynchronous validation processes.

```javascript
// Example using a promise
const usernameField = $('#username');
usernameField.on('parsley:field:validate', function() {
  const promise = new Promise((resolve, reject) => {
    setTimeout(() => {
      const isValid = checkUsernameAvailability(usernameField.val()); // Your check function
      resolve(isValid);
    }, 1000); // Simulate delay
  });
  usernameField.parsley().asyncValidate(promise);
});


```

### Dynamically Adding/Removing Rules

You can add or remove validation rules dynamically using JavaScript. This is useful in scenarios where validation requirements change based on user interaction or other events.

```javascript
// Add a required rule
$('#myField').parsley().addConstraint('required', true);

// Remove a rule
$('#myField').parsley().removeConstraint('required');

// Update an existing constraint
$('#myField').parsley().updateConstraint('length', '[5, 10]');
```


### Handling Validation Errors

Parsley.js provides several ways to handle validation errors:

* **Default Error Messages:** Parsley.js automatically displays default error messages near invalid fields.
* **Custom Error Messages:** Customize error messages using the `data-parsley-*` attributes.
* **Error Events:** Listen for Parsley events (e.g. `parsley:field:error`, `parsley:form:error`) to trigger custom error handling logic.
* **Programmatic Access to Errors:**  Use the Parsley API to access validation errors programmatically for custom error reporting or UI updates.


### Internationalization

Parsley.js supports internationalization through the use of message files.  You can create separate message files for different languages and load them dynamically based on the user's locale.  Parsley.js uses `i18n` for this purpose.  You will typically define a `messages` object within your custom validators or utilize existing translations available from Parsley.js or community contributions.  This involves defining a mapping of constraint names to translated messages for each language.  Parsley.js then uses the user’s locale (usually automatically determined, or explicitly set) to select the appropriate message file.


## Form Submission and Events

### Preventing Default Form Submission

By default, Parsley.js prevents the default form submission behavior if the form is invalid.  This prevents the form from being submitted to the server until all validation rules are met.  This behavior is typically desired, ensuring data integrity. However, you might need to control this behavior in certain circumstances.

To override this default behavior and allow submission even with validation errors, set the `data-parsley-trigger` attribute to `submit` only, preventing other triggers from interfering. If the form is invalid, the `parsley:form:submit` event will still fire, allowing you to handle invalid form submission in your custom logic.

```html
<form data-parsley-validate data-parsley-trigger="submit">
  <!-- Your form fields here -->
</form>
```

Alternatively, you can handle the form submission event using JavaScript and manually prevent the default action.


### Handling Form Submission Events

Parsley.js provides several events related to form submission that you can use to customize the submission process.  The most relevant events are:

* `parsley:form:init`: Fired when the Parsley form instance is initialized.
* `parsley:form:validated`: Fired after all fields in the form have been validated.  The form's validity status is available via the `isValid()` method.
* `parsley:form:submit`: Fired when the form is submitted (whether valid or invalid). The event object includes the form instance and the validity status. This is the event you should typically handle to perform actions after validation is complete.
* `parsley:form:error`: Fired when the form validation fails.
* `parsley:form:success`: Fired when the form validation succeeds.

```javascript
$('form').on('parsley:form:submit', function (event) {
  if (event.parsley.isValid()) {
    // Perform submission actions (e.g., AJAX call)
    alert('Form submitted successfully!');
  } else {
    // Handle validation errors
    alert('Form contains errors. Please correct them.');
    // Optionally prevent default submission
    event.preventDefault();
  }
});
```


### Customizing Submission Behavior

You can fully customize form submission behavior using the events described above.  For instance, you can:

*  Replace the default submission with a custom AJAX call (see the next section).
*  Perform additional validation steps before submitting the form.
*  Display custom success or error messages.
*  Implement custom animations or UI updates.


### Working with AJAX

Parsley.js works well with AJAX.  Instead of relying on the default form submission, you can handle the `parsley:form:submit` event and perform an AJAX request to submit the form data asynchronously:


```javascript
$('form').on('parsley:form:submit', function (event) {
  if (event.parsley.isValid()) {
    $.ajax({
      type: 'POST',
      url: '/submit-form',
      data: $(this).serialize(),
      success: function(response) {
        // Handle successful submission
        alert('Form submitted successfully!');
      },
      error: function(error) {
        // Handle submission errors
        alert('Error submitting form: ' + error.responseText);
      }
    });
    event.preventDefault(); // Prevent default form submission
  }
});
```


### Integration with other Javascript libraries

Parsley.js is designed to work well with other JavaScript libraries.  It doesn't impose any specific framework requirements and integrates easily with:

* **jQuery:** Parsley.js's API is built on jQuery, which is recommended for ease of use and integration.  However it's not strictly required; the library can also be used with plain Javascript.
* **Other frameworks (React, Vue, Angular):** Parsley.js can be integrated with any framework through its plain JavaScript API or with suitable adapters or wrappers.  The key is to include Parsley.js and then use its API to initialize and manage validation within the framework's lifecycle.  In these frameworks, you might use different methods for event handling and DOM manipulation than shown in the jQuery examples above.
* **UI frameworks (Bootstrap, Materialize):** Parsley.js adapts to most UI frameworks.  Its styling can be customized to work with any existing CSS framework.  The core functionality of Parsley.js remains independent of the visual theme.




## API Reference

This section provides a comprehensive overview of the Parsley.js API, including methods, options, events, and utility functions.  For detailed information and examples, refer to the full API documentation on the Parsley.js website.


### Parsley Instance Methods

Parsley.js provides several methods for interacting with Parsley instances (forms and fields).  Key methods include:

* `validate()`:  Triggers validation for a Parsley instance.
* `isValid()`:  Returns `true` if the instance is valid, `false` otherwise.
* `reset()`:  Resets the validation state of a Parsley instance, clearing errors and resetting the validity status.
* `destroy()`: Removes Parsley from a form or field.
* `addError(errorMessage)`: Adds a custom error message to a field.
* `removeError(errorMessage)`: Removes a specific error message.
* `getErrors()`: Returns an array of error messages.
* `updateConstraint(name, value)`: Updates the value of an existing constraint.
* `addConstraint(name, value, priority)`: Adds a new constraint to a field.
* `removeConstraint(name)`: Removes a constraint from a field.
* `asyncValidate(promise)`:  Performs asynchronous validation using a promise.


These methods can be called on both `ParsleyForm` instances (for forms) and `ParsleyField` instances (for individual fields).  For example:

```javascript
// On a form:
$('form').parsley().validate();

// On a field:
$('#myField').parsley().addError('Custom error message');
```


### Parsley Options

Parsley.js offers various options for configuring its behavior. These options can be set globally or on individual forms.  Key options include:

* `trigger`: Specifies the events that trigger validation (e.g., "focusin", "change", "keyup").
* `focus`: Controls whether to focus on the first invalid field after validation.
* `priorityEnabled`: Enables/disables constraint priority.
* `excluded`:  A CSS selector specifying elements to exclude from validation.
* `errorClass`: The CSS class applied to invalid fields.
* `successClass`: The CSS class applied to valid fields.
* `classHandler`: A custom function for handling the addition and removal of CSS classes.
* `errorsWrapper`: A CSS selector specifying the element to wrap error messages in.
* `errorsContainer`:  A CSS selector specifying where to place error messages.
* `errorMessage`: A function that generates error messages.
* `messages`: An object containing custom error messages for different languages.


Options can be set globally using `Parsley.options` or locally on a form using data attributes (e.g., `data-parsley-trigger="change"`).


### Parsley Events

Parsley.js triggers numerous events throughout its lifecycle.  These events allow you to hook into various stages of the validation process and customize behavior.  Some important events include:

* `parsley:field:init`:  Fired when a field is initialized.
* `parsley:field:validate`: Fired before a field's validation.
* `parsley:field:validated`: Fired after a field's validation.
* `parsley:field:success`: Fired when a field is valid.
* `parsley:field:error`: Fired when a field is invalid.
* `parsley:form:init`: Fired when a form is initialized.
* `parsley:form:validated`: Fired after form validation.
* `parsley:form:submit`: Fired before a form is submitted (whether valid or invalid).
* `parsley:form:success`: Fired when a form is valid and about to be submitted.
* `parsley:form:error`: Fired when a form is invalid.


These events can be listened to using jQuery's `on` method or the standard `addEventListener` method:


```javascript
$('form').on('parsley:form:validated', function() {
  // Handle form validation
});
```


### Parsley Constraint API

The Parsley constraint API allows you to define and manage validation constraints.  You can access existing constraints, add custom constraints, and control constraint priority.  Key methods include `addValidator`, `removeValidator`, `getValidators`, `addConstraint`, `removeConstraint`, and `updateConstraint`.  This API provides fine-grained control over the validation rules applied to fields.


### Utility Functions

Parsley.js provides a few utility functions for common tasks:

* `Parsley.Utils.trim`:  Trims whitespace from a string.
* `Parsley.Utils.attr`:  Gets the value of an attribute, handling potential null values gracefully.
* `Parsley.Utils.setAttr`: Sets the value of an attribute.
* `Parsley.Utils.parseRequirement`: Parses validation requirements from data attributes.


These functions can be helpful for custom validation logic or other tasks related to Parsley.js.  Consult the official documentation for detailed usage examples.



## Best Practices and Troubleshooting

### Improving Performance

Parsley.js is designed to be lightweight and efficient, but certain practices can further enhance its performance:

* **Minimize unnecessary validations:** Avoid triggering validation too frequently. Use appropriate `data-parsley-trigger` values to optimize validation timing.  Real-time validation on every keystroke (`keyup`) can be resource-intensive; consider using `blur` or `change` for less frequent updates.
* **Optimize selectors:** Use specific selectors in your JavaScript code to target Parsley instances efficiently. Avoid using overly broad selectors that could slow down the process of finding elements.
* **Use efficient data attributes:** Avoid using excessive or unnecessarily complex data attributes.  Keep your validation rules concise and well-organized.
* **Limit the scope of validation:**  If only a portion of your form requires validation, apply Parsley.js only to that specific section rather than the entire form.  This reduces the amount of processing required.
* **Lazy loading:** If your page includes numerous forms, consider lazy loading Parsley.js or deferring its loading until it's actually needed. This prevents the browser from unnecessarily loading and processing Parsley.js if parts of the page don't utilize form validation.
* **Minify and compress Parsley.js:** Use a minification tool to reduce the file size of Parsley.js before deploying your application. This can improve loading times.


### Debugging Parsley.js

If you encounter issues, several techniques can aid in debugging Parsley.js:

* **Browser's developer tools:** Utilize your browser's developer tools (usually accessible by pressing F12) to inspect the console for error messages and warnings.  Parsley.js often provides informative error messages that pinpoint the problem.
* **Debugging with console.log():** Strategically place `console.log()` statements in your code to inspect the values of variables and track the execution flow.  This can be helpful in understanding why certain validations are failing.
* **Examine the Parsley instance:** Access the Parsley instance for forms and fields using the JavaScript API. Inspect properties like `isValid()`, `getErrors()`, and the constraints defined on the instance to investigate the validation state.
* **Check Parsley's source code:** If necessary, consult Parsley.js's source code (available on GitHub) to gain a better understanding of its internal workings.  This may be needed to understand more complex scenarios.


### Common Issues and Solutions

* **Validation not working:** Verify that Parsley.js is correctly included in your project, forms have the `data-parsley-validate` attribute (or are manually initialized), and validation rules are correctly defined using data attributes. Check your browser's console for errors.
* **Incorrect error messages:** Ensure that error messages are correctly defined, using appropriate language keys if internationalization is used. Check for typos in your messages or incorrect usage of message placeholders.
* **Conditional validation not triggering:** Double-check the selectors used in conditional validation attributes (e.g., `data-parsley-required-if`) and ensure they accurately target the elements influencing the conditional rules.
* **Asynchronous validation issues:** When using asynchronous validation, confirm that your promises are resolving correctly and providing appropriate validation results (true/false).  Handle promise rejection appropriately and log errors for debugging.
* **Styling issues:**  Inspect your CSS to ensure that it doesn't conflict with Parsley.js's default styling.  Use browser developer tools to determine if there's any CSS that's overriding or interfering with the error message presentation.



### Tips for Maintainability

* **Use consistent naming conventions:** Maintain consistent naming conventions for your fields and validation rules to make your code easier to understand and maintain.
* **Organize your validation rules:** Organize your validation rules logically, grouping related rules together, to improve readability.  Consider using separate JavaScript files to manage complex validation logic.
* **Document your validation rules:** Add comments to your HTML and JavaScript code to clearly explain the purpose and behavior of your validation rules. This is essential for long-term maintainability, especially when other developers are involved.
* **Use version control:** Employ a version control system (like Git) to track changes to your code and easily revert to previous versions if needed.


### Security Considerations

* **Sanitize user inputs:** Always sanitize user inputs on the server-side to prevent cross-site scripting (XSS) and other vulnerabilities.  Never rely solely on client-side validation for security.
* **Avoid exposing sensitive information:**  Don't expose sensitive data (passwords, API keys, etc.) in your client-side code, including the error messages or any data sent via AJAX.
* **Use HTTPS:**  Always use HTTPS to encrypt communication between the client and server, protecting sensitive data transmitted during form submissions.
* **Regular updates:** Keep Parsley.js updated to the latest version to benefit from security patches and bug fixes.  Regular updates improve security posture and improve performance.
* **Input validation on the server:** Never solely depend on client-side validation; always validate user input on the server-side to protect against malicious inputs or manipulation.  Client-side validation improves user experience but is not a security measure.



## Extending Parsley.js

Parsley.js is designed to be extensible, allowing developers to customize its behavior and add new features.  This section explains how to create custom constraints, add custom validators, extend core functionality, and contribute to the Parsley.js project itself.


### Creating Custom Constraints

Custom constraints extend Parsley.js by adding new validation rules.  They're defined using the `Parsley.addValidator` method, providing a validation function and associated messages.

```javascript
Parsley.addValidator('customConstraint', {
    validateString: function(value, requirement) {
        // Your validation logic here.  'requirement' is the value specified in the data attribute.
        return value.length >= requirement;
    },
    requirementType: 'integer', // Specify the type of requirement (optional)
    messages: {
        en: 'Value must be at least %s characters long'
    }
});
```

This code defines a constraint named "customConstraint" that checks if a string's length is greater than or equal to a specified requirement. The `requirementType` defines the type of data expected for the requirement (here, an integer). The `messages` object contains localized error messages.  You can then use this constraint in your form:

```html
<input type="text" name="myField" data-parsley-custom-constraint="10">
```


### Adding Custom Validators

Custom validators extend Parsley.js by adding new validation functions. They're also defined using `Parsley.addValidator`, but instead of focusing on a specific constraint, you define a more general validation function.

```javascript
Parsley.addValidator('isEven', {
  validateString: function(value) {
    return parseInt(value) % 2 === 0;
  },
  messages: {
    en: 'Value must be an even number'
  }
});
```

This creates a validator named `isEven` that checks if a value is an even number.  You use it with `data-parsley-isEven` attribute.


### Extending Parsley Functionality

Extending Parsley.js beyond custom constraints and validators involves modifying its core behavior or adding new features.  This usually involves creating a plugin.  A Parsley plugin is a function that receives the Parsley instance as an argument and allows modification of its options, events, or internal behavior.


```javascript
Parsley.on('parsley:field:init', function (fieldInstance) {
    // Access the Parsley field instance and modify its behavior
    fieldInstance.options.classHandler = function(element, isError) {
        // Your custom class handler
    };
});
```

This example modifies the default class handler for Parsley fields.   For more complex extensions, you might need to create a separate JavaScript file, encapsulate your extension within a function, and then include it in your project.

### Contributing to Parsley.js

To contribute to Parsley.js, you should:

1. **Fork the repository:** Fork the official Parsley.js repository on GitHub.
2. **Create a branch:** Create a new branch for your changes.
3. **Make your changes:** Implement your changes, ensuring good code quality, testing, and documentation.
4. **Test your changes:** Thoroughly test your changes to ensure they don't introduce regressions.
5. **Create a pull request:**  Submit a pull request to the main Parsley.js repository, explaining your changes and addressing any feedback from maintainers.  Follow the contribution guidelines provided in the repository's documentation.

Before contributing, carefully review the project's contribution guidelines and coding style to ensure your contributions align with the project's standards.  Your contributions must meet the project's quality standards and be thoroughly tested before being merged.

