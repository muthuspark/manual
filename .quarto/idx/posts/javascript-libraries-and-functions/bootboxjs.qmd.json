{"title":"Bootbox.js - Documentation","markdown":{"yaml":{"title":"Bootbox.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Bootbox.js?","containsRefs":false,"markdown":"\n\n\n\nBootbox.js is a small, easy-to-use library that helps you create beautiful and customizable modal dialogs (popups) using Bootstrap's styling. It simplifies the process of displaying alerts, confirmations, prompts, and custom dialogs within your web application, eliminating the need to write extensive JavaScript code for basic modal interactions.  It leverages Bootstrap's styling to ensure your dialogs are consistent with your application's overall look and feel.\n\n### Why use Bootbox.js?\n\nBootbox.js offers several advantages:\n\n* **Simplicity:** It provides a clean and straightforward API, making it easy to integrate into your projects.\n* **Bootstrap Integration:**  It seamlessly integrates with Bootstrap's styling, ensuring consistent design across your application.\n* **Ease of Use:**  Creating various dialog types (alerts, confirmations, prompts) requires minimal code.\n* **Customization:** Allows for extensive customization of dialog content, buttons, and behavior.\n* **Lightweight:**  The library is small and efficient, adding minimal overhead to your application.\n\n\n### Setting up Bootbox.js\n\nBootbox.js is typically included via a `<script>` tag in your HTML file. You can download the minified version from the project's website or use a CDN.  Here's an example using a CDN:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js\"></script>\n```\n\nEnsure you also have Bootstrap included in your project for proper styling.  If using a CDN for Bootstrap, include it *before* the Bootbox.js script.\n\n\n### Basic Usage Examples\n\nHere are a few examples demonstrating basic usage of Bootbox.js:\n\n**1. Alert Dialog:**\n\n```javascript\nbootbox.alert(\"Hello world!\");\n```\n\nThis displays a simple alert box with the message \"Hello world!\" and an \"OK\" button.\n\n**2. Confirmation Dialog:**\n\n```javascript\nbootbox.confirm(\"Are you sure?\", function(result) {\n  if (result) {\n    // User clicked \"OK\"\n    console.log(\"Confirmed!\");\n  } else {\n    // User clicked \"Cancel\"\n    console.log(\"Cancelled!\");\n  }\n});\n```\n\nThis displays a confirmation dialog with \"OK\" and \"Cancel\" buttons. The callback function receives a boolean value indicating the user's choice.\n\n**3. Prompt Dialog:**\n\n```javascript\nbootbox.prompt(\"What is your name?\", function(result) {\n  if (result !== null) {\n    // User entered a value and clicked \"OK\"\n    console.log(\"User's name: \" + result);\n  } else {\n    // User clicked \"Cancel\" or closed the dialog\n    console.log(\"Prompt cancelled.\");\n  }\n});\n```\n\nThis displays a prompt dialog with an input field, allowing the user to enter text. The callback function receives the entered value or `null` if cancelled.\n\n**4. Custom Dialog:**\n\n```javascript\nbootbox.dialog({\n  message: \"This is a custom dialog!\",\n  buttons: {\n    success: {\n      label: \"Success!\",\n      className: \"btn-success\",\n      callback: function() {\n        console.log(\"Success button clicked!\");\n      }\n    },\n    danger: {\n      label: \"Danger!\",\n      className: \"btn-danger\"\n    }\n  }\n});\n```\n\nThis demonstrates creating a custom dialog with custom buttons and their respective callbacks.  Note the use of Bootstrap button classes for styling.\n\n\n## Core Functions\n\n### alert()\n\nThe `alert()` function displays a simple alert dialog box.  It takes a single argument:\n\n* **message (string):** The text message to display in the alert box.\n\n```javascript\nbootbox.alert(\"This is an alert!\");\n```\n\nThis will show a modal alert box with the message \"This is an alert!\" and a single \"OK\" button.  The `alert()` function doesn't return a value; it simply displays the message and closes when the \"OK\" button is clicked.\n\n\n### confirm()\n\nThe `confirm()` function displays a confirmation dialog box with \"OK\" and \"Cancel\" buttons.  It takes two arguments:\n\n* **message (string):** The text message to display in the dialog.\n* **callback (function):** A callback function that is executed when the user clicks a button. The function receives a single boolean argument: `true` if \"OK\" was clicked, `false` if \"Cancel\" was clicked.\n\n```javascript\nbootbox.confirm(\"Are you sure?\", function(result) {\n  if (result) {\n    console.log(\"Confirmed!\");\n  } else {\n    console.log(\"Cancelled!\");\n  }\n});\n```\n\n\n### prompt()\n\nThe `prompt()` function displays a dialog box with an input field, allowing the user to enter text. It takes two arguments:\n\n* **message (string):** The text message to display in the dialog (prompt).\n* **callback (function):** A callback function that is executed when the user clicks a button.  The function receives the entered value as a string argument if \"OK\" is clicked, or `null` if \"Cancel\" is clicked or the dialog is closed.\n\n```javascript\nbootbox.prompt(\"Enter your name:\", function(result) {\n  if (result !== null) {\n    console.log(\"User entered: \" + result);\n  } else {\n    console.log(\"Prompt cancelled or closed.\");\n  }\n});\n```\n\n\n### dialog()\n\nThe `dialog()` function provides the most flexibility, allowing you to create fully customized dialog boxes. It takes a single argument:\n\n* **options (object):** An object containing various options to customize the dialog.  The most important options are:\n\n    * **message (string):** The main message or content of the dialog.  This can be a string, a DOM element, or a jQuery object.\n    * **title (string):**  The title of the dialog (optional).\n    * **buttons (object):** An object defining custom buttons. Each key represents a button's name (used internally), and the value is an object with the following properties:\n        * **label (string):** The text displayed on the button.\n        * **className (string):** Bootstrap button class for styling (e.g., \"btn-primary\", \"btn-danger\").\n        * **callback (function):**  A callback function executed when the button is clicked.\n\n\n```javascript\nbootbox.dialog({\n  message: \"This is a custom dialog!\",\n  title: \"Custom Dialog Title\",\n  buttons: {\n    save: {\n      label: \"Save\",\n      className: \"btn-success\",\n      callback: function() {\n        // Save action\n      }\n    },\n    cancel: {\n      label: \"Cancel\",\n      className: \"btn-default\"\n    }\n  }\n});\n```\n\n\n### Customizing Dialogs\n\nBootbox.js offers several ways to customize the appearance and behavior of dialogs:\n\n* **Using Bootstrap Classes:**  Leverage Bootstrap's CSS classes (e.g., for button styling) within the `buttons` object of the `dialog()` function.\n* **Customizing the `message` Content:** The `message` option in `dialog()` can accept HTML content, allowing you to create rich and complex dialogs.\n* **Adding Custom CSS:** You can add custom CSS to style the dialogs further, targeting specific classes provided by Bootbox.js.\n* **Callbacks:**  Use callback functions to perform actions based on user interactions (button clicks).\n* **`onEscape` Option:** For `dialog()`, the `onEscape` option can define behavior when the user presses the Escape key (e.g., close the dialog, perform an action).\n\nRemember to consult the Bootbox.js documentation for a complete list of options and customizations.\n\n\n## Advanced Usage\n\n### Callbacks and Events\n\nBootbox.js extensively uses callbacks to handle user interactions.  The `confirm()`, `prompt()`, and `dialog()` functions all accept callback functions that execute after the user interacts with the dialog (e.g., clicking a button).  These callbacks receive data depending on the function.  For `confirm()`, it's a boolean; for `prompt()`, it's the entered text or `null`; and for `dialog()`, it depends on which button was clicked.\n\nWhile there aren't built-in events in the same way as some JavaScript frameworks, you can achieve similar functionality through callbacks strategically placed within your button definitions in the `dialog()` method or through clever use of promises (see Asynchronous Operations).  For example, you can trigger additional actions within the callback function associated with a button press.\n\n\n### Custom Buttons and Actions\n\nThe power of Bootbox.js lies in its ability to create custom dialogs with unique button sets and actions.  The `buttons` option within the `dialog()` function allows for extensive customization.  You define buttons by name, assign labels, bootstrap classes for styling, and most importantly, associate callback functions to define the action taken when a button is clicked.\n\n```javascript\nbootbox.dialog({\n  message: \"Custom Dialog\",\n  buttons: {\n    submit: {\n      label: \"Submit\",\n      className: \"btn-primary\",\n      callback: function () {\n        // Perform submission logic here\n        console.log(\"Submit button clicked\");\n      }\n    },\n    cancel: {\n      label: \"Cancel\",\n      className: \"btn-default\",\n      callback: function () {\n        // Handle cancellation\n        console.log(\"Cancel button clicked\");\n      }\n    }\n  }\n});\n```\n\n\n### Working with Forms\n\nBootbox.js can easily integrate with forms.  You can embed HTML forms within the `message` section of the `dialog()` function.  Remember to properly handle form submission within the button callbacks.  This often involves preventing the default form submission behavior (using `event.preventDefault()`) and then processing form data using JavaScript or AJAX to send it to a server.\n\n```javascript\nbootbox.dialog({\n  title: \"User Input Form\",\n  message: '<form id=\"myForm\"><input type=\"text\" name=\"username\" placeholder=\"Username\"><button type=\"submit\">Submit</button></form>',\n  buttons: {\n    ok: {\n      label: \"OK\",\n      className: \"btn-primary\",\n      callback: function() {\n        event.preventDefault(); //prevent default form submission\n        let username = $('#myForm input[name=\"username\"]').val();\n        // Process username\n        console.log(username);\n      }\n    }\n  }\n});\n```\n\n\n### Handling User Input\n\nUser input is typically handled through the `prompt()` function or by embedding form elements within the `dialog()` function's `message` option.  In both cases, the callback functions receive the user's input (or `null` if cancelled).  Validate input within the callback function to ensure data integrity before processing it.\n\n\n### Asynchronous Operations\n\nFor asynchronous operations (like AJAX calls), use promises to handle the completion of background tasks before closing the dialog or performing further actions.  The callback function associated with a button can initiate the asynchronous operation and then use the promise's `then()` method to execute code after the operation is successful. The `catch()` method handles errors.\n\n```javascript\nbootbox.dialog({\n  message: \"Loading...\",\n  buttons: {\n    ok: {\n      label: \"OK\",\n      callback: function () {\n        // Placeholder for AJAX call\n        let promise = $.ajax({\n          url: \"/api/data\",\n          method: \"GET\"\n        });\n        promise.then(function (data) {\n          // Update dialog content or perform action\n          console.log(\"AJAX success:\", data);\n        }).catch(function (error) {\n          console.error(\"AJAX error:\", error);\n        });\n      }\n    }\n  }\n});\n```\n\nThis example shows a basic structure; you would likely need more sophisticated error handling and user feedback mechanisms in a real-world application. Remember that modifying the dialog's contents after it's been shown can require additional considerations, depending on the specifics of the asynchronous operation.\n\n\n## Styling and Customization\n\n### Bootstrap Integration\n\nBootbox.js is built to work seamlessly with Bootstrap.  It leverages Bootstrap's CSS framework for its default styling, ensuring that the dialog boxes look consistent with the rest of your application.  This means you get visually appealing modals without extra effort.  To use Bootbox.js effectively, you need to include Bootstrap's CSS files in your project *before* including the Bootbox.js script.  This allows Bootbox to correctly apply Bootstrap's classes and styles to the dialog elements.\n\n\n### Custom CSS Styling\n\nWhile Bootbox.js uses Bootstrap for default styling, you can customize its appearance through custom CSS. Bootbox applies specific CSS classes to its elements, allowing for targeted styling. You can inspect the rendered HTML of a Bootbox dialog using your browser's developer tools to identify the relevant classes. Then, add custom CSS rules to your stylesheet to override or extend the existing styles. For example, you might target the `modal-content` class to change the background color or padding of the dialog box, or style buttons using the Bootstrap button classes applied by Bootbox.  Avoid overriding Bootstrap's core styles unless absolutely necessary to prevent unintended consequences on other parts of your application.\n\n\n### Themes and Skins\n\nBootbox.js itself doesn't provide built-in themes or skins. Its styling is directly dependent on the included Bootstrap version.  To change the look and feel, you must modify Bootstrap's CSS or use a pre-built Bootstrap theme.  Many Bootstrap themes are available online; incorporating one will change the look of your Bootbox dialogs as well, provided you are using the default Bootbox styling.\n\n\n### Icons and Images\n\nYou can incorporate icons and images into your Bootbox dialogs in several ways:\n\n* **Using Bootstrap Icons:** If your project uses Bootstrap Icons, you can easily include them in your dialog content using standard Bootstrap icon markup (e.g., `<i class=\"bi bi-check-circle\"></i>`).\n\n* **Using other Icon Sets:**  You can use other icon sets (like Font Awesome) as long as you include the necessary CSS for those icon sets in your project.  Then, integrate the icons into your dialog's HTML content.\n\n* **Using Images:** Include `<img>` tags within the `message` content of your Bootbox dialogs.  Remember to specify the appropriate `src` attribute pointing to your image files.  Consider responsive image techniques for better display across different devices.  Ensure the images are accessible and appropriately sized to avoid disrupting the layout of the dialog.\n\n\nRemember to place image files in a location accessible to your web application and use appropriate `src` attributes.  Avoid overly large images to prevent slow loading and layout issues within the dialog.\n\n\n## Error Handling and Troubleshooting\n\n### Common Errors and Solutions\n\n* **\"Bootbox is not defined\":** This error means Bootbox.js hasn't been correctly included in your HTML file. Double-check the `<script>` tag, ensuring the path to the Bootbox.js file is correct and that it's included *after* any necessary dependencies like jQuery and Bootstrap.\n\n* **Unexpected behavior/styling issues:** This often stems from conflicts with your existing CSS or JavaScript code. Check for CSS specificity issues where your custom styles might be overriding Bootbox's styles unintentionally.  Inspect the rendered HTML and CSS using your browser's developer tools to identify conflicting styles or unexpected class names applied to elements.  If using a custom build of Bootstrap or a theme, ensure that it's not conflicting with Bootbox's expectations.\n\n* **Callback functions not working:** Make sure your callback functions are correctly defined and passed as arguments to the appropriate Bootbox functions (`confirm()`, `prompt()`, `dialog()`).  Verify that the syntax is correct, and there are no typos in function names.  Inspect the browser's console for JavaScript errors that might be preventing your callback from executing.\n\n* **Empty or unexpected dialog content:** Verify that the `message` parameter in your Bootbox functions is correctly set.  If using HTML within the message, make sure the HTML is valid and correctly formatted.  Inspect the rendered HTML in your browser's developer tools to check if the content is being rendered as expected.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Utilize your browser's developer tools (usually accessed by pressing F12). The console will show any JavaScript errors, and the elements panel allows you to inspect the rendered HTML and CSS of the Bootbox dialogs, helping identify styling or content issues.\n\n* **Simplify Your Code:** If you encounter unexpected behavior, try creating a minimal, reproducible example to isolate the problem.  Start with a basic Bootbox call and gradually add complexity until you pinpoint the source of the error.\n\n* **Check for JavaScript Conflicts:** If you're using multiple JavaScript libraries, ensure they don't conflict with each other. Conflicts can lead to unexpected behavior.  Consider the order in which scripts are loaded in your HTML.  Sometimes loading one library after another might resolve a conflict.\n\n* **Console Logging:** Use `console.log()` statements strategically in your callback functions to track the values of variables and the flow of execution.  This can help you understand why a particular part of your code isn't working as expected.\n\n\n\n### Browser Compatibility\n\nBootbox.js is generally well-supported across modern browsers. However, older or less common browsers might exhibit inconsistencies.  For optimal compatibility, ensure you're using a well-supported version of Bootstrap, as Bootbox relies on its styling.  Thorough testing across different browsers is essential to identify and address any compatibility issues.  While older browsers might still work, they may require more extensive testing to ensure consistent functionality and appearance.\n\n\n### Troubleshooting Guide\n\n1. **Identify the Error:** Carefully examine the error messages in your browser's developer console.  Look for specific error types, line numbers, and file names.\n\n2. **Inspect the HTML and CSS:** Use the developer tools to inspect the HTML and CSS of the Bootbox dialog.  Look for missing or unexpected elements, incorrect class names, or conflicting styles.\n\n3. **Check for Dependencies:** Make sure you've correctly included all necessary dependencies like jQuery and Bootstrap.  Verify the correct order of inclusion in your HTML file.\n\n4. **Test in a Minimal Example:** Create a simplified version of your code to isolate the problem.  If the issue is reproduced in the minimal example, you can focus your debugging efforts more easily.\n\n5. **Search for Solutions:** Search online forums and documentation for solutions related to the specific error you're encountering.  Often, others have experienced similar problems.\n\n6. **Seek Help:**  If you're still unable to resolve the issue, consider seeking assistance on relevant forums or communities dedicated to JavaScript and Bootstrap development.  Provide clear, concise information about the error, including code snippets and browser details.\n\n\n## Best Practices and Examples\n\n### Clean Code and Organization\n\nWhen using Bootbox.js, prioritize clean and well-organized code. This makes your code easier to maintain, debug, and extend.  Follow these guidelines:\n\n* **Semantic HTML:** Use meaningful HTML elements within the `message` option of `bootbox.dialog()` to structure your content logically.\n\n* **CSS Organization:** Maintain a separate CSS file for your Bootbox customizations, preventing conflicts with your main stylesheet. Use specific class names to target Bootbox elements to avoid accidental style overrides.\n\n* **JavaScript Modularity:** Organize your Bootbox-related JavaScript code into separate files or modules, enhancing maintainability. Avoid cluttering your main JavaScript file with numerous Bootbox calls.\n\n* **Consistent Formatting:** Employ consistent indentation and spacing in your code to improve readability. Use a code formatter or linter to ensure consistency.\n\n* **Comments and Documentation:**  Add comments to explain complex logic or non-obvious code sections within your Bootbox implementations. This makes it easier for yourself and others to understand the code’s purpose.\n\n\n### Modular Design Patterns\n\nConsider a modular approach to integrate Bootbox.js effectively:\n\n* **Separate Functions:** Create reusable functions to encapsulate common Bootbox dialogs or actions. This avoids repetitive code and promotes consistency.\n\n* **Event Handling:**  Employ clear event handling within callback functions to prevent unexpected behavior. Avoid directly manipulating the DOM outside of callbacks if possible.\n\n* **Data Management:** Separate data fetching and processing from Bootbox dialog display.  Use callbacks to handle the data once it's retrieved asynchronously.\n\n* **Dependency Injection:** In larger projects, use dependency injection to decouple Bootbox functionality from other parts of your application. This increases flexibility and testability.\n\n\n### Advanced Usage Examples\n\nHere's an example demonstrating more advanced features:\n\n```javascript\nfunction showComplexDialog(data) {\n  bootbox.dialog({\n    title: \"Complex Dialog\",\n    message: `\n      <p>User Data:</p>\n      <ul>\n        <li>Name: ${data.name}</li>\n        <li>Email: ${data.email}</li>\n      </ul>\n    `,\n    buttons: {\n      edit: {\n        label: \"Edit\",\n        className: \"btn-warning\",\n        callback: function () {\n          // Navigate to edit form or perform edit action\n        }\n      },\n      close: {\n        label: \"Close\",\n        className: \"btn-default\"\n      }\n    },\n    onEscape: function () {\n      //Handle escape key press\n      console.log(\"Dialog closed with Escape key\");\n    }\n  });\n}\n\n// Example usage:\nlet userData = { name: \"John Doe\", email: \"john.doe@example.com\" };\nshowComplexDialog(userData);\n```\n\nThis example showcases dynamic content generation within the dialog, custom buttons, and handling of the Escape key.\n\n\n### Real-world Applications\n\nBootbox.js is valuable in many situations:\n\n* **User Feedback:** Display alerts, confirmations, and prompts for user interactions (e.g., confirming deletion, providing input).\n\n* **Form Validation:**  Use dialogs to provide feedback on form validation errors or confirmations after successful submission.\n\n* **Asynchronous Operations:**  Display loading indicators while fetching data asynchronously (using AJAX), then updating the dialog upon completion.\n\n* **Modal Forms:** Create reusable modal forms for adding or editing data.\n\n* **Complex UI Interactions:**  Manage complex user interactions in a clear and organized manner through well-structured dialogs.\n\n\nRemember to carefully consider the user experience when using modal dialogs.  Keep them concise, informative, and avoid overwhelming users with too much information in a single dialog.  Use dialogs strategically to enhance the user interface and improve interaction clarity.\n\n\n## API Reference\n\n### Detailed Function Descriptions\n\nBootbox.js provides several core functions for creating different types of dialogs:\n\n* **`bootbox.alert(message, [callback])`:** Displays a simple alert dialog with an \"OK\" button.  `message` is the text to display. An optional `callback` function executes after the user clicks \"OK\".\n\n* **`bootbox.confirm(message, callback)`:** Shows a confirmation dialog with \"OK\" and \"Cancel\" buttons. `message` is the displayed text. The `callback` function receives `true` for \"OK\" and `false` for \"Cancel\".\n\n* **`bootbox.prompt(message, [callback])`:** Presents a prompt dialog with an input field. `message` is the prompt text. The `callback` function receives the entered value (string) or `null` if cancelled.\n\n* **`bootbox.dialog(options)`:** This function offers the most flexibility, allowing you to create highly customized dialogs.  It takes an `options` object (see below).\n\n* **`bootbox.hideAll()`:** This closes all currently open Bootbox dialogs.  Useful for managing multiple dialogs simultaneously.\n\n\n### Options and Parameters\n\nThe `bootbox.dialog()` function uses an options object to configure the dialog. Key options include:\n\n* **`message` (string or DOM element or jQuery object):** The main content of the dialog. This can be plain text, HTML, or a DOM element.\n\n* **`title` (string):** The title displayed in the dialog header (optional).\n\n* **`buttons` (object):** An object defining custom buttons.  Each key is an internal button name, and the value is an object with `label` (button text), `className` (Bootstrap class for styling), and `callback` (function executed when clicked) properties.\n\n* **`closeButton` (boolean):**  Whether to show a close button in the dialog header (defaults to `true`).\n\n* **`size` (string):**  Specifies the size of the dialog ('small', 'large', or 'default').\n\n* **`onEscape` (function):**  A callback function that is executed when the user presses the Escape key.\n\n* **`backdrop` (boolean):** Determines whether the backdrop (overlay) should be displayed (`true`) or not (`false`).  Defaults to `true`.\n\n\n### Return Values and Data Handling\n\n* **`bootbox.alert()`:** Returns a Promise that resolves when the alert is closed.\n\n* **`bootbox.confirm()`:** Returns a Promise that resolves with a boolean (`true` for \"OK\", `false` for \"Cancel\").\n\n* **`bootbox.prompt()`:** Returns a Promise that resolves with the entered value (string) or `null` if cancelled.\n\n* **`bootbox.dialog()`:** Returns a Promise that resolves when the dialog is closed.  The resolving value typically isn't used directly, but the callbacks associated with the defined buttons are used to handle data returned by the dialog.\n\n\nData handling primarily occurs through callbacks associated with buttons defined within the `buttons` option of `bootbox.dialog()`.  You should perform actions such as data validation or server-side requests *within* these callbacks, receiving data from form fields or other sources within the dialog's context.\n\n### Event Handling\n\nBootbox.js doesn't directly expose a comprehensive event system like some JavaScript frameworks.  Event handling is largely managed through the callback functions provided in the core functions and the `buttons` option of `bootbox.dialog()`.\n\n* **Button Clicks:**  Callbacks associated with buttons provide the primary mechanism for handling user button clicks.\n\n* **Escape Key:** The `onEscape` option in `bootbox.dialog()` allows you to handle the Escape key press event.\n\n* **Dialog Close:** While not a specific \"event,\" the promise returned by the Bootbox functions resolves when the dialog is closed. You can use `.then()` to execute code after closure.  However, this is a less precise approach to event handling compared to specific callback functions for user actions.\n\n\nTo handle more complex events or dynamic interactions, you should use JavaScript event listeners directly on elements *within* the dialog content that's passed to the `message` parameter, within the context of your button callback functions if necessary.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Bootbox.js?\n\nBootbox.js is a small, easy-to-use library that helps you create beautiful and customizable modal dialogs (popups) using Bootstrap's styling. It simplifies the process of displaying alerts, confirmations, prompts, and custom dialogs within your web application, eliminating the need to write extensive JavaScript code for basic modal interactions.  It leverages Bootstrap's styling to ensure your dialogs are consistent with your application's overall look and feel.\n\n### Why use Bootbox.js?\n\nBootbox.js offers several advantages:\n\n* **Simplicity:** It provides a clean and straightforward API, making it easy to integrate into your projects.\n* **Bootstrap Integration:**  It seamlessly integrates with Bootstrap's styling, ensuring consistent design across your application.\n* **Ease of Use:**  Creating various dialog types (alerts, confirmations, prompts) requires minimal code.\n* **Customization:** Allows for extensive customization of dialog content, buttons, and behavior.\n* **Lightweight:**  The library is small and efficient, adding minimal overhead to your application.\n\n\n### Setting up Bootbox.js\n\nBootbox.js is typically included via a `<script>` tag in your HTML file. You can download the minified version from the project's website or use a CDN.  Here's an example using a CDN:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js\"></script>\n```\n\nEnsure you also have Bootstrap included in your project for proper styling.  If using a CDN for Bootstrap, include it *before* the Bootbox.js script.\n\n\n### Basic Usage Examples\n\nHere are a few examples demonstrating basic usage of Bootbox.js:\n\n**1. Alert Dialog:**\n\n```javascript\nbootbox.alert(\"Hello world!\");\n```\n\nThis displays a simple alert box with the message \"Hello world!\" and an \"OK\" button.\n\n**2. Confirmation Dialog:**\n\n```javascript\nbootbox.confirm(\"Are you sure?\", function(result) {\n  if (result) {\n    // User clicked \"OK\"\n    console.log(\"Confirmed!\");\n  } else {\n    // User clicked \"Cancel\"\n    console.log(\"Cancelled!\");\n  }\n});\n```\n\nThis displays a confirmation dialog with \"OK\" and \"Cancel\" buttons. The callback function receives a boolean value indicating the user's choice.\n\n**3. Prompt Dialog:**\n\n```javascript\nbootbox.prompt(\"What is your name?\", function(result) {\n  if (result !== null) {\n    // User entered a value and clicked \"OK\"\n    console.log(\"User's name: \" + result);\n  } else {\n    // User clicked \"Cancel\" or closed the dialog\n    console.log(\"Prompt cancelled.\");\n  }\n});\n```\n\nThis displays a prompt dialog with an input field, allowing the user to enter text. The callback function receives the entered value or `null` if cancelled.\n\n**4. Custom Dialog:**\n\n```javascript\nbootbox.dialog({\n  message: \"This is a custom dialog!\",\n  buttons: {\n    success: {\n      label: \"Success!\",\n      className: \"btn-success\",\n      callback: function() {\n        console.log(\"Success button clicked!\");\n      }\n    },\n    danger: {\n      label: \"Danger!\",\n      className: \"btn-danger\"\n    }\n  }\n});\n```\n\nThis demonstrates creating a custom dialog with custom buttons and their respective callbacks.  Note the use of Bootstrap button classes for styling.\n\n\n## Core Functions\n\n### alert()\n\nThe `alert()` function displays a simple alert dialog box.  It takes a single argument:\n\n* **message (string):** The text message to display in the alert box.\n\n```javascript\nbootbox.alert(\"This is an alert!\");\n```\n\nThis will show a modal alert box with the message \"This is an alert!\" and a single \"OK\" button.  The `alert()` function doesn't return a value; it simply displays the message and closes when the \"OK\" button is clicked.\n\n\n### confirm()\n\nThe `confirm()` function displays a confirmation dialog box with \"OK\" and \"Cancel\" buttons.  It takes two arguments:\n\n* **message (string):** The text message to display in the dialog.\n* **callback (function):** A callback function that is executed when the user clicks a button. The function receives a single boolean argument: `true` if \"OK\" was clicked, `false` if \"Cancel\" was clicked.\n\n```javascript\nbootbox.confirm(\"Are you sure?\", function(result) {\n  if (result) {\n    console.log(\"Confirmed!\");\n  } else {\n    console.log(\"Cancelled!\");\n  }\n});\n```\n\n\n### prompt()\n\nThe `prompt()` function displays a dialog box with an input field, allowing the user to enter text. It takes two arguments:\n\n* **message (string):** The text message to display in the dialog (prompt).\n* **callback (function):** A callback function that is executed when the user clicks a button.  The function receives the entered value as a string argument if \"OK\" is clicked, or `null` if \"Cancel\" is clicked or the dialog is closed.\n\n```javascript\nbootbox.prompt(\"Enter your name:\", function(result) {\n  if (result !== null) {\n    console.log(\"User entered: \" + result);\n  } else {\n    console.log(\"Prompt cancelled or closed.\");\n  }\n});\n```\n\n\n### dialog()\n\nThe `dialog()` function provides the most flexibility, allowing you to create fully customized dialog boxes. It takes a single argument:\n\n* **options (object):** An object containing various options to customize the dialog.  The most important options are:\n\n    * **message (string):** The main message or content of the dialog.  This can be a string, a DOM element, or a jQuery object.\n    * **title (string):**  The title of the dialog (optional).\n    * **buttons (object):** An object defining custom buttons. Each key represents a button's name (used internally), and the value is an object with the following properties:\n        * **label (string):** The text displayed on the button.\n        * **className (string):** Bootstrap button class for styling (e.g., \"btn-primary\", \"btn-danger\").\n        * **callback (function):**  A callback function executed when the button is clicked.\n\n\n```javascript\nbootbox.dialog({\n  message: \"This is a custom dialog!\",\n  title: \"Custom Dialog Title\",\n  buttons: {\n    save: {\n      label: \"Save\",\n      className: \"btn-success\",\n      callback: function() {\n        // Save action\n      }\n    },\n    cancel: {\n      label: \"Cancel\",\n      className: \"btn-default\"\n    }\n  }\n});\n```\n\n\n### Customizing Dialogs\n\nBootbox.js offers several ways to customize the appearance and behavior of dialogs:\n\n* **Using Bootstrap Classes:**  Leverage Bootstrap's CSS classes (e.g., for button styling) within the `buttons` object of the `dialog()` function.\n* **Customizing the `message` Content:** The `message` option in `dialog()` can accept HTML content, allowing you to create rich and complex dialogs.\n* **Adding Custom CSS:** You can add custom CSS to style the dialogs further, targeting specific classes provided by Bootbox.js.\n* **Callbacks:**  Use callback functions to perform actions based on user interactions (button clicks).\n* **`onEscape` Option:** For `dialog()`, the `onEscape` option can define behavior when the user presses the Escape key (e.g., close the dialog, perform an action).\n\nRemember to consult the Bootbox.js documentation for a complete list of options and customizations.\n\n\n## Advanced Usage\n\n### Callbacks and Events\n\nBootbox.js extensively uses callbacks to handle user interactions.  The `confirm()`, `prompt()`, and `dialog()` functions all accept callback functions that execute after the user interacts with the dialog (e.g., clicking a button).  These callbacks receive data depending on the function.  For `confirm()`, it's a boolean; for `prompt()`, it's the entered text or `null`; and for `dialog()`, it depends on which button was clicked.\n\nWhile there aren't built-in events in the same way as some JavaScript frameworks, you can achieve similar functionality through callbacks strategically placed within your button definitions in the `dialog()` method or through clever use of promises (see Asynchronous Operations).  For example, you can trigger additional actions within the callback function associated with a button press.\n\n\n### Custom Buttons and Actions\n\nThe power of Bootbox.js lies in its ability to create custom dialogs with unique button sets and actions.  The `buttons` option within the `dialog()` function allows for extensive customization.  You define buttons by name, assign labels, bootstrap classes for styling, and most importantly, associate callback functions to define the action taken when a button is clicked.\n\n```javascript\nbootbox.dialog({\n  message: \"Custom Dialog\",\n  buttons: {\n    submit: {\n      label: \"Submit\",\n      className: \"btn-primary\",\n      callback: function () {\n        // Perform submission logic here\n        console.log(\"Submit button clicked\");\n      }\n    },\n    cancel: {\n      label: \"Cancel\",\n      className: \"btn-default\",\n      callback: function () {\n        // Handle cancellation\n        console.log(\"Cancel button clicked\");\n      }\n    }\n  }\n});\n```\n\n\n### Working with Forms\n\nBootbox.js can easily integrate with forms.  You can embed HTML forms within the `message` section of the `dialog()` function.  Remember to properly handle form submission within the button callbacks.  This often involves preventing the default form submission behavior (using `event.preventDefault()`) and then processing form data using JavaScript or AJAX to send it to a server.\n\n```javascript\nbootbox.dialog({\n  title: \"User Input Form\",\n  message: '<form id=\"myForm\"><input type=\"text\" name=\"username\" placeholder=\"Username\"><button type=\"submit\">Submit</button></form>',\n  buttons: {\n    ok: {\n      label: \"OK\",\n      className: \"btn-primary\",\n      callback: function() {\n        event.preventDefault(); //prevent default form submission\n        let username = $('#myForm input[name=\"username\"]').val();\n        // Process username\n        console.log(username);\n      }\n    }\n  }\n});\n```\n\n\n### Handling User Input\n\nUser input is typically handled through the `prompt()` function or by embedding form elements within the `dialog()` function's `message` option.  In both cases, the callback functions receive the user's input (or `null` if cancelled).  Validate input within the callback function to ensure data integrity before processing it.\n\n\n### Asynchronous Operations\n\nFor asynchronous operations (like AJAX calls), use promises to handle the completion of background tasks before closing the dialog or performing further actions.  The callback function associated with a button can initiate the asynchronous operation and then use the promise's `then()` method to execute code after the operation is successful. The `catch()` method handles errors.\n\n```javascript\nbootbox.dialog({\n  message: \"Loading...\",\n  buttons: {\n    ok: {\n      label: \"OK\",\n      callback: function () {\n        // Placeholder for AJAX call\n        let promise = $.ajax({\n          url: \"/api/data\",\n          method: \"GET\"\n        });\n        promise.then(function (data) {\n          // Update dialog content or perform action\n          console.log(\"AJAX success:\", data);\n        }).catch(function (error) {\n          console.error(\"AJAX error:\", error);\n        });\n      }\n    }\n  }\n});\n```\n\nThis example shows a basic structure; you would likely need more sophisticated error handling and user feedback mechanisms in a real-world application. Remember that modifying the dialog's contents after it's been shown can require additional considerations, depending on the specifics of the asynchronous operation.\n\n\n## Styling and Customization\n\n### Bootstrap Integration\n\nBootbox.js is built to work seamlessly with Bootstrap.  It leverages Bootstrap's CSS framework for its default styling, ensuring that the dialog boxes look consistent with the rest of your application.  This means you get visually appealing modals without extra effort.  To use Bootbox.js effectively, you need to include Bootstrap's CSS files in your project *before* including the Bootbox.js script.  This allows Bootbox to correctly apply Bootstrap's classes and styles to the dialog elements.\n\n\n### Custom CSS Styling\n\nWhile Bootbox.js uses Bootstrap for default styling, you can customize its appearance through custom CSS. Bootbox applies specific CSS classes to its elements, allowing for targeted styling. You can inspect the rendered HTML of a Bootbox dialog using your browser's developer tools to identify the relevant classes. Then, add custom CSS rules to your stylesheet to override or extend the existing styles. For example, you might target the `modal-content` class to change the background color or padding of the dialog box, or style buttons using the Bootstrap button classes applied by Bootbox.  Avoid overriding Bootstrap's core styles unless absolutely necessary to prevent unintended consequences on other parts of your application.\n\n\n### Themes and Skins\n\nBootbox.js itself doesn't provide built-in themes or skins. Its styling is directly dependent on the included Bootstrap version.  To change the look and feel, you must modify Bootstrap's CSS or use a pre-built Bootstrap theme.  Many Bootstrap themes are available online; incorporating one will change the look of your Bootbox dialogs as well, provided you are using the default Bootbox styling.\n\n\n### Icons and Images\n\nYou can incorporate icons and images into your Bootbox dialogs in several ways:\n\n* **Using Bootstrap Icons:** If your project uses Bootstrap Icons, you can easily include them in your dialog content using standard Bootstrap icon markup (e.g., `<i class=\"bi bi-check-circle\"></i>`).\n\n* **Using other Icon Sets:**  You can use other icon sets (like Font Awesome) as long as you include the necessary CSS for those icon sets in your project.  Then, integrate the icons into your dialog's HTML content.\n\n* **Using Images:** Include `<img>` tags within the `message` content of your Bootbox dialogs.  Remember to specify the appropriate `src` attribute pointing to your image files.  Consider responsive image techniques for better display across different devices.  Ensure the images are accessible and appropriately sized to avoid disrupting the layout of the dialog.\n\n\nRemember to place image files in a location accessible to your web application and use appropriate `src` attributes.  Avoid overly large images to prevent slow loading and layout issues within the dialog.\n\n\n## Error Handling and Troubleshooting\n\n### Common Errors and Solutions\n\n* **\"Bootbox is not defined\":** This error means Bootbox.js hasn't been correctly included in your HTML file. Double-check the `<script>` tag, ensuring the path to the Bootbox.js file is correct and that it's included *after* any necessary dependencies like jQuery and Bootstrap.\n\n* **Unexpected behavior/styling issues:** This often stems from conflicts with your existing CSS or JavaScript code. Check for CSS specificity issues where your custom styles might be overriding Bootbox's styles unintentionally.  Inspect the rendered HTML and CSS using your browser's developer tools to identify conflicting styles or unexpected class names applied to elements.  If using a custom build of Bootstrap or a theme, ensure that it's not conflicting with Bootbox's expectations.\n\n* **Callback functions not working:** Make sure your callback functions are correctly defined and passed as arguments to the appropriate Bootbox functions (`confirm()`, `prompt()`, `dialog()`).  Verify that the syntax is correct, and there are no typos in function names.  Inspect the browser's console for JavaScript errors that might be preventing your callback from executing.\n\n* **Empty or unexpected dialog content:** Verify that the `message` parameter in your Bootbox functions is correctly set.  If using HTML within the message, make sure the HTML is valid and correctly formatted.  Inspect the rendered HTML in your browser's developer tools to check if the content is being rendered as expected.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Utilize your browser's developer tools (usually accessed by pressing F12). The console will show any JavaScript errors, and the elements panel allows you to inspect the rendered HTML and CSS of the Bootbox dialogs, helping identify styling or content issues.\n\n* **Simplify Your Code:** If you encounter unexpected behavior, try creating a minimal, reproducible example to isolate the problem.  Start with a basic Bootbox call and gradually add complexity until you pinpoint the source of the error.\n\n* **Check for JavaScript Conflicts:** If you're using multiple JavaScript libraries, ensure they don't conflict with each other. Conflicts can lead to unexpected behavior.  Consider the order in which scripts are loaded in your HTML.  Sometimes loading one library after another might resolve a conflict.\n\n* **Console Logging:** Use `console.log()` statements strategically in your callback functions to track the values of variables and the flow of execution.  This can help you understand why a particular part of your code isn't working as expected.\n\n\n\n### Browser Compatibility\n\nBootbox.js is generally well-supported across modern browsers. However, older or less common browsers might exhibit inconsistencies.  For optimal compatibility, ensure you're using a well-supported version of Bootstrap, as Bootbox relies on its styling.  Thorough testing across different browsers is essential to identify and address any compatibility issues.  While older browsers might still work, they may require more extensive testing to ensure consistent functionality and appearance.\n\n\n### Troubleshooting Guide\n\n1. **Identify the Error:** Carefully examine the error messages in your browser's developer console.  Look for specific error types, line numbers, and file names.\n\n2. **Inspect the HTML and CSS:** Use the developer tools to inspect the HTML and CSS of the Bootbox dialog.  Look for missing or unexpected elements, incorrect class names, or conflicting styles.\n\n3. **Check for Dependencies:** Make sure you've correctly included all necessary dependencies like jQuery and Bootstrap.  Verify the correct order of inclusion in your HTML file.\n\n4. **Test in a Minimal Example:** Create a simplified version of your code to isolate the problem.  If the issue is reproduced in the minimal example, you can focus your debugging efforts more easily.\n\n5. **Search for Solutions:** Search online forums and documentation for solutions related to the specific error you're encountering.  Often, others have experienced similar problems.\n\n6. **Seek Help:**  If you're still unable to resolve the issue, consider seeking assistance on relevant forums or communities dedicated to JavaScript and Bootstrap development.  Provide clear, concise information about the error, including code snippets and browser details.\n\n\n## Best Practices and Examples\n\n### Clean Code and Organization\n\nWhen using Bootbox.js, prioritize clean and well-organized code. This makes your code easier to maintain, debug, and extend.  Follow these guidelines:\n\n* **Semantic HTML:** Use meaningful HTML elements within the `message` option of `bootbox.dialog()` to structure your content logically.\n\n* **CSS Organization:** Maintain a separate CSS file for your Bootbox customizations, preventing conflicts with your main stylesheet. Use specific class names to target Bootbox elements to avoid accidental style overrides.\n\n* **JavaScript Modularity:** Organize your Bootbox-related JavaScript code into separate files or modules, enhancing maintainability. Avoid cluttering your main JavaScript file with numerous Bootbox calls.\n\n* **Consistent Formatting:** Employ consistent indentation and spacing in your code to improve readability. Use a code formatter or linter to ensure consistency.\n\n* **Comments and Documentation:**  Add comments to explain complex logic or non-obvious code sections within your Bootbox implementations. This makes it easier for yourself and others to understand the code’s purpose.\n\n\n### Modular Design Patterns\n\nConsider a modular approach to integrate Bootbox.js effectively:\n\n* **Separate Functions:** Create reusable functions to encapsulate common Bootbox dialogs or actions. This avoids repetitive code and promotes consistency.\n\n* **Event Handling:**  Employ clear event handling within callback functions to prevent unexpected behavior. Avoid directly manipulating the DOM outside of callbacks if possible.\n\n* **Data Management:** Separate data fetching and processing from Bootbox dialog display.  Use callbacks to handle the data once it's retrieved asynchronously.\n\n* **Dependency Injection:** In larger projects, use dependency injection to decouple Bootbox functionality from other parts of your application. This increases flexibility and testability.\n\n\n### Advanced Usage Examples\n\nHere's an example demonstrating more advanced features:\n\n```javascript\nfunction showComplexDialog(data) {\n  bootbox.dialog({\n    title: \"Complex Dialog\",\n    message: `\n      <p>User Data:</p>\n      <ul>\n        <li>Name: ${data.name}</li>\n        <li>Email: ${data.email}</li>\n      </ul>\n    `,\n    buttons: {\n      edit: {\n        label: \"Edit\",\n        className: \"btn-warning\",\n        callback: function () {\n          // Navigate to edit form or perform edit action\n        }\n      },\n      close: {\n        label: \"Close\",\n        className: \"btn-default\"\n      }\n    },\n    onEscape: function () {\n      //Handle escape key press\n      console.log(\"Dialog closed with Escape key\");\n    }\n  });\n}\n\n// Example usage:\nlet userData = { name: \"John Doe\", email: \"john.doe@example.com\" };\nshowComplexDialog(userData);\n```\n\nThis example showcases dynamic content generation within the dialog, custom buttons, and handling of the Escape key.\n\n\n### Real-world Applications\n\nBootbox.js is valuable in many situations:\n\n* **User Feedback:** Display alerts, confirmations, and prompts for user interactions (e.g., confirming deletion, providing input).\n\n* **Form Validation:**  Use dialogs to provide feedback on form validation errors or confirmations after successful submission.\n\n* **Asynchronous Operations:**  Display loading indicators while fetching data asynchronously (using AJAX), then updating the dialog upon completion.\n\n* **Modal Forms:** Create reusable modal forms for adding or editing data.\n\n* **Complex UI Interactions:**  Manage complex user interactions in a clear and organized manner through well-structured dialogs.\n\n\nRemember to carefully consider the user experience when using modal dialogs.  Keep them concise, informative, and avoid overwhelming users with too much information in a single dialog.  Use dialogs strategically to enhance the user interface and improve interaction clarity.\n\n\n## API Reference\n\n### Detailed Function Descriptions\n\nBootbox.js provides several core functions for creating different types of dialogs:\n\n* **`bootbox.alert(message, [callback])`:** Displays a simple alert dialog with an \"OK\" button.  `message` is the text to display. An optional `callback` function executes after the user clicks \"OK\".\n\n* **`bootbox.confirm(message, callback)`:** Shows a confirmation dialog with \"OK\" and \"Cancel\" buttons. `message` is the displayed text. The `callback` function receives `true` for \"OK\" and `false` for \"Cancel\".\n\n* **`bootbox.prompt(message, [callback])`:** Presents a prompt dialog with an input field. `message` is the prompt text. The `callback` function receives the entered value (string) or `null` if cancelled.\n\n* **`bootbox.dialog(options)`:** This function offers the most flexibility, allowing you to create highly customized dialogs.  It takes an `options` object (see below).\n\n* **`bootbox.hideAll()`:** This closes all currently open Bootbox dialogs.  Useful for managing multiple dialogs simultaneously.\n\n\n### Options and Parameters\n\nThe `bootbox.dialog()` function uses an options object to configure the dialog. Key options include:\n\n* **`message` (string or DOM element or jQuery object):** The main content of the dialog. This can be plain text, HTML, or a DOM element.\n\n* **`title` (string):** The title displayed in the dialog header (optional).\n\n* **`buttons` (object):** An object defining custom buttons.  Each key is an internal button name, and the value is an object with `label` (button text), `className` (Bootstrap class for styling), and `callback` (function executed when clicked) properties.\n\n* **`closeButton` (boolean):**  Whether to show a close button in the dialog header (defaults to `true`).\n\n* **`size` (string):**  Specifies the size of the dialog ('small', 'large', or 'default').\n\n* **`onEscape` (function):**  A callback function that is executed when the user presses the Escape key.\n\n* **`backdrop` (boolean):** Determines whether the backdrop (overlay) should be displayed (`true`) or not (`false`).  Defaults to `true`.\n\n\n### Return Values and Data Handling\n\n* **`bootbox.alert()`:** Returns a Promise that resolves when the alert is closed.\n\n* **`bootbox.confirm()`:** Returns a Promise that resolves with a boolean (`true` for \"OK\", `false` for \"Cancel\").\n\n* **`bootbox.prompt()`:** Returns a Promise that resolves with the entered value (string) or `null` if cancelled.\n\n* **`bootbox.dialog()`:** Returns a Promise that resolves when the dialog is closed.  The resolving value typically isn't used directly, but the callbacks associated with the defined buttons are used to handle data returned by the dialog.\n\n\nData handling primarily occurs through callbacks associated with buttons defined within the `buttons` option of `bootbox.dialog()`.  You should perform actions such as data validation or server-side requests *within* these callbacks, receiving data from form fields or other sources within the dialog's context.\n\n### Event Handling\n\nBootbox.js doesn't directly expose a comprehensive event system like some JavaScript frameworks.  Event handling is largely managed through the callback functions provided in the core functions and the `buttons` option of `bootbox.dialog()`.\n\n* **Button Clicks:**  Callbacks associated with buttons provide the primary mechanism for handling user button clicks.\n\n* **Escape Key:** The `onEscape` option in `bootbox.dialog()` allows you to handle the Escape key press event.\n\n* **Dialog Close:** While not a specific \"event,\" the promise returned by the Bootbox functions resolves when the dialog is closed. You can use `.then()` to execute code after closure.  However, this is a less precise approach to event handling compared to specific callback functions for user actions.\n\n\nTo handle more complex events or dynamic interactions, you should use JavaScript event listeners directly on elements *within* the dialog content that's passed to the `message` parameter, within the context of your button callback functions if necessary.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"bootboxjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Bootbox.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}