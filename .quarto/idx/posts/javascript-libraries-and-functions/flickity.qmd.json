{"title":"Flickity - Documentation","markdown":{"yaml":{"title":"Flickity - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nFlickity can be installed via npm, yarn, or by including a `<script>` tag.\n\n**npm:**\n\n```bash\nnpm install flickity\n```\n\n**yarn:**\n\n```bash\nyarn add flickity\n```\n\n**`<script>` tag:**  Download the Flickity JavaScript and CSS files from the [Flickity website](https://flickity.metafizzy.co/) and include them in your HTML file.  For example:\n\n```html\n<link rel=\"stylesheet\" href=\"flickity.css\">\n<script src=\"flickity.pkgd.min.js\"></script>\n```\n\nRemember to replace `\"flickity.css\"` and `\"flickity.pkgd.min.js\"` with the actual paths to your downloaded files.  Using the packaged `flickity.pkgd.min.js` file includes all the necessary dependencies.\n\n\n### Basic Setup\n\nOnce installed, you need to include the Flickity CSS and JavaScript in your project.  This is done as described in the Installation section above.  Then you'll need to create a container element for your carousel and add the necessary classes and attributes.\n\nThe basic HTML structure looks like this:\n\n```html\n<div class=\"carousel\" data-flickity='{ \"freeScroll\": true }'>\n  <div class=\"carousel-cell\"></div>\n  <div class=\"carousel-cell\"></div>\n  <div class=\"carousel-cell\"></div>\n</div>\n```\n\n*   **`.carousel`:** This is the main container element for your Flickity carousel. It must have the `data-flickity` attribute (explained below).\n*   **`.carousel-cell`:** This class is applied to each item (cell) within the carousel.\n\nThe `data-flickity` attribute is a JSON string containing Flickity options.  In this example, `freeScroll: true` enables free scrolling.  You can customize many aspects of Flickity using these options (see the Flickity documentation for a complete list).\n\n\n### First Flickity Carousel\n\nLet's create a simple carousel with three images.  First, include the necessary CSS and JavaScript as in the Installation section. Then, add the following HTML:\n\n```html\n<div class=\"carousel\" data-flickity='{ \"wrapAround\": true }'>\n  <div class=\"carousel-cell\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"carousel-cell\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"carousel-cell\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n```\n\nThis code creates a carousel that wraps around (meaning you can seamlessly loop from the last to the first image and vice-versa), thanks to `\"wrapAround\": true` in the `data-flickity` attribute.  Replace `\"image1.jpg\"`, `\"image2.jpg\"`, and `\"image3.jpg\"` with the actual paths to your images. Remember to adjust the styling as needed to fit your design.  You can add more cells to the carousel to display more images.  For further customization, refer to the Flickity documentation's extensive options and API details.\n\n\n## Options and Configuration\n\n### Configuring Cell Selectors\n\nBy default, Flickity selects all direct children of the carousel element as cells.  However, you can customize this using the `cellSelector` option. This is useful if your carousel items aren't direct children, or if you need more specific selection criteria.\n\nFor example, if your carousel cells are within `<li>` elements:\n\n```html\n<div class=\"carousel\" data-flickity='{ \"cellSelector\": \"li\" }'>\n  <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n  <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n  <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n</div>\n```\n\nIn this case, `cellSelector: \"li\"` tells Flickity to select all `<li>` elements within the `.carousel` as cells.  You can use any valid CSS selector here.\n\n\n### Options Reference\n\nFlickity offers a wide range of options to customize its behavior.  These options can be set using the `data-flickity` attribute or by passing an options object to the Flickity constructor.  Here's a summary of some key options:\n\n*   `accessibility`: (boolean) Enables/disables ARIA attributes for accessibility.  Defaults to `true`.\n*   `adaptiveHeight`: (boolean)  Adapts the carousel height to the tallest cell. Defaults to `false`.\n*   `cellAlign`: (`'left'`, `'center'`, `'right'`)  Aligns cells within the carousel. Defaults to `'center'`.\n*   `contain`: (boolean) Prevents cells from overflowing the carousel container. Defaults to `false`.\n*   `draggable`: (boolean) Enables/disables dragging. Defaults to `true`.\n*   `freeScroll`: (boolean) Enables free scrolling without snapping to cells. Defaults to `false`.\n*   `friction`: (number)  Friction coefficient for momentum.  Higher values mean slower deceleration.  Defaults to `0.28`.\n*   `initialIndex`: (number)  The index of the initially selected cell. Defaults to `0`.\n*   `percentPosition`: (boolean)  Uses percentage-based positioning instead of pixel-based. Defaults to `false`.\n*   `prevNextButtons`: (boolean) Shows/hides the previous and next buttons. Defaults to `true`.\n*   `pageDots`: (boolean) Shows/hides page dots. Defaults to `true`.\n*   `wrapAround`: (boolean) Enables wrapping around from the last to the first cell and vice-versa. Defaults to `false`.\n*   `autoPlay`: (number or boolean) Enables auto-playing the carousel.  A number sets the interval in milliseconds.  Defaults to `false`.\n\n\nThis is not an exhaustive list. Refer to the complete Flickity documentation for all available options and their descriptions.\n\n\n### Responsive Settings\n\nFlickity can adapt to different screen sizes using responsive settings.  You can achieve this using either media queries and the `data-flickity` attribute or by directly updating options using JavaScript.\n\n**Using Media Queries:** You can apply different `data-flickity` attributes to your carousel element based on screen size using CSS media queries.  For example:\n\n\n```css\n@media (min-width: 768px) {\n  .carousel {\n    data-flickity='{ \"cellAlign\": \"left\" }';\n  }\n}\n```\n\n**Updating Options with JavaScript:** You can listen to window resize events and update Flickity options accordingly. This is more flexible for complex responsive behaviour. For example:\n\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\n\nwindow.addEventListener('resize', function() {\n  if (window.innerWidth > 768) {\n    flkty.update({ cellAlign: 'left' });\n  } else {\n    flkty.update({ cellAlign: 'center' });\n  }\n});\n```\n\n\n### Using Data Attributes\n\nData attributes provide a convenient way to configure Flickity options directly in your HTML.  You place the options within a JSON object in the `data-flickity` attribute of your carousel container. For example:\n\n```html\n<div class=\"carousel\" data-flickity='{ \"wrapAround\": true, \"autoPlay\": 3000 }'>\n  <!-- Carousel cells -->\n</div>\n```\n\nThis sets `wrapAround` to `true` and enables auto-play with a 3000ms interval.  This approach is concise for simple configurations. For more complex scenarios or dynamic changes, using JavaScript to instantiate and configure Flickity is recommended.\n\n\n## Methods\n\nFlickity provides several methods to interact with and control the carousel after initialization.  These methods are called on the Flickity instance.\n\n\n### `.select(index, isInstant)`\n\nSelects a specific cell by its index.\n\n*   `index`: (number) The index of the cell to select (0-based).\n*   `isInstant`: (boolean, optional)  If `true`, the transition is immediate; otherwise, the default animation is used. Defaults to `false`.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.select(2); // Selects the third cell.\nflkty.select(0, true); // Selects the first cell instantly.\n```\n\n### `.previous()`\n\nSelects the previous cell.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.previous();\n```\n\n### `.next()`\n\nSelects the next cell.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.next();\n```\n\n### `.resize()`\n\nUpdates the Flickity layout after changes to the carousel's content or dimensions.  This is crucial after dynamically adding or removing cells, or resizing the window.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.resize();\n```\n\n### `.destroy()`\n\nCompletely removes Flickity from the element, restoring its original state.  This is useful for cleanup when the carousel is no longer needed.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.destroy();\n```\n\n### `.reloadCells()`\n\nRe-selects the cells from the DOM. Use this if the content of the cells has changed significantly (e.g., the number of cells has changed, or their dimensions have altered unexpectedly).\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.reloadCells();\n```\n\n### `.getCellElements()`\n\nReturns an array of the DOM elements representing the cells.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nconst cells = flkty.getCellElements();\nconsole.log(cells); // Array of cell DOM elements\n```\n\n### `.getCurrentCell()`\n\nReturns the currently selected cell's element.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nconst currentCell = flkty.getCurrentCell();\nconsole.log(currentCell); // DOM element of the current cell\n```\n\n### `.getCells()`\n\nReturns an array of Flickity Cell instances.  Each Cell instance contains more detailed information about each cell than just the DOM element (e.g., its index, element, and position).\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nconst cells = flkty.getCells();\nconsole.log(cells); // Array of Flickity Cell instances\nconsole.log(cells[0].element); // DOM element of the first cell\nconsole.log(cells[0].index); // Index of the first cell\n```\n\n\n## Events\n\nFlickity triggers various events throughout its lifecycle, allowing you to respond to changes in the carousel's state.  These events can be used to enhance the user experience or integrate Flickity with other JavaScript components.\n\n\n### Overview of Flickity Events\n\nFlickity events are dispatched on the Flickity instance.  They are typically handled using the `addEventListener` method.  Events are categorized into several types:\n\n*   **Carousel Navigation:** Events related to changes in the selected cell, like `select`, `change`, `dragStart`, `dragMove`, and `dragEnd`.\n*   **Resizing:** Events related to resizing and layout updates (`resize`, `dragEnd`).\n*   **Other:** Events concerning other state changes or actions such as `ready` (when Flickity is fully initialized).\n\n\n### Event List and Details\n\nHere's a list of key Flickity events and their descriptions:\n\n*   **`ready`**: Fired when Flickity is fully initialized and ready.\n*   **`select`**: Fired when a new cell is selected.  The event object has a `selectedIndex` property indicating the index of the newly selected cell.\n*   **`change`**: Fired when the visible cells change (e.g., due to dragging or selecting). The event object has a `selectedElement` property.\n*   **`dragStart`**: Fired when a drag begins.\n*   **`dragMove`**: Fired while dragging is in progress.\n*   **`dragEnd`**: Fired when a drag ends.\n*   **`staticClick`**: Fired when a click occurs on a cell while the carousel is not being dragged.\n*   **`resize`**: Fired when the carousel is resized.\n*   **`destroy`**: Fired when the carousel is destroyed using `.destroy()`.\n*   **`cellSelect`**: Fired when a cell is selected. The event object includes `selectedCell` which is the Flickity Cell instance.\n\n\n### Example Event Handling\n\nThis example shows how to handle the `select` and `resize` events:\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\n\nflkty.on( 'select', function( event ) {\n  console.log( `Selected cell index: ${event.selectedIndex}` );\n  // Add your code to handle the selection event here, e.g., update UI elements\n});\n\nflkty.on( 'resize', function() {\n  console.log( 'Carousel resized' );\n  // Perform actions needed after the carousel resizes, like adjusting other elements\n});\n\n\n//Alternatively, using addEventListener\n\nflkty.addEventListener('select', function(event) {\n    console.log(`Selected cell index: ${event.selectedIndex}`);\n});\n\n//Removing Event Listeners\nflkty.removeEventListener('select', function(event) {\n    //Do something\n});\n\n\n```\n\nRemember to replace `'.carousel'` with the selector for your Flickity carousel element.  You can handle other events in a similar manner, using the appropriate event name.  The `on()` method is a shorthand for `addEventListener()`.  `removeEventListener()` is used to remove event listeners.  Consult the Flickity documentation for details on the event objects and properties for each event.\n\n\n## Advanced Usage\n\nThis section covers more complex scenarios and techniques for working with Flickity.\n\n\n### Creating Custom Cell Elements\n\nFlickity offers great flexibility in how you structure your carousel cells. While the basic example uses `<div>` elements, you can use any HTML element as a cell. This enables you to create complex and visually rich carousels.\n\nFor example, you could create cells with custom layouts using flexbox or grid:\n\n```html\n<div class=\"carousel\" data-flickity>\n  <div class=\"carousel-cell\">\n    <div class=\"cell-image\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n    <div class=\"cell-caption\">Image Caption 1</div>\n  </div>\n  <div class=\"carousel-cell\">\n    <div class=\"cell-image\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n    <div class=\"cell-caption\">Image Caption 2</div>\n  </div>\n  <!-- More cells -->\n</div>\n```\n\nRemember to style the `.carousel-cell`, `.cell-image`, and `.cell-caption` classes appropriately to achieve the desired layout and appearance.\n\n\n### Working with Multiple Flickity Instances\n\nYou can easily have multiple Flickity carousels on a single page.  Simply create separate containers for each carousel and initialize Flickity on each:\n\n\n```javascript\nconst carousel1 = new Flickity( '.carousel-1' );\nconst carousel2 = new Flickity( '.carousel-2', {\n  cellAlign: 'left' // Different options for each carousel\n});\n```\n\nEach instance will have its own properties and methods, allowing for independent control over each carousel.\n\n\n### Implementing Drag and Swiping\n\nFlickity handles dragging and swiping by default, but you can customize the behavior using options like `draggable`, `friction`, and event listeners (`dragStart`, `dragMove`, `dragEnd`). You could, for example, add visual feedback during dragging or disable dragging altogether:\n\n\n```javascript\nconst flkty = new Flickity('.carousel', {\n  draggable: true, //Enable/disable dragging\n  friction: 0.5 // Adjust dragging friction\n});\n\nflkty.on( 'dragStart', function() {\n  // Add visual feedback, e.g., highlight dragged cell\n});\n\nflkty.on('dragMove', function(event) {\n    //Update a progress bar based on current drag position (event.x, event.y)\n});\n```\n\n\n### Accessibility Considerations\n\nTo ensure your Flickity carousel is accessible, utilize ARIA attributes. Flickity enables ARIA attributes by default (`accessibility: true`).  Additionally:\n\n*   Provide descriptive alt text for images within cells.\n*   Ensure keyboard navigation works seamlessly. Flickity provides keyboard support out of the box.\n*   Consider adding visual cues for keyboard navigation, like focused states.\n*   Use appropriate semantic HTML elements.\n\n### Integrating with Other Libraries\n\nFlickity can be integrated with other JavaScript libraries.  For example, you could combine it with libraries for lazy-loading images, lightboxes, or parallax effects. The key is to ensure the other library's events and methods don't conflict with Flickity's.  This might involve careful timing of events or using techniques like event delegation.  For instance, consider using Flickity's `ready` event to initialize a lazy-loading library after Flickity is fully setup.\n\nRemember to thoroughly test your integration to ensure everything works as expected.\n\n\n## Troubleshooting\n\nThis section helps you diagnose and resolve common problems encountered when using Flickity.\n\n\n### Common Issues and Solutions\n\n*   **Flickity doesn't work:**  Ensure you've correctly included the Flickity CSS and JavaScript files in your HTML. Check your browser's developer console for JavaScript errors. Verify that your carousel container has the correct class (`carousel`) and `data-flickity` attribute.\n\n*   **Cells aren't displaying correctly:** Inspect the CSS applied to your carousel and cells.  Incorrect dimensions or conflicting styles can cause layout problems. Check for typos in your class names. Ensure that `cellSelector` is correctly configured if cells aren't direct children of the carousel container.\n\n*   **Dragging is unresponsive:** Check if `draggable` is set to `true` in your options.  Make sure there are no conflicting JavaScript libraries interfering with Flickity's drag events. Try disabling other JavaScript to isolate the problem.\n\n*   **Autoplay doesn't work:** Verify that `autoPlay` is set correctly (to a number representing the milliseconds between slides). Ensure there's no JavaScript code halting or conflicting with the automatic transitions.\n\n*   **Flickity isn't responding to window resizing:** Make sure you're calling `flkty.resize()` after the window resize event or that your responsive settings (using media queries or JavaScript) are working correctly.\n\n*   **Cells are overlapping:** Check for styling conflicts that might be causing the cells to overlap. Make sure the `contain` option is set appropriately if you intend to keep cells from overflowing.\n\n\n### Debugging Tips\n\n*   **Use your browser's developer tools:** The browser's developer console provides invaluable information about errors, warnings, and the state of your web page.  Use the console to debug JavaScript issues and examine the DOM structure of your Flickity carousel.\n\n*   **Inspect the Flickity instance:** Use your browser's debugger to step through the Flickity JavaScript code and examine the values of variables.  This allows you to see the state of Flickity at various points in its execution.\n\n*   **Simplify your code:** To isolate the source of a problem, temporarily remove or comment out sections of your code to see if the issue persists.  Start with a minimal working example and gradually reintroduce elements to identify the problematic part.\n\n*   **Check Flickity's documentation:** The official Flickity documentation is your primary resource. Search for error messages, unusual behavior, or specific configuration options.\n\n\n### Performance Optimization\n\n*   **Minimize the number of cells:** Fewer cells lead to better performance, especially on low-powered devices.  Consider loading cells dynamically as the user scrolls instead of loading everything at once.\n\n*   **Optimize images:** Use appropriately sized and optimized images. Large images can slow down page load and Flickity's performance. Consider lazy-loading for images outside the viewport.\n\n*   **Use efficient CSS:** Avoid complex or computationally expensive CSS styles that could impact rendering performance. Keep your CSS concise and well-organized.\n\n*   **Use a build process:** For larger projects, a build process can optimize your code (minification, bundling) resulting in smaller file sizes and faster loading times.\n\n\n\n\n## API Reference\n\nThis section provides a detailed reference for the Flickity API.\n\n\n### Flickity Class\n\nThe `Flickity` class is the main constructor for creating a Flickity carousel.\n\n**Constructor:**\n\n```javascript\nnew Flickity( element, options )\n```\n\n*   `element`: (HTMLElement or string selector) The DOM element to turn into a Flickity carousel.\n*   `options`: (object, optional) An object containing Flickity options (see Flickity Options section below).\n\n\n### Flickity Instance Methods\n\nAfter creating a Flickity instance, you can use the following methods to interact with it:\n\n*   **`.select(index, isInstant)`:** Selects a cell by its index.  `isInstant` (boolean, optional) determines whether the transition is immediate.\n*   **`.previous()`:** Selects the previous cell.\n*   **`.next()`:** Selects the next cell.\n*   **`.resize()`:** Updates the Flickity layout.  Call this after adding, removing, or modifying cells.\n*   **`.destroy()`:** Removes Flickity from the element.\n*   **`.reloadCells()`:** Reselects cells from the DOM. Use after significant content changes.\n*   **`.getCellElements()`:** Returns an array of the cell DOM elements.\n*   **`.getCurrentCell()`:** Returns the currently selected cell's DOM element.\n*   **`.getCells()`:** Returns an array of Flickity Cell instances (containing more detailed cell information).\n*   **`.on(eventName, listener)`:** Adds an event listener.\n*   **`.once(eventName, listener)`:** Adds an event listener that is removed after the first event.\n*   **`.off(eventName, listener)`:** Removes an event listener.\n\n\n**Event Handling Methods:**\n\nThe `on()`, `once()`, and `off()` methods are used to manage events.  The `eventName` is a string representing the event name (e.g., `select`, `resize`, `change`). The `listener` is a callback function that will be executed when the event is triggered.  For example:\n\n```javascript\nflkty.on( 'select', function( event ) {\n  console.log( 'Selected cell:', event.selectedIndex );\n});\n```\n\n\n### Flickity Options\n\nThese options can be passed to the `Flickity` constructor or set using the `data-flickity` attribute:\n\n*   **`accessibility`**: (boolean) Enables/disables ARIA attributes. Defaults to `true`.\n*   **`adaptiveHeight`**: (boolean) Adapts the carousel height to the tallest cell. Defaults to `false`.\n*   **`cellAlign`**: (`'left'`, `'center'`, `'right'`) Aligns cells within the carousel. Defaults to `'center'`.\n*   **`cellSelector`**: (string) CSS selector for cells. Defaults to `'> *` (all direct children).\n*   **`contain`**: (boolean) Prevents cells from overflowing the container. Defaults to `false`.\n*   **`draggable`**: (boolean) Enables/disables dragging. Defaults to `true`.\n*   **`friction`**: (number) Friction coefficient for momentum. Defaults to `0.28`.\n*   **`freeScroll`**: (boolean) Enables free scrolling. Defaults to `false`.\n*   **`initialIndex`**: (number) Index of the initially selected cell. Defaults to `0`.\n*   **`percentPosition`**: (boolean) Uses percentage-based positioning. Defaults to `false`.\n*   **`prevNextButtons`**: (boolean) Shows/hides previous/next buttons. Defaults to `true`.\n*   **`pageDots`**: (boolean) Shows/hides page dots. Defaults to `true`.\n*   **`wrapAround`**: (boolean) Enables wrapping around. Defaults to `false`.\n*   **`autoPlay`**: (number or boolean) Enables auto-playing.  A number sets the interval in milliseconds. Defaults to `false`.\n*   **`imagesLoaded`**: (boolean) Waits for images to load before initializing. Defaults to `true`.\n\n\nThis is not an exhaustive list. Refer to the complete Flickity documentation for all available options and their descriptions.  The default values are shown above, but remember that the latest documentation might have updates.\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nFlickity can be installed via npm, yarn, or by including a `<script>` tag.\n\n**npm:**\n\n```bash\nnpm install flickity\n```\n\n**yarn:**\n\n```bash\nyarn add flickity\n```\n\n**`<script>` tag:**  Download the Flickity JavaScript and CSS files from the [Flickity website](https://flickity.metafizzy.co/) and include them in your HTML file.  For example:\n\n```html\n<link rel=\"stylesheet\" href=\"flickity.css\">\n<script src=\"flickity.pkgd.min.js\"></script>\n```\n\nRemember to replace `\"flickity.css\"` and `\"flickity.pkgd.min.js\"` with the actual paths to your downloaded files.  Using the packaged `flickity.pkgd.min.js` file includes all the necessary dependencies.\n\n\n### Basic Setup\n\nOnce installed, you need to include the Flickity CSS and JavaScript in your project.  This is done as described in the Installation section above.  Then you'll need to create a container element for your carousel and add the necessary classes and attributes.\n\nThe basic HTML structure looks like this:\n\n```html\n<div class=\"carousel\" data-flickity='{ \"freeScroll\": true }'>\n  <div class=\"carousel-cell\"></div>\n  <div class=\"carousel-cell\"></div>\n  <div class=\"carousel-cell\"></div>\n</div>\n```\n\n*   **`.carousel`:** This is the main container element for your Flickity carousel. It must have the `data-flickity` attribute (explained below).\n*   **`.carousel-cell`:** This class is applied to each item (cell) within the carousel.\n\nThe `data-flickity` attribute is a JSON string containing Flickity options.  In this example, `freeScroll: true` enables free scrolling.  You can customize many aspects of Flickity using these options (see the Flickity documentation for a complete list).\n\n\n### First Flickity Carousel\n\nLet's create a simple carousel with three images.  First, include the necessary CSS and JavaScript as in the Installation section. Then, add the following HTML:\n\n```html\n<div class=\"carousel\" data-flickity='{ \"wrapAround\": true }'>\n  <div class=\"carousel-cell\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"carousel-cell\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"carousel-cell\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n```\n\nThis code creates a carousel that wraps around (meaning you can seamlessly loop from the last to the first image and vice-versa), thanks to `\"wrapAround\": true` in the `data-flickity` attribute.  Replace `\"image1.jpg\"`, `\"image2.jpg\"`, and `\"image3.jpg\"` with the actual paths to your images. Remember to adjust the styling as needed to fit your design.  You can add more cells to the carousel to display more images.  For further customization, refer to the Flickity documentation's extensive options and API details.\n\n\n## Options and Configuration\n\n### Configuring Cell Selectors\n\nBy default, Flickity selects all direct children of the carousel element as cells.  However, you can customize this using the `cellSelector` option. This is useful if your carousel items aren't direct children, or if you need more specific selection criteria.\n\nFor example, if your carousel cells are within `<li>` elements:\n\n```html\n<div class=\"carousel\" data-flickity='{ \"cellSelector\": \"li\" }'>\n  <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n  <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n  <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n</div>\n```\n\nIn this case, `cellSelector: \"li\"` tells Flickity to select all `<li>` elements within the `.carousel` as cells.  You can use any valid CSS selector here.\n\n\n### Options Reference\n\nFlickity offers a wide range of options to customize its behavior.  These options can be set using the `data-flickity` attribute or by passing an options object to the Flickity constructor.  Here's a summary of some key options:\n\n*   `accessibility`: (boolean) Enables/disables ARIA attributes for accessibility.  Defaults to `true`.\n*   `adaptiveHeight`: (boolean)  Adapts the carousel height to the tallest cell. Defaults to `false`.\n*   `cellAlign`: (`'left'`, `'center'`, `'right'`)  Aligns cells within the carousel. Defaults to `'center'`.\n*   `contain`: (boolean) Prevents cells from overflowing the carousel container. Defaults to `false`.\n*   `draggable`: (boolean) Enables/disables dragging. Defaults to `true`.\n*   `freeScroll`: (boolean) Enables free scrolling without snapping to cells. Defaults to `false`.\n*   `friction`: (number)  Friction coefficient for momentum.  Higher values mean slower deceleration.  Defaults to `0.28`.\n*   `initialIndex`: (number)  The index of the initially selected cell. Defaults to `0`.\n*   `percentPosition`: (boolean)  Uses percentage-based positioning instead of pixel-based. Defaults to `false`.\n*   `prevNextButtons`: (boolean) Shows/hides the previous and next buttons. Defaults to `true`.\n*   `pageDots`: (boolean) Shows/hides page dots. Defaults to `true`.\n*   `wrapAround`: (boolean) Enables wrapping around from the last to the first cell and vice-versa. Defaults to `false`.\n*   `autoPlay`: (number or boolean) Enables auto-playing the carousel.  A number sets the interval in milliseconds.  Defaults to `false`.\n\n\nThis is not an exhaustive list. Refer to the complete Flickity documentation for all available options and their descriptions.\n\n\n### Responsive Settings\n\nFlickity can adapt to different screen sizes using responsive settings.  You can achieve this using either media queries and the `data-flickity` attribute or by directly updating options using JavaScript.\n\n**Using Media Queries:** You can apply different `data-flickity` attributes to your carousel element based on screen size using CSS media queries.  For example:\n\n\n```css\n@media (min-width: 768px) {\n  .carousel {\n    data-flickity='{ \"cellAlign\": \"left\" }';\n  }\n}\n```\n\n**Updating Options with JavaScript:** You can listen to window resize events and update Flickity options accordingly. This is more flexible for complex responsive behaviour. For example:\n\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\n\nwindow.addEventListener('resize', function() {\n  if (window.innerWidth > 768) {\n    flkty.update({ cellAlign: 'left' });\n  } else {\n    flkty.update({ cellAlign: 'center' });\n  }\n});\n```\n\n\n### Using Data Attributes\n\nData attributes provide a convenient way to configure Flickity options directly in your HTML.  You place the options within a JSON object in the `data-flickity` attribute of your carousel container. For example:\n\n```html\n<div class=\"carousel\" data-flickity='{ \"wrapAround\": true, \"autoPlay\": 3000 }'>\n  <!-- Carousel cells -->\n</div>\n```\n\nThis sets `wrapAround` to `true` and enables auto-play with a 3000ms interval.  This approach is concise for simple configurations. For more complex scenarios or dynamic changes, using JavaScript to instantiate and configure Flickity is recommended.\n\n\n## Methods\n\nFlickity provides several methods to interact with and control the carousel after initialization.  These methods are called on the Flickity instance.\n\n\n### `.select(index, isInstant)`\n\nSelects a specific cell by its index.\n\n*   `index`: (number) The index of the cell to select (0-based).\n*   `isInstant`: (boolean, optional)  If `true`, the transition is immediate; otherwise, the default animation is used. Defaults to `false`.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.select(2); // Selects the third cell.\nflkty.select(0, true); // Selects the first cell instantly.\n```\n\n### `.previous()`\n\nSelects the previous cell.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.previous();\n```\n\n### `.next()`\n\nSelects the next cell.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.next();\n```\n\n### `.resize()`\n\nUpdates the Flickity layout after changes to the carousel's content or dimensions.  This is crucial after dynamically adding or removing cells, or resizing the window.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.resize();\n```\n\n### `.destroy()`\n\nCompletely removes Flickity from the element, restoring its original state.  This is useful for cleanup when the carousel is no longer needed.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.destroy();\n```\n\n### `.reloadCells()`\n\nRe-selects the cells from the DOM. Use this if the content of the cells has changed significantly (e.g., the number of cells has changed, or their dimensions have altered unexpectedly).\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nflkty.reloadCells();\n```\n\n### `.getCellElements()`\n\nReturns an array of the DOM elements representing the cells.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nconst cells = flkty.getCellElements();\nconsole.log(cells); // Array of cell DOM elements\n```\n\n### `.getCurrentCell()`\n\nReturns the currently selected cell's element.\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nconst currentCell = flkty.getCurrentCell();\nconsole.log(currentCell); // DOM element of the current cell\n```\n\n### `.getCells()`\n\nReturns an array of Flickity Cell instances.  Each Cell instance contains more detailed information about each cell than just the DOM element (e.g., its index, element, and position).\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\nconst cells = flkty.getCells();\nconsole.log(cells); // Array of Flickity Cell instances\nconsole.log(cells[0].element); // DOM element of the first cell\nconsole.log(cells[0].index); // Index of the first cell\n```\n\n\n## Events\n\nFlickity triggers various events throughout its lifecycle, allowing you to respond to changes in the carousel's state.  These events can be used to enhance the user experience or integrate Flickity with other JavaScript components.\n\n\n### Overview of Flickity Events\n\nFlickity events are dispatched on the Flickity instance.  They are typically handled using the `addEventListener` method.  Events are categorized into several types:\n\n*   **Carousel Navigation:** Events related to changes in the selected cell, like `select`, `change`, `dragStart`, `dragMove`, and `dragEnd`.\n*   **Resizing:** Events related to resizing and layout updates (`resize`, `dragEnd`).\n*   **Other:** Events concerning other state changes or actions such as `ready` (when Flickity is fully initialized).\n\n\n### Event List and Details\n\nHere's a list of key Flickity events and their descriptions:\n\n*   **`ready`**: Fired when Flickity is fully initialized and ready.\n*   **`select`**: Fired when a new cell is selected.  The event object has a `selectedIndex` property indicating the index of the newly selected cell.\n*   **`change`**: Fired when the visible cells change (e.g., due to dragging or selecting). The event object has a `selectedElement` property.\n*   **`dragStart`**: Fired when a drag begins.\n*   **`dragMove`**: Fired while dragging is in progress.\n*   **`dragEnd`**: Fired when a drag ends.\n*   **`staticClick`**: Fired when a click occurs on a cell while the carousel is not being dragged.\n*   **`resize`**: Fired when the carousel is resized.\n*   **`destroy`**: Fired when the carousel is destroyed using `.destroy()`.\n*   **`cellSelect`**: Fired when a cell is selected. The event object includes `selectedCell` which is the Flickity Cell instance.\n\n\n### Example Event Handling\n\nThis example shows how to handle the `select` and `resize` events:\n\n```javascript\nconst flkty = new Flickity( '.carousel' );\n\nflkty.on( 'select', function( event ) {\n  console.log( `Selected cell index: ${event.selectedIndex}` );\n  // Add your code to handle the selection event here, e.g., update UI elements\n});\n\nflkty.on( 'resize', function() {\n  console.log( 'Carousel resized' );\n  // Perform actions needed after the carousel resizes, like adjusting other elements\n});\n\n\n//Alternatively, using addEventListener\n\nflkty.addEventListener('select', function(event) {\n    console.log(`Selected cell index: ${event.selectedIndex}`);\n});\n\n//Removing Event Listeners\nflkty.removeEventListener('select', function(event) {\n    //Do something\n});\n\n\n```\n\nRemember to replace `'.carousel'` with the selector for your Flickity carousel element.  You can handle other events in a similar manner, using the appropriate event name.  The `on()` method is a shorthand for `addEventListener()`.  `removeEventListener()` is used to remove event listeners.  Consult the Flickity documentation for details on the event objects and properties for each event.\n\n\n## Advanced Usage\n\nThis section covers more complex scenarios and techniques for working with Flickity.\n\n\n### Creating Custom Cell Elements\n\nFlickity offers great flexibility in how you structure your carousel cells. While the basic example uses `<div>` elements, you can use any HTML element as a cell. This enables you to create complex and visually rich carousels.\n\nFor example, you could create cells with custom layouts using flexbox or grid:\n\n```html\n<div class=\"carousel\" data-flickity>\n  <div class=\"carousel-cell\">\n    <div class=\"cell-image\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n    <div class=\"cell-caption\">Image Caption 1</div>\n  </div>\n  <div class=\"carousel-cell\">\n    <div class=\"cell-image\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n    <div class=\"cell-caption\">Image Caption 2</div>\n  </div>\n  <!-- More cells -->\n</div>\n```\n\nRemember to style the `.carousel-cell`, `.cell-image`, and `.cell-caption` classes appropriately to achieve the desired layout and appearance.\n\n\n### Working with Multiple Flickity Instances\n\nYou can easily have multiple Flickity carousels on a single page.  Simply create separate containers for each carousel and initialize Flickity on each:\n\n\n```javascript\nconst carousel1 = new Flickity( '.carousel-1' );\nconst carousel2 = new Flickity( '.carousel-2', {\n  cellAlign: 'left' // Different options for each carousel\n});\n```\n\nEach instance will have its own properties and methods, allowing for independent control over each carousel.\n\n\n### Implementing Drag and Swiping\n\nFlickity handles dragging and swiping by default, but you can customize the behavior using options like `draggable`, `friction`, and event listeners (`dragStart`, `dragMove`, `dragEnd`). You could, for example, add visual feedback during dragging or disable dragging altogether:\n\n\n```javascript\nconst flkty = new Flickity('.carousel', {\n  draggable: true, //Enable/disable dragging\n  friction: 0.5 // Adjust dragging friction\n});\n\nflkty.on( 'dragStart', function() {\n  // Add visual feedback, e.g., highlight dragged cell\n});\n\nflkty.on('dragMove', function(event) {\n    //Update a progress bar based on current drag position (event.x, event.y)\n});\n```\n\n\n### Accessibility Considerations\n\nTo ensure your Flickity carousel is accessible, utilize ARIA attributes. Flickity enables ARIA attributes by default (`accessibility: true`).  Additionally:\n\n*   Provide descriptive alt text for images within cells.\n*   Ensure keyboard navigation works seamlessly. Flickity provides keyboard support out of the box.\n*   Consider adding visual cues for keyboard navigation, like focused states.\n*   Use appropriate semantic HTML elements.\n\n### Integrating with Other Libraries\n\nFlickity can be integrated with other JavaScript libraries.  For example, you could combine it with libraries for lazy-loading images, lightboxes, or parallax effects. The key is to ensure the other library's events and methods don't conflict with Flickity's.  This might involve careful timing of events or using techniques like event delegation.  For instance, consider using Flickity's `ready` event to initialize a lazy-loading library after Flickity is fully setup.\n\nRemember to thoroughly test your integration to ensure everything works as expected.\n\n\n## Troubleshooting\n\nThis section helps you diagnose and resolve common problems encountered when using Flickity.\n\n\n### Common Issues and Solutions\n\n*   **Flickity doesn't work:**  Ensure you've correctly included the Flickity CSS and JavaScript files in your HTML. Check your browser's developer console for JavaScript errors. Verify that your carousel container has the correct class (`carousel`) and `data-flickity` attribute.\n\n*   **Cells aren't displaying correctly:** Inspect the CSS applied to your carousel and cells.  Incorrect dimensions or conflicting styles can cause layout problems. Check for typos in your class names. Ensure that `cellSelector` is correctly configured if cells aren't direct children of the carousel container.\n\n*   **Dragging is unresponsive:** Check if `draggable` is set to `true` in your options.  Make sure there are no conflicting JavaScript libraries interfering with Flickity's drag events. Try disabling other JavaScript to isolate the problem.\n\n*   **Autoplay doesn't work:** Verify that `autoPlay` is set correctly (to a number representing the milliseconds between slides). Ensure there's no JavaScript code halting or conflicting with the automatic transitions.\n\n*   **Flickity isn't responding to window resizing:** Make sure you're calling `flkty.resize()` after the window resize event or that your responsive settings (using media queries or JavaScript) are working correctly.\n\n*   **Cells are overlapping:** Check for styling conflicts that might be causing the cells to overlap. Make sure the `contain` option is set appropriately if you intend to keep cells from overflowing.\n\n\n### Debugging Tips\n\n*   **Use your browser's developer tools:** The browser's developer console provides invaluable information about errors, warnings, and the state of your web page.  Use the console to debug JavaScript issues and examine the DOM structure of your Flickity carousel.\n\n*   **Inspect the Flickity instance:** Use your browser's debugger to step through the Flickity JavaScript code and examine the values of variables.  This allows you to see the state of Flickity at various points in its execution.\n\n*   **Simplify your code:** To isolate the source of a problem, temporarily remove or comment out sections of your code to see if the issue persists.  Start with a minimal working example and gradually reintroduce elements to identify the problematic part.\n\n*   **Check Flickity's documentation:** The official Flickity documentation is your primary resource. Search for error messages, unusual behavior, or specific configuration options.\n\n\n### Performance Optimization\n\n*   **Minimize the number of cells:** Fewer cells lead to better performance, especially on low-powered devices.  Consider loading cells dynamically as the user scrolls instead of loading everything at once.\n\n*   **Optimize images:** Use appropriately sized and optimized images. Large images can slow down page load and Flickity's performance. Consider lazy-loading for images outside the viewport.\n\n*   **Use efficient CSS:** Avoid complex or computationally expensive CSS styles that could impact rendering performance. Keep your CSS concise and well-organized.\n\n*   **Use a build process:** For larger projects, a build process can optimize your code (minification, bundling) resulting in smaller file sizes and faster loading times.\n\n\n\n\n## API Reference\n\nThis section provides a detailed reference for the Flickity API.\n\n\n### Flickity Class\n\nThe `Flickity` class is the main constructor for creating a Flickity carousel.\n\n**Constructor:**\n\n```javascript\nnew Flickity( element, options )\n```\n\n*   `element`: (HTMLElement or string selector) The DOM element to turn into a Flickity carousel.\n*   `options`: (object, optional) An object containing Flickity options (see Flickity Options section below).\n\n\n### Flickity Instance Methods\n\nAfter creating a Flickity instance, you can use the following methods to interact with it:\n\n*   **`.select(index, isInstant)`:** Selects a cell by its index.  `isInstant` (boolean, optional) determines whether the transition is immediate.\n*   **`.previous()`:** Selects the previous cell.\n*   **`.next()`:** Selects the next cell.\n*   **`.resize()`:** Updates the Flickity layout.  Call this after adding, removing, or modifying cells.\n*   **`.destroy()`:** Removes Flickity from the element.\n*   **`.reloadCells()`:** Reselects cells from the DOM. Use after significant content changes.\n*   **`.getCellElements()`:** Returns an array of the cell DOM elements.\n*   **`.getCurrentCell()`:** Returns the currently selected cell's DOM element.\n*   **`.getCells()`:** Returns an array of Flickity Cell instances (containing more detailed cell information).\n*   **`.on(eventName, listener)`:** Adds an event listener.\n*   **`.once(eventName, listener)`:** Adds an event listener that is removed after the first event.\n*   **`.off(eventName, listener)`:** Removes an event listener.\n\n\n**Event Handling Methods:**\n\nThe `on()`, `once()`, and `off()` methods are used to manage events.  The `eventName` is a string representing the event name (e.g., `select`, `resize`, `change`). The `listener` is a callback function that will be executed when the event is triggered.  For example:\n\n```javascript\nflkty.on( 'select', function( event ) {\n  console.log( 'Selected cell:', event.selectedIndex );\n});\n```\n\n\n### Flickity Options\n\nThese options can be passed to the `Flickity` constructor or set using the `data-flickity` attribute:\n\n*   **`accessibility`**: (boolean) Enables/disables ARIA attributes. Defaults to `true`.\n*   **`adaptiveHeight`**: (boolean) Adapts the carousel height to the tallest cell. Defaults to `false`.\n*   **`cellAlign`**: (`'left'`, `'center'`, `'right'`) Aligns cells within the carousel. Defaults to `'center'`.\n*   **`cellSelector`**: (string) CSS selector for cells. Defaults to `'> *` (all direct children).\n*   **`contain`**: (boolean) Prevents cells from overflowing the container. Defaults to `false`.\n*   **`draggable`**: (boolean) Enables/disables dragging. Defaults to `true`.\n*   **`friction`**: (number) Friction coefficient for momentum. Defaults to `0.28`.\n*   **`freeScroll`**: (boolean) Enables free scrolling. Defaults to `false`.\n*   **`initialIndex`**: (number) Index of the initially selected cell. Defaults to `0`.\n*   **`percentPosition`**: (boolean) Uses percentage-based positioning. Defaults to `false`.\n*   **`prevNextButtons`**: (boolean) Shows/hides previous/next buttons. Defaults to `true`.\n*   **`pageDots`**: (boolean) Shows/hides page dots. Defaults to `true`.\n*   **`wrapAround`**: (boolean) Enables wrapping around. Defaults to `false`.\n*   **`autoPlay`**: (number or boolean) Enables auto-playing.  A number sets the interval in milliseconds. Defaults to `false`.\n*   **`imagesLoaded`**: (boolean) Waits for images to load before initializing. Defaults to `true`.\n\n\nThis is not an exhaustive list. Refer to the complete Flickity documentation for all available options and their descriptions.  The default values are shown above, but remember that the latest documentation might have updates.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"flickity.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Flickity - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}