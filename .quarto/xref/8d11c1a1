{"entries":[],"headings":["what-are-javascript-modules","why-use-javascript-modules","benefits-of-using-modules","historical-context-before-modules","module-systems-comparison-commonjs-amd-esm","exporting-modules","exporting-named-exports","exporting-default-exports","exporting-multiple-values","re-exporting-modules","exporting-objects-and-functions","exporting-classes","exporting-asynchronous-values","importing-modules","importing-named-exports","importing-default-exports","importing-multiple-values","importing-all-exports-using","dynamic-imports","conditional-imports","import-specifiers","module-syntax-and-structure","module-specifiers","relative-vs.-absolute-paths","bare-specifiers-node.js-and-package-management","json-modules","module-resolution","cyclic-dependencies","error-handling-in-imports","advanced-module-concepts","module-contexts-and-environments","hoisting-in-modules","closures-in-modules","namespaces-and-encapsulation","module-bundling-and-build-processes","code-splitting","tree-shaking","lazy-loading","working-with-module-federation","working-with-different-module-systems","commonjs-modules-node.js","amd-modules-asynchronous-module-definition","es-modules-esm","umd-modules-universal-module-definition","systemjs","best-practices-and-style-guide","organizing-your-projects-modules","naming-conventions","code-maintainability","testing-modules","security-considerations","troubleshooting","common-errors-and-debugging","module-resolution-issues","import-errors","circular-dependency-problems","browser-compatibility"]}