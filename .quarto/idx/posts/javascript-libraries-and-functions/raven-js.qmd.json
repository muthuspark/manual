{"title":"Raven JS - Documentation","markdown":{"yaml":{"title":"Raven JS - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Raven.js?","containsRefs":false,"markdown":"\n\n\n\nRaven.js is a lightweight JavaScript client for Sentry, a popular error tracking and performance monitoring platform.  It allows you to easily integrate Sentry into your JavaScript applications (both frontend and backend Node.js applications) to capture and monitor errors, exceptions, and other performance issues.  Raven.js sends detailed error reports to your Sentry project, providing valuable insights into the stability and performance of your applications. This enables you to proactively identify, diagnose, and resolve issues before they impact your users.  Essentially, it acts as a bridge between your application's JavaScript code and the Sentry platform.\n\n### Key Features and Benefits\n\n* **Real-time error tracking:** Instantly receive alerts and detailed reports about errors occurring in your application.\n* **Exception handling:** Automatically catches and reports JavaScript exceptions, providing stack traces and other relevant context.\n* **Breadcrumbs:** Automatically records user interactions and other relevant events leading up to an error, providing crucial context for debugging.\n* **Custom data and tags:**  Allows you to add custom context to error reports, such as user information, environment details, or specific application states.\n* **Performance monitoring:** Tracks performance metrics like page load times and network requests to identify performance bottlenecks.\n* **Integration with popular frameworks:** Seamlessly integrates with popular JavaScript frameworks like React, Angular, Vue.js, and more.\n* **Source maps support:** Maps minified code back to its original source, making debugging easier.\n* **User feedback:** Optionally integrate user feedback mechanisms to gather more information about errors.\n* **Open-source:** Benefit from an active community and constant improvement.\n\n\n### Setting up Raven.js\n\nSetting up Raven.js typically involves these steps:\n\n1. **Create a Sentry project:**  Sign up for a Sentry account and create a new project. You'll receive a DSN (Data Source Name), a unique identifier for your project that Raven.js will use to send error reports.\n\n2. **Include Raven.js in your project:** Include the Raven.js script in your application's HTML file, preferably before your application's JavaScript code:\n\n   ```html\n   <script src=\"https://cdn.jsdelivr.net/npm/raven-js@3.26.4/dist/raven.min.js\"></script>\n   ```\n\n3. **Initialize Raven.js:** Use the `Raven.config()` method to initialize Raven.js with your DSN:\n\n   ```javascript\n   Raven.config('YOUR_DSN_HERE', {\n       // Optional configuration options\n       release: '1.0.0', // Your application's version\n       environment: 'production', // Your application's environment\n       // ... other options\n   }).install();\n   ```\n\n   Replace `YOUR_DSN_HERE` with your actual DSN.\n\n\n### Integration with Popular Frameworks\n\nRaven.js integrates well with various popular JavaScript frameworks.  While the core functionality remains consistent, framework-specific integration might involve additional setup steps or plugins.  For example:\n\n* **React:** Consider using a dedicated integration package that might offer enhanced features for React apps.\n* **Angular:** Similar to React, dedicated packages might streamline the integration process.\n* **Vue.js:**  While direct integration with Raven.js is possible, explore community-provided plugins or wrappers for smoother integration.\n* **Node.js:** Raven.js can be used in Node.js environments, often involving server-side error handling and reporting.  Refer to the official Sentry documentation for detailed instructions.\n\nFor specific integration details with a particular framework, please refer to the official Sentry documentation and any community-contributed plugins or extensions.  The key principle remains consistent: initialize Raven.js with your DSN and let it handle error reporting.\n\n\n## Core Concepts\n\n### Error Reporting Workflow\n\nThe Raven.js error reporting workflow involves several key steps:\n\n1. **Error Capture:** When an uncaught exception occurs in your JavaScript application, Raven.js intercepts it.  It also captures errors that are explicitly reported using `Raven.captureException()` or `Raven.captureMessage()`.\n\n2. **Data Collection:** Raven.js gathers various data points related to the error, including:\n    * **Stack trace:** A detailed breakdown of the code execution path leading to the error.\n    * **Error message:** The textual description of the error.\n    * **Browser information:** Details about the user's browser, operating system, and device.\n    * **URL:** The URL of the page where the error occurred.\n    * **Breadcrumbs (optional):**  A trail of events preceding the error (explained in the next section).\n    * **Contextual data (optional):** User-defined data providing additional context (discussed below).\n\n3. **Data Processing:** Raven.js processes the collected data, potentially applying source maps to de-minify the code for better readability.\n\n4. **Transmission:** The processed error data is sent to your Sentry project using an asynchronous HTTP request.  This ensures that the error reporting process doesn't block your application's execution.\n\n5. **Reporting and Analysis:** Your Sentry project receives the data, allowing you to view error reports, analyze trends, and debug issues.\n\n\n### Exception Handling\n\nRaven.js automatically captures unhandled JavaScript exceptions.  However, you can also explicitly report exceptions using `Raven.captureException()`:\n\n```javascript\ntry {\n  // Some code that might throw an exception\n  throw new Error(\"Something went wrong!\");\n} catch (error) {\n  Raven.captureException(error);\n  // Optionally handle the error gracefully in your application\n}\n```\n\nThis allows for more controlled error reporting, even if you are handling the exception within a `try...catch` block.  You may want to report the error to Sentry while providing a user-friendly fallback in your application.\n\n\n### Breadcrumbs\n\nBreadcrumbs are a series of contextual events recorded before an error occurs, providing valuable insight into the user's actions and application state leading up to the crash.  Raven.js automatically records some breadcrumbs (e.g., navigation events), but you can manually add your own using `Raven.leaveBreadcrumb()`:\n\n```javascript\nRaven.leaveBreadcrumb({\n  category: 'user action',\n  message: 'User clicked \"Submit\"',\n  data: {\n    formId: 'myForm'\n  }\n});\n```\n\nThis helps in understanding the sequence of events that might have contributed to the error.\n\n\n### Contexts\n\nContexts provide additional information about the environment and state of your application at the time of the error.  You can set contexts using `Raven.context()`:\n\n```javascript\nRaven.context({\n  user: {\n    id: 123,\n    email: 'user@example.com'\n  },\n  session: {\n    id: 'abcdef123456'\n  }\n}, function () {\n  // Code that might throw an error\n});\n```\n\nThis makes error reports more informative and easier to debug, as they include relevant user and session details.\n\n\n### Tags and Extra Data\n\nTags and extra data provide additional metadata to your error reports. Tags are key-value pairs used for filtering and grouping errors (e.g., `environment: 'production'`, `version: '1.2.3'`). Extra data is arbitrary key-value data that provides more detailed context for a specific error.  You can add them with `Raven.setTags()` and `Raven.setExtraContext()`:\n\n\n```javascript\nRaven.setTagsContext({\n  environment: 'staging',\n  feature: 'new-payment-system'\n});\n\nRaven.setExtraContext({\n  order_id: 1234,\n  payment_method: 'credit card'\n});\n```\n\n\n### User Feedback\n\nRaven.js doesn't directly handle user feedback mechanisms. However,  you can integrate a user feedback system into your application and include that information in the error reports, for example using `Raven.setExtraContext()`. This helps enrich your error reports with valuable user insights.  You would need to implement a separate feedback mechanism (e.g., a feedback form) to collect user input, and then include that data in the context or extra data passed to Raven.js.\n\n\n## Client-Side Configuration\n\n### Basic Configuration\n\nThe most basic Raven.js configuration involves initializing the client with your Sentry DSN (Data Source Name).  This is typically done by including the Raven.js script and then calling `Raven.config()` before any other Raven.js functions:\n\n```javascript\n<script src=\"https://cdn.jsdelivr.net/npm/raven-js@3.26.4/dist/raven.min.js\"></script>\n<script>\n  Raven.config('YOUR_DSN_HERE').install();\n</script>\n```\n\nReplace `YOUR_DSN_HERE` with your project's DSN.  The `install()` method ensures that Raven.js starts capturing errors.  This is the minimum setup needed for basic error reporting.\n\n\n### Advanced Configuration Options\n\nRaven.js offers several advanced configuration options to customize its behavior:\n\n* `release`:  Specifies the version of your application (e.g., '1.0.0').  This helps in grouping errors related to specific releases.\n\n* `environment`: Indicates the environment your application is running in (e.g., 'development', 'staging', 'production').  This allows for filtering errors by environment.\n\n* `sampleRate`: Controls the percentage of errors sent to Sentry.  Setting it to a value less than 1.0 (e.g., 0.5) will only send 50% of the errors, useful for reducing load on your Sentry project during development or for high-traffic applications.\n\n* `whitelistUrls`: An array of regular expressions specifying URLs to include for error reporting.  Useful for filtering out errors from specific parts of your application or external scripts.\n\n* `blacklistUrls`:  Similar to `whitelistUrls`, but specifies URLs to *exclude* from error reporting.\n\n* `ignoreErrors`: An array of strings or regular expressions specifying error messages to ignore.  Useful for filtering out known or irrelevant errors.\n\n* `dataCallback`:  A function that allows modification of the error data before it's sent to Sentry.  This is useful for adding custom context or sanitizing sensitive information.\n\nExample with some advanced options:\n\n```javascript\nRaven.config('YOUR_DSN_HERE', {\n  release: '1.2.3',\n  environment: 'production',\n  sampleRate: 0.8,\n  ignoreErrors: ['Network Error'],\n  dataCallback: function(data) {\n    // Modify the data object here\n    return data;\n  }\n}).install();\n```\n\n\n### Customizing Error Reporting\n\nBeyond basic configuration, you can customize error reporting using several methods:\n\n* **`Raven.captureException(error)`:** Manually capture and send a specific exception.\n\n* **`Raven.captureMessage(message)`:**  Send a custom error message.\n\n* **`Raven.captureBreadcrumb(breadcrumb)`:** Add a custom breadcrumb.\n\n* **`Raven.setExtraContext(data)`:** Add extra context to subsequent error reports.\n\n* **`Raven.setTagsContext(tags)`:** Set tags for subsequent error reports.\n\n* **`Raven.setUserContext(user)`:** Set user context for subsequent error reports.  This is useful for associating errors with specific users.\n\n\n### Environment Variables\n\nYou can configure Raven.js using environment variables.  This is particularly useful for setting the DSN and other sensitive information without hardcoding it into your JavaScript code.  The specific method for accessing environment variables depends on your deployment environment.  For example, you might use `process.env.SENTRY_DSN` in a Node.js environment.  This value would then be used within the `Raven.config()` call.\n\n\n### Data Sanitization\n\nIt's crucial to sanitize sensitive data before sending it to Sentry.  Use the `dataCallback` configuration option to filter out potentially sensitive information like passwords, credit card numbers, and personally identifiable information (PII).  You can use regular expressions or other data manipulation techniques to remove or replace sensitive data within this callback function. This ensures compliance with privacy regulations and protects sensitive user information.  Always prioritize data security and responsible error reporting.\n\n\n## Server-Side Configuration (Sentry)\n\nThis section focuses on the Sentry side of the configuration, not the Raven.js client-side setup.  Raven.js relies on a correctly configured Sentry project to function properly.\n\n\n### Setting up a Sentry Project\n\n1. **Create an Account:**  Sign up for a Sentry account at [sentry.io](sentry.io).\n\n2. **Create a New Project:** After logging in, create a new project.  Choose a name for your project and select the relevant platform (JavaScript for frontend or Node.js for backend applications using Raven.js).\n\n3. **Obtain Your DSN:**  Once your project is created, you'll receive a DSN (Data Source Name).  This DSN is a unique identifier for your project and is crucial for connecting Raven.js to your Sentry instance.  **Treat your DSN as a secret and do not expose it in your client-side code (especially not in publicly accessible files).**\n\n\n### Connecting Raven.js to Sentry\n\nConnecting Raven.js to your Sentry project is primarily done by providing your DSN to the `Raven.config()` method in your client-side JavaScript code (as detailed in the Client-Side Configuration section).  Sentry handles receiving and processing the error data sent by Raven.js.  The server-side aspect here is ensuring the Sentry project itself is properly set up to receive and process the data.\n\n\n### Managing Projects and Teams\n\nSentry provides tools for managing multiple projects and teams within your organization.  You can:\n\n* **Create multiple projects:**  Organize your projects based on applications, environments (development, staging, production), or other relevant criteria.\n\n* **Create teams:**  Group users into teams to manage access and permissions to specific projects.  This allows for better collaboration and control over who can access error reports.\n\n* **Assign roles:**  Define roles and permissions for users within teams.  This ensures that only authorized personnel can view and manage error data.\n\nThese features are managed through the Sentry web interface.\n\n\n### User Authentication and Authorization\n\nSentry uses its own authentication system to manage user access. You can invite members to your organization and assign them roles within projects. These roles determine their level of access, such as viewing error reports, managing settings, or performing administrative tasks.  This robust authentication system ensures only authorized personnel can access and modify your error data and project settings.\n\n\n### Access Control\n\nSentry allows granular control over access to your projects and data. You can:\n\n* **Restrict access to specific projects:**  Ensure that only authorized teams or individuals have access to error data from certain projects.\n\n* **Set permission levels:**  Define different permission levels for users (e.g., read-only access, full access, administrative access).\n\n* **Manage user access:**  Invite, remove, and modify permissions for users associated with your Sentry organization and projects.\n\nThis detailed access control helps maintain data security and restricts access to sensitive error information based on user roles and responsibilities.  Always configure your Sentry organization and projects to match the security and access control requirements of your development workflow.\n\n\n## Advanced Usage\n\n### Custom Integrations\n\nWhile Raven.js offers excellent integration with various frameworks, you might need custom integrations for specific libraries or tools not directly supported.  This involves creating custom code to capture errors or events from those libraries and report them to Raven.js using functions like `Raven.captureException()` or `Raven.captureMessage()`. You'll need to understand the error handling mechanisms of the library you're integrating and tailor your code to capture the relevant information and context.\n\n\n### Extending Raven.js Functionality\n\nRaven.js's core functionality can be extended to add features or customize existing behaviors.  This might involve creating custom middleware functions that manipulate data before it's sent to Sentry or implementing custom breadcrumb handlers to capture specific events.  The `dataCallback` configuration option and the breadcrumb API are key points for achieving this.\n\n\n### Plugin Development\n\nCreating plugins for Raven.js allows you to share custom integrations and extensions with others.  A plugin would typically be a self-contained module that extends Raven.js's capabilities, such as adding support for a new framework or integrating with a specific logging system.  These plugins would need to adhere to specific conventions to ensure compatibility and seamless integration with Raven.js.  Consult the Sentry documentation for guidelines on plugin development.\n\n\n### Troubleshooting and Debugging\n\nTroubleshooting Raven.js issues usually involves verifying:\n\n* **Correct DSN:** Ensure you're using the correct DSN for your Sentry project.\n* **Network Connectivity:** Check for network issues that might prevent error reports from reaching Sentry.\n* **Browser Console:** Examine the browser's developer console for any JavaScript errors or warnings that might provide clues about Raven.js's operation.\n* **Sentry Dashboard:** Review the Sentry dashboard for error reports and diagnostic information. Look for errors relating to the Raven.js setup itself.\n* **`Raven.showReportDialog()`:**  This method can be used to show Sentry's error reporting dialog to the user, which can be helpful for collecting additional debugging context.\n\nIf errors aren't being reported, carefully review your Raven.js configuration and integration, ensuring it aligns correctly with the project setup within your Sentry dashboard.\n\n\n### Performance Optimization\n\nWhile Raven.js is lightweight, optimizing its use can improve performance, especially in high-traffic applications:\n\n* **`sampleRate`:** Lowering the `sampleRate` reduces the number of error reports sent, decreasing the load on both your application and Sentry.\n\n* **Asynchronous Operations:** Ensure all interactions with Raven.js are asynchronous to avoid blocking the main thread.\n\n* **Error Filtering:**  Use the `ignoreErrors` option to filter out known, non-critical, or frequently occurring errors.\n\n* **Minification:** Use minified versions of Raven.js to reduce the script's size.\n\n* **Caching:** Use caching mechanisms to avoid unnecessary network requests.\n\nBalancing the level of error reporting with application performance is crucial; minimizing unnecessary reporting improves the application's speed and responsiveness without sacrificing valuable diagnostic data.  Carefully consider the trade-offs between the amount of data sent and the impact on performance.\n\n\n## Monitoring and Analysis\n\nThis section describes how to use the Sentry dashboard to monitor and analyze error data collected by Raven.js.\n\n\n### Dashboard Overview\n\nThe Sentry dashboard provides a central location to view and manage error reports.  The overview typically includes:\n\n* **Summary of recent errors:** A high-level overview of the number of new and unresolved errors.\n* **Charts and graphs:** Visual representations of error trends over time, allowing you to quickly identify patterns.\n* **Project overview:** A summary of error rates and performance metrics for your project(s).\n* **Quick access to individual issues:**  Easy navigation to detailed views of specific errors.\n* **Alerts and notifications:**  System-generated alerts about significant error increases or new critical issues.\n\n\n### Issue Tracking and Management\n\nSentry allows you to track and manage individual issues effectively:\n\n* **Issue Details:**  Each issue displays detailed information, including the stack trace, error message, breadcrumbs, context, tags, user details, and more.\n* **Issue Status:**  Track the status of an issue (e.g., new, assigned, resolved, triaged).\n* **Issue Assignment:** Assign issues to team members for resolution.\n* **Issue Comments:** Add comments to collaborate on troubleshooting or provide updates.\n* **Issue Resolution:** Mark issues as resolved when they are fixed.  Sentry tracks resolution rates and time to resolution.\n\n\n### Filtering and Searching\n\nSentry offers robust filtering and searching capabilities to easily find specific errors:\n\n* **Filter by error message:** Locate issues by searching for keywords in the error message.\n* **Filter by exception type:** Identify issues caused by specific types of exceptions.\n* **Filter by environment:** Separate errors from different environments (development, staging, production).\n* **Filter by platform:** View errors from specific platforms (browser, server).\n* **Filter by tags and context:** Use tags and contextual information to narrow down your search.\n* **Time range filters:**  View errors occurring within a specific time period.\n\n\n### Analyzing Error Trends\n\nSentry's charts and graphs help analyze error trends:\n\n* **Error rate over time:** Monitor the rate of new errors to identify potential regressions.\n* **Error distribution:** Understand the distribution of errors across different environments and platforms.\n* **Trend analysis:**  Spot increasing or decreasing error rates to see the impact of code changes or deployments.\n* **Performance monitoring:** Track application performance metrics such as page load times and network requests to identify bottlenecks.\n\n\n### Generating Reports\n\nSentry enables you to generate reports to summarize error data:\n\n* **Customizable reports:**  Create reports focusing on specific error types, environments, or time periods.\n* **Report formats:**  Export reports in various formats (e.g., CSV, PDF) for sharing or further analysis.\n* **Scheduled reports:**  Set up scheduled reports to regularly receive summaries of error data.\n\nThese reports are valuable for tracking progress, identifying recurring problems, and demonstrating the impact of your bug fixes or performance optimizations.  Use the reporting features to create informative summaries of your error data for various audiences, from your development team to management.\n\n\n## API Reference\n\nThis section provides a brief overview of key Raven.js API methods.  For the most up-to-date and complete documentation, refer to the official Sentry documentation.\n\n\n### `Raven.captureException()`\n\nSends an exception to Sentry.  This is typically used within a `try...catch` block to report exceptions that are caught by your application's code.\n\n```javascript\ntry {\n  // Code that might throw an exception\n} catch (e) {\n  Raven.captureException(e);\n}\n```\n\n* `e`: (Error object) The exception to be reported.  This should be a JavaScript `Error` object or a similar object with a `message` and optionally a `stack` property.\n\n\n### `Raven.captureMessage()`\n\nSends a custom message to Sentry.  Useful for reporting errors that aren't necessarily JavaScript exceptions (e.g., network errors or warnings).\n\n```javascript\nRaven.captureMessage('A critical error occurred!');\n```\n\n* `message`: (String) The error message to be reported.\n\n\n### `Raven.captureBreadcrumb()`\n\nManually adds a breadcrumb to the current session's breadcrumb trail. Breadcrumbs provide context surrounding an error.\n\n```javascript\nRaven.captureBreadcrumb({\n  message: 'User clicked the submit button',\n  category: 'ui.action',\n  data: { buttonId: 'submitBtn' }\n});\n```\n\n* `breadcrumb`: (Object) An object containing breadcrumb information.  Common properties include `message`, `category`, `type`, and `data`.\n\n\n### `Raven.setContext()`\n\nSets contextual information for subsequent error reports.  This information will be included in the error report sent to Sentry.\n\n```javascript\nRaven.setContext({\n  user: { id: 123, name: 'John Doe' },\n  session: { id: 'abcdef' }\n});\n```\n\n* `context`: (Object) An object containing contextual data.\n\n\n### `Raven.setUser()`\n\nSets user information for subsequent error reports.\n\n```javascript\nRaven.setUser({\n  id: 123,\n  email: 'john.doe@example.com',\n  username: 'johndoe'\n});\n```\n\n* `user`: (Object) An object containing user information (e.g., `id`, `email`, `username`).\n\n\n### `Raven.showReportDialog()`\n\nDisplays Sentry's report dialog, allowing users to submit feedback or additional information about an error.\n\n```javascript\nRaven.showReportDialog({\n  title: 'Oops, something went wrong!',\n  message: 'We are working on fixing this issue.  Please submit your feedback to help us improve.'\n});\n```\n\n* `options`: (Object, optional)  Options to customize the dialog (e.g., `title`, `message`, `name`, `email`).\n\n\n\n### Other API methods\n\nRaven.js provides other methods for more advanced usage, including:\n\n* `Raven.uninstall()`: Uninstalls Raven.js, stopping error reporting.\n* `Raven.setTagsContext()`: Sets tags for subsequent error reports (used for filtering and grouping errors).\n* `Raven.setExtraContext()`: Adds additional key-value pairs of data to subsequent reports.\n* `Raven.lastEventId()`: Returns the ID of the last event sent to Sentry.\n* `Raven.isSetup()`: Checks if Raven.js is properly configured.\n* `Raven.state`: Provides access to Raven.js's internal state (use with caution).  This property allows inspection of the client's configuration and internal data but should generally only be used for advanced debugging.\n\nRefer to the official Sentry documentation for detailed explanations and examples of all available API methods.  Always consult the official documentation for the most up-to-date information and examples.  The API might change with newer versions of Raven.js.\n\n\n## Migration Guide (from previous versions)\n\nThis guide helps you migrate from older versions of Raven.js to the latest version.  Always consult the official Sentry release notes for the most accurate and up-to-date information on breaking changes and migration instructions.\n\n\n### Breaking Changes\n\nBreaking changes between major versions of Raven.js are infrequent but can occur.  These changes might include:\n\n* **API changes:**  Methods might be renamed, removed, or their parameters altered.\n* **Configuration changes:**  Configuration options might be renamed or removed, requiring adjustments to your code.\n* **Dependency updates:**  Underlying dependencies might be upgraded, potentially requiring changes in your project's setup.\n* **Removed features:**  Less used or deprecated features might be removed entirely.\n\nAlways check the release notes for the specific version you are upgrading to for a detailed list of breaking changes.\n\n\n### Upgrade Instructions\n\nA typical upgrade process involves:\n\n1. **Check for Breaking Changes:**  Carefully review the release notes for the new version to identify any breaking changes affecting your code.\n\n2. **Update the Raven.js Script:**  Replace the old Raven.js script in your HTML file with the new version.  Use a Content Delivery Network (CDN) or download the updated version from the official Sentry website.\n\n3. **Update Configuration:**  Adjust your Raven.js configuration (`Raven.config()`) to reflect any changes in configuration options.  Pay close attention to any renamed or removed options.\n\n4. **Update Code:**  Modify your code to accommodate any API changes.  Rename functions, adjust parameters, or remove deprecated methods as needed.\n\n5. **Testing:** Thoroughly test your application after the upgrade to ensure all error reporting functionality works correctly.\n\n\n### Compatibility Notes\n\n* **Browser Compatibility:**  Raven.js generally supports modern browsers.  Refer to the official documentation for compatibility details. Older browsers might require polyfills for specific features.\n\n* **Framework Compatibility:**  Raven.js integrates with many popular frameworks.  Check the Sentry documentation for compatibility information regarding the frameworks used in your project.  Ensure the new version maintains compatibility with your chosen framework.\n\n* **Node.js Compatibility:**  If you use Raven.js in a Node.js environment, check the compatibility notes for the Node.js version you are using.  Ensure the required Node.js version aligns with the new Raven.js version.\n\n\nMigrating to a new major version should be a deliberate process.  Consider creating a staging or testing environment to perform the upgrade and thoroughly test the changes before deploying to production.  A phased rollout strategy might be prudent for large applications to minimize disruption during the migration.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **DSN (Data Source Name):** A unique identifier for your Sentry project that Raven.js uses to send error reports.  It's essential for connecting your application to your Sentry instance.\n\n* **Breadcrumb:** A record of an event that occurred before an error, providing context for debugging. Examples include user actions, network requests, and logging events.\n\n* **Context:** Additional information added to error reports to provide more details about the application's state at the time of the error. This might include user information, session data, or environment variables.\n\n* **Tag:** A key-value pair used to categorize and filter error reports (e.g., `environment: production`, `feature: login`).\n\n* **Issue:** A grouping of similar error reports in Sentry, often representing a specific bug.\n\n* **Stack Trace:** A list of function calls that led to an error, showing the execution path in your code.\n\n* **Source Map:** A file that maps minified code back to its original source code, making debugging easier.\n\n* **Sample Rate:** A percentage (0.0 to 1.0) that controls how many error reports are sent to Sentry.  Lowering it reduces load on Sentry but might also reduce the diagnostic data you collect.\n\n* **Release:** A version identifier for your application, used to group errors from specific releases.\n\n\n### FAQ\n\n* **Why aren't my errors showing up in Sentry?**  Check your DSN, network connectivity, and the Sentry dashboard for any error messages.  Ensure your Raven.js configuration is correct, and review the browser console for any JavaScript errors.\n\n* **How do I add custom data to my error reports?** Use `Raven.setContext()`, `Raven.setTagsContext()`, and `Raven.setExtraContext()` to add custom data.\n\n* **How can I prevent specific errors from being reported?** Use the `ignoreErrors` option in the Raven.js configuration to filter out unwanted errors.\n\n* **What is the difference between `captureException()` and `captureMessage()`?** Use `captureException()` for JavaScript exceptions and `captureMessage()` for custom error messages.\n\n* **How can I improve the performance of Raven.js?** Lower the sample rate, use asynchronous operations, and filter out unnecessary error reports.\n\n\n### Troubleshooting\n\nRefer to the \"Troubleshooting and Debugging\" section in the Advanced Usage chapter for detailed troubleshooting guidance.  Common issues include incorrect DSN, network problems, and misconfigurations within the Raven.js initialization.  Always check the Sentry dashboard and your browser's developer console for diagnostic information.\n\n\n### Contributing to Raven.js\n\nContributions to Raven.js are welcome!  Before contributing, review the contribution guidelines on the Sentry project's repository.  This typically involves:\n\n1. **Forking the Repository:**  Create a fork of the Raven.js repository on GitHub.\n2. **Creating a Branch:**  Create a new branch for your changes.\n3. **Making Changes:**  Implement your changes and write tests to ensure your modifications work correctly.\n4. **Submitting a Pull Request:**  Create a pull request to merge your changes into the main repository.\n\nContributions usually include bug fixes, new features, and improvements to the documentation.  Follow the project's established style guides and coding conventions when submitting your code.  Your contributions will help improve Raven.js and benefit the broader development community.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Raven.js?\n\nRaven.js is a lightweight JavaScript client for Sentry, a popular error tracking and performance monitoring platform.  It allows you to easily integrate Sentry into your JavaScript applications (both frontend and backend Node.js applications) to capture and monitor errors, exceptions, and other performance issues.  Raven.js sends detailed error reports to your Sentry project, providing valuable insights into the stability and performance of your applications. This enables you to proactively identify, diagnose, and resolve issues before they impact your users.  Essentially, it acts as a bridge between your application's JavaScript code and the Sentry platform.\n\n### Key Features and Benefits\n\n* **Real-time error tracking:** Instantly receive alerts and detailed reports about errors occurring in your application.\n* **Exception handling:** Automatically catches and reports JavaScript exceptions, providing stack traces and other relevant context.\n* **Breadcrumbs:** Automatically records user interactions and other relevant events leading up to an error, providing crucial context for debugging.\n* **Custom data and tags:**  Allows you to add custom context to error reports, such as user information, environment details, or specific application states.\n* **Performance monitoring:** Tracks performance metrics like page load times and network requests to identify performance bottlenecks.\n* **Integration with popular frameworks:** Seamlessly integrates with popular JavaScript frameworks like React, Angular, Vue.js, and more.\n* **Source maps support:** Maps minified code back to its original source, making debugging easier.\n* **User feedback:** Optionally integrate user feedback mechanisms to gather more information about errors.\n* **Open-source:** Benefit from an active community and constant improvement.\n\n\n### Setting up Raven.js\n\nSetting up Raven.js typically involves these steps:\n\n1. **Create a Sentry project:**  Sign up for a Sentry account and create a new project. You'll receive a DSN (Data Source Name), a unique identifier for your project that Raven.js will use to send error reports.\n\n2. **Include Raven.js in your project:** Include the Raven.js script in your application's HTML file, preferably before your application's JavaScript code:\n\n   ```html\n   <script src=\"https://cdn.jsdelivr.net/npm/raven-js@3.26.4/dist/raven.min.js\"></script>\n   ```\n\n3. **Initialize Raven.js:** Use the `Raven.config()` method to initialize Raven.js with your DSN:\n\n   ```javascript\n   Raven.config('YOUR_DSN_HERE', {\n       // Optional configuration options\n       release: '1.0.0', // Your application's version\n       environment: 'production', // Your application's environment\n       // ... other options\n   }).install();\n   ```\n\n   Replace `YOUR_DSN_HERE` with your actual DSN.\n\n\n### Integration with Popular Frameworks\n\nRaven.js integrates well with various popular JavaScript frameworks.  While the core functionality remains consistent, framework-specific integration might involve additional setup steps or plugins.  For example:\n\n* **React:** Consider using a dedicated integration package that might offer enhanced features for React apps.\n* **Angular:** Similar to React, dedicated packages might streamline the integration process.\n* **Vue.js:**  While direct integration with Raven.js is possible, explore community-provided plugins or wrappers for smoother integration.\n* **Node.js:** Raven.js can be used in Node.js environments, often involving server-side error handling and reporting.  Refer to the official Sentry documentation for detailed instructions.\n\nFor specific integration details with a particular framework, please refer to the official Sentry documentation and any community-contributed plugins or extensions.  The key principle remains consistent: initialize Raven.js with your DSN and let it handle error reporting.\n\n\n## Core Concepts\n\n### Error Reporting Workflow\n\nThe Raven.js error reporting workflow involves several key steps:\n\n1. **Error Capture:** When an uncaught exception occurs in your JavaScript application, Raven.js intercepts it.  It also captures errors that are explicitly reported using `Raven.captureException()` or `Raven.captureMessage()`.\n\n2. **Data Collection:** Raven.js gathers various data points related to the error, including:\n    * **Stack trace:** A detailed breakdown of the code execution path leading to the error.\n    * **Error message:** The textual description of the error.\n    * **Browser information:** Details about the user's browser, operating system, and device.\n    * **URL:** The URL of the page where the error occurred.\n    * **Breadcrumbs (optional):**  A trail of events preceding the error (explained in the next section).\n    * **Contextual data (optional):** User-defined data providing additional context (discussed below).\n\n3. **Data Processing:** Raven.js processes the collected data, potentially applying source maps to de-minify the code for better readability.\n\n4. **Transmission:** The processed error data is sent to your Sentry project using an asynchronous HTTP request.  This ensures that the error reporting process doesn't block your application's execution.\n\n5. **Reporting and Analysis:** Your Sentry project receives the data, allowing you to view error reports, analyze trends, and debug issues.\n\n\n### Exception Handling\n\nRaven.js automatically captures unhandled JavaScript exceptions.  However, you can also explicitly report exceptions using `Raven.captureException()`:\n\n```javascript\ntry {\n  // Some code that might throw an exception\n  throw new Error(\"Something went wrong!\");\n} catch (error) {\n  Raven.captureException(error);\n  // Optionally handle the error gracefully in your application\n}\n```\n\nThis allows for more controlled error reporting, even if you are handling the exception within a `try...catch` block.  You may want to report the error to Sentry while providing a user-friendly fallback in your application.\n\n\n### Breadcrumbs\n\nBreadcrumbs are a series of contextual events recorded before an error occurs, providing valuable insight into the user's actions and application state leading up to the crash.  Raven.js automatically records some breadcrumbs (e.g., navigation events), but you can manually add your own using `Raven.leaveBreadcrumb()`:\n\n```javascript\nRaven.leaveBreadcrumb({\n  category: 'user action',\n  message: 'User clicked \"Submit\"',\n  data: {\n    formId: 'myForm'\n  }\n});\n```\n\nThis helps in understanding the sequence of events that might have contributed to the error.\n\n\n### Contexts\n\nContexts provide additional information about the environment and state of your application at the time of the error.  You can set contexts using `Raven.context()`:\n\n```javascript\nRaven.context({\n  user: {\n    id: 123,\n    email: 'user@example.com'\n  },\n  session: {\n    id: 'abcdef123456'\n  }\n}, function () {\n  // Code that might throw an error\n});\n```\n\nThis makes error reports more informative and easier to debug, as they include relevant user and session details.\n\n\n### Tags and Extra Data\n\nTags and extra data provide additional metadata to your error reports. Tags are key-value pairs used for filtering and grouping errors (e.g., `environment: 'production'`, `version: '1.2.3'`). Extra data is arbitrary key-value data that provides more detailed context for a specific error.  You can add them with `Raven.setTags()` and `Raven.setExtraContext()`:\n\n\n```javascript\nRaven.setTagsContext({\n  environment: 'staging',\n  feature: 'new-payment-system'\n});\n\nRaven.setExtraContext({\n  order_id: 1234,\n  payment_method: 'credit card'\n});\n```\n\n\n### User Feedback\n\nRaven.js doesn't directly handle user feedback mechanisms. However,  you can integrate a user feedback system into your application and include that information in the error reports, for example using `Raven.setExtraContext()`. This helps enrich your error reports with valuable user insights.  You would need to implement a separate feedback mechanism (e.g., a feedback form) to collect user input, and then include that data in the context or extra data passed to Raven.js.\n\n\n## Client-Side Configuration\n\n### Basic Configuration\n\nThe most basic Raven.js configuration involves initializing the client with your Sentry DSN (Data Source Name).  This is typically done by including the Raven.js script and then calling `Raven.config()` before any other Raven.js functions:\n\n```javascript\n<script src=\"https://cdn.jsdelivr.net/npm/raven-js@3.26.4/dist/raven.min.js\"></script>\n<script>\n  Raven.config('YOUR_DSN_HERE').install();\n</script>\n```\n\nReplace `YOUR_DSN_HERE` with your project's DSN.  The `install()` method ensures that Raven.js starts capturing errors.  This is the minimum setup needed for basic error reporting.\n\n\n### Advanced Configuration Options\n\nRaven.js offers several advanced configuration options to customize its behavior:\n\n* `release`:  Specifies the version of your application (e.g., '1.0.0').  This helps in grouping errors related to specific releases.\n\n* `environment`: Indicates the environment your application is running in (e.g., 'development', 'staging', 'production').  This allows for filtering errors by environment.\n\n* `sampleRate`: Controls the percentage of errors sent to Sentry.  Setting it to a value less than 1.0 (e.g., 0.5) will only send 50% of the errors, useful for reducing load on your Sentry project during development or for high-traffic applications.\n\n* `whitelistUrls`: An array of regular expressions specifying URLs to include for error reporting.  Useful for filtering out errors from specific parts of your application or external scripts.\n\n* `blacklistUrls`:  Similar to `whitelistUrls`, but specifies URLs to *exclude* from error reporting.\n\n* `ignoreErrors`: An array of strings or regular expressions specifying error messages to ignore.  Useful for filtering out known or irrelevant errors.\n\n* `dataCallback`:  A function that allows modification of the error data before it's sent to Sentry.  This is useful for adding custom context or sanitizing sensitive information.\n\nExample with some advanced options:\n\n```javascript\nRaven.config('YOUR_DSN_HERE', {\n  release: '1.2.3',\n  environment: 'production',\n  sampleRate: 0.8,\n  ignoreErrors: ['Network Error'],\n  dataCallback: function(data) {\n    // Modify the data object here\n    return data;\n  }\n}).install();\n```\n\n\n### Customizing Error Reporting\n\nBeyond basic configuration, you can customize error reporting using several methods:\n\n* **`Raven.captureException(error)`:** Manually capture and send a specific exception.\n\n* **`Raven.captureMessage(message)`:**  Send a custom error message.\n\n* **`Raven.captureBreadcrumb(breadcrumb)`:** Add a custom breadcrumb.\n\n* **`Raven.setExtraContext(data)`:** Add extra context to subsequent error reports.\n\n* **`Raven.setTagsContext(tags)`:** Set tags for subsequent error reports.\n\n* **`Raven.setUserContext(user)`:** Set user context for subsequent error reports.  This is useful for associating errors with specific users.\n\n\n### Environment Variables\n\nYou can configure Raven.js using environment variables.  This is particularly useful for setting the DSN and other sensitive information without hardcoding it into your JavaScript code.  The specific method for accessing environment variables depends on your deployment environment.  For example, you might use `process.env.SENTRY_DSN` in a Node.js environment.  This value would then be used within the `Raven.config()` call.\n\n\n### Data Sanitization\n\nIt's crucial to sanitize sensitive data before sending it to Sentry.  Use the `dataCallback` configuration option to filter out potentially sensitive information like passwords, credit card numbers, and personally identifiable information (PII).  You can use regular expressions or other data manipulation techniques to remove or replace sensitive data within this callback function. This ensures compliance with privacy regulations and protects sensitive user information.  Always prioritize data security and responsible error reporting.\n\n\n## Server-Side Configuration (Sentry)\n\nThis section focuses on the Sentry side of the configuration, not the Raven.js client-side setup.  Raven.js relies on a correctly configured Sentry project to function properly.\n\n\n### Setting up a Sentry Project\n\n1. **Create an Account:**  Sign up for a Sentry account at [sentry.io](sentry.io).\n\n2. **Create a New Project:** After logging in, create a new project.  Choose a name for your project and select the relevant platform (JavaScript for frontend or Node.js for backend applications using Raven.js).\n\n3. **Obtain Your DSN:**  Once your project is created, you'll receive a DSN (Data Source Name).  This DSN is a unique identifier for your project and is crucial for connecting Raven.js to your Sentry instance.  **Treat your DSN as a secret and do not expose it in your client-side code (especially not in publicly accessible files).**\n\n\n### Connecting Raven.js to Sentry\n\nConnecting Raven.js to your Sentry project is primarily done by providing your DSN to the `Raven.config()` method in your client-side JavaScript code (as detailed in the Client-Side Configuration section).  Sentry handles receiving and processing the error data sent by Raven.js.  The server-side aspect here is ensuring the Sentry project itself is properly set up to receive and process the data.\n\n\n### Managing Projects and Teams\n\nSentry provides tools for managing multiple projects and teams within your organization.  You can:\n\n* **Create multiple projects:**  Organize your projects based on applications, environments (development, staging, production), or other relevant criteria.\n\n* **Create teams:**  Group users into teams to manage access and permissions to specific projects.  This allows for better collaboration and control over who can access error reports.\n\n* **Assign roles:**  Define roles and permissions for users within teams.  This ensures that only authorized personnel can view and manage error data.\n\nThese features are managed through the Sentry web interface.\n\n\n### User Authentication and Authorization\n\nSentry uses its own authentication system to manage user access. You can invite members to your organization and assign them roles within projects. These roles determine their level of access, such as viewing error reports, managing settings, or performing administrative tasks.  This robust authentication system ensures only authorized personnel can access and modify your error data and project settings.\n\n\n### Access Control\n\nSentry allows granular control over access to your projects and data. You can:\n\n* **Restrict access to specific projects:**  Ensure that only authorized teams or individuals have access to error data from certain projects.\n\n* **Set permission levels:**  Define different permission levels for users (e.g., read-only access, full access, administrative access).\n\n* **Manage user access:**  Invite, remove, and modify permissions for users associated with your Sentry organization and projects.\n\nThis detailed access control helps maintain data security and restricts access to sensitive error information based on user roles and responsibilities.  Always configure your Sentry organization and projects to match the security and access control requirements of your development workflow.\n\n\n## Advanced Usage\n\n### Custom Integrations\n\nWhile Raven.js offers excellent integration with various frameworks, you might need custom integrations for specific libraries or tools not directly supported.  This involves creating custom code to capture errors or events from those libraries and report them to Raven.js using functions like `Raven.captureException()` or `Raven.captureMessage()`. You'll need to understand the error handling mechanisms of the library you're integrating and tailor your code to capture the relevant information and context.\n\n\n### Extending Raven.js Functionality\n\nRaven.js's core functionality can be extended to add features or customize existing behaviors.  This might involve creating custom middleware functions that manipulate data before it's sent to Sentry or implementing custom breadcrumb handlers to capture specific events.  The `dataCallback` configuration option and the breadcrumb API are key points for achieving this.\n\n\n### Plugin Development\n\nCreating plugins for Raven.js allows you to share custom integrations and extensions with others.  A plugin would typically be a self-contained module that extends Raven.js's capabilities, such as adding support for a new framework or integrating with a specific logging system.  These plugins would need to adhere to specific conventions to ensure compatibility and seamless integration with Raven.js.  Consult the Sentry documentation for guidelines on plugin development.\n\n\n### Troubleshooting and Debugging\n\nTroubleshooting Raven.js issues usually involves verifying:\n\n* **Correct DSN:** Ensure you're using the correct DSN for your Sentry project.\n* **Network Connectivity:** Check for network issues that might prevent error reports from reaching Sentry.\n* **Browser Console:** Examine the browser's developer console for any JavaScript errors or warnings that might provide clues about Raven.js's operation.\n* **Sentry Dashboard:** Review the Sentry dashboard for error reports and diagnostic information. Look for errors relating to the Raven.js setup itself.\n* **`Raven.showReportDialog()`:**  This method can be used to show Sentry's error reporting dialog to the user, which can be helpful for collecting additional debugging context.\n\nIf errors aren't being reported, carefully review your Raven.js configuration and integration, ensuring it aligns correctly with the project setup within your Sentry dashboard.\n\n\n### Performance Optimization\n\nWhile Raven.js is lightweight, optimizing its use can improve performance, especially in high-traffic applications:\n\n* **`sampleRate`:** Lowering the `sampleRate` reduces the number of error reports sent, decreasing the load on both your application and Sentry.\n\n* **Asynchronous Operations:** Ensure all interactions with Raven.js are asynchronous to avoid blocking the main thread.\n\n* **Error Filtering:**  Use the `ignoreErrors` option to filter out known, non-critical, or frequently occurring errors.\n\n* **Minification:** Use minified versions of Raven.js to reduce the script's size.\n\n* **Caching:** Use caching mechanisms to avoid unnecessary network requests.\n\nBalancing the level of error reporting with application performance is crucial; minimizing unnecessary reporting improves the application's speed and responsiveness without sacrificing valuable diagnostic data.  Carefully consider the trade-offs between the amount of data sent and the impact on performance.\n\n\n## Monitoring and Analysis\n\nThis section describes how to use the Sentry dashboard to monitor and analyze error data collected by Raven.js.\n\n\n### Dashboard Overview\n\nThe Sentry dashboard provides a central location to view and manage error reports.  The overview typically includes:\n\n* **Summary of recent errors:** A high-level overview of the number of new and unresolved errors.\n* **Charts and graphs:** Visual representations of error trends over time, allowing you to quickly identify patterns.\n* **Project overview:** A summary of error rates and performance metrics for your project(s).\n* **Quick access to individual issues:**  Easy navigation to detailed views of specific errors.\n* **Alerts and notifications:**  System-generated alerts about significant error increases or new critical issues.\n\n\n### Issue Tracking and Management\n\nSentry allows you to track and manage individual issues effectively:\n\n* **Issue Details:**  Each issue displays detailed information, including the stack trace, error message, breadcrumbs, context, tags, user details, and more.\n* **Issue Status:**  Track the status of an issue (e.g., new, assigned, resolved, triaged).\n* **Issue Assignment:** Assign issues to team members for resolution.\n* **Issue Comments:** Add comments to collaborate on troubleshooting or provide updates.\n* **Issue Resolution:** Mark issues as resolved when they are fixed.  Sentry tracks resolution rates and time to resolution.\n\n\n### Filtering and Searching\n\nSentry offers robust filtering and searching capabilities to easily find specific errors:\n\n* **Filter by error message:** Locate issues by searching for keywords in the error message.\n* **Filter by exception type:** Identify issues caused by specific types of exceptions.\n* **Filter by environment:** Separate errors from different environments (development, staging, production).\n* **Filter by platform:** View errors from specific platforms (browser, server).\n* **Filter by tags and context:** Use tags and contextual information to narrow down your search.\n* **Time range filters:**  View errors occurring within a specific time period.\n\n\n### Analyzing Error Trends\n\nSentry's charts and graphs help analyze error trends:\n\n* **Error rate over time:** Monitor the rate of new errors to identify potential regressions.\n* **Error distribution:** Understand the distribution of errors across different environments and platforms.\n* **Trend analysis:**  Spot increasing or decreasing error rates to see the impact of code changes or deployments.\n* **Performance monitoring:** Track application performance metrics such as page load times and network requests to identify bottlenecks.\n\n\n### Generating Reports\n\nSentry enables you to generate reports to summarize error data:\n\n* **Customizable reports:**  Create reports focusing on specific error types, environments, or time periods.\n* **Report formats:**  Export reports in various formats (e.g., CSV, PDF) for sharing or further analysis.\n* **Scheduled reports:**  Set up scheduled reports to regularly receive summaries of error data.\n\nThese reports are valuable for tracking progress, identifying recurring problems, and demonstrating the impact of your bug fixes or performance optimizations.  Use the reporting features to create informative summaries of your error data for various audiences, from your development team to management.\n\n\n## API Reference\n\nThis section provides a brief overview of key Raven.js API methods.  For the most up-to-date and complete documentation, refer to the official Sentry documentation.\n\n\n### `Raven.captureException()`\n\nSends an exception to Sentry.  This is typically used within a `try...catch` block to report exceptions that are caught by your application's code.\n\n```javascript\ntry {\n  // Code that might throw an exception\n} catch (e) {\n  Raven.captureException(e);\n}\n```\n\n* `e`: (Error object) The exception to be reported.  This should be a JavaScript `Error` object or a similar object with a `message` and optionally a `stack` property.\n\n\n### `Raven.captureMessage()`\n\nSends a custom message to Sentry.  Useful for reporting errors that aren't necessarily JavaScript exceptions (e.g., network errors or warnings).\n\n```javascript\nRaven.captureMessage('A critical error occurred!');\n```\n\n* `message`: (String) The error message to be reported.\n\n\n### `Raven.captureBreadcrumb()`\n\nManually adds a breadcrumb to the current session's breadcrumb trail. Breadcrumbs provide context surrounding an error.\n\n```javascript\nRaven.captureBreadcrumb({\n  message: 'User clicked the submit button',\n  category: 'ui.action',\n  data: { buttonId: 'submitBtn' }\n});\n```\n\n* `breadcrumb`: (Object) An object containing breadcrumb information.  Common properties include `message`, `category`, `type`, and `data`.\n\n\n### `Raven.setContext()`\n\nSets contextual information for subsequent error reports.  This information will be included in the error report sent to Sentry.\n\n```javascript\nRaven.setContext({\n  user: { id: 123, name: 'John Doe' },\n  session: { id: 'abcdef' }\n});\n```\n\n* `context`: (Object) An object containing contextual data.\n\n\n### `Raven.setUser()`\n\nSets user information for subsequent error reports.\n\n```javascript\nRaven.setUser({\n  id: 123,\n  email: 'john.doe@example.com',\n  username: 'johndoe'\n});\n```\n\n* `user`: (Object) An object containing user information (e.g., `id`, `email`, `username`).\n\n\n### `Raven.showReportDialog()`\n\nDisplays Sentry's report dialog, allowing users to submit feedback or additional information about an error.\n\n```javascript\nRaven.showReportDialog({\n  title: 'Oops, something went wrong!',\n  message: 'We are working on fixing this issue.  Please submit your feedback to help us improve.'\n});\n```\n\n* `options`: (Object, optional)  Options to customize the dialog (e.g., `title`, `message`, `name`, `email`).\n\n\n\n### Other API methods\n\nRaven.js provides other methods for more advanced usage, including:\n\n* `Raven.uninstall()`: Uninstalls Raven.js, stopping error reporting.\n* `Raven.setTagsContext()`: Sets tags for subsequent error reports (used for filtering and grouping errors).\n* `Raven.setExtraContext()`: Adds additional key-value pairs of data to subsequent reports.\n* `Raven.lastEventId()`: Returns the ID of the last event sent to Sentry.\n* `Raven.isSetup()`: Checks if Raven.js is properly configured.\n* `Raven.state`: Provides access to Raven.js's internal state (use with caution).  This property allows inspection of the client's configuration and internal data but should generally only be used for advanced debugging.\n\nRefer to the official Sentry documentation for detailed explanations and examples of all available API methods.  Always consult the official documentation for the most up-to-date information and examples.  The API might change with newer versions of Raven.js.\n\n\n## Migration Guide (from previous versions)\n\nThis guide helps you migrate from older versions of Raven.js to the latest version.  Always consult the official Sentry release notes for the most accurate and up-to-date information on breaking changes and migration instructions.\n\n\n### Breaking Changes\n\nBreaking changes between major versions of Raven.js are infrequent but can occur.  These changes might include:\n\n* **API changes:**  Methods might be renamed, removed, or their parameters altered.\n* **Configuration changes:**  Configuration options might be renamed or removed, requiring adjustments to your code.\n* **Dependency updates:**  Underlying dependencies might be upgraded, potentially requiring changes in your project's setup.\n* **Removed features:**  Less used or deprecated features might be removed entirely.\n\nAlways check the release notes for the specific version you are upgrading to for a detailed list of breaking changes.\n\n\n### Upgrade Instructions\n\nA typical upgrade process involves:\n\n1. **Check for Breaking Changes:**  Carefully review the release notes for the new version to identify any breaking changes affecting your code.\n\n2. **Update the Raven.js Script:**  Replace the old Raven.js script in your HTML file with the new version.  Use a Content Delivery Network (CDN) or download the updated version from the official Sentry website.\n\n3. **Update Configuration:**  Adjust your Raven.js configuration (`Raven.config()`) to reflect any changes in configuration options.  Pay close attention to any renamed or removed options.\n\n4. **Update Code:**  Modify your code to accommodate any API changes.  Rename functions, adjust parameters, or remove deprecated methods as needed.\n\n5. **Testing:** Thoroughly test your application after the upgrade to ensure all error reporting functionality works correctly.\n\n\n### Compatibility Notes\n\n* **Browser Compatibility:**  Raven.js generally supports modern browsers.  Refer to the official documentation for compatibility details. Older browsers might require polyfills for specific features.\n\n* **Framework Compatibility:**  Raven.js integrates with many popular frameworks.  Check the Sentry documentation for compatibility information regarding the frameworks used in your project.  Ensure the new version maintains compatibility with your chosen framework.\n\n* **Node.js Compatibility:**  If you use Raven.js in a Node.js environment, check the compatibility notes for the Node.js version you are using.  Ensure the required Node.js version aligns with the new Raven.js version.\n\n\nMigrating to a new major version should be a deliberate process.  Consider creating a staging or testing environment to perform the upgrade and thoroughly test the changes before deploying to production.  A phased rollout strategy might be prudent for large applications to minimize disruption during the migration.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **DSN (Data Source Name):** A unique identifier for your Sentry project that Raven.js uses to send error reports.  It's essential for connecting your application to your Sentry instance.\n\n* **Breadcrumb:** A record of an event that occurred before an error, providing context for debugging. Examples include user actions, network requests, and logging events.\n\n* **Context:** Additional information added to error reports to provide more details about the application's state at the time of the error. This might include user information, session data, or environment variables.\n\n* **Tag:** A key-value pair used to categorize and filter error reports (e.g., `environment: production`, `feature: login`).\n\n* **Issue:** A grouping of similar error reports in Sentry, often representing a specific bug.\n\n* **Stack Trace:** A list of function calls that led to an error, showing the execution path in your code.\n\n* **Source Map:** A file that maps minified code back to its original source code, making debugging easier.\n\n* **Sample Rate:** A percentage (0.0 to 1.0) that controls how many error reports are sent to Sentry.  Lowering it reduces load on Sentry but might also reduce the diagnostic data you collect.\n\n* **Release:** A version identifier for your application, used to group errors from specific releases.\n\n\n### FAQ\n\n* **Why aren't my errors showing up in Sentry?**  Check your DSN, network connectivity, and the Sentry dashboard for any error messages.  Ensure your Raven.js configuration is correct, and review the browser console for any JavaScript errors.\n\n* **How do I add custom data to my error reports?** Use `Raven.setContext()`, `Raven.setTagsContext()`, and `Raven.setExtraContext()` to add custom data.\n\n* **How can I prevent specific errors from being reported?** Use the `ignoreErrors` option in the Raven.js configuration to filter out unwanted errors.\n\n* **What is the difference between `captureException()` and `captureMessage()`?** Use `captureException()` for JavaScript exceptions and `captureMessage()` for custom error messages.\n\n* **How can I improve the performance of Raven.js?** Lower the sample rate, use asynchronous operations, and filter out unnecessary error reports.\n\n\n### Troubleshooting\n\nRefer to the \"Troubleshooting and Debugging\" section in the Advanced Usage chapter for detailed troubleshooting guidance.  Common issues include incorrect DSN, network problems, and misconfigurations within the Raven.js initialization.  Always check the Sentry dashboard and your browser's developer console for diagnostic information.\n\n\n### Contributing to Raven.js\n\nContributions to Raven.js are welcome!  Before contributing, review the contribution guidelines on the Sentry project's repository.  This typically involves:\n\n1. **Forking the Repository:**  Create a fork of the Raven.js repository on GitHub.\n2. **Creating a Branch:**  Create a new branch for your changes.\n3. **Making Changes:**  Implement your changes and write tests to ensure your modifications work correctly.\n4. **Submitting a Pull Request:**  Create a pull request to merge your changes into the main repository.\n\nContributions usually include bug fixes, new features, and improvements to the documentation.  Follow the project's established style guides and coding conventions when submitting your code.  Your contributions will help improve Raven.js and benefit the broader development community.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"raven-js.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Raven JS - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}