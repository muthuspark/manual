{"title":"numeral.js - Documentation","markdown":{"yaml":{"title":"numeral.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is numeral.js?\n\nNumeral.js is a JavaScript library designed for formatting and manipulating numbers.  It provides a simple and consistent API for working with numbers in various formats, including currency, percentages, and more.  It handles localization, allowing you to display numbers according to different cultural conventions.  At its core, it's a lightweight yet powerful tool for ensuring your application displays numerical data clearly and correctly for your users.\n\n### Why use numeral.js?\n\nUsing numeral.js offers several advantages:\n\n* **Simplified Number Formatting:**  Easily format numbers into various styles (currency, percentage, etc.) without complex string manipulation.\n* **Localization:**  Support for displaying numbers according to different locales, ensuring your application is globally accessible.\n* **Concise API:**  A clean and intuitive API makes it easy to learn and use, even for developers unfamiliar with the library.\n* **Lightweight:**  Numeral.js has a small footprint, minimizing the impact on your application's performance.\n* **Extensive Functionality:**  Beyond basic formatting, it includes functions for number parsing, rounding, and more advanced operations.\n\n\n### Installation and Setup\n\nNumeral.js can be easily integrated into your project using several methods:\n\n* **npm:** For Node.js projects, install it via npm:  `npm install numeral`\n\n* **yarn:**  For yarn users: `yarn add numeral`\n\n* **CDN:** Include the numeral.js script directly in your HTML: `<script src=\"https://cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js\"></script>` (replace with the latest version number if needed).\n\nAfter installation, you can include the library in your JavaScript code using a `require()` statement (for Node.js) or by simply using the globally available `numeral` object (when using a CDN).\n\n\n### Basic Usage\n\nThe core function of numeral.js is the `numeral()` function. It takes a number as input and returns a numeral.js object that can then be formatted using various methods.\n\n```javascript\n// Basic number formatting\nconst num = numeral(1234.56);\nconsole.log(num.format('0,0.00')); // Output: 1,234.56\n\n// Currency formatting\nconsole.log(numeral(1234.56).format('$0,0.00')); // Output: $1,234.56\n\n// Percentage formatting\nconsole.log(numeral(0.5).format('0%')); // Output: 50%\n\n// Using locales (requires loading the appropriate locale file)\n// Note:  You'll need to include the locale files separately.  See the documentation for details.\nnumeral.locale('fr'); // Set locale to French\nconsole.log(numeral(1234.56).format('0,0.00 $')); // Output will be formatted according to French locale conventions.\n\n// Unformat a number\nconsole.log(numeral('1,234.56').value()); // Output: 1234.56\n\n\n```\n\nThis provides a basic overview of how to use numeral.js. Refer to the complete documentation for more advanced features and options.\n\n\n## Formatting Numbers\n\n### Format Options\n\nNumeral.js uses format strings to control how numbers are displayed.  These strings employ a variety of symbols and placeholders to specify the desired output.  Common elements include:\n\n* **`0`:**  A zero placeholder.  If the number has a digit in the corresponding position, the digit is displayed; otherwise, a zero is shown.\n* **`.`:**  Decimal separator.  Defines the position of the decimal point.\n* **`,`:**  Thousands separator.  Separates thousands, millions, etc.\n* **`$`:** Currency symbol (default position is before the number; see below for customization).\n* **`%`:** Percentage symbol (multiplies the number by 100 and adds the % symbol).\n\nThe position and number of these symbols determine the final format.  For example, `'0,0.00'` will format a number with thousands separators and two decimal places.\n\n\n### Number Formatting\n\nBasic number formatting utilizes the `format()` method with a format string as an argument:\n\n```javascript\nconsole.log(numeral(1234.56).format('0,0')); // Output: 1,234\nconsole.log(numeral(1234.56).format('0,0.00')); // Output: 1,234.56\nconsole.log(numeral(1234).format('0.0')); // Output: 1234.0\nconsole.log(numeral(1234567.89).format('0.0a')); // Output: 1.2m (using abbreviation)\nconsole.log(numeral(1234567.89).format('0a')); // Output: 1m (using abbreviation)\nconsole.log(numeral(0.001234).format('0.0000a')); // Output: 0.0012m (using abbreviation)\n\n\n```\n\nThe `'0a'` format uses abbreviation for millions (m), billions (b), trillions (t) and thousands (k).\n\n\n### Currency Formatting\n\nCurrency formatting uses the currency symbol (`$` by default) and often includes decimal places:\n\n```javascript\nconsole.log(numeral(1234.56).format('$0,0.00')); // Output: $1,234.56\nconsole.log(numeral(1234.56).format('€0,0.00')); // Output: €1,234.56  (Euro symbol)\nconsole.log(numeral(-1234.56).format('$0,0.00')); // Output: -$1,234.56 (Negative sign included)\n```\n\nThe currency symbol's position can be changed using custom formats (see below).\n\n### Percentage Formatting\n\nPercentage formatting multiplies the number by 100 and adds the `%` symbol:\n\n```javascript\nconsole.log(numeral(0.5).format('0%')); // Output: 50%\nconsole.log(numeral(0.05).format('0.0%')); // Output: 5.0%\nconsole.log(numeral(1.234).format('0%')); //Output: 123%\n```\n\n### Time Formatting\n\nNumeral.js doesn't directly support time formatting in the same way as date/time libraries.  For time formatting, consider using a dedicated library like Moment.js or date-fns alongside numeral.js for numerical aspects (e.g., formatting elapsed time in seconds).\n\n\n### Custom Formatting\n\nFor complex formatting needs, you can create custom format strings.  For example, to place the currency symbol after the number:\n\n\n```javascript\nconsole.log(numeral(1234.56).format('0,0.00 $')); // Output: 1,234.56 $\n\n//Example with custom thousands and decimal separators.\nconsole.log(numeral(1234.56).format('0.000,00')); // Output: 1.234,560 (Thousands separator is \".\" and decimal separator is \",\")\n```\n\nYou can also create more sophisticated custom formats by combining different elements.  Refer to the complete numeral.js documentation for the full range of available options and advanced customization techniques.\n\n\n## Working with Units\n\n### Unit Abbreviations\n\nNumeral.js offers built-in support for abbreviating numbers with units like thousands (k), millions (m), billions (b), and trillions (t).  This is achieved using the `'a'` format character within the format string.  The level of abbreviation is determined by the magnitude of the number.\n\n```javascript\nconsole.log(numeral(1000).format('0a'));     // Output: 1k\nconsole.log(numeral(1234567).format('0.0a')); // Output: 1.2m\nconsole.log(numeral(1e9).format('0.00a'));   // Output: 1.00b\nconsole.log(numeral(0.001).format('0.000a')); //Output: 0.001k\n```\n\nNote that the number of decimal places shown can be controlled using the standard format string elements (e.g., `'0.0a'`, `'0.00a'`, etc.).\n\n\n### Unit Conversions\n\nNumeral.js itself does *not* provide built-in unit conversion functionality (e.g., converting meters to feet, kilograms to pounds).  For unit conversions, you'll need to implement the conversion logic separately within your application.  You can then use numeral.js to format the converted values appropriately.\n\nFor instance, to convert meters to feet and then format the result:\n\n```javascript\nfunction metersToFeet(meters) {\n  return meters * 3.28084;\n}\n\nlet meters = 10;\nlet feet = metersToFeet(meters);\nconsole.log(numeral(feet).format('0.00 ft')); // Output (example): 32.81 ft\n```\n\n### Custom Units\n\nNumeral.js does not directly support defining entirely custom units. The built-in abbreviation system (`a`) handles k, m, b, and t. Extending this to other units requires a manual implementation outside of numeral.js' core functionality.  You would need to create your own functions for formatting and handling custom units.\n\n\n### Unit Formatting\n\nUnit formatting is primarily achieved by combining the numeral.js format string with text representing the unit.  This usually involves adding the unit symbol or abbreviation directly to the format string, as shown in the examples above.\n\nTo display a value with a specific unit (like \"kg\" for kilograms), concatenate the unit to the formatted numeral:\n\n```javascript\nlet weightInKg = 12.5;\nlet formattedWeight = numeral(weightInKg).format('0.00') + ' kg';\nconsole.log(formattedWeight); // Output: 12.50 kg\n```\n\nMore complex unit formatting might involve creating helper functions to manage different unit systems and display conventions.  Remember to handle potential unit inconsistencies and ambiguities in your application logic.\n\n\n## Number Manipulation\n\n### Rounding Numbers\n\nNumeral.js doesn't directly provide dedicated rounding functions in the same way as `Math.round()`.  However, you can achieve rounding effects through the formatting capabilities.  The format string determines how many decimal places are displayed, effectively rounding the displayed value.   Note that this is *display* rounding; the underlying numerical value is not changed.  To actually round the numerical value, use JavaScript's built-in `Math` functions *before* passing the number to numeral.js.\n\n```javascript\n// Display rounding (no change to the underlying number)\nlet num = 1234.567;\nconsole.log(numeral(num).format('0.00')); // Output: 1234.57 (displayed as rounded)\nconsole.log(num); //Output: 1234.567 (original number unchanged)\n\n// Actual numerical rounding using JavaScript's Math functions\nlet roundedNum = Math.round(num);\nconsole.log(roundedNum); // Output: 1235 (numerically rounded)\nconsole.log(numeral(roundedNum).format('0')); // Output: 1235 (formatted rounded number)\n\n//Rounding to a specific number of decimal places using toFixed()\nlet num2 = 1234.56789;\nlet roundedNum2 = parseFloat(num2.toFixed(2)); // toFixed returns a string, need to parse back to number\nconsole.log(roundedNum2); // Output: 1234.57\nconsole.log(numeral(roundedNum2).format('0.00')); // Output: 1234.57\n```\n\n### Absolute Values\n\nTo get the absolute value of a number, use JavaScript's `Math.abs()` function before passing it to numeral.js:\n\n```javascript\nlet negativeNum = -123.45;\nlet absoluteNum = Math.abs(negativeNum);\nconsole.log(numeral(absoluteNum).format('0.00')); // Output: 123.45\n```\n\n\n### Exponents and Logarithms\n\nNumeral.js does not provide built-in functions for exponents or logarithms. Use JavaScript's `Math.pow()` (for exponents) and `Math.log()` (for natural logarithms), `Math.log10()` (for base-10 logarithms), etc., as needed, before formatting the result with numeral.js:\n\n\n```javascript\nlet base = 2;\nlet exponent = 5;\nlet result = Math.pow(base, exponent);\nconsole.log(numeral(result).format('0')); // Output: 32\n\nlet numForLog = 100;\nlet logResult = Math.log10(numForLog);\nconsole.log(numeral(logResult).format('0.00')); // Output: 2.00\n```\n\n### Arithmetic Operations\n\nNumeral.js is primarily for formatting and display; it does not directly support arithmetic operations on its numeral objects.  Perform arithmetic operations using standard JavaScript operators and functions on the underlying number values *before* using numeral.js for formatting.\n\n```javascript\nlet num1 = 10;\nlet num2 = 5;\nlet sum = num1 + num2;\nconsole.log(numeral(sum).format('0')); // Output: 15\n\nlet difference = num1 - num2;\nconsole.log(numeral(difference).format('0')); // Output: 5\n\nlet product = num1 * num2;\nconsole.log(numeral(product).format('0')); //Output: 50\n\nlet quotient = num1 / num2;\nconsole.log(numeral(quotient).format('0.0')); // Output: 2.0\n```\n\nRemember to perform all calculations using standard JavaScript before utilizing numeral.js for presenting the final formatted numerical results.\n\n\n## Advanced Usage\n\n### Localization\n\nNumeral.js supports localization, allowing you to format numbers according to different cultural conventions.  This is achieved using locale files.  While the core library includes the `en` (English) locale, others must be loaded separately.  You can find locale files on the numeral.js project page or via CDN resources.\n\nTo use a different locale:\n\n1. **Include the locale file:**  Include the JavaScript file for your desired locale (e.g., `numeral.min.js` and `numeral.locale.fr.js`).\n\n2. **Set the locale:** Use `numeral.locale('localeCode')` to set the active locale before formatting numbers. Replace `'localeCode'` with the appropriate locale code (e.g., 'fr' for French, 'de' for German, etc.).\n\n```javascript\n// Assuming you've included numeral.min.js and numeral.locale.fr.js\nnumeral.locale('fr');\nconsole.log(numeral(1234.56).format('0,0.00 $')); // Output will be formatted according to French locale\nnumeral.locale('de');\nconsole.log(numeral(1234.56).format('0,0.00 €')); // Output will be formatted according to German locale\n\n```\n\nRefer to the numeral.js documentation for a complete list of available locales and how to include them.\n\n\n### Custom Number Systems\n\nNumeral.js doesn't directly support defining entirely new number systems (e.g., base-12, Roman numerals).  Its core functionality centers around standard decimal representations.  Creating support for a different number system would require significant custom development outside the scope of the library itself.  You would need to handle the conversion to and from the custom system within your application logic and then use numeral.js to format the standard decimal representation.\n\n\n### Working with Large Numbers\n\nNumeral.js handles large numbers reasonably well, thanks to its abbreviation format (`'0a'`, `'0.0a'`, etc.).  However, for extremely large numbers that might exceed JavaScript's safe integer limits (numbers beyond 2<sup>53</sup>-1), you should consider using a specialized library designed for arbitrary-precision arithmetic (like `bignumber.js` or similar) to perform calculations accurately before sending the values to numeral.js for formatting.\n\n```javascript\n// Example of potential problem with very large numbers:\nconst hugeNumber = 1e100;\nconsole.log(hugeNumber); // This might lead to inaccuracies in some JavaScript engines\n//Use bignumber.js or similar libraries for handling these situations.\n```\n\n### Integration with Other Libraries\n\nNumeral.js can be easily integrated with other JavaScript libraries.  There's no specific integration required; you simply use numeral.js to format numerical data that comes from or is processed by other libraries.\n\nFor example, you might use a charting library (like Chart.js or D3.js) to generate a chart, and then use numeral.js to format the numerical values displayed on the chart's axes or tooltips.  Similarly, you can use numeral.js to display values calculated by a mathematical library, a data processing library, or any other library generating numerical outputs.  The integration is straightforward as you can pass numeric values to numeral.js independently from where the values originated.\n\n\n## API Reference\n\n### `numeral()` function\n\nThe `numeral()` function is the entry point for creating a numeral.js object. It takes a number (or a string that can be parsed as a number) as input and returns a numeral object.\n\n```javascript\nlet num = numeral(1234.56); // Creates a numeral object\nlet numFromString = numeral(\"1234.56\"); //Creates a numeral object from string\n\n```\n\n### `format()` method\n\nThe `format()` method formats the number according to the specified format string.\n\n```javascript\nlet formattedNum = num.format('0,0.00'); // Formats to \"1,234.56\"\nlet formattedCurrency = num.format('$0,0.00'); // Formats to \"$1,234.56\"\n```\n\n\n### `unformat()` method\n\nThe `unformat()` method (available on a numeral object) parses a formatted number string and returns the underlying numerical value.  It handles various formats, including those with thousands separators, currency symbols, and decimal points according to the currently set locale.\n\n\n```javascript\nlet unformattedValue = numeral(\"1,234.56\").unformat(); //Returns 1234.56\nlet unformattedCurrency = numeral(\"$1,234.56\").unformat(); //Returns 1234.56\n```\n\nNote that this method requires numeral.js to parse the format; if the input isn't in a recognizable format it will likely return NaN.\n\n\n### `value()` method\n\nThe `value()` method returns the underlying numerical value of the numeral object.  This is the same value as passed to `numeral()` initially, unaltered by any formatting.\n\n```javascript\nconsole.log(num.value()); // Output: 1234.56\n```\n\n### `set()` method\n\nThe `set()` method changes the underlying numerical value of the numeral object.\n\n```javascript\nnum.set(9876.54);\nconsole.log(num.value()); // Output: 9876.54\n```\n\n### `add()` method\n\nThe `add()` method adds a number to the existing value of the numeral object and returns a *new* numeral object with the updated value. The original object remains unchanged.\n\n\n```javascript\nlet num2 = numeral(10);\nlet addedNum = num2.add(5); //addedNum is a new numeral object with value 15\nconsole.log(num2.value()); // Output: 10 (original unchanged)\nconsole.log(addedNum.value()); //Output: 15\n```\n\n### `subtract()` method\n\nThe `subtract()` method subtracts a number from the existing value of the numeral object and returns a *new* numeral object with the updated value. The original object remains unchanged.  It operates similarly to `add()`.\n\n```javascript\nlet subtractedNum = num2.subtract(3);\nconsole.log(num2.value()); // Output: 10 (original unchanged)\nconsole.log(subtractedNum.value()); // Output: 7\n```\n\n\n### `multiply()` method\n\nThe `multiply()` method multiplies the existing value of the numeral object by a given number and returns a *new* numeral object with the updated value. The original object remains unchanged. It operates similarly to `add()` and `subtract()`.\n\n```javascript\nlet multipliedNum = num2.multiply(2);\nconsole.log(num2.value()); // Output: 10 (original unchanged)\nconsole.log(multipliedNum.value()); // Output: 20\n```\n\n### `divide()` method\n\nThe `divide()` method divides the existing value of the numeral object by a given number and returns a *new* numeral object with the updated value. The original object remains unchanged. It operates similarly to `add()`, `subtract()`, and `multiply()`.\n\n```javascript\nlet dividedNum = num2.divide(2);\nconsole.log(num2.value()); // Output: 10 (original unchanged)\nconsole.log(dividedNum.value()); // Output: 5\n```\n\n### Others\n\nNumeral.js provides additional methods and functionalities, including:\n\n* **`locale()` (static method):**  Gets or sets the current locale.  `numeral.locale('fr')` sets the locale to French, while `numeral.locale()` returns the current locale.\n* **`version()` (static method):** Returns the version number of the numeral.js library.\n* **`register()` (static method):** Allows registering custom formats.\n\n\nConsult the complete numeral.js documentation for detailed information about all methods and their usage.  Remember that `add()`, `subtract()`, `multiply()`, and `divide()` return *new* numeral objects, leaving the original object unmodified.\n\n\n## Troubleshooting\n\n### Common Errors\n\n* **`numeral is not defined`:** This error typically occurs when the numeral.js library hasn't been properly included in your project.  Double-check that you've included the script file (`numeral.min.js` or a similar file) in your HTML (for browser environments) or have correctly installed and required it in your Node.js project using npm or yarn.\n\n* **Incorrect format strings:**  Typos or incorrect usage of format string symbols (e.g., `0`, `.`, `,`, `$`, `%`, `a`) will lead to unexpected formatting results. Carefully review your format strings for any errors. The documentation provides details on the valid symbols and their usage.\n\n* **Locale issues:** If you're using localization, ensure that the correct locale file is included and that you've used `numeral.locale()` to set the appropriate locale before calling `format()`.  Incorrect locale settings can result in numbers being displayed using the wrong formatting conventions.\n\n* **NaN (Not a Number):**  This occurs if you're passing a non-numeric value to the `numeral()` function or attempting to perform an operation on a non-numeric result.  Ensure all your input data is valid numerical data and handle potential errors in your calculations.  The `unformat()` method might return NaN if passed an unparseable string.\n\n* **Unexpected results with large numbers:** For extremely large numbers exceeding JavaScript's safe integer limits, you may encounter inaccuracies. Consider using a library supporting arbitrary-precision arithmetic for calculations before formatting with numeral.js.\n\n\n### Debugging Tips\n\n* **Console logging:** Use `console.log()` liberally to check the values of your variables and intermediate results at different stages of your code to identify where errors occur.  Log the input numbers, format strings, and the outputs of numeral.js methods to track the flow of data.\n\n* **Inspect the format string:** Pay close attention to your format strings to ensure they correctly specify the desired formatting.  Small errors in these strings can cause significant issues.\n\n* **Check the locale:** Verify that the correct locale is set using `numeral.locale()`, and that the appropriate locale files are included in your project.\n\n* **Simplify your code:**  If you're facing complex issues, isolate the problem by simplifying your code as much as possible.  Create a small, self-contained example that reproduces the error, making it easier to diagnose the cause.\n\n* **Use a debugger:** Use your browser's developer tools or a Node.js debugger to step through your code line by line, inspecting variables and observing program flow. This helps identify the exact point where problems arise.\n\n\n### Support and Community\n\nThe primary support resource for numeral.js is its official documentation.  While there isn't an official dedicated support forum or community in the same way as some larger projects, you can find assistance through several avenues:\n\n* **GitHub Issues:**  For bug reports and feature requests, use the GitHub issue tracker for the numeral.js project.  Make sure to provide a clear description of the problem, including relevant code snippets and steps to reproduce the issue.\n\n* **Stack Overflow:**  Search Stack Overflow for questions related to numeral.js.  If you don't find a solution, posting a well-formatted question with a clear explanation of the problem might help you receive assistance from the broader developer community.\n\n* **Online JavaScript communities:**  Other online forums and communities dedicated to JavaScript development can be helpful if you're facing difficulties integrating numeral.js with other technologies or libraries.  Remember to provide sufficient context when seeking assistance.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is numeral.js?\n\nNumeral.js is a JavaScript library designed for formatting and manipulating numbers.  It provides a simple and consistent API for working with numbers in various formats, including currency, percentages, and more.  It handles localization, allowing you to display numbers according to different cultural conventions.  At its core, it's a lightweight yet powerful tool for ensuring your application displays numerical data clearly and correctly for your users.\n\n### Why use numeral.js?\n\nUsing numeral.js offers several advantages:\n\n* **Simplified Number Formatting:**  Easily format numbers into various styles (currency, percentage, etc.) without complex string manipulation.\n* **Localization:**  Support for displaying numbers according to different locales, ensuring your application is globally accessible.\n* **Concise API:**  A clean and intuitive API makes it easy to learn and use, even for developers unfamiliar with the library.\n* **Lightweight:**  Numeral.js has a small footprint, minimizing the impact on your application's performance.\n* **Extensive Functionality:**  Beyond basic formatting, it includes functions for number parsing, rounding, and more advanced operations.\n\n\n### Installation and Setup\n\nNumeral.js can be easily integrated into your project using several methods:\n\n* **npm:** For Node.js projects, install it via npm:  `npm install numeral`\n\n* **yarn:**  For yarn users: `yarn add numeral`\n\n* **CDN:** Include the numeral.js script directly in your HTML: `<script src=\"https://cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js\"></script>` (replace with the latest version number if needed).\n\nAfter installation, you can include the library in your JavaScript code using a `require()` statement (for Node.js) or by simply using the globally available `numeral` object (when using a CDN).\n\n\n### Basic Usage\n\nThe core function of numeral.js is the `numeral()` function. It takes a number as input and returns a numeral.js object that can then be formatted using various methods.\n\n```javascript\n// Basic number formatting\nconst num = numeral(1234.56);\nconsole.log(num.format('0,0.00')); // Output: 1,234.56\n\n// Currency formatting\nconsole.log(numeral(1234.56).format('$0,0.00')); // Output: $1,234.56\n\n// Percentage formatting\nconsole.log(numeral(0.5).format('0%')); // Output: 50%\n\n// Using locales (requires loading the appropriate locale file)\n// Note:  You'll need to include the locale files separately.  See the documentation for details.\nnumeral.locale('fr'); // Set locale to French\nconsole.log(numeral(1234.56).format('0,0.00 $')); // Output will be formatted according to French locale conventions.\n\n// Unformat a number\nconsole.log(numeral('1,234.56').value()); // Output: 1234.56\n\n\n```\n\nThis provides a basic overview of how to use numeral.js. Refer to the complete documentation for more advanced features and options.\n\n\n## Formatting Numbers\n\n### Format Options\n\nNumeral.js uses format strings to control how numbers are displayed.  These strings employ a variety of symbols and placeholders to specify the desired output.  Common elements include:\n\n* **`0`:**  A zero placeholder.  If the number has a digit in the corresponding position, the digit is displayed; otherwise, a zero is shown.\n* **`.`:**  Decimal separator.  Defines the position of the decimal point.\n* **`,`:**  Thousands separator.  Separates thousands, millions, etc.\n* **`$`:** Currency symbol (default position is before the number; see below for customization).\n* **`%`:** Percentage symbol (multiplies the number by 100 and adds the % symbol).\n\nThe position and number of these symbols determine the final format.  For example, `'0,0.00'` will format a number with thousands separators and two decimal places.\n\n\n### Number Formatting\n\nBasic number formatting utilizes the `format()` method with a format string as an argument:\n\n```javascript\nconsole.log(numeral(1234.56).format('0,0')); // Output: 1,234\nconsole.log(numeral(1234.56).format('0,0.00')); // Output: 1,234.56\nconsole.log(numeral(1234).format('0.0')); // Output: 1234.0\nconsole.log(numeral(1234567.89).format('0.0a')); // Output: 1.2m (using abbreviation)\nconsole.log(numeral(1234567.89).format('0a')); // Output: 1m (using abbreviation)\nconsole.log(numeral(0.001234).format('0.0000a')); // Output: 0.0012m (using abbreviation)\n\n\n```\n\nThe `'0a'` format uses abbreviation for millions (m), billions (b), trillions (t) and thousands (k).\n\n\n### Currency Formatting\n\nCurrency formatting uses the currency symbol (`$` by default) and often includes decimal places:\n\n```javascript\nconsole.log(numeral(1234.56).format('$0,0.00')); // Output: $1,234.56\nconsole.log(numeral(1234.56).format('€0,0.00')); // Output: €1,234.56  (Euro symbol)\nconsole.log(numeral(-1234.56).format('$0,0.00')); // Output: -$1,234.56 (Negative sign included)\n```\n\nThe currency symbol's position can be changed using custom formats (see below).\n\n### Percentage Formatting\n\nPercentage formatting multiplies the number by 100 and adds the `%` symbol:\n\n```javascript\nconsole.log(numeral(0.5).format('0%')); // Output: 50%\nconsole.log(numeral(0.05).format('0.0%')); // Output: 5.0%\nconsole.log(numeral(1.234).format('0%')); //Output: 123%\n```\n\n### Time Formatting\n\nNumeral.js doesn't directly support time formatting in the same way as date/time libraries.  For time formatting, consider using a dedicated library like Moment.js or date-fns alongside numeral.js for numerical aspects (e.g., formatting elapsed time in seconds).\n\n\n### Custom Formatting\n\nFor complex formatting needs, you can create custom format strings.  For example, to place the currency symbol after the number:\n\n\n```javascript\nconsole.log(numeral(1234.56).format('0,0.00 $')); // Output: 1,234.56 $\n\n//Example with custom thousands and decimal separators.\nconsole.log(numeral(1234.56).format('0.000,00')); // Output: 1.234,560 (Thousands separator is \".\" and decimal separator is \",\")\n```\n\nYou can also create more sophisticated custom formats by combining different elements.  Refer to the complete numeral.js documentation for the full range of available options and advanced customization techniques.\n\n\n## Working with Units\n\n### Unit Abbreviations\n\nNumeral.js offers built-in support for abbreviating numbers with units like thousands (k), millions (m), billions (b), and trillions (t).  This is achieved using the `'a'` format character within the format string.  The level of abbreviation is determined by the magnitude of the number.\n\n```javascript\nconsole.log(numeral(1000).format('0a'));     // Output: 1k\nconsole.log(numeral(1234567).format('0.0a')); // Output: 1.2m\nconsole.log(numeral(1e9).format('0.00a'));   // Output: 1.00b\nconsole.log(numeral(0.001).format('0.000a')); //Output: 0.001k\n```\n\nNote that the number of decimal places shown can be controlled using the standard format string elements (e.g., `'0.0a'`, `'0.00a'`, etc.).\n\n\n### Unit Conversions\n\nNumeral.js itself does *not* provide built-in unit conversion functionality (e.g., converting meters to feet, kilograms to pounds).  For unit conversions, you'll need to implement the conversion logic separately within your application.  You can then use numeral.js to format the converted values appropriately.\n\nFor instance, to convert meters to feet and then format the result:\n\n```javascript\nfunction metersToFeet(meters) {\n  return meters * 3.28084;\n}\n\nlet meters = 10;\nlet feet = metersToFeet(meters);\nconsole.log(numeral(feet).format('0.00 ft')); // Output (example): 32.81 ft\n```\n\n### Custom Units\n\nNumeral.js does not directly support defining entirely custom units. The built-in abbreviation system (`a`) handles k, m, b, and t. Extending this to other units requires a manual implementation outside of numeral.js' core functionality.  You would need to create your own functions for formatting and handling custom units.\n\n\n### Unit Formatting\n\nUnit formatting is primarily achieved by combining the numeral.js format string with text representing the unit.  This usually involves adding the unit symbol or abbreviation directly to the format string, as shown in the examples above.\n\nTo display a value with a specific unit (like \"kg\" for kilograms), concatenate the unit to the formatted numeral:\n\n```javascript\nlet weightInKg = 12.5;\nlet formattedWeight = numeral(weightInKg).format('0.00') + ' kg';\nconsole.log(formattedWeight); // Output: 12.50 kg\n```\n\nMore complex unit formatting might involve creating helper functions to manage different unit systems and display conventions.  Remember to handle potential unit inconsistencies and ambiguities in your application logic.\n\n\n## Number Manipulation\n\n### Rounding Numbers\n\nNumeral.js doesn't directly provide dedicated rounding functions in the same way as `Math.round()`.  However, you can achieve rounding effects through the formatting capabilities.  The format string determines how many decimal places are displayed, effectively rounding the displayed value.   Note that this is *display* rounding; the underlying numerical value is not changed.  To actually round the numerical value, use JavaScript's built-in `Math` functions *before* passing the number to numeral.js.\n\n```javascript\n// Display rounding (no change to the underlying number)\nlet num = 1234.567;\nconsole.log(numeral(num).format('0.00')); // Output: 1234.57 (displayed as rounded)\nconsole.log(num); //Output: 1234.567 (original number unchanged)\n\n// Actual numerical rounding using JavaScript's Math functions\nlet roundedNum = Math.round(num);\nconsole.log(roundedNum); // Output: 1235 (numerically rounded)\nconsole.log(numeral(roundedNum).format('0')); // Output: 1235 (formatted rounded number)\n\n//Rounding to a specific number of decimal places using toFixed()\nlet num2 = 1234.56789;\nlet roundedNum2 = parseFloat(num2.toFixed(2)); // toFixed returns a string, need to parse back to number\nconsole.log(roundedNum2); // Output: 1234.57\nconsole.log(numeral(roundedNum2).format('0.00')); // Output: 1234.57\n```\n\n### Absolute Values\n\nTo get the absolute value of a number, use JavaScript's `Math.abs()` function before passing it to numeral.js:\n\n```javascript\nlet negativeNum = -123.45;\nlet absoluteNum = Math.abs(negativeNum);\nconsole.log(numeral(absoluteNum).format('0.00')); // Output: 123.45\n```\n\n\n### Exponents and Logarithms\n\nNumeral.js does not provide built-in functions for exponents or logarithms. Use JavaScript's `Math.pow()` (for exponents) and `Math.log()` (for natural logarithms), `Math.log10()` (for base-10 logarithms), etc., as needed, before formatting the result with numeral.js:\n\n\n```javascript\nlet base = 2;\nlet exponent = 5;\nlet result = Math.pow(base, exponent);\nconsole.log(numeral(result).format('0')); // Output: 32\n\nlet numForLog = 100;\nlet logResult = Math.log10(numForLog);\nconsole.log(numeral(logResult).format('0.00')); // Output: 2.00\n```\n\n### Arithmetic Operations\n\nNumeral.js is primarily for formatting and display; it does not directly support arithmetic operations on its numeral objects.  Perform arithmetic operations using standard JavaScript operators and functions on the underlying number values *before* using numeral.js for formatting.\n\n```javascript\nlet num1 = 10;\nlet num2 = 5;\nlet sum = num1 + num2;\nconsole.log(numeral(sum).format('0')); // Output: 15\n\nlet difference = num1 - num2;\nconsole.log(numeral(difference).format('0')); // Output: 5\n\nlet product = num1 * num2;\nconsole.log(numeral(product).format('0')); //Output: 50\n\nlet quotient = num1 / num2;\nconsole.log(numeral(quotient).format('0.0')); // Output: 2.0\n```\n\nRemember to perform all calculations using standard JavaScript before utilizing numeral.js for presenting the final formatted numerical results.\n\n\n## Advanced Usage\n\n### Localization\n\nNumeral.js supports localization, allowing you to format numbers according to different cultural conventions.  This is achieved using locale files.  While the core library includes the `en` (English) locale, others must be loaded separately.  You can find locale files on the numeral.js project page or via CDN resources.\n\nTo use a different locale:\n\n1. **Include the locale file:**  Include the JavaScript file for your desired locale (e.g., `numeral.min.js` and `numeral.locale.fr.js`).\n\n2. **Set the locale:** Use `numeral.locale('localeCode')` to set the active locale before formatting numbers. Replace `'localeCode'` with the appropriate locale code (e.g., 'fr' for French, 'de' for German, etc.).\n\n```javascript\n// Assuming you've included numeral.min.js and numeral.locale.fr.js\nnumeral.locale('fr');\nconsole.log(numeral(1234.56).format('0,0.00 $')); // Output will be formatted according to French locale\nnumeral.locale('de');\nconsole.log(numeral(1234.56).format('0,0.00 €')); // Output will be formatted according to German locale\n\n```\n\nRefer to the numeral.js documentation for a complete list of available locales and how to include them.\n\n\n### Custom Number Systems\n\nNumeral.js doesn't directly support defining entirely new number systems (e.g., base-12, Roman numerals).  Its core functionality centers around standard decimal representations.  Creating support for a different number system would require significant custom development outside the scope of the library itself.  You would need to handle the conversion to and from the custom system within your application logic and then use numeral.js to format the standard decimal representation.\n\n\n### Working with Large Numbers\n\nNumeral.js handles large numbers reasonably well, thanks to its abbreviation format (`'0a'`, `'0.0a'`, etc.).  However, for extremely large numbers that might exceed JavaScript's safe integer limits (numbers beyond 2<sup>53</sup>-1), you should consider using a specialized library designed for arbitrary-precision arithmetic (like `bignumber.js` or similar) to perform calculations accurately before sending the values to numeral.js for formatting.\n\n```javascript\n// Example of potential problem with very large numbers:\nconst hugeNumber = 1e100;\nconsole.log(hugeNumber); // This might lead to inaccuracies in some JavaScript engines\n//Use bignumber.js or similar libraries for handling these situations.\n```\n\n### Integration with Other Libraries\n\nNumeral.js can be easily integrated with other JavaScript libraries.  There's no specific integration required; you simply use numeral.js to format numerical data that comes from or is processed by other libraries.\n\nFor example, you might use a charting library (like Chart.js or D3.js) to generate a chart, and then use numeral.js to format the numerical values displayed on the chart's axes or tooltips.  Similarly, you can use numeral.js to display values calculated by a mathematical library, a data processing library, or any other library generating numerical outputs.  The integration is straightforward as you can pass numeric values to numeral.js independently from where the values originated.\n\n\n## API Reference\n\n### `numeral()` function\n\nThe `numeral()` function is the entry point for creating a numeral.js object. It takes a number (or a string that can be parsed as a number) as input and returns a numeral object.\n\n```javascript\nlet num = numeral(1234.56); // Creates a numeral object\nlet numFromString = numeral(\"1234.56\"); //Creates a numeral object from string\n\n```\n\n### `format()` method\n\nThe `format()` method formats the number according to the specified format string.\n\n```javascript\nlet formattedNum = num.format('0,0.00'); // Formats to \"1,234.56\"\nlet formattedCurrency = num.format('$0,0.00'); // Formats to \"$1,234.56\"\n```\n\n\n### `unformat()` method\n\nThe `unformat()` method (available on a numeral object) parses a formatted number string and returns the underlying numerical value.  It handles various formats, including those with thousands separators, currency symbols, and decimal points according to the currently set locale.\n\n\n```javascript\nlet unformattedValue = numeral(\"1,234.56\").unformat(); //Returns 1234.56\nlet unformattedCurrency = numeral(\"$1,234.56\").unformat(); //Returns 1234.56\n```\n\nNote that this method requires numeral.js to parse the format; if the input isn't in a recognizable format it will likely return NaN.\n\n\n### `value()` method\n\nThe `value()` method returns the underlying numerical value of the numeral object.  This is the same value as passed to `numeral()` initially, unaltered by any formatting.\n\n```javascript\nconsole.log(num.value()); // Output: 1234.56\n```\n\n### `set()` method\n\nThe `set()` method changes the underlying numerical value of the numeral object.\n\n```javascript\nnum.set(9876.54);\nconsole.log(num.value()); // Output: 9876.54\n```\n\n### `add()` method\n\nThe `add()` method adds a number to the existing value of the numeral object and returns a *new* numeral object with the updated value. The original object remains unchanged.\n\n\n```javascript\nlet num2 = numeral(10);\nlet addedNum = num2.add(5); //addedNum is a new numeral object with value 15\nconsole.log(num2.value()); // Output: 10 (original unchanged)\nconsole.log(addedNum.value()); //Output: 15\n```\n\n### `subtract()` method\n\nThe `subtract()` method subtracts a number from the existing value of the numeral object and returns a *new* numeral object with the updated value. The original object remains unchanged.  It operates similarly to `add()`.\n\n```javascript\nlet subtractedNum = num2.subtract(3);\nconsole.log(num2.value()); // Output: 10 (original unchanged)\nconsole.log(subtractedNum.value()); // Output: 7\n```\n\n\n### `multiply()` method\n\nThe `multiply()` method multiplies the existing value of the numeral object by a given number and returns a *new* numeral object with the updated value. The original object remains unchanged. It operates similarly to `add()` and `subtract()`.\n\n```javascript\nlet multipliedNum = num2.multiply(2);\nconsole.log(num2.value()); // Output: 10 (original unchanged)\nconsole.log(multipliedNum.value()); // Output: 20\n```\n\n### `divide()` method\n\nThe `divide()` method divides the existing value of the numeral object by a given number and returns a *new* numeral object with the updated value. The original object remains unchanged. It operates similarly to `add()`, `subtract()`, and `multiply()`.\n\n```javascript\nlet dividedNum = num2.divide(2);\nconsole.log(num2.value()); // Output: 10 (original unchanged)\nconsole.log(dividedNum.value()); // Output: 5\n```\n\n### Others\n\nNumeral.js provides additional methods and functionalities, including:\n\n* **`locale()` (static method):**  Gets or sets the current locale.  `numeral.locale('fr')` sets the locale to French, while `numeral.locale()` returns the current locale.\n* **`version()` (static method):** Returns the version number of the numeral.js library.\n* **`register()` (static method):** Allows registering custom formats.\n\n\nConsult the complete numeral.js documentation for detailed information about all methods and their usage.  Remember that `add()`, `subtract()`, `multiply()`, and `divide()` return *new* numeral objects, leaving the original object unmodified.\n\n\n## Troubleshooting\n\n### Common Errors\n\n* **`numeral is not defined`:** This error typically occurs when the numeral.js library hasn't been properly included in your project.  Double-check that you've included the script file (`numeral.min.js` or a similar file) in your HTML (for browser environments) or have correctly installed and required it in your Node.js project using npm or yarn.\n\n* **Incorrect format strings:**  Typos or incorrect usage of format string symbols (e.g., `0`, `.`, `,`, `$`, `%`, `a`) will lead to unexpected formatting results. Carefully review your format strings for any errors. The documentation provides details on the valid symbols and their usage.\n\n* **Locale issues:** If you're using localization, ensure that the correct locale file is included and that you've used `numeral.locale()` to set the appropriate locale before calling `format()`.  Incorrect locale settings can result in numbers being displayed using the wrong formatting conventions.\n\n* **NaN (Not a Number):**  This occurs if you're passing a non-numeric value to the `numeral()` function or attempting to perform an operation on a non-numeric result.  Ensure all your input data is valid numerical data and handle potential errors in your calculations.  The `unformat()` method might return NaN if passed an unparseable string.\n\n* **Unexpected results with large numbers:** For extremely large numbers exceeding JavaScript's safe integer limits, you may encounter inaccuracies. Consider using a library supporting arbitrary-precision arithmetic for calculations before formatting with numeral.js.\n\n\n### Debugging Tips\n\n* **Console logging:** Use `console.log()` liberally to check the values of your variables and intermediate results at different stages of your code to identify where errors occur.  Log the input numbers, format strings, and the outputs of numeral.js methods to track the flow of data.\n\n* **Inspect the format string:** Pay close attention to your format strings to ensure they correctly specify the desired formatting.  Small errors in these strings can cause significant issues.\n\n* **Check the locale:** Verify that the correct locale is set using `numeral.locale()`, and that the appropriate locale files are included in your project.\n\n* **Simplify your code:**  If you're facing complex issues, isolate the problem by simplifying your code as much as possible.  Create a small, self-contained example that reproduces the error, making it easier to diagnose the cause.\n\n* **Use a debugger:** Use your browser's developer tools or a Node.js debugger to step through your code line by line, inspecting variables and observing program flow. This helps identify the exact point where problems arise.\n\n\n### Support and Community\n\nThe primary support resource for numeral.js is its official documentation.  While there isn't an official dedicated support forum or community in the same way as some larger projects, you can find assistance through several avenues:\n\n* **GitHub Issues:**  For bug reports and feature requests, use the GitHub issue tracker for the numeral.js project.  Make sure to provide a clear description of the problem, including relevant code snippets and steps to reproduce the issue.\n\n* **Stack Overflow:**  Search Stack Overflow for questions related to numeral.js.  If you don't find a solution, posting a well-formatted question with a clear explanation of the problem might help you receive assistance from the broader developer community.\n\n* **Online JavaScript communities:**  Other online forums and communities dedicated to JavaScript development can be helpful if you're facing difficulties integrating numeral.js with other technologies or libraries.  Remember to provide sufficient context when seeking assistance.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"numeraljs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"numeral.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}