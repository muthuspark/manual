{"title":"prettyPhoto - Documentation","markdown":{"yaml":{"title":"prettyPhoto - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is prettyPhoto?\n\nprettyPhoto is a jQuery-based lightbox that allows you to showcase images and videos attractively in a sleek overlay.  It provides a simple yet powerful way to enhance the user experience when displaying media content on your website.  Instead of navigating away from the current page, prettyPhoto overlays the content directly on top, keeping the user within the context of their current browsing session.\n\n\n### Features\n\n* **Multiple Media Support:** Displays images, Flash, YouTube, Vimeo, and other media types seamlessly.\n* **Customizable:** Highly customizable with options for theme, animation, and social sharing.\n* **Keyboard Navigation:**  Allows for intuitive navigation through galleries using keyboard shortcuts.\n* **Automatic Gallery Detection:**  Automatically detects galleries and handles their sequential display.\n* **Ajax Support:**  Supports loading content via AJAX, allowing for dynamic content updates.\n* **Social Sharing:**  Provides options for sharing images on various social media platforms.\n* **Responsive Design:** Adapts to different screen sizes for optimal viewing on various devices.\n* **Easy Integration:**  Simple integration into existing websites through jQuery inclusion and minimal code.\n\n\n### Browser Compatibility\n\nprettyPhoto is designed to work across a wide range of modern browsers.  While specific version support may vary depending on the jQuery version used, it generally offers excellent compatibility with:\n\n* Chrome (Latest versions)\n* Firefox (Latest versions)\n* Safari (Latest versions)\n* Edge (Latest versions)\n* Internet Explorer (Limited support for older versions; latest versions are recommended)\n\n\n### Getting Started\n\n1. **Include jQuery:** Ensure you have the jQuery library included in your project. You can download it from [https://jquery.com/](https://jquery.com/) or use a CDN.\n\n2. **Include prettyPhoto:** Download the prettyPhoto files (CSS and JavaScript) and include them in your HTML `<head>` section.  Typically, this will involve including `prettyPhoto.css` and `jquery.prettyPhoto.js`.\n\n3. **Initialize prettyPhoto:** Use jQuery to initialize prettyPhoto on your links or elements containing media.  The basic syntax involves selecting your links and calling the `prettyPhoto()` method.  For example:\n\n   ```html\n   <a href=\"image.jpg\" rel=\"prettyPhoto[gallery1]\">Image 1</a>\n   <a href=\"image2.jpg\" rel=\"prettyPhoto[gallery1]\">Image 2</a>\n   <a href=\"video.mp4\" rel=\"prettyPhoto[gallery2]\">Video</a>\n\n   <script>\n       $(\"a[rel^='prettyPhoto']\").prettyPhoto();\n   </script>\n   ```\n\n   This code selects all links with `rel` attributes starting with \"prettyPhoto\" and applies prettyPhoto to them. The `[gallery1]` and `[gallery2]` parts define galleries; links with the same gallery name will be navigable as a slideshow.\n\n4. **Customize (Optional):** Explore the extensive options available to customize prettyPhoto's appearance and behavior.  Refer to the detailed documentation for a complete list of options and their usage.\n\n\nRemember to consult the official prettyPhoto documentation for the most up-to-date information and advanced usage examples.\n\n\n## Installation and Setup\n\n### Downloading prettyPhoto\n\nThe latest version of prettyPhoto can be downloaded from [https://github.com/scaron/prettyphoto](https://github.com/scaron/prettyphoto).  The download typically includes the following files:\n\n* `jquery.prettyPhoto.js`: The core JavaScript file.\n* `prettyPhoto.css`: The main stylesheet.\n* `prettyPhoto.css`: Additional theme files may be included (e.g., dark themes).\n* `images/`: A folder containing images used by the lightbox (buttons, icons, etc.).\n\nDownload the compressed archive (zip or similar) and extract its contents to a convenient location in your project's file structure.\n\n\n### Including CSS and JavaScript\n\nAfter downloading prettyPhoto, you need to include the necessary CSS and JavaScript files in your HTML document.  It's recommended to place these links within the `<head>` section for optimal loading performance:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/prettyPhoto.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\" />\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"path/to/jquery.js\"></script>  <!-- Ensure jQuery is included -->\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"path/to/jquery.prettyPhoto.js\"></script>\n```\n\nRemember to replace `\"path/to/\"` with the actual path to your downloaded prettyPhoto files.  Ensure that the jQuery library is included *before* the prettyPhoto JavaScript file, as prettyPhoto relies on jQuery.\n\n\n### Markup Requirements\n\nTo use prettyPhoto, you need to wrap your image or media links within `<a>` tags and provide the necessary attributes.  The most important attribute is `rel`, which is used to group images into galleries and identify them for prettyPhoto.\n\n\nA basic example:\n\n```html\n<a href=\"image1.jpg\" rel=\"prettyPhoto[gallery1]\">Image 1</a>\n<a href=\"image2.jpg\" rel=\"prettyPhoto[gallery1]\">Image 2</a>\n<a href=\"video.mp4\" rel=\"prettyPhoto[gallery2]\">Video</a>\n```\n\nIn this example:\n\n* `href`: Specifies the URL of the image or video.\n* `rel=\"prettyPhoto[gallery1]\"`:  This attribute tells prettyPhoto that this link belongs to the gallery named \"gallery1.\"  Links with the same gallery name will be treated as a gallery, allowing users to navigate between them.  You can create multiple galleries by using different names (e.g., `[gallery2]`, `[gallery3]`).\n\n\n### Basic Initialization\n\nAfter including the necessary files and creating the required HTML markup, you need to initialize prettyPhoto using jQuery. This is done by selecting the links and calling the `prettyPhoto()` method:\n\n\n```javascript\n$(document).ready(function(){\n    $(\"a[rel^='prettyPhoto']\").prettyPhoto();\n});\n```\n\nThis code snippet, placed within a `$(document).ready()` function, waits for the DOM to be fully loaded before executing.  It selects all anchor (`<a>`) elements whose `rel` attribute starts with \"prettyPhoto\" and applies the prettyPhoto functionality to them.  This is the most basic initialization; more advanced options are available for further customization (see the Options section of the documentation).\n\n\n## Configuration Options\n\n### API Options\n\nprettyPhoto offers a range of options to customize its behavior and appearance. These options are passed as a JavaScript object to the `prettyPhoto()` function.  Here are some key API options:\n\n* **`social_media`:** (Boolean) Enables or disables social media sharing buttons.  Defaults to `true`.\n* **`deeplinking`:** (Boolean) Enables deeplinking functionality, allowing users to directly link to specific images within a gallery. Defaults to `false`.\n* **`overlay_gallery`:** (Boolean) Displays a thumbnail gallery overlay. Defaults to `true`.\n* **`slideshow`:** (Boolean) Enables automatic slideshow functionality. Defaults to `false`.\n* **`autoplay_slideshow`:** (Boolean) Automatically starts the slideshow when opened. Defaults to `false`.\n* **`slideshow_delay`:** (Integer) Sets the delay (in milliseconds) between slideshow transitions. Defaults to 5000 (5 seconds).\n* **`theme`:** (String) Specifies the theme to use.  Defaults to \"default\".  Additional themes may be available depending on the prettyPhoto version.\n* **`modal`:** (Boolean) If true, the prettyPhoto window will be modal (blocking other interactions). Defaults to `true`\n* **`horizontal_padding`:** (Integer) Sets the horizontal padding around the content inside the prettyPhoto window (in pixels). Defaults to 20.\n* **`opacity`:** (Float) Sets the opacity of the overlay. Defaults to 0.8 (80%).\n* **`show_title`:** (Boolean) Displays the title of the media item.  Defaults to `true`.\n\nThese are just a few examples;  refer to the full documentation for a complete list of available API options and their default values.  These options are passed as a second argument to `prettyPhoto()`.  For example:\n\n```javascript\n$(\"a[rel^='prettyPhoto']\").prettyPhoto({\n    social_media: false,\n    slideshow: true,\n    slideshow_delay: 3000\n});\n```\n\n\n### Customization Options\n\nBeyond the core API options, prettyPhoto's appearance can be heavily customized through CSS.  You can modify the styles of various elements, such as the close button, navigation arrows, caption area, and overlay.  Inspecting the generated HTML and CSS after initialization will reveal the specific classes and IDs you can target for styling.  Creating custom CSS files and linking them to your project is recommended for managing these customizations.  Consider creating custom themes to maintain organization.\n\n### Social Media Integration\n\nBy default, prettyPhoto includes buttons for sharing images on various social media platforms.  The `social_media` option controls the visibility of these buttons.  The exact platforms supported might vary depending on the version; check your version's documentation for details.  If needed, you can customize the social media sharing links or even remove them entirely through CSS or by modifying the JavaScript code.\n\n### Advanced Configuration\n\nFor advanced customization and integration, you might need to delve into the JavaScript code itself.  This would involve potentially extending the core functionality or overriding specific behaviors.  Carefully review the source code of `jquery.prettyPhoto.js`  and understand its internal workings before making any modifications.  Consider creating custom plugins or extending the existing ones to manage complex interactions.  Always back up your original files before making any direct modifications to the core code.\n\nRemember to consult the comprehensive documentation for the most complete and updated information on configuration options, advanced techniques, and troubleshooting.\n\n\n## Usage and Examples\n\n### Linking Images\n\nThe most basic usage of prettyPhoto involves linking individual images.  This is done by wrapping the image link in an `<a>` tag and setting the `rel` attribute to `prettyPhoto`.\n\n```html\n<a href=\"image1.jpg\" rel=\"prettyPhoto\">View Image</a>\n<a href=\"image2.png\" rel=\"prettyPhoto\">View Image 2</a>\n```\n\nThis code will create two separate links, each opening the respective image in the prettyPhoto lightbox.  After including the necessary files (as described in the Installation section) and initializing prettyPhoto with `$(\"a[rel^='prettyPhoto']\").prettyPhoto();`, these links will function correctly.\n\n\n### Linking Galleries\n\nTo create a gallery, use the same `rel` attribute but include a gallery name within square brackets. All links with the same gallery name will be part of the same gallery, allowing users to navigate between them within the lightbox.\n\n```html\n<a href=\"image1.jpg\" rel=\"prettyPhoto[gallery1]\">Image 1</a>\n<a href=\"image2.jpg\" rel=\"prettyPhoto[gallery1]\">Image 2</a>\n<a href=\"image3.jpg\" rel=\"prettyPhoto[gallery1]\">Image 3</a>\n```\n\nThis creates a gallery named \"gallery1.\"  Users can navigate through these images using the left and right arrows within the prettyPhoto lightbox.  You can create multiple galleries using different names (e.g., `[gallery2]`, `[gallery3]`).\n\n\n### Customizing the Lightbox\n\nprettyPhoto offers various customization options (detailed in the Configuration Options section) that allow you to change its appearance and behavior. These options can be set when initializing prettyPhoto:\n\n```javascript\n$(\"a[rel^='prettyPhoto']\").prettyPhoto({\n    theme: 'dark_rounded', // Example theme\n    social_media: false,   // Disable social sharing\n    slideshow: true       // Enable slideshow\n});\n```\n\nIn addition to these options, you can customize the lightbox's appearance further by modifying the provided CSS file or creating a custom CSS file to override existing styles.\n\n\n### Handling Events\n\nprettyPhoto provides several events that you can use to trigger custom actions.  These events are triggered at various stages of the lightbox's lifecycle (opening, closing, image change, etc.).  You can listen for these events using jQuery's `.on()` method. For instance, to execute a function when the lightbox opens:\n\n```javascript\n$(document).on('prettyPhoto_open', function(){\n    console.log('prettyPhoto opened!');\n    // Add your custom code here\n});\n```\n\nRefer to the complete documentation for a full list of available prettyPhoto events and their usage.\n\n\n### Integration with other libraries\n\nprettyPhoto can be integrated with other JavaScript libraries, provided there are no conflicting jQuery selectors or event handlers.  However, ensure that any other library's initialization occurs *before* the prettyPhoto initialization to avoid potential conflicts.  In cases of conflicts, you may need to adjust the selectors or event handling to ensure proper interaction between the libraries.   Careful consideration of potential naming conflicts and event handling precedence is essential for smooth integration.\n\n\n## API Reference\n\n### prettyPhoto API Methods\n\nWhile prettyPhoto's primary initialization happens via the `prettyPhoto()` method (as described in previous sections), there are no additional public methods directly exposed by the prettyPhoto API for manipulating the lightbox after initialization.  The lightbox's functionality is largely controlled through the configuration options passed during initialization and event handling.  Direct manipulation of the lightbox's internal state is generally discouraged as it can lead to unpredictable behavior and break functionality.\n\n\n### Event Handling\n\nprettyPhoto triggers several custom events throughout its lifecycle.  These events can be used to integrate custom functionality with the lightbox.  You can listen for these events using jQuery's `.on()` method.  Here are some key events:\n\n\n* **`prettyPhoto_open`:** Triggered when the lightbox opens.\n* **`prettyPhoto_close`:** Triggered when the lightbox closes.\n* **`prettyPhoto_afterChange`:** Triggered after the lightbox content changes (e.g., navigating to a different image in a gallery).\n* **`prettyPhoto_beforeChange`:** Triggered before the lightbox content changes.\n* **`prettyPhoto_change`:** Triggered when the lightbox content is about to change.\n* **`prettyPhoto_afterClose`:** Triggered after the lightbox is completely closed.\n* **`prettyPhoto_beforeClose`:** Triggered before the lightbox starts closing.\n* **`prettyPhoto_imageLoaded`:** Triggered after an image is fully loaded in the lightbox.\n* **`prettyPhoto_loading`:** Triggered when an image is being loaded into the lightbox.\n\nExample:\n\n```javascript\n$(document).on('prettyPhoto_open', function() {\n    console.log('prettyPhoto opened!');\n    // Add your custom code here, such as showing a loading indicator\n});\n\n$(document).on('prettyPhoto_afterChange', function(event, /*prettyPhoto_container, index, total*/){\n  console.log('Image changed! Current index: ' + prettyPhoto_container.index);\n  // Accessing additional parameters might require modifications based on prettyPhoto version\n});\n\n$(document).on('prettyPhoto_close', function() {\n    console.log('prettyPhoto closed!');\n    // Add your code to perform actions after closing, like removing loading indicators\n});\n```\n\nNote:  The parameters passed to the event handlers might vary depending on the version of prettyPhoto.  Consult the source code or a detailed documentation specific to your version for complete parameter information.\n\n\n### Customizing the Lightbox Behavior\n\nCustomization of the lightbox's behavior is primarily achieved through the options passed to the `prettyPhoto()` function during initialization (see the Configuration Options section).  This allows you to control aspects like theme, social media integration, slideshow behavior, and more.  Modifying the CSS can alter the visual appearance.  More advanced customizations might require directly modifying the JavaScript code, but this is strongly discouraged unless you have a deep understanding of the library's internal workings.  Any direct code modification should only be done after thoroughly backing up the original files.  Any changes made directly to the source code might not be compatible with future versions or updates.  Creating custom plugins or extensions is a preferred method for extending functionality.\n\n\n## Troubleshooting\n\n### Common Issues\n\n* **prettyPhoto not working:** Double-check that you have included jQuery and the prettyPhoto JavaScript and CSS files correctly in your HTML, ensuring the correct paths.  Verify that jQuery is included *before* the prettyPhoto JavaScript.  Inspect the browser's developer console for any JavaScript errors. Ensure that your links have the correct `rel` attribute (e.g., `rel=\"prettyPhoto\"` or `rel=\"prettyPhoto[gallery1]\"`).\n\n* **Images not displaying:**  Verify that the image URLs in your `href` attributes are correct and accessible.  Check for any 404 errors in the browser's developer console.  If using relative paths, ensure they are relative to the correct base URL.\n\n* **Gallery navigation not working:** Make sure that all images within a gallery share the same `rel` attribute with the gallery name enclosed in square brackets.\n\n* **CSS styling issues:**  Check for any CSS conflicts.  Inspect the generated HTML and CSS using your browser's developer tools to identify any conflicting styles.  Consider using a custom CSS file to override default styles.\n\n* **Javascript errors:** Carefully examine any JavaScript errors that appear in your browser's developer console. These errors often provide clues to the source of the problem, such as incorrect selectors or missing files.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:**  The developer tools in your browser (usually accessed by pressing F12) are invaluable for debugging.  Use the console to check for JavaScript errors, the network tab to inspect requests for files, and the elements tab to inspect the HTML and CSS.\n\n* **Simplify your code:**  To isolate the source of an issue, try simplifying your HTML and JavaScript code.  Remove any extra elements or custom code that might interfere with prettyPhoto's functionality.\n\n* **Test with a minimal example:**  Create a simple HTML page with only the essential elements to test if prettyPhoto works correctly. This can help you eliminate potential conflicts with other parts of your website.\n\n* **Check the console for errors:**  Always check the browser's console for any errors or warnings that are outputted during the loading and execution of prettyPhoto.\n\n* **Check for jQuery conflicts:** If using other jQuery plugins, ensure there are no conflicts in terms of selectors or event handlers.\n\n\n### Known Bugs and Limitations\n\nWhile prettyPhoto is generally robust, some limitations or bugs might exist depending on the version.  Always check the official documentation or support channels for known issues and bug fixes.  Older versions may have known limitations in browser compatibility or feature support.  Updating to the latest version usually resolves many previously reported problems.  Specific bugs might be related to interactions with other JavaScript libraries or unusual browser behavior, and solutions might require custom workarounds or careful code adjustments.  If you encounter an unexpected issue, searching for similar reports online or contacting the developer community can often help in finding a solution or workaround.\n\n\n## Contributing\n\n### Reporting Bugs\n\nIf you encounter a bug in prettyPhoto, please report it through the appropriate channels (e.g., issue tracker on GitHub if available, or a designated support forum if provided by the project maintainers). When reporting a bug, please provide the following information:\n\n* **Detailed description of the bug:** Clearly explain what the problem is, including steps to reproduce it.\n* **Your browser and operating system:** Specify the browser (and version) and operating system you're using.\n* **Version of prettyPhoto:** Indicate which version of prettyPhoto you're using.\n* **Relevant code snippets:** Include any relevant code snippets (HTML, CSS, and JavaScript) that demonstrate the issue.  Minimize the code provided to only the essential parts for reproduction.\n* **Screenshots or screen recordings (if applicable):** Visual aids can significantly help in understanding the problem.\n\nClear and concise bug reports significantly aid in the debugging and resolution process.\n\n\n### Suggesting Features\n\nIf you have suggestions for new features or improvements to prettyPhoto, please submit them through the appropriate channels (e.g., a feature request system or forum if available).  Provide a clear description of the proposed feature, including its purpose and potential benefits.  Consider detailing the expected user experience and potential implementation details, including any potential challenges or dependencies.  Well-written feature requests are more likely to be considered by the project maintainers.\n\n\n### Contributing Code\n\nIf you're interested in contributing code to prettyPhoto, typically you would need to follow these steps:\n\n1. **Fork the repository:** Create a fork of the official prettyPhoto repository on GitHub (or the platform where the project is hosted).\n\n2. **Create a branch:** Create a new branch in your forked repository for your changes.  Use descriptive branch names that indicate the purpose of the changes (e.g., \"fix-bug-gallery-navigation,\" \"feature-add-lazy-loading\").\n\n3. **Make your changes:** Make the necessary code changes in your branch, ensuring that you follow the project's coding style and conventions.  Write clean, well-documented code.\n\n4. **Test your changes:** Thoroughly test your changes to ensure they work correctly and don't introduce new bugs.\n\n5. **Create a pull request:** Create a pull request from your branch to the main branch of the original repository.  Include a clear description of your changes and why they're necessary.\n\n6. **Address feedback:** The project maintainers might provide feedback on your pull request.  Address their comments and make any necessary changes.\n\n\nContributing code generally requires familiarity with Git and the project's development workflow.  Always ensure your code is well-tested and follows the project's coding guidelines.  A well-structured pull request that clearly explains the changes and their rationale increases the likelihood of acceptance.  Respectful communication with the project maintainers is crucial for a positive contribution experience.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is prettyPhoto?\n\nprettyPhoto is a jQuery-based lightbox that allows you to showcase images and videos attractively in a sleek overlay.  It provides a simple yet powerful way to enhance the user experience when displaying media content on your website.  Instead of navigating away from the current page, prettyPhoto overlays the content directly on top, keeping the user within the context of their current browsing session.\n\n\n### Features\n\n* **Multiple Media Support:** Displays images, Flash, YouTube, Vimeo, and other media types seamlessly.\n* **Customizable:** Highly customizable with options for theme, animation, and social sharing.\n* **Keyboard Navigation:**  Allows for intuitive navigation through galleries using keyboard shortcuts.\n* **Automatic Gallery Detection:**  Automatically detects galleries and handles their sequential display.\n* **Ajax Support:**  Supports loading content via AJAX, allowing for dynamic content updates.\n* **Social Sharing:**  Provides options for sharing images on various social media platforms.\n* **Responsive Design:** Adapts to different screen sizes for optimal viewing on various devices.\n* **Easy Integration:**  Simple integration into existing websites through jQuery inclusion and minimal code.\n\n\n### Browser Compatibility\n\nprettyPhoto is designed to work across a wide range of modern browsers.  While specific version support may vary depending on the jQuery version used, it generally offers excellent compatibility with:\n\n* Chrome (Latest versions)\n* Firefox (Latest versions)\n* Safari (Latest versions)\n* Edge (Latest versions)\n* Internet Explorer (Limited support for older versions; latest versions are recommended)\n\n\n### Getting Started\n\n1. **Include jQuery:** Ensure you have the jQuery library included in your project. You can download it from [https://jquery.com/](https://jquery.com/) or use a CDN.\n\n2. **Include prettyPhoto:** Download the prettyPhoto files (CSS and JavaScript) and include them in your HTML `<head>` section.  Typically, this will involve including `prettyPhoto.css` and `jquery.prettyPhoto.js`.\n\n3. **Initialize prettyPhoto:** Use jQuery to initialize prettyPhoto on your links or elements containing media.  The basic syntax involves selecting your links and calling the `prettyPhoto()` method.  For example:\n\n   ```html\n   <a href=\"image.jpg\" rel=\"prettyPhoto[gallery1]\">Image 1</a>\n   <a href=\"image2.jpg\" rel=\"prettyPhoto[gallery1]\">Image 2</a>\n   <a href=\"video.mp4\" rel=\"prettyPhoto[gallery2]\">Video</a>\n\n   <script>\n       $(\"a[rel^='prettyPhoto']\").prettyPhoto();\n   </script>\n   ```\n\n   This code selects all links with `rel` attributes starting with \"prettyPhoto\" and applies prettyPhoto to them. The `[gallery1]` and `[gallery2]` parts define galleries; links with the same gallery name will be navigable as a slideshow.\n\n4. **Customize (Optional):** Explore the extensive options available to customize prettyPhoto's appearance and behavior.  Refer to the detailed documentation for a complete list of options and their usage.\n\n\nRemember to consult the official prettyPhoto documentation for the most up-to-date information and advanced usage examples.\n\n\n## Installation and Setup\n\n### Downloading prettyPhoto\n\nThe latest version of prettyPhoto can be downloaded from [https://github.com/scaron/prettyphoto](https://github.com/scaron/prettyphoto).  The download typically includes the following files:\n\n* `jquery.prettyPhoto.js`: The core JavaScript file.\n* `prettyPhoto.css`: The main stylesheet.\n* `prettyPhoto.css`: Additional theme files may be included (e.g., dark themes).\n* `images/`: A folder containing images used by the lightbox (buttons, icons, etc.).\n\nDownload the compressed archive (zip or similar) and extract its contents to a convenient location in your project's file structure.\n\n\n### Including CSS and JavaScript\n\nAfter downloading prettyPhoto, you need to include the necessary CSS and JavaScript files in your HTML document.  It's recommended to place these links within the `<head>` section for optimal loading performance:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/prettyPhoto.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\" />\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"path/to/jquery.js\"></script>  <!-- Ensure jQuery is included -->\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"path/to/jquery.prettyPhoto.js\"></script>\n```\n\nRemember to replace `\"path/to/\"` with the actual path to your downloaded prettyPhoto files.  Ensure that the jQuery library is included *before* the prettyPhoto JavaScript file, as prettyPhoto relies on jQuery.\n\n\n### Markup Requirements\n\nTo use prettyPhoto, you need to wrap your image or media links within `<a>` tags and provide the necessary attributes.  The most important attribute is `rel`, which is used to group images into galleries and identify them for prettyPhoto.\n\n\nA basic example:\n\n```html\n<a href=\"image1.jpg\" rel=\"prettyPhoto[gallery1]\">Image 1</a>\n<a href=\"image2.jpg\" rel=\"prettyPhoto[gallery1]\">Image 2</a>\n<a href=\"video.mp4\" rel=\"prettyPhoto[gallery2]\">Video</a>\n```\n\nIn this example:\n\n* `href`: Specifies the URL of the image or video.\n* `rel=\"prettyPhoto[gallery1]\"`:  This attribute tells prettyPhoto that this link belongs to the gallery named \"gallery1.\"  Links with the same gallery name will be treated as a gallery, allowing users to navigate between them.  You can create multiple galleries by using different names (e.g., `[gallery2]`, `[gallery3]`).\n\n\n### Basic Initialization\n\nAfter including the necessary files and creating the required HTML markup, you need to initialize prettyPhoto using jQuery. This is done by selecting the links and calling the `prettyPhoto()` method:\n\n\n```javascript\n$(document).ready(function(){\n    $(\"a[rel^='prettyPhoto']\").prettyPhoto();\n});\n```\n\nThis code snippet, placed within a `$(document).ready()` function, waits for the DOM to be fully loaded before executing.  It selects all anchor (`<a>`) elements whose `rel` attribute starts with \"prettyPhoto\" and applies the prettyPhoto functionality to them.  This is the most basic initialization; more advanced options are available for further customization (see the Options section of the documentation).\n\n\n## Configuration Options\n\n### API Options\n\nprettyPhoto offers a range of options to customize its behavior and appearance. These options are passed as a JavaScript object to the `prettyPhoto()` function.  Here are some key API options:\n\n* **`social_media`:** (Boolean) Enables or disables social media sharing buttons.  Defaults to `true`.\n* **`deeplinking`:** (Boolean) Enables deeplinking functionality, allowing users to directly link to specific images within a gallery. Defaults to `false`.\n* **`overlay_gallery`:** (Boolean) Displays a thumbnail gallery overlay. Defaults to `true`.\n* **`slideshow`:** (Boolean) Enables automatic slideshow functionality. Defaults to `false`.\n* **`autoplay_slideshow`:** (Boolean) Automatically starts the slideshow when opened. Defaults to `false`.\n* **`slideshow_delay`:** (Integer) Sets the delay (in milliseconds) between slideshow transitions. Defaults to 5000 (5 seconds).\n* **`theme`:** (String) Specifies the theme to use.  Defaults to \"default\".  Additional themes may be available depending on the prettyPhoto version.\n* **`modal`:** (Boolean) If true, the prettyPhoto window will be modal (blocking other interactions). Defaults to `true`\n* **`horizontal_padding`:** (Integer) Sets the horizontal padding around the content inside the prettyPhoto window (in pixels). Defaults to 20.\n* **`opacity`:** (Float) Sets the opacity of the overlay. Defaults to 0.8 (80%).\n* **`show_title`:** (Boolean) Displays the title of the media item.  Defaults to `true`.\n\nThese are just a few examples;  refer to the full documentation for a complete list of available API options and their default values.  These options are passed as a second argument to `prettyPhoto()`.  For example:\n\n```javascript\n$(\"a[rel^='prettyPhoto']\").prettyPhoto({\n    social_media: false,\n    slideshow: true,\n    slideshow_delay: 3000\n});\n```\n\n\n### Customization Options\n\nBeyond the core API options, prettyPhoto's appearance can be heavily customized through CSS.  You can modify the styles of various elements, such as the close button, navigation arrows, caption area, and overlay.  Inspecting the generated HTML and CSS after initialization will reveal the specific classes and IDs you can target for styling.  Creating custom CSS files and linking them to your project is recommended for managing these customizations.  Consider creating custom themes to maintain organization.\n\n### Social Media Integration\n\nBy default, prettyPhoto includes buttons for sharing images on various social media platforms.  The `social_media` option controls the visibility of these buttons.  The exact platforms supported might vary depending on the version; check your version's documentation for details.  If needed, you can customize the social media sharing links or even remove them entirely through CSS or by modifying the JavaScript code.\n\n### Advanced Configuration\n\nFor advanced customization and integration, you might need to delve into the JavaScript code itself.  This would involve potentially extending the core functionality or overriding specific behaviors.  Carefully review the source code of `jquery.prettyPhoto.js`  and understand its internal workings before making any modifications.  Consider creating custom plugins or extending the existing ones to manage complex interactions.  Always back up your original files before making any direct modifications to the core code.\n\nRemember to consult the comprehensive documentation for the most complete and updated information on configuration options, advanced techniques, and troubleshooting.\n\n\n## Usage and Examples\n\n### Linking Images\n\nThe most basic usage of prettyPhoto involves linking individual images.  This is done by wrapping the image link in an `<a>` tag and setting the `rel` attribute to `prettyPhoto`.\n\n```html\n<a href=\"image1.jpg\" rel=\"prettyPhoto\">View Image</a>\n<a href=\"image2.png\" rel=\"prettyPhoto\">View Image 2</a>\n```\n\nThis code will create two separate links, each opening the respective image in the prettyPhoto lightbox.  After including the necessary files (as described in the Installation section) and initializing prettyPhoto with `$(\"a[rel^='prettyPhoto']\").prettyPhoto();`, these links will function correctly.\n\n\n### Linking Galleries\n\nTo create a gallery, use the same `rel` attribute but include a gallery name within square brackets. All links with the same gallery name will be part of the same gallery, allowing users to navigate between them within the lightbox.\n\n```html\n<a href=\"image1.jpg\" rel=\"prettyPhoto[gallery1]\">Image 1</a>\n<a href=\"image2.jpg\" rel=\"prettyPhoto[gallery1]\">Image 2</a>\n<a href=\"image3.jpg\" rel=\"prettyPhoto[gallery1]\">Image 3</a>\n```\n\nThis creates a gallery named \"gallery1.\"  Users can navigate through these images using the left and right arrows within the prettyPhoto lightbox.  You can create multiple galleries using different names (e.g., `[gallery2]`, `[gallery3]`).\n\n\n### Customizing the Lightbox\n\nprettyPhoto offers various customization options (detailed in the Configuration Options section) that allow you to change its appearance and behavior. These options can be set when initializing prettyPhoto:\n\n```javascript\n$(\"a[rel^='prettyPhoto']\").prettyPhoto({\n    theme: 'dark_rounded', // Example theme\n    social_media: false,   // Disable social sharing\n    slideshow: true       // Enable slideshow\n});\n```\n\nIn addition to these options, you can customize the lightbox's appearance further by modifying the provided CSS file or creating a custom CSS file to override existing styles.\n\n\n### Handling Events\n\nprettyPhoto provides several events that you can use to trigger custom actions.  These events are triggered at various stages of the lightbox's lifecycle (opening, closing, image change, etc.).  You can listen for these events using jQuery's `.on()` method. For instance, to execute a function when the lightbox opens:\n\n```javascript\n$(document).on('prettyPhoto_open', function(){\n    console.log('prettyPhoto opened!');\n    // Add your custom code here\n});\n```\n\nRefer to the complete documentation for a full list of available prettyPhoto events and their usage.\n\n\n### Integration with other libraries\n\nprettyPhoto can be integrated with other JavaScript libraries, provided there are no conflicting jQuery selectors or event handlers.  However, ensure that any other library's initialization occurs *before* the prettyPhoto initialization to avoid potential conflicts.  In cases of conflicts, you may need to adjust the selectors or event handling to ensure proper interaction between the libraries.   Careful consideration of potential naming conflicts and event handling precedence is essential for smooth integration.\n\n\n## API Reference\n\n### prettyPhoto API Methods\n\nWhile prettyPhoto's primary initialization happens via the `prettyPhoto()` method (as described in previous sections), there are no additional public methods directly exposed by the prettyPhoto API for manipulating the lightbox after initialization.  The lightbox's functionality is largely controlled through the configuration options passed during initialization and event handling.  Direct manipulation of the lightbox's internal state is generally discouraged as it can lead to unpredictable behavior and break functionality.\n\n\n### Event Handling\n\nprettyPhoto triggers several custom events throughout its lifecycle.  These events can be used to integrate custom functionality with the lightbox.  You can listen for these events using jQuery's `.on()` method.  Here are some key events:\n\n\n* **`prettyPhoto_open`:** Triggered when the lightbox opens.\n* **`prettyPhoto_close`:** Triggered when the lightbox closes.\n* **`prettyPhoto_afterChange`:** Triggered after the lightbox content changes (e.g., navigating to a different image in a gallery).\n* **`prettyPhoto_beforeChange`:** Triggered before the lightbox content changes.\n* **`prettyPhoto_change`:** Triggered when the lightbox content is about to change.\n* **`prettyPhoto_afterClose`:** Triggered after the lightbox is completely closed.\n* **`prettyPhoto_beforeClose`:** Triggered before the lightbox starts closing.\n* **`prettyPhoto_imageLoaded`:** Triggered after an image is fully loaded in the lightbox.\n* **`prettyPhoto_loading`:** Triggered when an image is being loaded into the lightbox.\n\nExample:\n\n```javascript\n$(document).on('prettyPhoto_open', function() {\n    console.log('prettyPhoto opened!');\n    // Add your custom code here, such as showing a loading indicator\n});\n\n$(document).on('prettyPhoto_afterChange', function(event, /*prettyPhoto_container, index, total*/){\n  console.log('Image changed! Current index: ' + prettyPhoto_container.index);\n  // Accessing additional parameters might require modifications based on prettyPhoto version\n});\n\n$(document).on('prettyPhoto_close', function() {\n    console.log('prettyPhoto closed!');\n    // Add your code to perform actions after closing, like removing loading indicators\n});\n```\n\nNote:  The parameters passed to the event handlers might vary depending on the version of prettyPhoto.  Consult the source code or a detailed documentation specific to your version for complete parameter information.\n\n\n### Customizing the Lightbox Behavior\n\nCustomization of the lightbox's behavior is primarily achieved through the options passed to the `prettyPhoto()` function during initialization (see the Configuration Options section).  This allows you to control aspects like theme, social media integration, slideshow behavior, and more.  Modifying the CSS can alter the visual appearance.  More advanced customizations might require directly modifying the JavaScript code, but this is strongly discouraged unless you have a deep understanding of the library's internal workings.  Any direct code modification should only be done after thoroughly backing up the original files.  Any changes made directly to the source code might not be compatible with future versions or updates.  Creating custom plugins or extensions is a preferred method for extending functionality.\n\n\n## Troubleshooting\n\n### Common Issues\n\n* **prettyPhoto not working:** Double-check that you have included jQuery and the prettyPhoto JavaScript and CSS files correctly in your HTML, ensuring the correct paths.  Verify that jQuery is included *before* the prettyPhoto JavaScript.  Inspect the browser's developer console for any JavaScript errors. Ensure that your links have the correct `rel` attribute (e.g., `rel=\"prettyPhoto\"` or `rel=\"prettyPhoto[gallery1]\"`).\n\n* **Images not displaying:**  Verify that the image URLs in your `href` attributes are correct and accessible.  Check for any 404 errors in the browser's developer console.  If using relative paths, ensure they are relative to the correct base URL.\n\n* **Gallery navigation not working:** Make sure that all images within a gallery share the same `rel` attribute with the gallery name enclosed in square brackets.\n\n* **CSS styling issues:**  Check for any CSS conflicts.  Inspect the generated HTML and CSS using your browser's developer tools to identify any conflicting styles.  Consider using a custom CSS file to override default styles.\n\n* **Javascript errors:** Carefully examine any JavaScript errors that appear in your browser's developer console. These errors often provide clues to the source of the problem, such as incorrect selectors or missing files.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:**  The developer tools in your browser (usually accessed by pressing F12) are invaluable for debugging.  Use the console to check for JavaScript errors, the network tab to inspect requests for files, and the elements tab to inspect the HTML and CSS.\n\n* **Simplify your code:**  To isolate the source of an issue, try simplifying your HTML and JavaScript code.  Remove any extra elements or custom code that might interfere with prettyPhoto's functionality.\n\n* **Test with a minimal example:**  Create a simple HTML page with only the essential elements to test if prettyPhoto works correctly. This can help you eliminate potential conflicts with other parts of your website.\n\n* **Check the console for errors:**  Always check the browser's console for any errors or warnings that are outputted during the loading and execution of prettyPhoto.\n\n* **Check for jQuery conflicts:** If using other jQuery plugins, ensure there are no conflicts in terms of selectors or event handlers.\n\n\n### Known Bugs and Limitations\n\nWhile prettyPhoto is generally robust, some limitations or bugs might exist depending on the version.  Always check the official documentation or support channels for known issues and bug fixes.  Older versions may have known limitations in browser compatibility or feature support.  Updating to the latest version usually resolves many previously reported problems.  Specific bugs might be related to interactions with other JavaScript libraries or unusual browser behavior, and solutions might require custom workarounds or careful code adjustments.  If you encounter an unexpected issue, searching for similar reports online or contacting the developer community can often help in finding a solution or workaround.\n\n\n## Contributing\n\n### Reporting Bugs\n\nIf you encounter a bug in prettyPhoto, please report it through the appropriate channels (e.g., issue tracker on GitHub if available, or a designated support forum if provided by the project maintainers). When reporting a bug, please provide the following information:\n\n* **Detailed description of the bug:** Clearly explain what the problem is, including steps to reproduce it.\n* **Your browser and operating system:** Specify the browser (and version) and operating system you're using.\n* **Version of prettyPhoto:** Indicate which version of prettyPhoto you're using.\n* **Relevant code snippets:** Include any relevant code snippets (HTML, CSS, and JavaScript) that demonstrate the issue.  Minimize the code provided to only the essential parts for reproduction.\n* **Screenshots or screen recordings (if applicable):** Visual aids can significantly help in understanding the problem.\n\nClear and concise bug reports significantly aid in the debugging and resolution process.\n\n\n### Suggesting Features\n\nIf you have suggestions for new features or improvements to prettyPhoto, please submit them through the appropriate channels (e.g., a feature request system or forum if available).  Provide a clear description of the proposed feature, including its purpose and potential benefits.  Consider detailing the expected user experience and potential implementation details, including any potential challenges or dependencies.  Well-written feature requests are more likely to be considered by the project maintainers.\n\n\n### Contributing Code\n\nIf you're interested in contributing code to prettyPhoto, typically you would need to follow these steps:\n\n1. **Fork the repository:** Create a fork of the official prettyPhoto repository on GitHub (or the platform where the project is hosted).\n\n2. **Create a branch:** Create a new branch in your forked repository for your changes.  Use descriptive branch names that indicate the purpose of the changes (e.g., \"fix-bug-gallery-navigation,\" \"feature-add-lazy-loading\").\n\n3. **Make your changes:** Make the necessary code changes in your branch, ensuring that you follow the project's coding style and conventions.  Write clean, well-documented code.\n\n4. **Test your changes:** Thoroughly test your changes to ensure they work correctly and don't introduce new bugs.\n\n5. **Create a pull request:** Create a pull request from your branch to the main branch of the original repository.  Include a clear description of your changes and why they're necessary.\n\n6. **Address feedback:** The project maintainers might provide feedback on your pull request.  Address their comments and make any necessary changes.\n\n\nContributing code generally requires familiarity with Git and the project's development workflow.  Always ensure your code is well-tested and follows the project's coding guidelines.  A well-structured pull request that clearly explains the changes and their rationale increases the likelihood of acceptance.  Respectful communication with the project maintainers is crucial for a positive contribution experience.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"prettyphoto.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"prettyPhoto - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}