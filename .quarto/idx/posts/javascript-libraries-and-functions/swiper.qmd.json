{"title":"Swiper - Documentation","markdown":{"yaml":{"title":"Swiper - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nSwiper can be installed via npm, yarn, or by directly including the CSS and JS files.\n\n**npm:**\n\n```bash\nnpm install swiper\n```\n\n**yarn:**\n\n```bash\nyarn add swiper\n```\n\n**CDN (for quick testing and small projects):**  Include the necessary CSS and JS files from the official Swiper CDN.  Refer to the Swiper documentation for the most up-to-date CDN links.  You'll typically need both a CSS file (for styling) and a JS file (for functionality).\n\n\n### Basic Usage\n\nAfter installing Swiper, you'll need an HTML container to hold your slides.  This container will be targeted by Swiper's JavaScript.  Each slide is typically represented as a child element within this container (e.g., `<div>` elements).  Swiper's JavaScript then initializes, taking this container as a parameter.  Basic configuration options can be passed to customize the Swiper instance.\n\n### First Example\n\nLet's create a simple Swiper instance.  Assume you've already installed Swiper via npm or yarn.\n\n1. **HTML (`index.html`):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Swiper Example</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css\"/>\n</head>\n<body>\n  <div class=\"swiper\">\n    <div class=\"swiper-wrapper\">\n      <div class=\"swiper-slide\">Slide 1</div>\n      <div class=\"swiper-slide\">Slide 2</div>\n      <div class=\"swiper-slide\">Slide 3</div>\n    </div>\n  </div>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js\"></script>\n  <script>\n    new Swiper('.swiper', {\n      // Optional parameters\n    });\n  </script>\n</body>\n</html>\n```\n\n2. **JavaScript (optional, if not using CDN and included via npm/yarn):**  If you installed Swiper via npm or yarn, you'll likely need to import it into your JavaScript file using an appropriate module importer (e.g., `import Swiper from 'swiper';`).  The above example uses the CDN.\n\nRemember to replace `\"https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css\"` and `\"https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js\"` with your actual paths if you are not using the CDN.\n\n\n### Including Swiper in your project\n\nFor npm/yarn installations,  you'll typically import Swiper into your JavaScript file and then initialize it using the appropriate selector for your Swiper container.  For CDN installations, simply include the CSS and JavaScript files in your HTML `<head>` and `<body>` respectively, then initialize Swiper in a `<script>` tag, ensuring it runs after the Swiper CSS and the HTML container are loaded. Remember to consult the Swiper documentation for the most current and accurate instructions, as specific file paths and import methods may change across Swiper versions.\n\n\n## Core Concepts\n\n### Swiper Instance\n\nA Swiper instance is a single, independently managed Swiper carousel. You create a Swiper instance by calling the `Swiper` constructor, passing it a CSS selector or a DOM element that represents the container for your slider.  This container must contain the slides.  The constructor also accepts an options object which allows you to configure various aspects of the slider's behavior, appearance, and interaction.  Each Swiper instance manages its own state and parameters.  You can have multiple Swiper instances on a single page, each operating independently.\n\n### Slides\n\nSlides are the individual elements within a Swiper instance that are displayed sequentially.  Each slide is usually represented by a `<div>` element (or similar) with the class `swiper-slide`.  These slides are contained within a wrapper element, usually with the class `swiper-wrapper`, which is itself contained within the main Swiper container.  The number of slides determines the length of the Swiper carousel.\n\n### Navigation\n\nNavigation refers to the controls that allow users to manually move between slides. Swiper provides built-in support for creating navigation buttons (typically \"prev\" and \"next\" buttons). You specify the elements representing your navigation buttons in the Swiper parameters. Swiper then handles the logic to enable and disable these buttons based on the currently visible slide. Custom navigation elements can also be implemented.\n\n### Pagination\n\nPagination provides visual indicators (often small dots or numbers) showing the current slide's position within the carousel. Swiper can automatically create pagination elements based on the number of slides or you can provide your own custom pagination elements. The Swiper parameters specify the elements for the pagination.  These parameters handle the updating of the active pagination element as the user navigates between slides.\n\n### Parameters\n\nParameters are options you pass to the Swiper constructor to configure its behavior.  These parameters control various aspects, such as the number of slides visible at once (`slidesPerView`), the spacing between slides (`spaceBetween`),  the effect used for transitions (`effect`), automatic sliding (`autoplay`),  navigation and pagination configurations, and many more.  The complete list of parameters and their usage is documented in the Swiper API documentation.  Correctly configuring these parameters is crucial to customizing the behavior of your Swiper instances.\n\n\n## Swiper API\n\n### Initialization\n\nSwiper is initialized by creating a new `Swiper` instance.  This is done by calling the `Swiper` constructor and passing it the necessary parameters:\n\n```javascript\n// Using a CSS selector:\nconst swiper = new Swiper('.swiper-container', {\n  // parameters\n});\n\n// Using a DOM element:\nconst swiperContainer = document.querySelector('.swiper-container');\nconst swiper = new Swiper(swiperContainer, {\n  // parameters\n});\n```\n\nThe first argument is the container element (either a CSS selector string or a DOM element). The second argument is an object containing the parameters to configure the Swiper instance.  See the \"Parameters\" section for details.\n\n\n### Methods\n\nSwiper provides a rich set of methods to interact with and control the slider programmatically.  Examples include:\n\n* **`slideNext()`:** Moves to the next slide.\n* **`slidePrev()`:** Moves to the previous slide.\n* **`slideTo(index, speed, runCallbacks)`:** Moves to a specific slide. `index` is the slide index (0-based), `speed` is the animation speed in milliseconds, and `runCallbacks` is a boolean indicating whether to trigger callbacks.\n* **`slideToLoop(index, speed, runCallbacks)`:** Similar to `slideTo`, but handles looping in looped mode.\n* **`destroy()`:** Destroys the Swiper instance, removing event listeners and cleaning up resources.\n* **`update()`:** Updates the Swiper layout and parameters.  Call this if the content or dimensions of the slider change dynamically.\n* **`getSwiper()`:** Returns the Swiper instance object.  Useful for accessing internal properties and methods for more advanced customizations.\n\nA complete list of methods and their usage is available in the official Swiper documentation.\n\n\n### Events\n\nSwiper triggers various events throughout its lifecycle.  These events allow you to respond to actions such as slide changes, transition starts and ends, and more.  You can listen for these events using the `on()` method:\n\n```javascript\nswiper.on('slideChange', () => {\n  console.log('Slide changed!');\n});\n\nswiper.on('transitionEnd', () => {\n  console.log('Transition ended!');\n});\n```\n\nEvents can also be removed using the `off()` method.  The full list of available events is in the Swiper documentation.\n\n\n### Data Attributes\n\nCertain Swiper parameters can be set using data attributes directly on the Swiper container element. This is helpful for simple configurations or when you want to avoid explicitly setting parameters in JavaScript.  For example, `data-space-between=\"50\"` would set the `spaceBetween` parameter to 50. The available data attributes and their corresponding parameters are documented in the Swiper documentation.\n\n### Properties\n\nSwiper instances have various properties that reflect their current state and configuration. These properties can be accessed using the dot notation (e.g., `swiper.params.speed`).  Examples include:\n\n* **`swiper.params`:** Contains the initial parameters passed to the constructor.\n* **`swiper.activeIndex`:** The index of the currently active slide.\n* **`swiper.slides`:** An array of DOM elements representing the slides.\n* **`swiper.realIndex`:** The index of the active slide, considering loops and duplicate slides.\n* **`swiper.isBeginning`:** A boolean indicating if the slider is at the beginning.\n* **`swiper.isEnd`:** A boolean indicating if the slider is at the end.\n\nConsult the official Swiper documentation for the complete list of properties and their descriptions.  Note that directly manipulating some of these properties may lead to unexpected behavior and should be done with caution.  Use the provided Swiper methods whenever possible for modifying the slider's state.\n\n\n\n## Navigation\n\n### Next/Previous Buttons\n\nSwiper offers built-in support for \"Next\" and \"Previous\" buttons to navigate through slides. To enable this, you need to specify the selectors for your button elements in the Swiper parameters using the `navigation` option.  This option should be an object containing `nextEl` and `prevEl` properties, each holding the CSS selector for the respective button. Swiper will then automatically handle the enabling/disabling of these buttons based on the current slide position.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  navigation: {\n    nextEl: '.swiper-button-next',\n    prevEl: '.swiper-button-prev',\n  },\n});\n```\n\nRemember to include the buttons in your HTML, typically with classes matching the selectors above.\n\n### Navigation Arrows\n\nNavigation arrows are a visual representation of the next/previous buttons, typically displayed as arrows pointing left and right. While not distinctly separate from the next/previous buttons, customizing their appearance is often discussed as a distinct topic.  You can customize their styling by using CSS on the elements you've specified in the `navigation` parameter.\n\n### Keyboard Navigation\n\nSwiper supports keyboard navigation by default.  Users can use the left and right arrow keys to navigate between slides.  This functionality is automatically enabled and doesn't require any additional configuration.  To disable keyboard navigation, set the `keyboard` parameter to `false`.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  keyboard: false, // Disables keyboard navigation\n});\n```\n\n### Custom Navigation\n\nIf the default navigation buttons don't fit your design, you can create fully custom navigation. This involves creating your own HTML elements for navigation and then using Swiper's methods (`slideNext()`, `slidePrev()`, `slideTo()`) to update the slider when these custom elements are interacted with (e.g., by adding click event listeners).\n\n### Progress Bar\n\nA progress bar visually indicates the current progress through the slides.  To add a progress bar, you need to specify the selector for your progress bar element in the Swiper parameters using the `scrollbar` option.  This option should be an object which defines the `el` property containing the CSS selector for your progress bar element.  Swiper will then automatically update the progress bar's fill based on the current slide.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  scrollbar: {\n    el: '.swiper-scrollbar',\n  },\n});\n```\n\nRemember to include the progress bar element in your HTML, typically with a class matching the selector above.  Swiper will style this element by default, but you can customize its appearance using CSS.\n\n\n## Pagination\n\n### Types of Pagination\n\nSwiper offers several types of pagination, selectable through parameters.  The most common types are:\n\n* **Bullet Pagination:**  This is the default pagination type. It displays a series of small dots or bullets, one for each slide. The active bullet visually indicates the current slide.\n\n* **Fraction Pagination:** This type displays the current slide number as a fraction (e.g., \"1/5\").\n\n* **Progress Pagination:** This displays a progress bar that fills as the user moves through the slides.\n\n\n### Custom Pagination\n\nWhile Swiper provides built-in pagination types, you can create fully custom pagination. This involves creating your own HTML elements for pagination and then using Swiper's events and methods to update them according to the current slide.  You would listen to the `slideChange` event and update your custom pagination elements accordingly.  For example, you might change the class or text content of elements to reflect the active slide.\n\n### Fraction Pagination\n\nFraction pagination shows the current slide number as a fraction (e.g., \"1/10\"). To enable fraction pagination, set the `pagination.type` parameter to `'fraction'`. You'll also need to specify the element to render the pagination using `pagination.el`.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  pagination: {\n    el: '.swiper-pagination',\n    type: 'fraction',\n  },\n});\n```\n\nRemember to include the `swiper-pagination` element in your HTML.\n\n### Progress Pagination\n\nProgress pagination displays a progress bar reflecting the user's progress through the slides.  Enable it by setting `pagination.type` to `'progressbar'`.  Similar to fraction pagination, you need to specify the `pagination.el` parameter to point to your progress bar element.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  pagination: {\n    el: '.swiper-pagination',\n    type: 'progressbar',\n  },\n});\n```\n\nThe progress bar's appearance can be customized using CSS.\n\n\n### Customizing Pagination\n\nRegardless of the pagination type (bullet, fraction, progress, or custom), you can customize its appearance using CSS.  Swiper applies default styles, but you have full control over styling aspects such as color, size, spacing, and other visual properties by targeting the relevant CSS classes applied to the pagination elements. You can also add or remove classes dynamically based on your application's needs.  Refer to the Swiper documentation for details on the CSS classes applied to pagination elements.\n\n\n## Effects\n\nSwiper supports various transition effects between slides, enhancing the visual appeal of your carousels.  These effects are controlled using the `effect` parameter in the Swiper initialization options.\n\n### Cube Effect\n\nThe Cube effect creates a 3D cube-like transition.  Slides rotate around a central axis to reveal the next slide. To enable the Cube effect:\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  effect: 'cube',\n});\n```\n\nAdditional parameters within the `cubeEffect` object (within the `effect` parameter) allow you to fine-tune aspects like the shadow, slide size, and cube's rotation axis.  See the Swiper documentation for detailed options.\n\n### Coverflow Effect\n\nThe Coverflow effect simulates a cover flow, similar to what's seen in Apple's Cover Flow interface. Slides appear to be fanned out in 3D space.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  effect: 'coverflow',\n});\n```\n\nThe `coverflowEffect` object allows you to customize properties such as the rotate, stretch, depth, and modifier.\n\n\n### Fade Effect\n\nThe Fade effect simply fades the current slide out while fading the next slide in.  It's a simple yet effective transition for clean transitions.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  effect: 'fade',\n});\n```\n\nThe `fadeEffect` object provides options for controlling the crossFade parameter.\n\n\n### Flip Effect\n\nThe Flip effect creates a card-flipping animation. Slides appear to flip over to reveal the next slide.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  effect: 'flip',\n});\n```\n\nThe `flipEffect` object allows you to control the limitRotation, and set whether to flip from the 'left' or 'right' using the `flipEffect.flipDirection` property.\n\n\n### Creative Effects\n\nSwiper also includes several creative effects that provide more visually striking transitions. These can be more complex and may require additional configuration. The specific options and possibilities vary depending on the chosen creative effect. Consult the Swiper documentation for detailed information on available creative effects and their parameters.\n\n\n### Custom Effects\n\nFor advanced users, Swiper allows creating custom transition effects.  This involves implementing custom JavaScript code that interacts with Swiper's internal APIs to control the animation of slides. This approach is significantly more advanced and necessitates a solid understanding of Swiper's architecture and animation principles.  It typically requires manipulating CSS transforms directly.  Consult the Swiper documentation for guidance on creating custom effects, as this is a significantly more involved task.\n\n\n\n## Advanced Usage\n\n### Lazy Loading\n\nLazy loading improves performance by loading slide content only when it's needed.  Swiper's lazy loading functionality allows you to defer loading of images or other resources until the slide is about to become visible.  Enable it by setting the `lazy` parameter to `true` and optionally providing selectors to target lazy load images (e.g., `lazy: {loadPrevNext: true, loadPrevNextAmount: 1}`.  The `loadPrevNext` option loads images in nearby slides and `loadPrevNextAmount` defines how many slides to preload.  Ensure your images have the `data-src` attribute specifying the actual image URL.\n\n\n### Virtual Slides\n\nVirtual slides optimize performance when dealing with a large number of slides. Instead of rendering all slides at once, Swiper renders only a limited number of slides around the currently active slide. You'll need to configure the `virtual` parameter, providing the total number of slides (`slidesnumber`) and optionally a `renderSlide` callback function which can further customize how virtual slides are rendered.\n\n### Autoplay\n\nAutoplay automatically transitions between slides at a specified interval.  Enable it by setting the `autoplay` parameter to `true` and optionally configure the delay (in milliseconds) and other options like `disableOnInteraction` (pauses on user interaction).\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  autoplay: {\n    delay: 3000,\n    disableOnInteraction: false, // Keep autoplay running even after interaction\n  },\n});\n```\n\n### Loop Mode\n\nLoop mode allows continuous looping through slides.  The last slide transitions seamlessly back to the first, creating an infinite loop. Enable it by setting `loop: true`. Note that using loop mode requires some careful consideration of slide structure and may require duplicated slides.\n\n\n### Hash Navigation\n\nHash navigation allows linking to specific slides using URL hashes.  Enable it using the `hashNavigation` parameter.  This will automatically update the URL hash based on the current slide, and clicking a link with the corresponding hash will navigate to that slide.\n\n### Keyboard Control\n\nSwiper provides keyboard navigation by default (left/right arrows). You can disable this using `keyboard: false`. For more fine-grained control, you can specify which keys trigger navigation using the `keyboard.onlyInViewport` or `keyboard.pageUpDown` options.\n\n### Accessibility\n\nBuilding accessible Swipers requires careful attention to ARIA attributes and keyboard navigation. Ensure that the `swiper-slide` elements have appropriate ARIA roles (like `role=\"group\"` for the wrapper and `role=\"presentation\"` for individual slides), labels, and `aria-current` attributes to indicate the active slide.  Provide sufficient visual contrast for elements and consider providing alternative text for images.  Proper keyboard navigation is essential for screen reader users, so using keyboard controls or building custom keyboard controls that respect ARIA standards is crucial.  Thoroughly test your implementation with assistive technologies.\n\n\n## Responsive Design\n\nSwiper makes it easy to create responsive sliders that adapt to different screen sizes.\n\n### Breakpoints\n\nBreakpoints define the screen size ranges at which the slider's behavior or appearance changes.  Swiper uses these breakpoints to adjust parameters based on the current viewport width.  You define breakpoints using the `breakpoints` parameter, which is an object where keys represent the breakpoint width (in pixels or other units) and values are objects containing the parameters that should be applied at that breakpoint.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  breakpoints: {\n    // when window width is >= 640px\n    640: {\n      slidesPerView: 2,\n      spaceBetween: 20,\n    },\n    // when window width is >= 1024px\n    1024: {\n      slidesPerView: 3,\n      spaceBetween: 40,\n    },\n  },\n});\n```\n\nIn this example, the slider will display 1 slide per view on smaller screens, 2 slides per view on screens 640px or wider, and 3 slides per view on screens 1024px or wider.  The `spaceBetween` parameter also adjusts accordingly.\n\n### Responsive Parameters\n\nMany Swiper parameters are responsive; that is, their value can change based on the breakpoint. Any parameter that accepts a numerical value, a string value (that could be resolved as a CSS unit), or an object can potentially be responsive. For those that accept an object, the object keys become the breakpoint names, and the values are the parameter values for each breakpoint.  For others, you can use the breakpoint object within the main parameter object.\n\n### Adaptive Heights\n\nAdaptive heights allow the slider's height to automatically adjust to the height of the tallest slide at a given breakpoint. This is particularly useful when slides have varying content heights.  To use this, simply set the `allowSlideNext` and `allowSlidePrev` options to true. If these are not set, Swiper's height will default to the height of the first slide.  The height will then adapt as users slide to taller content.  You don't need to explicitly configure adaptive heights beyond ensuring that the slider is correctly configured to allow the slide change.\n\n\n## Themes and Customization\n\nSwiper offers various ways to customize its appearance and integrate it seamlessly into your project's design.\n\n### CSS Customization\n\nThe simplest way to customize Swiper's appearance is by directly modifying its CSS.  Swiper provides a well-structured CSS framework with specific classes for different elements (slides, navigation, pagination, etc.). You can override these styles in your own CSS file, ensuring that your changes are applied after Swiper's default stylesheet is loaded.  Remember to be mindful of the specificity of your CSS selectors to avoid unintended consequences.\n\n### Sass/SCSS Customization\n\nFor more advanced customization, Swiper provides Sass/SCSS source files.  This allows you to modify the variables and mixins provided by Swiper's Sass files to tailor the styles precisely.  This approach offers greater flexibility and maintainability compared to directly editing the compiled CSS.  Using a CSS preprocessor requires additional setup for compiling the Sass/SCSS files into CSS before you can use it in your project.\n\n\n### Predefined Themes\n\nSwiper may offer predefined themes (check the Swiper documentation for the latest available themes).  These themes provide pre-configured styles for different design aesthetics.  Using a predefined theme can significantly accelerate the styling process, providing a solid starting point that you can then customize further.\n\n### Creating Custom Themes\n\nYou can create your own custom themes from scratch, either by modifying an existing theme or starting from a blank slate. This involves creating your own Sass/SCSS files, defining variables, mixins, and styles that conform to Swiper's structure.  You can then incorporate these styles into your project, providing a fully custom and branded Swiper implementation. The level of effort required will depend on the complexity and uniqueness of your design requirements.  Ensure that your custom theme styles are loaded after Swiper's core stylesheets to override them effectively.\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues and optimizing Swiper performance.\n\n### Common Issues\n\n* **Swiper not initializing:** Double-check that you've correctly included the Swiper JavaScript and CSS files (or imported them correctly via npm/yarn). Ensure the Swiper container element exists in the DOM and that the selector you're using to target it is accurate.  Inspect the browser's developer console for JavaScript errors.\n\n* **Slides not displaying correctly:** Verify that your slide elements have the `swiper-slide` class.  Make sure the `swiper-wrapper` element contains the `swiper-slide` elements.  Inspect the browser's developer console for JavaScript errors related to Swiper initialization or configuration.  Check for CSS conflicts that might be affecting the layout of the slider.\n\n* **Navigation/pagination not working:**  Ensure that you've correctly specified the selectors for your navigation and pagination elements in the Swiper parameters.  Verify that these elements exist in the DOM and are accessible to Swiper.  Check the browser's developer console for any errors.\n\n* **Performance issues:**  For large numbers of slides or complex effects, performance can suffer. Consider implementing lazy loading and/or virtual slides to optimize performance.  Minimize the use of computationally expensive effects.\n\n* **CSS conflicts:**  Swiper's default styles might conflict with your project's CSS. Use browser developer tools to inspect the CSS applied to Swiper elements and identify any conflicting styles. Use more specific selectors in your custom CSS to override Swiper's default styles without affecting other parts of your website.\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML structure, CSS styles, and JavaScript console for errors or warnings.  The console will often provide helpful clues about what's going wrong.\n\n* **Swiper Documentation:** The official Swiper documentation is an invaluable resource.  Consult it for detailed explanations of parameters, methods, and events.\n\n* **Simplify:** When encountering issues, try simplifying your Swiper setup. Create a minimal example with only the essential elements and parameters to isolate the problem.  Gradually add complexity back in until you identify the source of the issue.\n\n* **Check for errors:** Pay close attention to any JavaScript errors that appear in the browser's developer console.  These errors often pinpoint the exact location of the problem in your code.\n\n* **Version Compatibility:** Ensure compatibility between your Swiper version and other libraries or frameworks used in your project. Check Swiper's release notes and documentation for compatibility information.\n\n### Performance Optimization\n\n* **Lazy Loading:** Implement lazy loading to defer loading of images or other resources until they are about to be visible.\n\n* **Virtual Slides:** Use virtual slides for large numbers of slides to improve rendering performance.\n\n* **Minimize Effects:** Avoid using computationally expensive effects, especially with many slides.  Simple transitions (like fade) generally perform better than complex 3D effects.\n\n* **Optimize Images:** Optimize images to reduce their file size without significantly affecting their visual quality.  Use appropriate image formats (e.g., WebP) and compression techniques.\n\n* **CSS Optimization:** Ensure your CSS is well-structured and avoid unnecessary styles or selectors.  Minimize the use of computationally expensive CSS properties.\n\n* **JavaScript Optimization:**  Optimize your JavaScript code to avoid unnecessary calculations or DOM manipulations. Minimize the number of event listeners and use efficient data structures.\n\n\n\n\n## Migration Guide\n\nThis section guides you through upgrading to the latest version of Swiper and addresses potential compatibility issues.\n\n### Upgrading from Previous Versions\n\nUpgrading Swiper generally involves updating the included JavaScript and CSS files (or updating your package via npm or yarn).  Always refer to the official release notes for the version you are upgrading to.  The release notes will detail any significant changes, new features, bug fixes, and, most importantly, any breaking changes.\n\nThe general upgrade process is usually straightforward:\n\n1. **Update the package:** If using npm or yarn, run `npm update swiper` or `yarn upgrade swiper` to update to the latest version.\n\n2. **Update CDN links:** If using a CDN, replace the old CDN links with the updated links provided in the Swiper documentation.\n\n3. **Review breaking changes:** Carefully review the release notes for breaking changes.  Breaking changes often require code modifications to maintain functionality.\n\n4. **Test thoroughly:** After updating, thoroughly test your Swiper implementation to ensure all features are working as expected. Pay close attention to areas that may have been affected by breaking changes.\n\n\n### Breaking Changes\n\nBreaking changes are modifications to Swiper that may cause your existing code to stop working correctly.  These changes are usually documented in the release notes for each new version.  They can range from changes in parameter names or values to the removal of features or significant alterations to the API.\n\nBefore upgrading, always carefully review the release notes for the target version to identify any potential breaking changes.  The release notes will typically explain the changes and suggest ways to adapt your code to the new version.\n\n\n### Compatibility\n\nSwiper generally maintains backward compatibility, but some versions might introduce breaking changes.  Always check the documentation for compatibility information.  If you are using older versions of Swiper, upgrading to a newer version might require significant code changes, depending on the extent of breaking changes introduced between versions.\n\nIt's crucial to carefully plan any upgrades and test them thoroughly to avoid unexpected issues.  Consider creating a backup of your project before upgrading to ensure you can revert if necessary.  When upgrading across major versions (e.g., from Swiper 7 to Swiper 9), more extensive testing and code adjustments are likely required due to a greater probability of breaking changes.\n\n\n## Contributing\n\nWe welcome contributions to Swiper!  Whether you're reporting a bug, submitting a feature request, or contributing code, your involvement is valuable.\n\n### Reporting Bugs\n\nWhen reporting a bug, please provide as much detail as possible to help us reproduce and fix the issue quickly.  A good bug report typically includes:\n\n* **Swiper version:** Specify the exact version of Swiper you're using.\n* **Browser and operating system:** Indicate the browser and operating system on which you encountered the bug.\n* **Steps to reproduce:** Clearly describe the steps required to reproduce the bug.\n* **Expected behavior:** Explain what you expected to happen.\n* **Actual behavior:** Describe what actually happened.\n* **Screenshots or videos:** If applicable, include screenshots or screen recordings to visually illustrate the bug.\n* **Code snippet:**  Share a minimal code snippet that reproduces the problem.  This helps us quickly understand the context of the bug.\n\nPlease use the issue tracker on the Swiper repository to report bugs.  Before submitting a new issue, search existing issues to see if the bug has already been reported.\n\n### Submitting Pull Requests\n\nPull requests (PRs) are welcome for bug fixes, new features, and improvements to the documentation. Before submitting a PR:\n\n* **Fork the repository:** Fork the official Swiper repository on GitHub.\n* **Create a new branch:** Create a new branch for your changes.  Use descriptive branch names (e.g., `fix/bug-123` or `feature/new-feature`).\n* **Make your changes:** Make your changes and ensure your code follows the coding standards (see below).\n* **Test thoroughly:** Thoroughly test your changes to ensure they work correctly and don't introduce new bugs.\n* **Write clear commit messages:** Use concise and descriptive commit messages that explain the purpose of your changes.\n* **Create a pull request:** Create a pull request on GitHub, clearly describing the changes you've made and why they are beneficial.  Reference any relevant issues.\n\n\n### Coding Standards\n\nSwiper follows specific coding standards to ensure consistency and maintainability.  These standards typically include:\n\n* **Consistent indentation:** Use consistent indentation (usually 2 spaces).\n* **Meaningful variable names:** Use descriptive variable names that clearly indicate their purpose.\n* **Comments:**  Write clear and concise comments to explain complex logic or non-obvious code.\n* **Code style:** Adhere to a consistent code style (check the Swiper repository for style guidelines or use a linter).\n* **Testing:** Write unit tests for any new features or bug fixes.\n\n\nBefore submitting a pull request, ensure your code adheres to these standards.  The project maintainers may request changes if your code doesn't meet these standards.  Using a linter and formatter can greatly assist in ensuring code quality and consistency.\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nSwiper can be installed via npm, yarn, or by directly including the CSS and JS files.\n\n**npm:**\n\n```bash\nnpm install swiper\n```\n\n**yarn:**\n\n```bash\nyarn add swiper\n```\n\n**CDN (for quick testing and small projects):**  Include the necessary CSS and JS files from the official Swiper CDN.  Refer to the Swiper documentation for the most up-to-date CDN links.  You'll typically need both a CSS file (for styling) and a JS file (for functionality).\n\n\n### Basic Usage\n\nAfter installing Swiper, you'll need an HTML container to hold your slides.  This container will be targeted by Swiper's JavaScript.  Each slide is typically represented as a child element within this container (e.g., `<div>` elements).  Swiper's JavaScript then initializes, taking this container as a parameter.  Basic configuration options can be passed to customize the Swiper instance.\n\n### First Example\n\nLet's create a simple Swiper instance.  Assume you've already installed Swiper via npm or yarn.\n\n1. **HTML (`index.html`):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Swiper Example</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css\"/>\n</head>\n<body>\n  <div class=\"swiper\">\n    <div class=\"swiper-wrapper\">\n      <div class=\"swiper-slide\">Slide 1</div>\n      <div class=\"swiper-slide\">Slide 2</div>\n      <div class=\"swiper-slide\">Slide 3</div>\n    </div>\n  </div>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js\"></script>\n  <script>\n    new Swiper('.swiper', {\n      // Optional parameters\n    });\n  </script>\n</body>\n</html>\n```\n\n2. **JavaScript (optional, if not using CDN and included via npm/yarn):**  If you installed Swiper via npm or yarn, you'll likely need to import it into your JavaScript file using an appropriate module importer (e.g., `import Swiper from 'swiper';`).  The above example uses the CDN.\n\nRemember to replace `\"https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css\"` and `\"https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js\"` with your actual paths if you are not using the CDN.\n\n\n### Including Swiper in your project\n\nFor npm/yarn installations,  you'll typically import Swiper into your JavaScript file and then initialize it using the appropriate selector for your Swiper container.  For CDN installations, simply include the CSS and JavaScript files in your HTML `<head>` and `<body>` respectively, then initialize Swiper in a `<script>` tag, ensuring it runs after the Swiper CSS and the HTML container are loaded. Remember to consult the Swiper documentation for the most current and accurate instructions, as specific file paths and import methods may change across Swiper versions.\n\n\n## Core Concepts\n\n### Swiper Instance\n\nA Swiper instance is a single, independently managed Swiper carousel. You create a Swiper instance by calling the `Swiper` constructor, passing it a CSS selector or a DOM element that represents the container for your slider.  This container must contain the slides.  The constructor also accepts an options object which allows you to configure various aspects of the slider's behavior, appearance, and interaction.  Each Swiper instance manages its own state and parameters.  You can have multiple Swiper instances on a single page, each operating independently.\n\n### Slides\n\nSlides are the individual elements within a Swiper instance that are displayed sequentially.  Each slide is usually represented by a `<div>` element (or similar) with the class `swiper-slide`.  These slides are contained within a wrapper element, usually with the class `swiper-wrapper`, which is itself contained within the main Swiper container.  The number of slides determines the length of the Swiper carousel.\n\n### Navigation\n\nNavigation refers to the controls that allow users to manually move between slides. Swiper provides built-in support for creating navigation buttons (typically \"prev\" and \"next\" buttons). You specify the elements representing your navigation buttons in the Swiper parameters. Swiper then handles the logic to enable and disable these buttons based on the currently visible slide. Custom navigation elements can also be implemented.\n\n### Pagination\n\nPagination provides visual indicators (often small dots or numbers) showing the current slide's position within the carousel. Swiper can automatically create pagination elements based on the number of slides or you can provide your own custom pagination elements. The Swiper parameters specify the elements for the pagination.  These parameters handle the updating of the active pagination element as the user navigates between slides.\n\n### Parameters\n\nParameters are options you pass to the Swiper constructor to configure its behavior.  These parameters control various aspects, such as the number of slides visible at once (`slidesPerView`), the spacing between slides (`spaceBetween`),  the effect used for transitions (`effect`), automatic sliding (`autoplay`),  navigation and pagination configurations, and many more.  The complete list of parameters and their usage is documented in the Swiper API documentation.  Correctly configuring these parameters is crucial to customizing the behavior of your Swiper instances.\n\n\n## Swiper API\n\n### Initialization\n\nSwiper is initialized by creating a new `Swiper` instance.  This is done by calling the `Swiper` constructor and passing it the necessary parameters:\n\n```javascript\n// Using a CSS selector:\nconst swiper = new Swiper('.swiper-container', {\n  // parameters\n});\n\n// Using a DOM element:\nconst swiperContainer = document.querySelector('.swiper-container');\nconst swiper = new Swiper(swiperContainer, {\n  // parameters\n});\n```\n\nThe first argument is the container element (either a CSS selector string or a DOM element). The second argument is an object containing the parameters to configure the Swiper instance.  See the \"Parameters\" section for details.\n\n\n### Methods\n\nSwiper provides a rich set of methods to interact with and control the slider programmatically.  Examples include:\n\n* **`slideNext()`:** Moves to the next slide.\n* **`slidePrev()`:** Moves to the previous slide.\n* **`slideTo(index, speed, runCallbacks)`:** Moves to a specific slide. `index` is the slide index (0-based), `speed` is the animation speed in milliseconds, and `runCallbacks` is a boolean indicating whether to trigger callbacks.\n* **`slideToLoop(index, speed, runCallbacks)`:** Similar to `slideTo`, but handles looping in looped mode.\n* **`destroy()`:** Destroys the Swiper instance, removing event listeners and cleaning up resources.\n* **`update()`:** Updates the Swiper layout and parameters.  Call this if the content or dimensions of the slider change dynamically.\n* **`getSwiper()`:** Returns the Swiper instance object.  Useful for accessing internal properties and methods for more advanced customizations.\n\nA complete list of methods and their usage is available in the official Swiper documentation.\n\n\n### Events\n\nSwiper triggers various events throughout its lifecycle.  These events allow you to respond to actions such as slide changes, transition starts and ends, and more.  You can listen for these events using the `on()` method:\n\n```javascript\nswiper.on('slideChange', () => {\n  console.log('Slide changed!');\n});\n\nswiper.on('transitionEnd', () => {\n  console.log('Transition ended!');\n});\n```\n\nEvents can also be removed using the `off()` method.  The full list of available events is in the Swiper documentation.\n\n\n### Data Attributes\n\nCertain Swiper parameters can be set using data attributes directly on the Swiper container element. This is helpful for simple configurations or when you want to avoid explicitly setting parameters in JavaScript.  For example, `data-space-between=\"50\"` would set the `spaceBetween` parameter to 50. The available data attributes and their corresponding parameters are documented in the Swiper documentation.\n\n### Properties\n\nSwiper instances have various properties that reflect their current state and configuration. These properties can be accessed using the dot notation (e.g., `swiper.params.speed`).  Examples include:\n\n* **`swiper.params`:** Contains the initial parameters passed to the constructor.\n* **`swiper.activeIndex`:** The index of the currently active slide.\n* **`swiper.slides`:** An array of DOM elements representing the slides.\n* **`swiper.realIndex`:** The index of the active slide, considering loops and duplicate slides.\n* **`swiper.isBeginning`:** A boolean indicating if the slider is at the beginning.\n* **`swiper.isEnd`:** A boolean indicating if the slider is at the end.\n\nConsult the official Swiper documentation for the complete list of properties and their descriptions.  Note that directly manipulating some of these properties may lead to unexpected behavior and should be done with caution.  Use the provided Swiper methods whenever possible for modifying the slider's state.\n\n\n\n## Navigation\n\n### Next/Previous Buttons\n\nSwiper offers built-in support for \"Next\" and \"Previous\" buttons to navigate through slides. To enable this, you need to specify the selectors for your button elements in the Swiper parameters using the `navigation` option.  This option should be an object containing `nextEl` and `prevEl` properties, each holding the CSS selector for the respective button. Swiper will then automatically handle the enabling/disabling of these buttons based on the current slide position.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  navigation: {\n    nextEl: '.swiper-button-next',\n    prevEl: '.swiper-button-prev',\n  },\n});\n```\n\nRemember to include the buttons in your HTML, typically with classes matching the selectors above.\n\n### Navigation Arrows\n\nNavigation arrows are a visual representation of the next/previous buttons, typically displayed as arrows pointing left and right. While not distinctly separate from the next/previous buttons, customizing their appearance is often discussed as a distinct topic.  You can customize their styling by using CSS on the elements you've specified in the `navigation` parameter.\n\n### Keyboard Navigation\n\nSwiper supports keyboard navigation by default.  Users can use the left and right arrow keys to navigate between slides.  This functionality is automatically enabled and doesn't require any additional configuration.  To disable keyboard navigation, set the `keyboard` parameter to `false`.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  keyboard: false, // Disables keyboard navigation\n});\n```\n\n### Custom Navigation\n\nIf the default navigation buttons don't fit your design, you can create fully custom navigation. This involves creating your own HTML elements for navigation and then using Swiper's methods (`slideNext()`, `slidePrev()`, `slideTo()`) to update the slider when these custom elements are interacted with (e.g., by adding click event listeners).\n\n### Progress Bar\n\nA progress bar visually indicates the current progress through the slides.  To add a progress bar, you need to specify the selector for your progress bar element in the Swiper parameters using the `scrollbar` option.  This option should be an object which defines the `el` property containing the CSS selector for your progress bar element.  Swiper will then automatically update the progress bar's fill based on the current slide.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  scrollbar: {\n    el: '.swiper-scrollbar',\n  },\n});\n```\n\nRemember to include the progress bar element in your HTML, typically with a class matching the selector above.  Swiper will style this element by default, but you can customize its appearance using CSS.\n\n\n## Pagination\n\n### Types of Pagination\n\nSwiper offers several types of pagination, selectable through parameters.  The most common types are:\n\n* **Bullet Pagination:**  This is the default pagination type. It displays a series of small dots or bullets, one for each slide. The active bullet visually indicates the current slide.\n\n* **Fraction Pagination:** This type displays the current slide number as a fraction (e.g., \"1/5\").\n\n* **Progress Pagination:** This displays a progress bar that fills as the user moves through the slides.\n\n\n### Custom Pagination\n\nWhile Swiper provides built-in pagination types, you can create fully custom pagination. This involves creating your own HTML elements for pagination and then using Swiper's events and methods to update them according to the current slide.  You would listen to the `slideChange` event and update your custom pagination elements accordingly.  For example, you might change the class or text content of elements to reflect the active slide.\n\n### Fraction Pagination\n\nFraction pagination shows the current slide number as a fraction (e.g., \"1/10\"). To enable fraction pagination, set the `pagination.type` parameter to `'fraction'`. You'll also need to specify the element to render the pagination using `pagination.el`.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  pagination: {\n    el: '.swiper-pagination',\n    type: 'fraction',\n  },\n});\n```\n\nRemember to include the `swiper-pagination` element in your HTML.\n\n### Progress Pagination\n\nProgress pagination displays a progress bar reflecting the user's progress through the slides.  Enable it by setting `pagination.type` to `'progressbar'`.  Similar to fraction pagination, you need to specify the `pagination.el` parameter to point to your progress bar element.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  pagination: {\n    el: '.swiper-pagination',\n    type: 'progressbar',\n  },\n});\n```\n\nThe progress bar's appearance can be customized using CSS.\n\n\n### Customizing Pagination\n\nRegardless of the pagination type (bullet, fraction, progress, or custom), you can customize its appearance using CSS.  Swiper applies default styles, but you have full control over styling aspects such as color, size, spacing, and other visual properties by targeting the relevant CSS classes applied to the pagination elements. You can also add or remove classes dynamically based on your application's needs.  Refer to the Swiper documentation for details on the CSS classes applied to pagination elements.\n\n\n## Effects\n\nSwiper supports various transition effects between slides, enhancing the visual appeal of your carousels.  These effects are controlled using the `effect` parameter in the Swiper initialization options.\n\n### Cube Effect\n\nThe Cube effect creates a 3D cube-like transition.  Slides rotate around a central axis to reveal the next slide. To enable the Cube effect:\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  effect: 'cube',\n});\n```\n\nAdditional parameters within the `cubeEffect` object (within the `effect` parameter) allow you to fine-tune aspects like the shadow, slide size, and cube's rotation axis.  See the Swiper documentation for detailed options.\n\n### Coverflow Effect\n\nThe Coverflow effect simulates a cover flow, similar to what's seen in Apple's Cover Flow interface. Slides appear to be fanned out in 3D space.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  effect: 'coverflow',\n});\n```\n\nThe `coverflowEffect` object allows you to customize properties such as the rotate, stretch, depth, and modifier.\n\n\n### Fade Effect\n\nThe Fade effect simply fades the current slide out while fading the next slide in.  It's a simple yet effective transition for clean transitions.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  effect: 'fade',\n});\n```\n\nThe `fadeEffect` object provides options for controlling the crossFade parameter.\n\n\n### Flip Effect\n\nThe Flip effect creates a card-flipping animation. Slides appear to flip over to reveal the next slide.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  effect: 'flip',\n});\n```\n\nThe `flipEffect` object allows you to control the limitRotation, and set whether to flip from the 'left' or 'right' using the `flipEffect.flipDirection` property.\n\n\n### Creative Effects\n\nSwiper also includes several creative effects that provide more visually striking transitions. These can be more complex and may require additional configuration. The specific options and possibilities vary depending on the chosen creative effect. Consult the Swiper documentation for detailed information on available creative effects and their parameters.\n\n\n### Custom Effects\n\nFor advanced users, Swiper allows creating custom transition effects.  This involves implementing custom JavaScript code that interacts with Swiper's internal APIs to control the animation of slides. This approach is significantly more advanced and necessitates a solid understanding of Swiper's architecture and animation principles.  It typically requires manipulating CSS transforms directly.  Consult the Swiper documentation for guidance on creating custom effects, as this is a significantly more involved task.\n\n\n\n## Advanced Usage\n\n### Lazy Loading\n\nLazy loading improves performance by loading slide content only when it's needed.  Swiper's lazy loading functionality allows you to defer loading of images or other resources until the slide is about to become visible.  Enable it by setting the `lazy` parameter to `true` and optionally providing selectors to target lazy load images (e.g., `lazy: {loadPrevNext: true, loadPrevNextAmount: 1}`.  The `loadPrevNext` option loads images in nearby slides and `loadPrevNextAmount` defines how many slides to preload.  Ensure your images have the `data-src` attribute specifying the actual image URL.\n\n\n### Virtual Slides\n\nVirtual slides optimize performance when dealing with a large number of slides. Instead of rendering all slides at once, Swiper renders only a limited number of slides around the currently active slide. You'll need to configure the `virtual` parameter, providing the total number of slides (`slidesnumber`) and optionally a `renderSlide` callback function which can further customize how virtual slides are rendered.\n\n### Autoplay\n\nAutoplay automatically transitions between slides at a specified interval.  Enable it by setting the `autoplay` parameter to `true` and optionally configure the delay (in milliseconds) and other options like `disableOnInteraction` (pauses on user interaction).\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  autoplay: {\n    delay: 3000,\n    disableOnInteraction: false, // Keep autoplay running even after interaction\n  },\n});\n```\n\n### Loop Mode\n\nLoop mode allows continuous looping through slides.  The last slide transitions seamlessly back to the first, creating an infinite loop. Enable it by setting `loop: true`. Note that using loop mode requires some careful consideration of slide structure and may require duplicated slides.\n\n\n### Hash Navigation\n\nHash navigation allows linking to specific slides using URL hashes.  Enable it using the `hashNavigation` parameter.  This will automatically update the URL hash based on the current slide, and clicking a link with the corresponding hash will navigate to that slide.\n\n### Keyboard Control\n\nSwiper provides keyboard navigation by default (left/right arrows). You can disable this using `keyboard: false`. For more fine-grained control, you can specify which keys trigger navigation using the `keyboard.onlyInViewport` or `keyboard.pageUpDown` options.\n\n### Accessibility\n\nBuilding accessible Swipers requires careful attention to ARIA attributes and keyboard navigation. Ensure that the `swiper-slide` elements have appropriate ARIA roles (like `role=\"group\"` for the wrapper and `role=\"presentation\"` for individual slides), labels, and `aria-current` attributes to indicate the active slide.  Provide sufficient visual contrast for elements and consider providing alternative text for images.  Proper keyboard navigation is essential for screen reader users, so using keyboard controls or building custom keyboard controls that respect ARIA standards is crucial.  Thoroughly test your implementation with assistive technologies.\n\n\n## Responsive Design\n\nSwiper makes it easy to create responsive sliders that adapt to different screen sizes.\n\n### Breakpoints\n\nBreakpoints define the screen size ranges at which the slider's behavior or appearance changes.  Swiper uses these breakpoints to adjust parameters based on the current viewport width.  You define breakpoints using the `breakpoints` parameter, which is an object where keys represent the breakpoint width (in pixels or other units) and values are objects containing the parameters that should be applied at that breakpoint.\n\n```javascript\nconst swiper = new Swiper('.swiper', {\n  breakpoints: {\n    // when window width is >= 640px\n    640: {\n      slidesPerView: 2,\n      spaceBetween: 20,\n    },\n    // when window width is >= 1024px\n    1024: {\n      slidesPerView: 3,\n      spaceBetween: 40,\n    },\n  },\n});\n```\n\nIn this example, the slider will display 1 slide per view on smaller screens, 2 slides per view on screens 640px or wider, and 3 slides per view on screens 1024px or wider.  The `spaceBetween` parameter also adjusts accordingly.\n\n### Responsive Parameters\n\nMany Swiper parameters are responsive; that is, their value can change based on the breakpoint. Any parameter that accepts a numerical value, a string value (that could be resolved as a CSS unit), or an object can potentially be responsive. For those that accept an object, the object keys become the breakpoint names, and the values are the parameter values for each breakpoint.  For others, you can use the breakpoint object within the main parameter object.\n\n### Adaptive Heights\n\nAdaptive heights allow the slider's height to automatically adjust to the height of the tallest slide at a given breakpoint. This is particularly useful when slides have varying content heights.  To use this, simply set the `allowSlideNext` and `allowSlidePrev` options to true. If these are not set, Swiper's height will default to the height of the first slide.  The height will then adapt as users slide to taller content.  You don't need to explicitly configure adaptive heights beyond ensuring that the slider is correctly configured to allow the slide change.\n\n\n## Themes and Customization\n\nSwiper offers various ways to customize its appearance and integrate it seamlessly into your project's design.\n\n### CSS Customization\n\nThe simplest way to customize Swiper's appearance is by directly modifying its CSS.  Swiper provides a well-structured CSS framework with specific classes for different elements (slides, navigation, pagination, etc.). You can override these styles in your own CSS file, ensuring that your changes are applied after Swiper's default stylesheet is loaded.  Remember to be mindful of the specificity of your CSS selectors to avoid unintended consequences.\n\n### Sass/SCSS Customization\n\nFor more advanced customization, Swiper provides Sass/SCSS source files.  This allows you to modify the variables and mixins provided by Swiper's Sass files to tailor the styles precisely.  This approach offers greater flexibility and maintainability compared to directly editing the compiled CSS.  Using a CSS preprocessor requires additional setup for compiling the Sass/SCSS files into CSS before you can use it in your project.\n\n\n### Predefined Themes\n\nSwiper may offer predefined themes (check the Swiper documentation for the latest available themes).  These themes provide pre-configured styles for different design aesthetics.  Using a predefined theme can significantly accelerate the styling process, providing a solid starting point that you can then customize further.\n\n### Creating Custom Themes\n\nYou can create your own custom themes from scratch, either by modifying an existing theme or starting from a blank slate. This involves creating your own Sass/SCSS files, defining variables, mixins, and styles that conform to Swiper's structure.  You can then incorporate these styles into your project, providing a fully custom and branded Swiper implementation. The level of effort required will depend on the complexity and uniqueness of your design requirements.  Ensure that your custom theme styles are loaded after Swiper's core stylesheets to override them effectively.\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues and optimizing Swiper performance.\n\n### Common Issues\n\n* **Swiper not initializing:** Double-check that you've correctly included the Swiper JavaScript and CSS files (or imported them correctly via npm/yarn). Ensure the Swiper container element exists in the DOM and that the selector you're using to target it is accurate.  Inspect the browser's developer console for JavaScript errors.\n\n* **Slides not displaying correctly:** Verify that your slide elements have the `swiper-slide` class.  Make sure the `swiper-wrapper` element contains the `swiper-slide` elements.  Inspect the browser's developer console for JavaScript errors related to Swiper initialization or configuration.  Check for CSS conflicts that might be affecting the layout of the slider.\n\n* **Navigation/pagination not working:**  Ensure that you've correctly specified the selectors for your navigation and pagination elements in the Swiper parameters.  Verify that these elements exist in the DOM and are accessible to Swiper.  Check the browser's developer console for any errors.\n\n* **Performance issues:**  For large numbers of slides or complex effects, performance can suffer. Consider implementing lazy loading and/or virtual slides to optimize performance.  Minimize the use of computationally expensive effects.\n\n* **CSS conflicts:**  Swiper's default styles might conflict with your project's CSS. Use browser developer tools to inspect the CSS applied to Swiper elements and identify any conflicting styles. Use more specific selectors in your custom CSS to override Swiper's default styles without affecting other parts of your website.\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML structure, CSS styles, and JavaScript console for errors or warnings.  The console will often provide helpful clues about what's going wrong.\n\n* **Swiper Documentation:** The official Swiper documentation is an invaluable resource.  Consult it for detailed explanations of parameters, methods, and events.\n\n* **Simplify:** When encountering issues, try simplifying your Swiper setup. Create a minimal example with only the essential elements and parameters to isolate the problem.  Gradually add complexity back in until you identify the source of the issue.\n\n* **Check for errors:** Pay close attention to any JavaScript errors that appear in the browser's developer console.  These errors often pinpoint the exact location of the problem in your code.\n\n* **Version Compatibility:** Ensure compatibility between your Swiper version and other libraries or frameworks used in your project. Check Swiper's release notes and documentation for compatibility information.\n\n### Performance Optimization\n\n* **Lazy Loading:** Implement lazy loading to defer loading of images or other resources until they are about to be visible.\n\n* **Virtual Slides:** Use virtual slides for large numbers of slides to improve rendering performance.\n\n* **Minimize Effects:** Avoid using computationally expensive effects, especially with many slides.  Simple transitions (like fade) generally perform better than complex 3D effects.\n\n* **Optimize Images:** Optimize images to reduce their file size without significantly affecting their visual quality.  Use appropriate image formats (e.g., WebP) and compression techniques.\n\n* **CSS Optimization:** Ensure your CSS is well-structured and avoid unnecessary styles or selectors.  Minimize the use of computationally expensive CSS properties.\n\n* **JavaScript Optimization:**  Optimize your JavaScript code to avoid unnecessary calculations or DOM manipulations. Minimize the number of event listeners and use efficient data structures.\n\n\n\n\n## Migration Guide\n\nThis section guides you through upgrading to the latest version of Swiper and addresses potential compatibility issues.\n\n### Upgrading from Previous Versions\n\nUpgrading Swiper generally involves updating the included JavaScript and CSS files (or updating your package via npm or yarn).  Always refer to the official release notes for the version you are upgrading to.  The release notes will detail any significant changes, new features, bug fixes, and, most importantly, any breaking changes.\n\nThe general upgrade process is usually straightforward:\n\n1. **Update the package:** If using npm or yarn, run `npm update swiper` or `yarn upgrade swiper` to update to the latest version.\n\n2. **Update CDN links:** If using a CDN, replace the old CDN links with the updated links provided in the Swiper documentation.\n\n3. **Review breaking changes:** Carefully review the release notes for breaking changes.  Breaking changes often require code modifications to maintain functionality.\n\n4. **Test thoroughly:** After updating, thoroughly test your Swiper implementation to ensure all features are working as expected. Pay close attention to areas that may have been affected by breaking changes.\n\n\n### Breaking Changes\n\nBreaking changes are modifications to Swiper that may cause your existing code to stop working correctly.  These changes are usually documented in the release notes for each new version.  They can range from changes in parameter names or values to the removal of features or significant alterations to the API.\n\nBefore upgrading, always carefully review the release notes for the target version to identify any potential breaking changes.  The release notes will typically explain the changes and suggest ways to adapt your code to the new version.\n\n\n### Compatibility\n\nSwiper generally maintains backward compatibility, but some versions might introduce breaking changes.  Always check the documentation for compatibility information.  If you are using older versions of Swiper, upgrading to a newer version might require significant code changes, depending on the extent of breaking changes introduced between versions.\n\nIt's crucial to carefully plan any upgrades and test them thoroughly to avoid unexpected issues.  Consider creating a backup of your project before upgrading to ensure you can revert if necessary.  When upgrading across major versions (e.g., from Swiper 7 to Swiper 9), more extensive testing and code adjustments are likely required due to a greater probability of breaking changes.\n\n\n## Contributing\n\nWe welcome contributions to Swiper!  Whether you're reporting a bug, submitting a feature request, or contributing code, your involvement is valuable.\n\n### Reporting Bugs\n\nWhen reporting a bug, please provide as much detail as possible to help us reproduce and fix the issue quickly.  A good bug report typically includes:\n\n* **Swiper version:** Specify the exact version of Swiper you're using.\n* **Browser and operating system:** Indicate the browser and operating system on which you encountered the bug.\n* **Steps to reproduce:** Clearly describe the steps required to reproduce the bug.\n* **Expected behavior:** Explain what you expected to happen.\n* **Actual behavior:** Describe what actually happened.\n* **Screenshots or videos:** If applicable, include screenshots or screen recordings to visually illustrate the bug.\n* **Code snippet:**  Share a minimal code snippet that reproduces the problem.  This helps us quickly understand the context of the bug.\n\nPlease use the issue tracker on the Swiper repository to report bugs.  Before submitting a new issue, search existing issues to see if the bug has already been reported.\n\n### Submitting Pull Requests\n\nPull requests (PRs) are welcome for bug fixes, new features, and improvements to the documentation. Before submitting a PR:\n\n* **Fork the repository:** Fork the official Swiper repository on GitHub.\n* **Create a new branch:** Create a new branch for your changes.  Use descriptive branch names (e.g., `fix/bug-123` or `feature/new-feature`).\n* **Make your changes:** Make your changes and ensure your code follows the coding standards (see below).\n* **Test thoroughly:** Thoroughly test your changes to ensure they work correctly and don't introduce new bugs.\n* **Write clear commit messages:** Use concise and descriptive commit messages that explain the purpose of your changes.\n* **Create a pull request:** Create a pull request on GitHub, clearly describing the changes you've made and why they are beneficial.  Reference any relevant issues.\n\n\n### Coding Standards\n\nSwiper follows specific coding standards to ensure consistency and maintainability.  These standards typically include:\n\n* **Consistent indentation:** Use consistent indentation (usually 2 spaces).\n* **Meaningful variable names:** Use descriptive variable names that clearly indicate their purpose.\n* **Comments:**  Write clear and concise comments to explain complex logic or non-obvious code.\n* **Code style:** Adhere to a consistent code style (check the Swiper repository for style guidelines or use a linter).\n* **Testing:** Write unit tests for any new features or bug fixes.\n\n\nBefore submitting a pull request, ensure your code adheres to these standards.  The project maintainers may request changes if your code doesn't meet these standards.  Using a linter and formatter can greatly assist in ensuring code quality and consistency.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"swiper.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Swiper - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}