{"title":"SyntaxHighlighter - Documentation","markdown":{"yaml":{"title":"SyntaxHighlighter - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is SyntaxHighlighter?\n\nSyntaxHighlighter is a client-side code highlighting library written in JavaScript.  It allows you to easily display formatted code snippets within your web pages, improving readability and making it easier for users to understand the code examples you provide. It supports a wide variety of programming languages and can be customized to match your website's styling.  The library works by parsing the code and applying appropriate syntax highlighting based on the language specified.  The highlighted code is then rendered within the HTML of your page.\n\n### Key Features and Benefits\n\n* **Wide Language Support:** SyntaxHighlighter supports numerous programming and markup languages, allowing you to highlight code written in languages like Java, C++, Python, PHP, JavaScript, HTML, CSS, and many more.\n* **Customization:** The appearance of the highlighted code can be heavily customized through CSS, allowing you to integrate it seamlessly with your website's design.  You can adjust colors, fonts, line numbers, and other aspects.\n* **Lightweight and Efficient:** SyntaxHighlighter is designed to be lightweight and performant, minimizing the impact on your website's loading time.\n* **Easy Integration:**  The library is straightforward to integrate into existing web projects.  It typically involves including a JavaScript file and minimal HTML markup.\n* **Client-Side Processing:** All highlighting is done on the client's browser, reducing server load.\n* **Brush Support:** Uses brushes to define highlighting rules for different languages, making it easy to add support for new languages or modify existing ones.\n\n\n### Target Audience\n\nThe primary target audience for SyntaxHighlighter includes:\n\n* **Web Developers:** Who need to display code examples clearly and effectively on their websites, blogs, or documentation.\n* **Bloggers:** Who want to improve the readability of code snippets in their blog posts.\n* **Educators:** Who are creating online tutorials or educational resources involving programming.\n* **Document Writers:**  Creating documentation that includes code samples.\n\n\n### Setting up the environment\n\nTo use SyntaxHighlighter, you'll need to include the necessary files in your web project. This generally involves:\n\n1. **Downloading SyntaxHighlighter:** Download the SyntaxHighlighter library from its official source (link would go here if this were a real manual).  This typically includes the core JavaScript file and CSS stylesheets.\n\n2. **Including Files in your HTML:** Include the JavaScript and CSS files in your HTML document's `<head>` section using `<script>` and `<link>` tags, respectively.  Ensure the paths are correct relative to the location of your HTML file.  For example:\n\n```html\n<link type=\"text/css\" rel=\"stylesheet\" href=\"shCore.css\"/>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"shThemeDefault.css\"/>\n<script type=\"text/javascript\" src=\"shCore.js\"></script>\n<script type=\"text/javascript\" src=\"shBrushJScript.js\"></script>  <!-- Example brush for JavaScript -->\n```\n\n3. **Using the SyntaxHighlighter Function:**  Wrap your code snippets within `<pre class=\"brush: language;\"` tags, replacing `language` with the appropriate language identifier (e.g., `javascript`, `java`, `python`, etc.). Then call the `SyntaxHighlighter.all()` function after the code snippets are loaded.  Example:\n\n```html\n<pre class=\"brush: javascript;\">\nfunction myFunction() {\n  // ... your JavaScript code ...\n}\n</pre>\n\n<script type=\"text/javascript\">\nSyntaxHighlighter.all();\n</script>\n```\n\nRemember to download the appropriate brush files (e.g., `shBrushJScript.js` for JavaScript) for the languages you intend to highlight.  You can find more detail on available brushes and their usage in the dedicated Brush section of this manual (if this were a complete manual).\n\n\n## Basic Usage\n\n### Including SyntaxHighlighter in your project\n\nTo utilize SyntaxHighlighter, you need to include the necessary JavaScript and CSS files in your HTML document.  The exact filenames may vary slightly depending on the version you're using, but they generally follow a similar pattern.  You'll typically need:\n\n* **`shCore.css`:**  The core CSS file providing basic styling.\n* **`shThemeDefault.css` (or similar):** A theme file defining the visual appearance of the highlighted code.  Many themes are available.\n* **`shCore.js`:** The core JavaScript file containing the main SyntaxHighlighter functionality.\n* **Language-specific brush files:**  These files (`shBrush[language].js`) define the syntax highlighting rules for specific programming languages.  For example, `shBrushJavascript.js` is for JavaScript, `shBrushPython.js` for Python, etc.\n\n\nInclude these files within the `<head>` section of your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"shCore.css\">\n<link rel=\"stylesheet\" href=\"shThemeDefault.css\">\n<script src=\"shCore.js\"></script>\n<script src=\"shBrushJScript.js\"></script>  <!-- JavaScript brush - replace with others as needed -->\n```\n\nRemember to replace `\"shCore.css\"`, `\"shThemeDefault.css\"`, `\"shCore.js\"`, and `\"shBrushJScript.js\"` with the actual paths to your downloaded files.  You'll need to include a brush file for each language you want to highlight.\n\n\n### Basic Syntax Highlighting\n\nOnce the necessary files are included, you can highlight code snippets using the `<pre>` tag with the `brush` class:\n\n```html\n<pre class=\"brush: javascript;\">\nfunction myFunction() {\n  console.log(\"Hello, world!\");\n}\n</pre>\n\n<script>\nSyntaxHighlighter.all();\n</script>\n```\n\nThe `brush` class attribute specifies the programming language.  Replace `\"javascript\"` with the appropriate language identifier (see the \"Supported Languages\" section below). The `SyntaxHighlighter.all()` function must be called after the code snippets are defined in the HTML to initiate the highlighting process.  This function finds all `<pre>` elements with the `brush` class and applies the appropriate syntax highlighting.\n\n\n### Supported Languages\n\nSyntaxHighlighter supports a vast number of programming and markup languages.  The availability depends on the brushes included in your distribution.  Commonly supported languages include (but are not limited to):\n\n* JavaScript\n* Java\n* C#\n* C++\n* Python\n* PHP\n* Ruby\n* HTML\n* CSS\n* XML\n* SQL\n\n\nTo use a specific language, you need to include the corresponding brush file and use its language identifier in the `brush` class.  For instance, for Python:\n\n```html\n<script src=\"shBrushPython.js\"></script>\n<pre class=\"brush: python;\">\nprint(\"Hello, world!\")\n</pre>\n```\n\n\n### Customizing the Appearance\n\nSyntaxHighlighter's appearance is highly customizable through CSS.  You can modify the colors, fonts, line numbers, and other visual aspects by editing the CSS files (primarily `shCore.css` and your chosen theme file).\n\nYou can create your own theme by copying an existing theme file and making modifications.  Alternatively, you might find pre-made themes online that suit your needs.  Remember to include your custom CSS file in your HTML `<head>`.\n\nTo add line numbers, add the class `shLineNumbers` to your `<pre>` tag:\n\n\n```html\n<pre class=\"brush: javascript; shLineNumbers\">\nfunction myFunction() {\n  console.log(\"Hello, world!\");\n}\n</pre>\n```\n\nModifying the core CSS file directly is generally not recommended unless you understand the implications.  Creating a custom theme file is a safer and more maintainable approach.\n\n\n## Advanced Usage\n\n### Brush Options and Customization\n\nMany brushes offer additional options to fine-tune the highlighting process. These options are usually specified within the `brush` class attribute of the `<pre>` tag using a colon-separated syntax.  For example:\n\n```html\n<pre class=\"brush: javascript; html-script: true;\">\n<script>\n  // JavaScript code here...\n</script>\n</pre>\n```\n\nIn this example, `html-script: true` might be a brush-specific option that instructs the JavaScript brush to treat code within `<script>` tags differently. Consult the documentation for individual brushes to learn about their specific options.  These options are not standardized across all brushes.\n\n\n### Creating Custom Brushes\n\nFor languages not supported by default, or for highly specialized syntax needs, you can create custom brushes. This involves defining regular expressions to match different code elements and assigning them styles.  The process typically involves creating a new JavaScript file containing a brush definition that extends the `SyntaxHighlighter.brushes` object.  This requires a good understanding of regular expressions and the internal workings of SyntaxHighlighter.  Detailed instructions and examples are usually provided in the SyntaxHighlighter documentation or community resources.  The process is complex and outside the scope of a brief manual section.\n\n\n### Theming and Styling\n\nWhile basic theming can be achieved by swapping CSS files, more advanced customization involves directly editing the CSS or creating entirely new themes.  The core styles are usually defined in `shCore.css`, while theme-specific styles are in files like `shThemeDefault.css`.  By modifying these CSS files, you can control the colors, fonts, spacing, and other visual aspects of the highlighted code.  Remember to always back up your original files before making any edits.\n\n\n### Using Different Highlighting Engines\n\nSome versions of SyntaxHighlighter might support different highlighting engines, providing alternative approaches to code parsing and styling.  The selection of an engine might affect performance or compatibility.  Refer to your specific SyntaxHighlighter version documentation for details on available engines and how to switch between them. This feature isn't universally present in all implementations.\n\n\n### Integrating with other JavaScript Frameworks\n\nIntegrating SyntaxHighlighter with other JavaScript frameworks (like React, Angular, or Vue.js) often requires adapting the way you include the library and trigger the highlighting.  You might need to use techniques like wrapping the `<pre>` elements within framework components and conditionally calling `SyntaxHighlighter.all()` at the appropriate time within the framework's lifecycle.  Specific integration methods will depend on the framework and its capabilities.\n\n\n### Handling Large Code Blocks\n\nLarge code blocks can impact page load time.  To mitigate this, consider techniques like:\n\n* **Lazy Loading:** Load the code highlighting only when the code block becomes visible to the user.  This can be done using techniques like intersection observer APIs.\n* **Code Compression:** Minimize the size of the code snippets before displaying them.\n* **Asynchronous Loading:** Load the SyntaxHighlighter library and brush files asynchronously to avoid blocking page rendering.\n\nThe best approach depends on the size of the code blocks and the overall performance requirements of your website.\n\n\n### Performance Optimization\n\nPerformance can be further optimized by:\n\n* **Minifying JavaScript and CSS:** Reduce the file sizes of the library and CSS files to minimize download times.\n* **Caching:** Utilize browser caching to avoid re-downloading the library and CSS files on subsequent page loads.\n* **Code Splitting (if applicable):** If you're using a module bundler, you can split the SyntaxHighlighter code into smaller chunks to improve initial load time.  Only load the necessary brushes for the languages used on a specific page.\n* **Using a Content Delivery Network (CDN):** Serving SyntaxHighlighter from a CDN can reduce latency and improve performance for users in different geographical locations.\n\n\nRemember to profile your website's performance to identify specific bottlenecks and tailor your optimization strategies accordingly.\n\n\n## API Reference\n\n### SyntaxHighlighter Object\n\nThe `SyntaxHighlighter` object is the core of the library.  It provides methods for initializing and managing the code highlighting process. While the exact methods and properties might vary slightly based on the version, here are some common ones:\n\n* **`SyntaxHighlighter.all()`:** This is the most commonly used function. It automatically highlights all `<pre>` elements with the class `brush:`  within the page.\n\n* **`SyntaxHighlighter.highlight(brush, code)`:**  This function highlights a given code snippet using the specified brush.  `brush` is the brush object, and `code` is the code string. This allows for highlighting code dynamically, rather than relying solely on pre-existing `<pre>` tags.\n\n* **`SyntaxHighlighter.brushes`:** This object contains all the available brushes, indexed by language name.  You can access individual brushes using this object (e.g., `SyntaxHighlighter.brushes.JScript`).\n\n* **`SyntaxHighlighter.config`:**  (May not be present in all versions) This object holds global configuration options (see the \"Configuration Options\" section).\n\n* **`SyntaxHighlighter.defaults`:**  (May not be present in all versions) Defines default settings for the highlighter.\n\n\n### Brush Object\n\nEach brush is an object that represents a specific programming language. It contains properties and methods for defining the syntax highlighting rules.  Key properties often include:\n\n* **`regexList`:** An array of regular expressions that define patterns to match different code elements (keywords, comments, strings, etc.).\n\n* **`forHtmlScript`:** (Or similar property) Indicates whether the brush should handle code embedded within `<script>` tags within HTML.\n\n* **`className`:** Specifies the CSS class names to apply to the highlighted elements.\n\nBrushes usually also have methods for formatting and styling the code elements they match. The exact properties and methods available depend on the specific brush implementation.\n\n\n### Highlight Function\n\nThe core highlighting logic is encapsulated within the `SyntaxHighlighter.highlight()` (or a similarly named) function.  This function takes the code as input, applies the specified brush's regular expressions to match code elements, and formats the code with the appropriate CSS classes.  It's rarely called directly by developers; instead, `SyntaxHighlighter.all()` usually handles the highlighting of elements within the page.  Direct use of `highlight()` is typically for dynamically highlighting code received from a server or other source.\n\n\n### Configuration Options\n\nMany aspects of SyntaxHighlighter's behavior can be customized through configuration options.  These options are often set globally using `SyntaxHighlighter.config` (if present in the version you are using). Common configuration options might include:\n\n* **`toolbar`:** Enable or disable the toolbar on highlighted code blocks.\n* **`collapse`:** Enable or disable the ability to collapse code blocks.\n* **`autoLinks`:** Automatically create links from URLs found in the code.\n* **`tabSize`:** Set the number of spaces used for tabs.\n\n\nThe availability and exact names of configuration options vary based on the version and extensions used.  Check the specific documentation for your version.\n\n\n### Events and Callbacks\n\nSyntaxHighlighter might provide events or callbacks to respond to certain actions, such as the completion of the highlighting process or user interactions with highlighted code blocks (e.g., expanding/collapsing code).  However, event handling capabilities are not consistently implemented across all versions of SyntaxHighlighter. If available, these would be documented separately in the library's documentation.  Look for information on events like `onHighlight` or similar names in the official documentation for your specific version of the library.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **No highlighting:** Ensure that you've included all necessary files (CSS, JavaScript, and the appropriate brush files) in your HTML document and that the paths are correct. Double-check that `SyntaxHighlighter.all()` is called *after* the code blocks are defined in the HTML. Inspect your browser's developer console for JavaScript errors.\n\n* **Incorrect highlighting:** Verify that the `brush` class attribute in your `<pre>` tags correctly specifies the programming language. Ensure the brush file corresponding to that language is included.  Check for typos in your brush name.\n\n* **Styling issues:** If the highlighted code doesn't match your expected styling, inspect your CSS files (especially `shCore.css` and your theme file).  Ensure that the CSS is being correctly applied and that there are no conflicting styles from other parts of your website.  Check the browser's developer tools to inspect the applied styles on the highlighted elements.\n\n* **Large code blocks causing slowdowns:** For very large code blocks, consider implementing lazy loading or other performance optimizations described in the \"Advanced Usage\" section.\n\n* **JavaScript errors:**  Use your browser's developer tools (usually accessed by pressing F12) to examine the console for JavaScript errors.  These errors often pinpoint the cause of highlighting problems.\n\n\n### Debugging Tips\n\n* **Inspect the HTML:** Use your browser's developer tools to inspect the HTML source of the highlighted code blocks.  This will show you the generated HTML structure and the applied CSS classes.  Look for inconsistencies or missing classes.\n\n* **Check the console:** The browser's developer console is crucial for identifying JavaScript errors.  SyntaxHighlighter often logs messages or errors to the console, which helps pinpoint issues.\n\n* **Simplify:**  If you have complex code with multiple brushes, try isolating the problem by temporarily removing parts of your code or using a simple test case with a single code block.\n\n* **Test in different browsers:** The rendering of highlighted code can vary slightly between different browsers. Test your code in multiple browsers to ensure cross-browser compatibility.\n\n* **Check the SyntaxHighlighter documentation:**  Consult the official documentation for your version of SyntaxHighlighter for specific troubleshooting steps, known bugs, or compatibility information.\n\n\n### Error Messages and their meanings\n\nUnfortunately, there is no standard set of error messages across all SyntaxHighlighter versions and implementations.  Error messages will depend on how the library is implemented, any custom modifications made, and the specific browser and JavaScript environment.  However, here are some *possible* error types and what they might indicate:\n\n* **`ReferenceError: SyntaxHighlighter is not defined`:** This means the core SyntaxHighlighter JavaScript file hasn't been included or there's an error in the path.\n\n* **`TypeError: Cannot read properties of undefined (reading 'brushes')`:**  You might have called `SyntaxHighlighter.all()` before the `SyntaxHighlighter` object is fully loaded or before the brush files have finished loading.  Ensure that your `<script>` tags are in the correct order.\n\n* **`Uncaught SyntaxError: ...`:** These errors usually indicate problems within your code itself. The error message will pinpoint the specific line of code causing the problem.\n\n* **Missing Brush errors (e.g., `Brush not found for ...`):** This means you're using a language brush that hasn't been included in your HTML.  Include the correct JavaScript brush file for that language.\n\nIf you encounter an error message that's not described here, consult the documentation for your version of SyntaxHighlighter or search online for solutions related to that specific error message and the version of SyntaxHighlighter you're using.  Providing the error message itself will greatly help in finding a solution.\n\n\n## Contributing and Community\n\n### Contributing to the Project\n\nIf you're interested in contributing to the SyntaxHighlighter project, you can typically find guidelines on the project's official website or repository (e.g., on GitHub). Contributions might include:\n\n* **Bug fixes:** Identifying and fixing bugs in the existing codebase.\n* **New brush creation:** Adding support for new programming languages or markup formats.\n* **Feature enhancements:** Implementing new features or improving existing ones.\n* **Documentation improvements:** Enhancing the existing documentation to make it clearer and more comprehensive.\n* **Testing and quality assurance:** Thoroughly testing the library to ensure its stability and reliability.\n\n\nBefore making any contributions, it's essential to review the project's contribution guidelines, which will typically outline the process for submitting pull requests, coding standards, and testing procedures.  Familiarize yourself with the project's codebase and follow the established workflow.  Many projects use a system of forking the repository, making your changes in a branch, and submitting a pull request for review.\n\n\n### Community Support and Forums\n\nThe SyntaxHighlighter community is a valuable resource for getting help and sharing knowledge. You can typically find community forums, mailing lists, or online discussions dedicated to SyntaxHighlighter.  These platforms offer opportunities to:\n\n* **Ask for help:** Get assistance with issues you're facing when using SyntaxHighlighter.\n* **Share your expertise:** Help other developers by providing solutions and advice.\n* **Stay up-to-date:** Learn about new releases, updates, and best practices.\n* **Discuss future development:** Participate in discussions about the future direction of the project.\n\n\nThe specific locations for community support (e.g., forum URLs, mailing list addresses) will depend on the project hosting the SyntaxHighlighter version you're using.  Check the project's official website or repository for links to the community.\n\n\n\n### Reporting Bugs and Issues\n\nIf you encounter bugs or issues while using SyntaxHighlighter, it's essential to report them to the project maintainers.  This helps improve the quality and stability of the library.  When reporting bugs, provide as much detail as possible, including:\n\n* **The version of SyntaxHighlighter you're using:**  Specify the version number or commit hash.\n* **A detailed description of the problem:** Clearly explain what happened, what you expected to happen, and what actually happened.\n* **Steps to reproduce the bug:** Provide a step-by-step guide on how to reproduce the issue.\n* **Your browser and operating system:** Specify the browser, version, and operating system you're using.\n* **Relevant code snippets:** Include any relevant code snippets that are involved in the issue.\n* **Error messages (if any):** Copy and paste any error messages you received.\n* **Screenshots or screen recordings (if helpful):** Visual aids can help illustrate the problem.\n\n\nMany projects use issue trackers (like those found on GitHub) for bug reporting.  Follow the instructions provided on the project's website or repository for submitting bug reports through their issue tracker system.  Clear and detailed reports significantly increase the chances of a timely resolution.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is SyntaxHighlighter?\n\nSyntaxHighlighter is a client-side code highlighting library written in JavaScript.  It allows you to easily display formatted code snippets within your web pages, improving readability and making it easier for users to understand the code examples you provide. It supports a wide variety of programming languages and can be customized to match your website's styling.  The library works by parsing the code and applying appropriate syntax highlighting based on the language specified.  The highlighted code is then rendered within the HTML of your page.\n\n### Key Features and Benefits\n\n* **Wide Language Support:** SyntaxHighlighter supports numerous programming and markup languages, allowing you to highlight code written in languages like Java, C++, Python, PHP, JavaScript, HTML, CSS, and many more.\n* **Customization:** The appearance of the highlighted code can be heavily customized through CSS, allowing you to integrate it seamlessly with your website's design.  You can adjust colors, fonts, line numbers, and other aspects.\n* **Lightweight and Efficient:** SyntaxHighlighter is designed to be lightweight and performant, minimizing the impact on your website's loading time.\n* **Easy Integration:**  The library is straightforward to integrate into existing web projects.  It typically involves including a JavaScript file and minimal HTML markup.\n* **Client-Side Processing:** All highlighting is done on the client's browser, reducing server load.\n* **Brush Support:** Uses brushes to define highlighting rules for different languages, making it easy to add support for new languages or modify existing ones.\n\n\n### Target Audience\n\nThe primary target audience for SyntaxHighlighter includes:\n\n* **Web Developers:** Who need to display code examples clearly and effectively on their websites, blogs, or documentation.\n* **Bloggers:** Who want to improve the readability of code snippets in their blog posts.\n* **Educators:** Who are creating online tutorials or educational resources involving programming.\n* **Document Writers:**  Creating documentation that includes code samples.\n\n\n### Setting up the environment\n\nTo use SyntaxHighlighter, you'll need to include the necessary files in your web project. This generally involves:\n\n1. **Downloading SyntaxHighlighter:** Download the SyntaxHighlighter library from its official source (link would go here if this were a real manual).  This typically includes the core JavaScript file and CSS stylesheets.\n\n2. **Including Files in your HTML:** Include the JavaScript and CSS files in your HTML document's `<head>` section using `<script>` and `<link>` tags, respectively.  Ensure the paths are correct relative to the location of your HTML file.  For example:\n\n```html\n<link type=\"text/css\" rel=\"stylesheet\" href=\"shCore.css\"/>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"shThemeDefault.css\"/>\n<script type=\"text/javascript\" src=\"shCore.js\"></script>\n<script type=\"text/javascript\" src=\"shBrushJScript.js\"></script>  <!-- Example brush for JavaScript -->\n```\n\n3. **Using the SyntaxHighlighter Function:**  Wrap your code snippets within `<pre class=\"brush: language;\"` tags, replacing `language` with the appropriate language identifier (e.g., `javascript`, `java`, `python`, etc.). Then call the `SyntaxHighlighter.all()` function after the code snippets are loaded.  Example:\n\n```html\n<pre class=\"brush: javascript;\">\nfunction myFunction() {\n  // ... your JavaScript code ...\n}\n</pre>\n\n<script type=\"text/javascript\">\nSyntaxHighlighter.all();\n</script>\n```\n\nRemember to download the appropriate brush files (e.g., `shBrushJScript.js` for JavaScript) for the languages you intend to highlight.  You can find more detail on available brushes and their usage in the dedicated Brush section of this manual (if this were a complete manual).\n\n\n## Basic Usage\n\n### Including SyntaxHighlighter in your project\n\nTo utilize SyntaxHighlighter, you need to include the necessary JavaScript and CSS files in your HTML document.  The exact filenames may vary slightly depending on the version you're using, but they generally follow a similar pattern.  You'll typically need:\n\n* **`shCore.css`:**  The core CSS file providing basic styling.\n* **`shThemeDefault.css` (or similar):** A theme file defining the visual appearance of the highlighted code.  Many themes are available.\n* **`shCore.js`:** The core JavaScript file containing the main SyntaxHighlighter functionality.\n* **Language-specific brush files:**  These files (`shBrush[language].js`) define the syntax highlighting rules for specific programming languages.  For example, `shBrushJavascript.js` is for JavaScript, `shBrushPython.js` for Python, etc.\n\n\nInclude these files within the `<head>` section of your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"shCore.css\">\n<link rel=\"stylesheet\" href=\"shThemeDefault.css\">\n<script src=\"shCore.js\"></script>\n<script src=\"shBrushJScript.js\"></script>  <!-- JavaScript brush - replace with others as needed -->\n```\n\nRemember to replace `\"shCore.css\"`, `\"shThemeDefault.css\"`, `\"shCore.js\"`, and `\"shBrushJScript.js\"` with the actual paths to your downloaded files.  You'll need to include a brush file for each language you want to highlight.\n\n\n### Basic Syntax Highlighting\n\nOnce the necessary files are included, you can highlight code snippets using the `<pre>` tag with the `brush` class:\n\n```html\n<pre class=\"brush: javascript;\">\nfunction myFunction() {\n  console.log(\"Hello, world!\");\n}\n</pre>\n\n<script>\nSyntaxHighlighter.all();\n</script>\n```\n\nThe `brush` class attribute specifies the programming language.  Replace `\"javascript\"` with the appropriate language identifier (see the \"Supported Languages\" section below). The `SyntaxHighlighter.all()` function must be called after the code snippets are defined in the HTML to initiate the highlighting process.  This function finds all `<pre>` elements with the `brush` class and applies the appropriate syntax highlighting.\n\n\n### Supported Languages\n\nSyntaxHighlighter supports a vast number of programming and markup languages.  The availability depends on the brushes included in your distribution.  Commonly supported languages include (but are not limited to):\n\n* JavaScript\n* Java\n* C#\n* C++\n* Python\n* PHP\n* Ruby\n* HTML\n* CSS\n* XML\n* SQL\n\n\nTo use a specific language, you need to include the corresponding brush file and use its language identifier in the `brush` class.  For instance, for Python:\n\n```html\n<script src=\"shBrushPython.js\"></script>\n<pre class=\"brush: python;\">\nprint(\"Hello, world!\")\n</pre>\n```\n\n\n### Customizing the Appearance\n\nSyntaxHighlighter's appearance is highly customizable through CSS.  You can modify the colors, fonts, line numbers, and other visual aspects by editing the CSS files (primarily `shCore.css` and your chosen theme file).\n\nYou can create your own theme by copying an existing theme file and making modifications.  Alternatively, you might find pre-made themes online that suit your needs.  Remember to include your custom CSS file in your HTML `<head>`.\n\nTo add line numbers, add the class `shLineNumbers` to your `<pre>` tag:\n\n\n```html\n<pre class=\"brush: javascript; shLineNumbers\">\nfunction myFunction() {\n  console.log(\"Hello, world!\");\n}\n</pre>\n```\n\nModifying the core CSS file directly is generally not recommended unless you understand the implications.  Creating a custom theme file is a safer and more maintainable approach.\n\n\n## Advanced Usage\n\n### Brush Options and Customization\n\nMany brushes offer additional options to fine-tune the highlighting process. These options are usually specified within the `brush` class attribute of the `<pre>` tag using a colon-separated syntax.  For example:\n\n```html\n<pre class=\"brush: javascript; html-script: true;\">\n<script>\n  // JavaScript code here...\n</script>\n</pre>\n```\n\nIn this example, `html-script: true` might be a brush-specific option that instructs the JavaScript brush to treat code within `<script>` tags differently. Consult the documentation for individual brushes to learn about their specific options.  These options are not standardized across all brushes.\n\n\n### Creating Custom Brushes\n\nFor languages not supported by default, or for highly specialized syntax needs, you can create custom brushes. This involves defining regular expressions to match different code elements and assigning them styles.  The process typically involves creating a new JavaScript file containing a brush definition that extends the `SyntaxHighlighter.brushes` object.  This requires a good understanding of regular expressions and the internal workings of SyntaxHighlighter.  Detailed instructions and examples are usually provided in the SyntaxHighlighter documentation or community resources.  The process is complex and outside the scope of a brief manual section.\n\n\n### Theming and Styling\n\nWhile basic theming can be achieved by swapping CSS files, more advanced customization involves directly editing the CSS or creating entirely new themes.  The core styles are usually defined in `shCore.css`, while theme-specific styles are in files like `shThemeDefault.css`.  By modifying these CSS files, you can control the colors, fonts, spacing, and other visual aspects of the highlighted code.  Remember to always back up your original files before making any edits.\n\n\n### Using Different Highlighting Engines\n\nSome versions of SyntaxHighlighter might support different highlighting engines, providing alternative approaches to code parsing and styling.  The selection of an engine might affect performance or compatibility.  Refer to your specific SyntaxHighlighter version documentation for details on available engines and how to switch between them. This feature isn't universally present in all implementations.\n\n\n### Integrating with other JavaScript Frameworks\n\nIntegrating SyntaxHighlighter with other JavaScript frameworks (like React, Angular, or Vue.js) often requires adapting the way you include the library and trigger the highlighting.  You might need to use techniques like wrapping the `<pre>` elements within framework components and conditionally calling `SyntaxHighlighter.all()` at the appropriate time within the framework's lifecycle.  Specific integration methods will depend on the framework and its capabilities.\n\n\n### Handling Large Code Blocks\n\nLarge code blocks can impact page load time.  To mitigate this, consider techniques like:\n\n* **Lazy Loading:** Load the code highlighting only when the code block becomes visible to the user.  This can be done using techniques like intersection observer APIs.\n* **Code Compression:** Minimize the size of the code snippets before displaying them.\n* **Asynchronous Loading:** Load the SyntaxHighlighter library and brush files asynchronously to avoid blocking page rendering.\n\nThe best approach depends on the size of the code blocks and the overall performance requirements of your website.\n\n\n### Performance Optimization\n\nPerformance can be further optimized by:\n\n* **Minifying JavaScript and CSS:** Reduce the file sizes of the library and CSS files to minimize download times.\n* **Caching:** Utilize browser caching to avoid re-downloading the library and CSS files on subsequent page loads.\n* **Code Splitting (if applicable):** If you're using a module bundler, you can split the SyntaxHighlighter code into smaller chunks to improve initial load time.  Only load the necessary brushes for the languages used on a specific page.\n* **Using a Content Delivery Network (CDN):** Serving SyntaxHighlighter from a CDN can reduce latency and improve performance for users in different geographical locations.\n\n\nRemember to profile your website's performance to identify specific bottlenecks and tailor your optimization strategies accordingly.\n\n\n## API Reference\n\n### SyntaxHighlighter Object\n\nThe `SyntaxHighlighter` object is the core of the library.  It provides methods for initializing and managing the code highlighting process. While the exact methods and properties might vary slightly based on the version, here are some common ones:\n\n* **`SyntaxHighlighter.all()`:** This is the most commonly used function. It automatically highlights all `<pre>` elements with the class `brush:`  within the page.\n\n* **`SyntaxHighlighter.highlight(brush, code)`:**  This function highlights a given code snippet using the specified brush.  `brush` is the brush object, and `code` is the code string. This allows for highlighting code dynamically, rather than relying solely on pre-existing `<pre>` tags.\n\n* **`SyntaxHighlighter.brushes`:** This object contains all the available brushes, indexed by language name.  You can access individual brushes using this object (e.g., `SyntaxHighlighter.brushes.JScript`).\n\n* **`SyntaxHighlighter.config`:**  (May not be present in all versions) This object holds global configuration options (see the \"Configuration Options\" section).\n\n* **`SyntaxHighlighter.defaults`:**  (May not be present in all versions) Defines default settings for the highlighter.\n\n\n### Brush Object\n\nEach brush is an object that represents a specific programming language. It contains properties and methods for defining the syntax highlighting rules.  Key properties often include:\n\n* **`regexList`:** An array of regular expressions that define patterns to match different code elements (keywords, comments, strings, etc.).\n\n* **`forHtmlScript`:** (Or similar property) Indicates whether the brush should handle code embedded within `<script>` tags within HTML.\n\n* **`className`:** Specifies the CSS class names to apply to the highlighted elements.\n\nBrushes usually also have methods for formatting and styling the code elements they match. The exact properties and methods available depend on the specific brush implementation.\n\n\n### Highlight Function\n\nThe core highlighting logic is encapsulated within the `SyntaxHighlighter.highlight()` (or a similarly named) function.  This function takes the code as input, applies the specified brush's regular expressions to match code elements, and formats the code with the appropriate CSS classes.  It's rarely called directly by developers; instead, `SyntaxHighlighter.all()` usually handles the highlighting of elements within the page.  Direct use of `highlight()` is typically for dynamically highlighting code received from a server or other source.\n\n\n### Configuration Options\n\nMany aspects of SyntaxHighlighter's behavior can be customized through configuration options.  These options are often set globally using `SyntaxHighlighter.config` (if present in the version you are using). Common configuration options might include:\n\n* **`toolbar`:** Enable or disable the toolbar on highlighted code blocks.\n* **`collapse`:** Enable or disable the ability to collapse code blocks.\n* **`autoLinks`:** Automatically create links from URLs found in the code.\n* **`tabSize`:** Set the number of spaces used for tabs.\n\n\nThe availability and exact names of configuration options vary based on the version and extensions used.  Check the specific documentation for your version.\n\n\n### Events and Callbacks\n\nSyntaxHighlighter might provide events or callbacks to respond to certain actions, such as the completion of the highlighting process or user interactions with highlighted code blocks (e.g., expanding/collapsing code).  However, event handling capabilities are not consistently implemented across all versions of SyntaxHighlighter. If available, these would be documented separately in the library's documentation.  Look for information on events like `onHighlight` or similar names in the official documentation for your specific version of the library.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **No highlighting:** Ensure that you've included all necessary files (CSS, JavaScript, and the appropriate brush files) in your HTML document and that the paths are correct. Double-check that `SyntaxHighlighter.all()` is called *after* the code blocks are defined in the HTML. Inspect your browser's developer console for JavaScript errors.\n\n* **Incorrect highlighting:** Verify that the `brush` class attribute in your `<pre>` tags correctly specifies the programming language. Ensure the brush file corresponding to that language is included.  Check for typos in your brush name.\n\n* **Styling issues:** If the highlighted code doesn't match your expected styling, inspect your CSS files (especially `shCore.css` and your theme file).  Ensure that the CSS is being correctly applied and that there are no conflicting styles from other parts of your website.  Check the browser's developer tools to inspect the applied styles on the highlighted elements.\n\n* **Large code blocks causing slowdowns:** For very large code blocks, consider implementing lazy loading or other performance optimizations described in the \"Advanced Usage\" section.\n\n* **JavaScript errors:**  Use your browser's developer tools (usually accessed by pressing F12) to examine the console for JavaScript errors.  These errors often pinpoint the cause of highlighting problems.\n\n\n### Debugging Tips\n\n* **Inspect the HTML:** Use your browser's developer tools to inspect the HTML source of the highlighted code blocks.  This will show you the generated HTML structure and the applied CSS classes.  Look for inconsistencies or missing classes.\n\n* **Check the console:** The browser's developer console is crucial for identifying JavaScript errors.  SyntaxHighlighter often logs messages or errors to the console, which helps pinpoint issues.\n\n* **Simplify:**  If you have complex code with multiple brushes, try isolating the problem by temporarily removing parts of your code or using a simple test case with a single code block.\n\n* **Test in different browsers:** The rendering of highlighted code can vary slightly between different browsers. Test your code in multiple browsers to ensure cross-browser compatibility.\n\n* **Check the SyntaxHighlighter documentation:**  Consult the official documentation for your version of SyntaxHighlighter for specific troubleshooting steps, known bugs, or compatibility information.\n\n\n### Error Messages and their meanings\n\nUnfortunately, there is no standard set of error messages across all SyntaxHighlighter versions and implementations.  Error messages will depend on how the library is implemented, any custom modifications made, and the specific browser and JavaScript environment.  However, here are some *possible* error types and what they might indicate:\n\n* **`ReferenceError: SyntaxHighlighter is not defined`:** This means the core SyntaxHighlighter JavaScript file hasn't been included or there's an error in the path.\n\n* **`TypeError: Cannot read properties of undefined (reading 'brushes')`:**  You might have called `SyntaxHighlighter.all()` before the `SyntaxHighlighter` object is fully loaded or before the brush files have finished loading.  Ensure that your `<script>` tags are in the correct order.\n\n* **`Uncaught SyntaxError: ...`:** These errors usually indicate problems within your code itself. The error message will pinpoint the specific line of code causing the problem.\n\n* **Missing Brush errors (e.g., `Brush not found for ...`):** This means you're using a language brush that hasn't been included in your HTML.  Include the correct JavaScript brush file for that language.\n\nIf you encounter an error message that's not described here, consult the documentation for your version of SyntaxHighlighter or search online for solutions related to that specific error message and the version of SyntaxHighlighter you're using.  Providing the error message itself will greatly help in finding a solution.\n\n\n## Contributing and Community\n\n### Contributing to the Project\n\nIf you're interested in contributing to the SyntaxHighlighter project, you can typically find guidelines on the project's official website or repository (e.g., on GitHub). Contributions might include:\n\n* **Bug fixes:** Identifying and fixing bugs in the existing codebase.\n* **New brush creation:** Adding support for new programming languages or markup formats.\n* **Feature enhancements:** Implementing new features or improving existing ones.\n* **Documentation improvements:** Enhancing the existing documentation to make it clearer and more comprehensive.\n* **Testing and quality assurance:** Thoroughly testing the library to ensure its stability and reliability.\n\n\nBefore making any contributions, it's essential to review the project's contribution guidelines, which will typically outline the process for submitting pull requests, coding standards, and testing procedures.  Familiarize yourself with the project's codebase and follow the established workflow.  Many projects use a system of forking the repository, making your changes in a branch, and submitting a pull request for review.\n\n\n### Community Support and Forums\n\nThe SyntaxHighlighter community is a valuable resource for getting help and sharing knowledge. You can typically find community forums, mailing lists, or online discussions dedicated to SyntaxHighlighter.  These platforms offer opportunities to:\n\n* **Ask for help:** Get assistance with issues you're facing when using SyntaxHighlighter.\n* **Share your expertise:** Help other developers by providing solutions and advice.\n* **Stay up-to-date:** Learn about new releases, updates, and best practices.\n* **Discuss future development:** Participate in discussions about the future direction of the project.\n\n\nThe specific locations for community support (e.g., forum URLs, mailing list addresses) will depend on the project hosting the SyntaxHighlighter version you're using.  Check the project's official website or repository for links to the community.\n\n\n\n### Reporting Bugs and Issues\n\nIf you encounter bugs or issues while using SyntaxHighlighter, it's essential to report them to the project maintainers.  This helps improve the quality and stability of the library.  When reporting bugs, provide as much detail as possible, including:\n\n* **The version of SyntaxHighlighter you're using:**  Specify the version number or commit hash.\n* **A detailed description of the problem:** Clearly explain what happened, what you expected to happen, and what actually happened.\n* **Steps to reproduce the bug:** Provide a step-by-step guide on how to reproduce the issue.\n* **Your browser and operating system:** Specify the browser, version, and operating system you're using.\n* **Relevant code snippets:** Include any relevant code snippets that are involved in the issue.\n* **Error messages (if any):** Copy and paste any error messages you received.\n* **Screenshots or screen recordings (if helpful):** Visual aids can help illustrate the problem.\n\n\nMany projects use issue trackers (like those found on GitHub) for bug reporting.  Follow the instructions provided on the project's website or repository for submitting bug reports through their issue tracker system.  Clear and detailed reports significantly increase the chances of a timely resolution.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"syntaxhighlighter.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"SyntaxHighlighter - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}