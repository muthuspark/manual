{"title":"At.js - Documentation","markdown":{"yaml":{"title":"At.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is At.js?","containsRefs":false,"markdown":"\n\n\n\nAt.js is a lightweight JavaScript library designed to simplify the implementation of \"@\" mentions (or \"at\" mentions) in text input fields.  It provides a seamless and efficient way to detect, suggest, and insert user mentions, enhancing the user experience in applications requiring tagging or referencing capabilities, such as social media platforms, collaborative tools, and comment sections.  At.js handles the complexities of user input, suggestion display, and data management, allowing developers to focus on the core functionality of their application.\n\n\n### Key Features and Benefits\n\n* **Lightweight and efficient:** At.js is designed to minimize its impact on page load times and overall application performance.\n* **Easy to integrate:**  The library boasts a simple and intuitive API, making integration into existing projects straightforward.\n* **Customizable suggestions:**  Developers can easily customize the appearance and behavior of the suggestion list to match their application's design.\n* **Flexible data sources:** At.js supports various data sources for user information, including local arrays, remote APIs, and more.\n* **Keyboard navigation:**  Users can navigate the suggestion list using the keyboard for ease of use.\n* **Advanced features:** At.js offers features like pre-populated mentions and asynchronous data fetching for enhanced functionality.\n\n\n### Installation and Setup\n\nAt.js can be installed using npm or yarn:\n\n```bash\nnpm install at.js\n# or\nyarn add at.js\n```\n\nInclude the library in your HTML file:\n\n```html\n<script src=\"path/to/at.js/dist/at.js\"></script>\n```\n\nAlternatively, you can use a CDN link (check the At.js repository for the latest CDN link).\n\n### Basic Usage Example\n\nThis example demonstrates the basic usage of At.js with a sample data source:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>At.js Example</title>\n  <script src=\"path/to/at.js/dist/at.js\"></script> </head>\n<body>\n\n<textarea id=\"myTextarea\"></textarea>\n\n<script>\n  const at = new At({\n    element: document.getElementById('myTextarea'),\n    data: [\n      { id: 1, name: 'John Doe', username: 'johndoe' },\n      { id: 2, name: 'Jane Smith', username: 'janesmith' },\n    ],\n    //Further Customization (Optional):\n    tpl: (item) => `<span class=\"mention\">${item.username}</span>`, //Custom template\n    callbacks: {\n      mentionChosen: (mention) => {\n        console.log('Mention chosen:', mention);\n      },\n    },\n  });\n</script>\n\n</body>\n</html>\n```\n\nThis code snippet initializes At.js on a textarea with a sample dataset.  Typing \"@\" in the textarea will trigger the suggestion list, allowing users to select a mention.  The `mentionChosen` callback demonstrates how you can handle the selection event.  Remember to replace `\"path/to/at.js/dist/at.js\"` with the actual path to the At.js library file.  Refer to the API documentation for more advanced configuration options and customization.\n\n\n## Core Concepts\n\n### Mentioning Users\n\nAt.js's core functionality revolves around mentioning users within a text input field.  Users initiate a mention by typing the \"@\" symbol followed by characters.  At.js then presents a list of suggestions based on the typed characters and the configured data source.  Selecting a suggestion from the list inserts the corresponding mention into the input field, typically formatted as a unique identifier (e.g., username) wrapped within specific HTML tags for styling and processing.  The specific formatting of the mention is customizable through templates.  The library handles the complexities of managing the cursor position and updating the text content to maintain a smooth user experience.\n\n\n### Autocomplete Functionality\n\nAt.js leverages autocomplete functionality to provide a seamless user experience.  As the user types characters after the \"@\" symbol, the library dynamically filters and displays a list of relevant suggestions.  This list is typically presented as a dropdown or pop-up menu directly below the input field.  The suggestions are ranked based on relevance, ensuring the most likely matches appear at the top of the list.  The user can navigate this list using keyboard navigation (e.g., up/down arrow keys) and select a suggestion with the Enter key or mouse click.\n\n\n### Handling Mentions\n\nAfter a user selects a mention, At.js manages the integration of the selected mention into the text input field.  This typically involves inserting the mention with appropriate formatting and ensuring the cursor is positioned correctly for continued typing.   The library provides callbacks that allow developers to execute custom actions whenever a mention is chosen, offering extensive control over the post-selection behavior, such as updating a related data model or triggering network requests.  These callbacks offer the developer control over how the application handles the selected mention's data.\n\n\n### Data Sources\n\nAt.js supports multiple data sources for user information, providing flexibility for different application architectures.  The data source can be a simple JavaScript array, a JSON object, or a remote API endpoint.  This versatility allows developers to easily integrate At.js with existing data models and backend infrastructure. The library's API allows the developer to specify how and where to fetch the data, including providing customized fetching functions for remote data sources.\n\n\n### Customization Options\n\nAt.js offers extensive customization options to adapt to various application designs and requirements.  Developers can customize the appearance of the suggestion list, the styling of mentions within the text input, the trigger character (not limited to \"@\"), and keyboard navigation behavior.   Template functions allow developers to define the exact HTML structure used to represent mentions in the input.   Callback functions provide fine-grained control over events such as suggestion selection and input changes.  These customization options ensure seamless integration with existing designs and workflows.\n\n\n## API Reference\n\n### at.js Constructor\n\nThe `At` constructor initializes the At.js instance.  It takes a single argument: a configuration object.  This object specifies various settings to customize the behavior and appearance of At.js.  The constructor returns an instance of the `At` class, allowing for further method calls and event handling.\n\n```javascript\nconst at = new At(config);\n```\n\nwhere `config` is an object described in the next section.\n\n\n### Configuration Options\n\nThe configuration object passed to the `At` constructor accepts the following options:\n\n* **`element` (required):**  A DOM element (e.g., `<textarea>`, `<input type=\"text\">`) where At.js will operate.  This is the element where mentions will be inserted and suggestions will appear.\n\n* **`data` (required):**  An array of objects representing the data for user mentions.  Each object should contain at least a unique identifier (e.g., `id` or `username`) and a display name (e.g., `name`).  For remote data fetching, this can be a function that returns a Promise resolving to the data.\n\n* **`tpl` (optional):**  A function that receives a mention data object and returns the HTML string to be used for rendering the mention.  Defaults to a simple text rendering of the display name.\n\n* **`callbacks` (optional):**  An object containing callback functions for various events (see the \"Events\" section below).\n\n* **`trigger` (optional):** The character(s) used to trigger the mention suggestions. Defaults to \"@\".\n\n* **`limit` (optional):** The maximum number of suggestions to display. Defaults to 10.\n\n* **`filter` (optional):**  A custom filter function used to filter the `data` array based on the user's input. It receives the input text and data array and returns a filtered array.\n\n* **`placeHolder` (optional):** Placeholder text to show in the input field when empty.\n\n* **`async` (optional):** A boolean value. If true, async data fetching from a remote source is used. Defaults to false.\n\n* **`debounce` (optional):** Number of milliseconds to debounce the input event. This is useful to prevent excessive API calls during rapid typing. Defaults to 250ms.\n\n\n### Methods\n\nThe `At` class exposes the following methods:\n\n* **`destroy()`:** Removes At.js functionality from the associated element and cleans up event listeners.\n\n* **`update(newData)`:** Updates the data source used by At.js. Accepts an array or a Promise resolving to an array.\n\n* **`showSuggestions()`:**  Manually forces the display of the suggestion list. Useful for scenarios where programmatic control is needed.\n\n* **`hideSuggestions()`:** Manually hides the suggestion list. Useful for scenarios where programmatic control is needed.\n\n\n\n### Events\n\nAt.js triggers several custom events that can be listened for using standard JavaScript event listeners (e.g., `addEventListener`).  These events provide information about mention selection and changes to the input field. The following are some example events:\n\n* **`at.mentionChosen`:** Fired when a user selects a mention from the suggestion list.  The event object contains details about the chosen mention (e.g., the data object of selected mention).\n\n* **`at.inputChanged`:** Fired whenever the content of the input field changes.\n\n* **`at.suggestionsShown`:** Fired when the suggestion list is displayed.\n\n* **`at.suggestionsHidden`:** Fired when the suggestion list is hidden.\n\n\nThese are example events. Specific events and their details may vary depending on the version of At.js.  Consult the At.js documentation for the most up-to-date list of events and their respective properties.  Refer to the complete API documentation for additional details and examples.\n\n\n## Advanced Usage\n\n### Customizing the User Interface\n\nAt.js provides extensive customization options to seamlessly integrate with your application's UI.  Beyond the basic configuration options, you can deeply tailor the visual aspects and behavior.  This includes:\n\n* **Custom Templates:** The `tpl` configuration option allows you to define a custom template function to dictate how mentions are rendered in the input field. This function receives the mention data object as input and should return a string representing the HTML for the mention. This allows for rich formatting, including custom icons, colors, or highlighting.\n\n* **Styling the Suggestion List:**  The suggestion list's appearance can be fully customized through CSS.  At.js generates specific CSS classes for the suggestion list elements which can be targeted and styled according to your design preferences.\n\n* **Customizing Keyboard Navigation:** While At.js offers default keyboard navigation, it can be further customized or extended to implement special behaviors depending on the application's requirements.\n\n\n### Integrating with Other Libraries\n\nAt.js can be effectively integrated with other JavaScript libraries to enhance its functionality or fit into broader application architectures.\n\n* **UI Frameworks:** At.js works well with popular frameworks like React, Vue, and Angular.  These frameworks' component models can be utilized to create custom wrappers and integrate At.js into their component lifecycle.  This enables seamless integration within complex user interfaces built using these frameworks.\n\n* **Data Management Libraries:** The data source for At.js can be integrated with data management libraries like Redux or Vuex.  This ensures consistency and efficiency in managing mention data across the application.\n\n* **Third-party APIs:** If your mention data is sourced from a third-party API, At.js can be readily integrated to consume data via asynchronous requests.  Error handling and loading states should be incorporated to provide a robust user experience.\n\n\n### Handling Large Datasets\n\nWhen dealing with large datasets of users, performance optimization is crucial.  At.js offers several strategies to address this:\n\n* **Asynchronous Data Fetching:** The `async` option in the configuration allows for asynchronous fetching of data, preventing UI blocking.  This is essential for large datasets.\n\n* **Client-Side Filtering and Pagination:** Implement client-side filtering to reduce the amount of data processed.  Introduce pagination to the suggestion list if the number of suggestions exceeds a certain threshold, fetching only a subset of data at a time.\n\n* **Data Pre-processing:** Pre-process the data on the server or client-side to improve search and filtering efficiency.  Techniques like indexing or creating optimized data structures can greatly improve performance.\n\n\n### Performance Optimization\n\nBeyond handling large datasets, general performance optimization strategies for At.js include:\n\n* **Debouncing Input Events:**  The `debounce` configuration option controls the frequency of data filtering and suggestion updates.  A higher debounce value reduces the load on the application, but may increase perceived latency.  Find the optimal balance.\n\n* **Efficient Data Structures:** Using efficient data structures to store and manage mention data, such as optimized search trees, can improve lookup times during filtering.\n\n* **Minimizing DOM Manipulation:**  Minimize unnecessary DOM manipulations within the callback functions to avoid performance bottlenecks.  Favor efficient updates and avoid repeated rendering.\n\n\n\n### Internationalization and Localization\n\nSupporting multiple languages requires careful consideration of text encoding and user interface elements.  At.js offers basic support for this by allowing the use of Unicode characters within the mention data and custom templates. However,  for robust internationalization and localization, you would typically need to complement At.js with a dedicated internationalization library that handles translation of strings, date/time formatting, and cultural considerations in the UI.  This often involves building language-specific resources or using translation APIs.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\nThis section addresses common problems encountered when using At.js and provides solutions.\n\n* **No suggestions appear:**\n    * **Problem:**  The suggestion list is empty despite typing the trigger character.\n    * **Solutions:**\n        * Verify that the `data` configuration option is correctly populated with user data.  Check for typos or incorrect data formatting.\n        * Ensure the data source is accessible and correctly formatted (JSON, array, or function returning a Promise).\n        * Check the network console (if using a remote data source) for any errors during data fetching.\n        * If using a custom filter function, verify its logic and ensure it returns a valid filtered array.\n\n* **Incorrect mention rendering:**\n    * **Problem:** Mentions are not displayed correctly, or the formatting is unexpected.\n    * **Solutions:**\n        * Check the `tpl` function (if customized) for errors in HTML generation. Ensure proper escaping of special characters.\n        * Inspect the rendered HTML in the browser's developer tools to identify the issue.\n        * Verify the `data` object's structure and ensure it provides the necessary fields used within the `tpl` function.\n\n* **Suggestions appear in the wrong position:**\n    * **Problem:** The suggestion list overlays other elements or is misaligned.\n    * **Solutions:**\n        * Check for CSS conflicts.  Ensure that no other styles are interfering with the positioning of At.js's suggestion list.\n        * Verify that the target element (`element` in the configuration) is properly positioned and visible in the DOM.\n\n* **Unexpected behavior after updating data:**\n    * **Problem:** After calling `update()`, At.js behaves unexpectedly (e.g., no suggestions).\n    * **Solutions:**\n        * Ensure the `update()` method is called with a valid data array or a Promise resolving to one.\n        * Verify that the data format is consistent with the original data provided during initialization.\n        * Re-initialize At.js if necessary after significant data changes.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Utilize your browser's developer tools (usually accessed by pressing F12) to inspect the HTML, CSS, and JavaScript related to At.js.  The console will display error messages and warnings.  Use the debugger to step through the At.js code and identify issues.\n\n* **Console Logging:** Strategically place `console.log()` statements within the At.js configuration and callback functions to inspect data values and execution flow.  This helps pinpoint the source of problems.\n\n* **Simplify:** Create a minimal, reproducible example to isolate the issue.  Start with a basic setup and gradually add complexity to identify the point where the problem occurs.\n\n* **Check the At.js documentation and source code:**  The official documentation and source code repository may contain useful information and examples to resolve specific issues.  Look for relevant discussions or reported bugs on platforms like GitHub.\n\n\n\n### Error Handling\n\nAt.js itself may not throw explicit errors in all situations. However, errors can arise due to problems with the data source (network requests failing, incorrect data formats) or within custom callback functions.  Implement appropriate error handling mechanisms:\n\n* **Network Requests:**  When fetching data from a remote source, handle network errors gracefully.  Display user-friendly messages (e.g., \"Failed to load suggestions\") instead of letting the application crash.\n\n* **Data Validation:** Validate the data received from the data source to ensure it meets the expected format before using it in At.js.\n\n* **Callback Functions:**  Include `try...catch` blocks within custom callback functions to prevent errors within these functions from crashing the entire application.  Log errors encountered in these functions for later debugging.\n\n* **Global Error Handling:** Consider implementing a global error handler (using `window.onerror` or a similar mechanism) to capture any unhandled exceptions that might occur within At.js or related code.  This provides a safety net to catch unexpected errors.\n\n\n## Examples\n\n### Simple Mentioning Example\n\nThis example demonstrates basic mention functionality using an inline array for user data:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>At.js Simple Example</title>\n  <script src=\"path/to/at.js/dist/at.js\"></script>\n</head>\n<body>\n<textarea id=\"myTextarea\"></textarea>\n\n<script>\n  const at = new At({\n    element: document.getElementById('myTextarea'),\n    data: [\n      { id: 1, name: 'Alice', username: 'alice' },\n      { id: 2, name: 'Bob', username: 'bob' },\n      { id: 3, name: 'Charlie', username: 'charlie' }\n    ],\n    callbacks: {\n      mentionChosen: (mention) => {\n        console.log('Mention chosen:', mention);\n      }\n    }\n  });\n</script>\n</body>\n</html>\n```\n\nThis code initializes At.js on a textarea with a simple data array.  Typing \"@\" will trigger the suggestion list, allowing you to select users.  The `mentionChosen` callback logs the selected mention to the console.\n\n\n### Autocomplete with Custom Data\n\nThis example showcases autocomplete with data fetched from a remote JSON endpoint:\n\n```javascript\nconst at = new At({\n  element: document.getElementById('myTextarea'),\n  async: true,\n  data: () => {\n    return fetch('/api/users')\n      .then(response => response.json())\n      .then(data => data.users);\n  },\n  tpl: (item) => `<span class=\"mention\">@${item.username} (${item.name})</span>`,\n  callbacks: {\n    mentionChosen: (mention) => { /* Handle mention selection */ }\n  }\n});\n\n```\n\nThis uses `async: true` and provides a function that fetches user data from `/api/users`.  The `tpl` function customizes the mention's rendering. Remember to replace `/api/users` with your actual API endpoint.\n\n\n### Integration with a Chat Application\n\nThis example illustrates integration within a chat application, using a custom template and handling mention selection:\n\n```javascript\nconst at = new At({\n  element: document.getElementById('chatInput'),\n  data: chatUsers, // Assume chatUsers is an array of user objects\n  tpl: (item) => `<span class=\"mention\" data-user-id=\"${item.id}\">@${item.username}</span>`,\n  callbacks: {\n    mentionChosen: (mention) => {\n      // Append mention to chat message, perhaps updating a message object\n      let message = document.getElementById('chatMessage');\n      message.innerHTML += `<span class=\"mention\" data-user-id=\"${mention.id}\">@${mention.username}</span> `;\n    }\n  }\n});\n```\n\nThis example demonstrates how to customize the mention's HTML using `data-user-id` for further processing. The `mentionChosen` callback updates the `chatMessage` element accordingly.\n\n\n### Building a Complex Mentioning System\n\nFor complex systems, consider these enhancements:\n\n* **Multiple Mention Types:** Extend At.js to support mentions of different types (e.g., users, channels, hashtags) by adjusting the data structure and `tpl` function.\n\n* **Mention Filtering:** Use the `filter` configuration option to create sophisticated filtering logic based on user input or other application-specific criteria.\n\n* **Real-time Updates:** Integrate with real-time data sources (e.g., WebSockets) to provide instant updates to the suggestion list as users type, reflecting changes in the available mentions.\n\n* **Custom UI:** Instead of relying on the default suggestion list, integrate with a custom UI framework to create a more visually appealing or application-specific suggestion display.\n\nThese examples provide a starting point for various At.js applications.  Remember to adapt and extend them to meet the specific needs of your project.  Remember to adjust paths and API endpoints according to your setup.\n\n","srcMarkdownNoYaml":"\n\n\n### What is At.js?\n\nAt.js is a lightweight JavaScript library designed to simplify the implementation of \"@\" mentions (or \"at\" mentions) in text input fields.  It provides a seamless and efficient way to detect, suggest, and insert user mentions, enhancing the user experience in applications requiring tagging or referencing capabilities, such as social media platforms, collaborative tools, and comment sections.  At.js handles the complexities of user input, suggestion display, and data management, allowing developers to focus on the core functionality of their application.\n\n\n### Key Features and Benefits\n\n* **Lightweight and efficient:** At.js is designed to minimize its impact on page load times and overall application performance.\n* **Easy to integrate:**  The library boasts a simple and intuitive API, making integration into existing projects straightforward.\n* **Customizable suggestions:**  Developers can easily customize the appearance and behavior of the suggestion list to match their application's design.\n* **Flexible data sources:** At.js supports various data sources for user information, including local arrays, remote APIs, and more.\n* **Keyboard navigation:**  Users can navigate the suggestion list using the keyboard for ease of use.\n* **Advanced features:** At.js offers features like pre-populated mentions and asynchronous data fetching for enhanced functionality.\n\n\n### Installation and Setup\n\nAt.js can be installed using npm or yarn:\n\n```bash\nnpm install at.js\n# or\nyarn add at.js\n```\n\nInclude the library in your HTML file:\n\n```html\n<script src=\"path/to/at.js/dist/at.js\"></script>\n```\n\nAlternatively, you can use a CDN link (check the At.js repository for the latest CDN link).\n\n### Basic Usage Example\n\nThis example demonstrates the basic usage of At.js with a sample data source:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>At.js Example</title>\n  <script src=\"path/to/at.js/dist/at.js\"></script> </head>\n<body>\n\n<textarea id=\"myTextarea\"></textarea>\n\n<script>\n  const at = new At({\n    element: document.getElementById('myTextarea'),\n    data: [\n      { id: 1, name: 'John Doe', username: 'johndoe' },\n      { id: 2, name: 'Jane Smith', username: 'janesmith' },\n    ],\n    //Further Customization (Optional):\n    tpl: (item) => `<span class=\"mention\">${item.username}</span>`, //Custom template\n    callbacks: {\n      mentionChosen: (mention) => {\n        console.log('Mention chosen:', mention);\n      },\n    },\n  });\n</script>\n\n</body>\n</html>\n```\n\nThis code snippet initializes At.js on a textarea with a sample dataset.  Typing \"@\" in the textarea will trigger the suggestion list, allowing users to select a mention.  The `mentionChosen` callback demonstrates how you can handle the selection event.  Remember to replace `\"path/to/at.js/dist/at.js\"` with the actual path to the At.js library file.  Refer to the API documentation for more advanced configuration options and customization.\n\n\n## Core Concepts\n\n### Mentioning Users\n\nAt.js's core functionality revolves around mentioning users within a text input field.  Users initiate a mention by typing the \"@\" symbol followed by characters.  At.js then presents a list of suggestions based on the typed characters and the configured data source.  Selecting a suggestion from the list inserts the corresponding mention into the input field, typically formatted as a unique identifier (e.g., username) wrapped within specific HTML tags for styling and processing.  The specific formatting of the mention is customizable through templates.  The library handles the complexities of managing the cursor position and updating the text content to maintain a smooth user experience.\n\n\n### Autocomplete Functionality\n\nAt.js leverages autocomplete functionality to provide a seamless user experience.  As the user types characters after the \"@\" symbol, the library dynamically filters and displays a list of relevant suggestions.  This list is typically presented as a dropdown or pop-up menu directly below the input field.  The suggestions are ranked based on relevance, ensuring the most likely matches appear at the top of the list.  The user can navigate this list using keyboard navigation (e.g., up/down arrow keys) and select a suggestion with the Enter key or mouse click.\n\n\n### Handling Mentions\n\nAfter a user selects a mention, At.js manages the integration of the selected mention into the text input field.  This typically involves inserting the mention with appropriate formatting and ensuring the cursor is positioned correctly for continued typing.   The library provides callbacks that allow developers to execute custom actions whenever a mention is chosen, offering extensive control over the post-selection behavior, such as updating a related data model or triggering network requests.  These callbacks offer the developer control over how the application handles the selected mention's data.\n\n\n### Data Sources\n\nAt.js supports multiple data sources for user information, providing flexibility for different application architectures.  The data source can be a simple JavaScript array, a JSON object, or a remote API endpoint.  This versatility allows developers to easily integrate At.js with existing data models and backend infrastructure. The library's API allows the developer to specify how and where to fetch the data, including providing customized fetching functions for remote data sources.\n\n\n### Customization Options\n\nAt.js offers extensive customization options to adapt to various application designs and requirements.  Developers can customize the appearance of the suggestion list, the styling of mentions within the text input, the trigger character (not limited to \"@\"), and keyboard navigation behavior.   Template functions allow developers to define the exact HTML structure used to represent mentions in the input.   Callback functions provide fine-grained control over events such as suggestion selection and input changes.  These customization options ensure seamless integration with existing designs and workflows.\n\n\n## API Reference\n\n### at.js Constructor\n\nThe `At` constructor initializes the At.js instance.  It takes a single argument: a configuration object.  This object specifies various settings to customize the behavior and appearance of At.js.  The constructor returns an instance of the `At` class, allowing for further method calls and event handling.\n\n```javascript\nconst at = new At(config);\n```\n\nwhere `config` is an object described in the next section.\n\n\n### Configuration Options\n\nThe configuration object passed to the `At` constructor accepts the following options:\n\n* **`element` (required):**  A DOM element (e.g., `<textarea>`, `<input type=\"text\">`) where At.js will operate.  This is the element where mentions will be inserted and suggestions will appear.\n\n* **`data` (required):**  An array of objects representing the data for user mentions.  Each object should contain at least a unique identifier (e.g., `id` or `username`) and a display name (e.g., `name`).  For remote data fetching, this can be a function that returns a Promise resolving to the data.\n\n* **`tpl` (optional):**  A function that receives a mention data object and returns the HTML string to be used for rendering the mention.  Defaults to a simple text rendering of the display name.\n\n* **`callbacks` (optional):**  An object containing callback functions for various events (see the \"Events\" section below).\n\n* **`trigger` (optional):** The character(s) used to trigger the mention suggestions. Defaults to \"@\".\n\n* **`limit` (optional):** The maximum number of suggestions to display. Defaults to 10.\n\n* **`filter` (optional):**  A custom filter function used to filter the `data` array based on the user's input. It receives the input text and data array and returns a filtered array.\n\n* **`placeHolder` (optional):** Placeholder text to show in the input field when empty.\n\n* **`async` (optional):** A boolean value. If true, async data fetching from a remote source is used. Defaults to false.\n\n* **`debounce` (optional):** Number of milliseconds to debounce the input event. This is useful to prevent excessive API calls during rapid typing. Defaults to 250ms.\n\n\n### Methods\n\nThe `At` class exposes the following methods:\n\n* **`destroy()`:** Removes At.js functionality from the associated element and cleans up event listeners.\n\n* **`update(newData)`:** Updates the data source used by At.js. Accepts an array or a Promise resolving to an array.\n\n* **`showSuggestions()`:**  Manually forces the display of the suggestion list. Useful for scenarios where programmatic control is needed.\n\n* **`hideSuggestions()`:** Manually hides the suggestion list. Useful for scenarios where programmatic control is needed.\n\n\n\n### Events\n\nAt.js triggers several custom events that can be listened for using standard JavaScript event listeners (e.g., `addEventListener`).  These events provide information about mention selection and changes to the input field. The following are some example events:\n\n* **`at.mentionChosen`:** Fired when a user selects a mention from the suggestion list.  The event object contains details about the chosen mention (e.g., the data object of selected mention).\n\n* **`at.inputChanged`:** Fired whenever the content of the input field changes.\n\n* **`at.suggestionsShown`:** Fired when the suggestion list is displayed.\n\n* **`at.suggestionsHidden`:** Fired when the suggestion list is hidden.\n\n\nThese are example events. Specific events and their details may vary depending on the version of At.js.  Consult the At.js documentation for the most up-to-date list of events and their respective properties.  Refer to the complete API documentation for additional details and examples.\n\n\n## Advanced Usage\n\n### Customizing the User Interface\n\nAt.js provides extensive customization options to seamlessly integrate with your application's UI.  Beyond the basic configuration options, you can deeply tailor the visual aspects and behavior.  This includes:\n\n* **Custom Templates:** The `tpl` configuration option allows you to define a custom template function to dictate how mentions are rendered in the input field. This function receives the mention data object as input and should return a string representing the HTML for the mention. This allows for rich formatting, including custom icons, colors, or highlighting.\n\n* **Styling the Suggestion List:**  The suggestion list's appearance can be fully customized through CSS.  At.js generates specific CSS classes for the suggestion list elements which can be targeted and styled according to your design preferences.\n\n* **Customizing Keyboard Navigation:** While At.js offers default keyboard navigation, it can be further customized or extended to implement special behaviors depending on the application's requirements.\n\n\n### Integrating with Other Libraries\n\nAt.js can be effectively integrated with other JavaScript libraries to enhance its functionality or fit into broader application architectures.\n\n* **UI Frameworks:** At.js works well with popular frameworks like React, Vue, and Angular.  These frameworks' component models can be utilized to create custom wrappers and integrate At.js into their component lifecycle.  This enables seamless integration within complex user interfaces built using these frameworks.\n\n* **Data Management Libraries:** The data source for At.js can be integrated with data management libraries like Redux or Vuex.  This ensures consistency and efficiency in managing mention data across the application.\n\n* **Third-party APIs:** If your mention data is sourced from a third-party API, At.js can be readily integrated to consume data via asynchronous requests.  Error handling and loading states should be incorporated to provide a robust user experience.\n\n\n### Handling Large Datasets\n\nWhen dealing with large datasets of users, performance optimization is crucial.  At.js offers several strategies to address this:\n\n* **Asynchronous Data Fetching:** The `async` option in the configuration allows for asynchronous fetching of data, preventing UI blocking.  This is essential for large datasets.\n\n* **Client-Side Filtering and Pagination:** Implement client-side filtering to reduce the amount of data processed.  Introduce pagination to the suggestion list if the number of suggestions exceeds a certain threshold, fetching only a subset of data at a time.\n\n* **Data Pre-processing:** Pre-process the data on the server or client-side to improve search and filtering efficiency.  Techniques like indexing or creating optimized data structures can greatly improve performance.\n\n\n### Performance Optimization\n\nBeyond handling large datasets, general performance optimization strategies for At.js include:\n\n* **Debouncing Input Events:**  The `debounce` configuration option controls the frequency of data filtering and suggestion updates.  A higher debounce value reduces the load on the application, but may increase perceived latency.  Find the optimal balance.\n\n* **Efficient Data Structures:** Using efficient data structures to store and manage mention data, such as optimized search trees, can improve lookup times during filtering.\n\n* **Minimizing DOM Manipulation:**  Minimize unnecessary DOM manipulations within the callback functions to avoid performance bottlenecks.  Favor efficient updates and avoid repeated rendering.\n\n\n\n### Internationalization and Localization\n\nSupporting multiple languages requires careful consideration of text encoding and user interface elements.  At.js offers basic support for this by allowing the use of Unicode characters within the mention data and custom templates. However,  for robust internationalization and localization, you would typically need to complement At.js with a dedicated internationalization library that handles translation of strings, date/time formatting, and cultural considerations in the UI.  This often involves building language-specific resources or using translation APIs.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\nThis section addresses common problems encountered when using At.js and provides solutions.\n\n* **No suggestions appear:**\n    * **Problem:**  The suggestion list is empty despite typing the trigger character.\n    * **Solutions:**\n        * Verify that the `data` configuration option is correctly populated with user data.  Check for typos or incorrect data formatting.\n        * Ensure the data source is accessible and correctly formatted (JSON, array, or function returning a Promise).\n        * Check the network console (if using a remote data source) for any errors during data fetching.\n        * If using a custom filter function, verify its logic and ensure it returns a valid filtered array.\n\n* **Incorrect mention rendering:**\n    * **Problem:** Mentions are not displayed correctly, or the formatting is unexpected.\n    * **Solutions:**\n        * Check the `tpl` function (if customized) for errors in HTML generation. Ensure proper escaping of special characters.\n        * Inspect the rendered HTML in the browser's developer tools to identify the issue.\n        * Verify the `data` object's structure and ensure it provides the necessary fields used within the `tpl` function.\n\n* **Suggestions appear in the wrong position:**\n    * **Problem:** The suggestion list overlays other elements or is misaligned.\n    * **Solutions:**\n        * Check for CSS conflicts.  Ensure that no other styles are interfering with the positioning of At.js's suggestion list.\n        * Verify that the target element (`element` in the configuration) is properly positioned and visible in the DOM.\n\n* **Unexpected behavior after updating data:**\n    * **Problem:** After calling `update()`, At.js behaves unexpectedly (e.g., no suggestions).\n    * **Solutions:**\n        * Ensure the `update()` method is called with a valid data array or a Promise resolving to one.\n        * Verify that the data format is consistent with the original data provided during initialization.\n        * Re-initialize At.js if necessary after significant data changes.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Utilize your browser's developer tools (usually accessed by pressing F12) to inspect the HTML, CSS, and JavaScript related to At.js.  The console will display error messages and warnings.  Use the debugger to step through the At.js code and identify issues.\n\n* **Console Logging:** Strategically place `console.log()` statements within the At.js configuration and callback functions to inspect data values and execution flow.  This helps pinpoint the source of problems.\n\n* **Simplify:** Create a minimal, reproducible example to isolate the issue.  Start with a basic setup and gradually add complexity to identify the point where the problem occurs.\n\n* **Check the At.js documentation and source code:**  The official documentation and source code repository may contain useful information and examples to resolve specific issues.  Look for relevant discussions or reported bugs on platforms like GitHub.\n\n\n\n### Error Handling\n\nAt.js itself may not throw explicit errors in all situations. However, errors can arise due to problems with the data source (network requests failing, incorrect data formats) or within custom callback functions.  Implement appropriate error handling mechanisms:\n\n* **Network Requests:**  When fetching data from a remote source, handle network errors gracefully.  Display user-friendly messages (e.g., \"Failed to load suggestions\") instead of letting the application crash.\n\n* **Data Validation:** Validate the data received from the data source to ensure it meets the expected format before using it in At.js.\n\n* **Callback Functions:**  Include `try...catch` blocks within custom callback functions to prevent errors within these functions from crashing the entire application.  Log errors encountered in these functions for later debugging.\n\n* **Global Error Handling:** Consider implementing a global error handler (using `window.onerror` or a similar mechanism) to capture any unhandled exceptions that might occur within At.js or related code.  This provides a safety net to catch unexpected errors.\n\n\n## Examples\n\n### Simple Mentioning Example\n\nThis example demonstrates basic mention functionality using an inline array for user data:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>At.js Simple Example</title>\n  <script src=\"path/to/at.js/dist/at.js\"></script>\n</head>\n<body>\n<textarea id=\"myTextarea\"></textarea>\n\n<script>\n  const at = new At({\n    element: document.getElementById('myTextarea'),\n    data: [\n      { id: 1, name: 'Alice', username: 'alice' },\n      { id: 2, name: 'Bob', username: 'bob' },\n      { id: 3, name: 'Charlie', username: 'charlie' }\n    ],\n    callbacks: {\n      mentionChosen: (mention) => {\n        console.log('Mention chosen:', mention);\n      }\n    }\n  });\n</script>\n</body>\n</html>\n```\n\nThis code initializes At.js on a textarea with a simple data array.  Typing \"@\" will trigger the suggestion list, allowing you to select users.  The `mentionChosen` callback logs the selected mention to the console.\n\n\n### Autocomplete with Custom Data\n\nThis example showcases autocomplete with data fetched from a remote JSON endpoint:\n\n```javascript\nconst at = new At({\n  element: document.getElementById('myTextarea'),\n  async: true,\n  data: () => {\n    return fetch('/api/users')\n      .then(response => response.json())\n      .then(data => data.users);\n  },\n  tpl: (item) => `<span class=\"mention\">@${item.username} (${item.name})</span>`,\n  callbacks: {\n    mentionChosen: (mention) => { /* Handle mention selection */ }\n  }\n});\n\n```\n\nThis uses `async: true` and provides a function that fetches user data from `/api/users`.  The `tpl` function customizes the mention's rendering. Remember to replace `/api/users` with your actual API endpoint.\n\n\n### Integration with a Chat Application\n\nThis example illustrates integration within a chat application, using a custom template and handling mention selection:\n\n```javascript\nconst at = new At({\n  element: document.getElementById('chatInput'),\n  data: chatUsers, // Assume chatUsers is an array of user objects\n  tpl: (item) => `<span class=\"mention\" data-user-id=\"${item.id}\">@${item.username}</span>`,\n  callbacks: {\n    mentionChosen: (mention) => {\n      // Append mention to chat message, perhaps updating a message object\n      let message = document.getElementById('chatMessage');\n      message.innerHTML += `<span class=\"mention\" data-user-id=\"${mention.id}\">@${mention.username}</span> `;\n    }\n  }\n});\n```\n\nThis example demonstrates how to customize the mention's HTML using `data-user-id` for further processing. The `mentionChosen` callback updates the `chatMessage` element accordingly.\n\n\n### Building a Complex Mentioning System\n\nFor complex systems, consider these enhancements:\n\n* **Multiple Mention Types:** Extend At.js to support mentions of different types (e.g., users, channels, hashtags) by adjusting the data structure and `tpl` function.\n\n* **Mention Filtering:** Use the `filter` configuration option to create sophisticated filtering logic based on user input or other application-specific criteria.\n\n* **Real-time Updates:** Integrate with real-time data sources (e.g., WebSockets) to provide instant updates to the suggestion list as users type, reflecting changes in the available mentions.\n\n* **Custom UI:** Instead of relying on the default suggestion list, integrate with a custom UI framework to create a more visually appealing or application-specific suggestion display.\n\nThese examples provide a starting point for various At.js applications.  Remember to adapt and extend them to meet the specific needs of your project.  Remember to adjust paths and API endpoints according to your setup.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"atjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"At.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}