{"title":"Screenfull.js - A Developer's Handbook","markdown":{"yaml":{"title":"Screenfull.js - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction to Screenfull.js","containsRefs":false,"markdown":"\n\n### What is Screenfull.js?\n\nScreenfull.js is a lightweight and robust JavaScript library that provides a simple, cross-browser API for managing the fullscreen state of an element.  It abstracts away the complexities of browser-specific fullscreen APIs, allowing you to easily toggle fullscreen mode on and off with minimal code.  It handles the nuances of different browsers' implementations, ensuring consistent behavior across various platforms and devices.\n\n### Why Use Screenfull.js?\n\nUsing Screenfull.js offers several advantages:\n\n* **Cross-browser compatibility:**  It works seamlessly across major browsers, saving you the time and effort of writing browser-specific code for fullscreen functionality.\n* **Simplicity:** The API is incredibly straightforward, making it easy to integrate into your projects.\n* **Lightweight:** The library is small in size, minimizing the impact on your application's performance.\n* **Reliable:** It handles potential errors and edge cases gracefully, ensuring a stable and predictable user experience.\n* **Focus on the element:** You can request fullscreen for a specific element, rather than the entire browser window, offering more granular control.\n\n\n### Browser Compatibility\n\nScreenfull.js strives for broad browser compatibility.  While it aims for universal support, optimal functionality depends on the browser's native fullscreen capabilities.  Generally, modern browsers (Chrome, Firefox, Safari, Edge) are well-supported.  For older or less common browsers, you may encounter limited or no fullscreen functionality. Consult the official website and test thoroughly for your target browsers.\n\n### Setting up Screenfull.js\n\nIncluding Screenfull.js in your project is easy:\n\n**1. Download:** Download the `screenfull.js` file from the project's repository or use a CDN.\n\n**2. Include in your HTML:**  Add the script tag to your HTML file, preferably before the closing `</body>` tag:\n\n```html\n<script src=\"screenfull.js\"></script> </body>\n```\n\n**or via a CDN (e.g., jsDelivr):**\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script> </body>\n```\n\n**3. Usage (Basic Example):**  Once included, you can use the Screenfull API:\n\n```javascript\nif (screenfull.isEnabled) {\n  screenfull.request(); // Enter fullscreen\n  // ... other code ...\n  screenfull.exit(); // Exit fullscreen\n} else {\n  console.warn('Fullscreen is not supported by this browser.');\n}\n```\n\nThis example checks if fullscreen is supported before attempting to use it.  Further API details are available in the API documentation section of this manual.\n\n\n## Core Functionality\n\n### Enabling Fullscreen Mode: `screenfull.request()`\n\nThe `screenfull.request()` method initiates the fullscreen request for the currently active element or, if no element is specified, defaults to the document's `<html>` element.  This method returns a `Promise` which resolves if the fullscreen mode is successfully entered and rejects if it fails.\n\n```javascript\nscreenfull.request().then(() => {\n  console.log('Fullscreen entered successfully!');\n}).catch(error => {\n  console.error('Error entering fullscreen:', error);\n});\n\n//Requesting fullscreen for a specific element\nconst myElement = document.getElementById('myElement');\nscreenfull.request(myElement).then(() => {\n    console.log('Element entered fullscreen');\n}).catch(error => {\n    console.error('Error entering fullscreen for element:', error);\n});\n```\n\n\n### Exiting Fullscreen Mode: `screenfull.exit()`\n\nThe `screenfull.exit()` method exits fullscreen mode. It also returns a `Promise` that resolves when fullscreen is exited successfully, and rejects if there's an error.\n\n```javascript\nscreenfull.exit().then(() => {\n  console.log('Fullscreen exited successfully!');\n}).catch(error => {\n  console.error('Error exiting fullscreen:', error);\n});\n\n```\n\n### Checking Fullscreen Status: `screenfull.isFullscreen`\n\nThe `screenfull.isFullscreen` property is a boolean value indicating whether the browser is currently in fullscreen mode.  It's a simple and efficient way to check the current fullscreen state.\n\n```javascript\nif (screenfull.isFullscreen) {\n  console.log('Fullscreen is active.');\n  // ... perform actions ...\n} else {\n  console.log('Fullscreen is not active.');\n  // ... perform other actions ...\n}\n```\n\n### Event Handling: `screenfull.on` and `screenfull.off`\n\nScreenfull.js provides event handling through the `screenfull.on()` and `screenfull.off()` methods.  These allow you to listen for and react to fullscreen change events.  The events are:\n\n* **`change`:** Fired whenever the fullscreen state changes (entering or exiting fullscreen).  The event object does not contain additional data.\n\n```javascript\nscreenfull.on('change', () => {\n  console.log('Fullscreen state changed!');\n  if (screenfull.isFullscreen) {\n    // Handle fullscreen entry\n  } else {\n    // Handle fullscreen exit\n  }\n});\n\n//Remove event listener\nscreenfull.off('change');\n\n```\n\n### Handling Errors: `screenfull.onerror`\n\nThe `screenfull.onerror` property allows assignment of an error handler function. This function will be called if any error occurs during fullscreen operations (e.g., permission denied by the user).\n\n```javascript\nscreenfull.onerror = (error) => {\n    console.error(\"Fullscreen error:\", error);\n    // Handle the error appropriately, for example display a user-friendly message\n};\n```\n  Note that the promise rejection in  `screenfull.request()` and `screenfull.exit()`  provide a more robust way to handle errors for those specific actions.  `screenfull.onerror` serves as a more general error handler covering less-specific circumstances.\n\n\n## Advanced Usage\n\n### Working with Different Elements\n\nWhile `screenfull.request()` defaults to the `<html>` element, you can target specific elements for fullscreen mode.  This is useful when you want to fullscreen a particular video, game canvas, or other element within your page, rather than the entire browser window.  Simply pass the element as an argument to `screenfull.request()`:\n\n\n```javascript\nconst myVideo = document.getElementById('myVideo');\nscreenfull.request(myVideo);\n```\n\nRemember that the browser might impose restrictions on which elements can be put into fullscreen mode (e.g., it might not allow an `<img>` element to go fullscreen).\n\n\n### Programmatic Control of Fullscreen\n\nYou can combine the `screenfull.isFullscreen` property with `screenfull.request()` and `screenfull.exit()` to create more complex fullscreen control logic.  For example, you could create a toggle button:\n\n```javascript\nconst fullscreenButton = document.getElementById('fullscreenButton');\nfullscreenButton.addEventListener('click', () => {\n  if (screenfull.isFullscreen) {\n    screenfull.exit();\n  } else {\n    screenfull.request();\n  }\n});\n```\n\nThis allows users to easily enter and exit fullscreen mode by clicking a button.  You can extend this further by incorporating more sophisticated state management based on your application's needs.\n\n\n### Integration with Other Libraries\n\nScreenfull.js is designed to be compatible with other JavaScript libraries.  Its simple API makes it easy to integrate into existing projects.  For instance, you might use it in conjunction with a video player library to provide fullscreen video playback, or with a game engine to enable fullscreen game mode.  Ensure that any potential conflicts with other libraries' event handling mechanisms are resolved appropriately.\n\n\n### Customizing the Fullscreen Experience\n\nWhile Screenfull.js primarily focuses on providing a consistent cross-browser fullscreen API, certain aspects of the fullscreen experience are handled by the browser itself.  You cannot directly customize elements like the browser's fullscreen controls or the appearance of the browser's UI in fullscreen mode through Screenfull.js. These are controlled by the browser's settings and implementation.  However, you *can* customize the content *within* the fullscreened element using standard CSS and JavaScript techniques to create a tailored user experience *inside* the fullscreen area.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Fullscreen not working at all:**  First, ensure Screenfull.js is correctly included in your HTML and that your code is calling the API methods (`screenfull.request()`, `screenfull.exit()`) correctly. Check your browser's console for any JavaScript errors.  Confirm that fullscreen is supported by your browser (see Browser Compatibility section).\n\n* **Fullscreen request is rejected:** This commonly happens if the user has denied fullscreen permissions or if the browser is preventing fullscreen due to security restrictions (e.g., fullscreen is disabled in the browser settings or by a browser extension).  Handle promise rejections appropriately (see `screenfull.onerror` and the `catch` blocks in the API examples).\n\n* **Fullscreen mode not exiting cleanly:** This is less common but can occur due to browser bugs or conflicts with other JavaScript libraries. Try simplifying your code and testing in isolation to identify conflicts.  Handle promise rejections during `screenfull.exit()` to gracefully handle any failures.\n\n\n* **Incorrect Element Target:**  Make sure that you're targeting the correct element with `screenfull.request(element)`.  A typo or using the wrong selector might prevent fullscreen from working correctly.\n\n* **`screenfull.isEnabled` is false:** If `screenfull.isEnabled` is `false`, fullscreen is not supported in the current browser or environment. Your code should handle this condition gracefully (for example, by providing an alternative user experience or informing the user that fullscreen is not available).\n\n\n### Debugging Tips\n\n* **Use your browser's developer console:** The console is invaluable for identifying errors, viewing network requests, and tracking the values of variables related to your fullscreen implementation.\n\n* **Simplify your code:** Isolate the relevant code dealing with Screenfull.js to help pinpoint problems. Create a minimal, reproducible example to simplify debugging.\n\n* **Test in different browsers:** Ensure consistency across multiple browsers (Chrome, Firefox, Safari, Edge) to see if the issue is browser-specific.\n\n* **Check your browser's fullscreen settings:** Make sure fullscreen mode is not disabled in your browser's settings or by a browser extension.\n\n\n### Browser-Specific Problems\n\nWhile Screenfull.js aims for broad compatibility, minor quirks might exist in certain browsers.  If you encounter a problem that seems specific to a particular browser, consult the browser's documentation regarding its fullscreen implementation, and consider reporting the issue as a bug on the Screenfull.js issue tracker, including detailed steps to reproduce the problem.  This aids in improving the library’s cross-browser support.\n\n\n### Troubleshooting Fullscreen Permissions\n\nIf fullscreen requests are consistently denied, check these:\n\n* **User Permissions:** The user might have explicitly denied fullscreen permissions for your website. The browser typically prompts the user for permission.  Ensure you handle promise rejections to inform the user of the permission issue.\n\n* **Browser Security:** The browser might be blocking fullscreen requests due to security measures, possibly triggered by extensions or browser settings.  In such cases, you will see error messages related to permission denial, typically reflected in the promise rejection.\n\n* **HTTPS:** Fullscreen often requires an HTTPS connection.  If you're using HTTP, switching to HTTPS might resolve permission issues.\n\n* **Autoplay restrictions:** Some browsers have restrictions on autoplaying videos or media in fullscreen mode, which can prevent fullscreen from working as expected if the fullscreen request is directly tied to media autoplay.\n\n\n\n\n## API Reference\n\n### `screenfull.request([element])`\n\nInitiates a fullscreen request.\n\n* **`element` (optional):**  An HTML element to enter fullscreen mode. If omitted, the request defaults to the `<html>` element.\n\n* **Returns:** A `Promise` that resolves if the fullscreen request is successful and rejects if it fails. The resolved value is `undefined`. The rejected value is an `Error` object containing details about the failure.\n\n```javascript\nscreenfull.request(myElement).then(() => {\n    console.log('Fullscreen entered successfully!');\n}).catch(error => {\n    console.error('Error entering fullscreen:', error);\n});\n```\n\n\n### `screenfull.exit()`\n\nExits fullscreen mode.\n\n* **Returns:** A `Promise` that resolves if exiting fullscreen is successful and rejects if it fails. The resolved value is `undefined`.  The rejected value is an `Error` object.\n\n```javascript\nscreenfull.exit().then(() => {\n  console.log('Fullscreen exited successfully!');\n}).catch(error => {\n  console.error('Error exiting fullscreen:', error);\n});\n```\n\n### `screenfull.isFullscreen`\n\nA boolean property indicating whether the browser is currently in fullscreen mode.  `true` if fullscreen, `false` otherwise.\n\n\n### `screenfull.on(eventType, listener)`\n\nAdds an event listener for fullscreen events.\n\n* **`eventType`:** The type of event to listen for (currently only `'change'` is supported).\n* **`listener`:** The function to call when the event occurs. This function receives no arguments.\n\n```javascript\nscreenfull.on('change', () => {\n  console.log('Fullscreen state changed!');\n});\n```\n\n### `screenfull.off(eventType, listener)`\n\nRemoves an event listener that was previously added using `screenfull.on()`.\n\n* **`eventType`:** The type of event (must match the `eventType` used in `screenfull.on()`).\n* **`listener`:** The listener function to remove.\n\n```javascript\nconst myListener = () => { /* ... */ };\nscreenfull.on('change', myListener);\n// ... later ...\nscreenfull.off('change', myListener);\n```\n\n### `screenfull.onerror`\n\nA property that can be assigned a function to handle fullscreen errors. This function will receive an `Error` object as an argument. Note that individual `screenfull.request()` and `screenfull.exit()` calls also return promises which will reject upon failure; this property provides a secondary fallback for global error handling.\n\n```javascript\nscreenfull.onerror = (error) => {\n  console.error('Fullscreen error:', error);\n};\n```\n\n### `screenfull.element`\n\nA property that returns the currently fullscreened element, or `null` if no element is in fullscreen mode.  Useful for determining which element is currently displayed fullscreen.\n\n\n### `screenfull.raw`\n\nThis property provides direct access to the underlying browser's fullscreen API.  This is generally not needed for most use cases, as Screenfull.js handles the cross-browser complexities. It's primarily useful for advanced scenarios or debugging purposes.  The contents of `screenfull.raw` vary based on the browser and its fullscreen API implementation.\n\n\n### Event Types\n\nCurrently, only one event type is supported:\n\n* **`change`:** This event is fired whenever the fullscreen state changes (entering or exiting fullscreen mode).  The listener function receives no arguments.\n\n\n## Examples\n\n### Basic Fullscreen Toggle\n\nThis example demonstrates a simple fullscreen toggle button:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Screenfull.js Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script>\n</head>\n<body>\n\n<button id=\"fullscreenButton\">Toggle Fullscreen</button>\n\n<script>\nconst button = document.getElementById('fullscreenButton');\nbutton.addEventListener('click', () => {\n  if (screenfull.isEnabled) {\n    if (screenfull.isFullscreen) {\n      screenfull.exit();\n    } else {\n      screenfull.request();\n    }\n  } else {\n    alert('Fullscreen is not supported by this browser.');\n  }\n});\n</script>\n\n</body>\n</html>\n```\n\nThis code creates a button. Clicking the button toggles fullscreen mode for the entire page.  Error handling is included to inform the user if fullscreen isn't supported.\n\n\n### Fullscreen Video Player\n\nThis example shows how to integrate Screenfull.js with a video player:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Fullscreen Video Player</title>\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script>\n</head>\n<body>\n\n<video id=\"myVideo\" controls width=\"640\" height=\"360\">\n  <source src=\"myvideo.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n<button id=\"fullscreenButton\">Fullscreen</button>\n\n<script>\nconst video = document.getElementById('myVideo');\nconst button = document.getElementById('fullscreenButton');\nbutton.addEventListener('click', () => {\n  if (screenfull.isEnabled) {\n    screenfull.request(video);\n  } else {\n    alert('Fullscreen is not supported by this browser.');\n  }\n});\n</script>\n\n</body>\n</html>\n```\n\nHere, the fullscreen button targets the video element specifically, allowing users to view the video in fullscreen.  Remember to replace `\"myvideo.mp4\"` with the actual path to your video file.\n\n\n### Fullscreen Image Gallery\n\nThis example demonstrates basic fullscreen for an image gallery:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Fullscreen Image Gallery</title>\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script>\n</head>\n<body>\n\n<img id=\"myImage\" src=\"image1.jpg\" alt=\"Image 1\" width=\"640\">\n<button id=\"fullscreenButton\">Fullscreen</button>\n\n<script>\nconst image = document.getElementById('myImage');\nconst button = document.getElementById('fullscreenButton');\nbutton.addEventListener('click', () => {\n  if (screenfull.isEnabled) {\n    screenfull.request(image);\n  } else {\n    alert('Fullscreen is not supported by this browser.');\n  }\n});\n</script>\n\n</body>\n</html>\n```\n\nReplace `\"image1.jpg\"` with your image path.  This provides a simple fullscreen view for a single image.  For a true gallery, you'd need additional image switching functionality.\n\n\n### Advanced Fullscreen Controls\n\nThis example provides more robust fullscreen control with error handling and a status indicator:\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Advanced Fullscreen Controls</title>\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script>\n</head>\n<body>\n\n<button id=\"fullscreenButton\">Fullscreen</button>\n<span id=\"fullscreenStatus\">Fullscreen: Off</span>\n\n<script>\nconst button = document.getElementById('fullscreenButton');\nconst status = document.getElementById('fullscreenStatus');\nbutton.addEventListener('click', () => {\n  if (screenfull.isEnabled) {\n    if (screenfull.isFullscreen) {\n      screenfull.exit().then(() => {\n        status.textContent = 'Fullscreen: Off';\n      }).catch(error => {\n        console.error('Error exiting fullscreen:', error);\n        status.textContent = 'Fullscreen Error: ' + error.message;\n      });\n    } else {\n      screenfull.request().then(() => {\n        status.textContent = 'Fullscreen: On';\n      }).catch(error => {\n        console.error('Error entering fullscreen:', error);\n        status.textContent = 'Fullscreen Error: ' + error.message;\n      });\n    }\n  } else {\n    status.textContent = 'Fullscreen not supported.';\n  }\n});\nscreenfull.on('change', () => {\n    status.textContent = `Fullscreen: ${screenfull.isFullscreen ? 'On' : 'Off'}`;\n});\n</script>\n\n</body>\n</html>\n```\n\nThis example shows how to handle promises, display feedback to the user, and use the `change` event to dynamically update the fullscreen status.  Remember to replace placeholder image and video paths with your actual media files.\n\n","srcMarkdownNoYaml":"\n## Introduction to Screenfull.js\n\n### What is Screenfull.js?\n\nScreenfull.js is a lightweight and robust JavaScript library that provides a simple, cross-browser API for managing the fullscreen state of an element.  It abstracts away the complexities of browser-specific fullscreen APIs, allowing you to easily toggle fullscreen mode on and off with minimal code.  It handles the nuances of different browsers' implementations, ensuring consistent behavior across various platforms and devices.\n\n### Why Use Screenfull.js?\n\nUsing Screenfull.js offers several advantages:\n\n* **Cross-browser compatibility:**  It works seamlessly across major browsers, saving you the time and effort of writing browser-specific code for fullscreen functionality.\n* **Simplicity:** The API is incredibly straightforward, making it easy to integrate into your projects.\n* **Lightweight:** The library is small in size, minimizing the impact on your application's performance.\n* **Reliable:** It handles potential errors and edge cases gracefully, ensuring a stable and predictable user experience.\n* **Focus on the element:** You can request fullscreen for a specific element, rather than the entire browser window, offering more granular control.\n\n\n### Browser Compatibility\n\nScreenfull.js strives for broad browser compatibility.  While it aims for universal support, optimal functionality depends on the browser's native fullscreen capabilities.  Generally, modern browsers (Chrome, Firefox, Safari, Edge) are well-supported.  For older or less common browsers, you may encounter limited or no fullscreen functionality. Consult the official website and test thoroughly for your target browsers.\n\n### Setting up Screenfull.js\n\nIncluding Screenfull.js in your project is easy:\n\n**1. Download:** Download the `screenfull.js` file from the project's repository or use a CDN.\n\n**2. Include in your HTML:**  Add the script tag to your HTML file, preferably before the closing `</body>` tag:\n\n```html\n<script src=\"screenfull.js\"></script> </body>\n```\n\n**or via a CDN (e.g., jsDelivr):**\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script> </body>\n```\n\n**3. Usage (Basic Example):**  Once included, you can use the Screenfull API:\n\n```javascript\nif (screenfull.isEnabled) {\n  screenfull.request(); // Enter fullscreen\n  // ... other code ...\n  screenfull.exit(); // Exit fullscreen\n} else {\n  console.warn('Fullscreen is not supported by this browser.');\n}\n```\n\nThis example checks if fullscreen is supported before attempting to use it.  Further API details are available in the API documentation section of this manual.\n\n\n## Core Functionality\n\n### Enabling Fullscreen Mode: `screenfull.request()`\n\nThe `screenfull.request()` method initiates the fullscreen request for the currently active element or, if no element is specified, defaults to the document's `<html>` element.  This method returns a `Promise` which resolves if the fullscreen mode is successfully entered and rejects if it fails.\n\n```javascript\nscreenfull.request().then(() => {\n  console.log('Fullscreen entered successfully!');\n}).catch(error => {\n  console.error('Error entering fullscreen:', error);\n});\n\n//Requesting fullscreen for a specific element\nconst myElement = document.getElementById('myElement');\nscreenfull.request(myElement).then(() => {\n    console.log('Element entered fullscreen');\n}).catch(error => {\n    console.error('Error entering fullscreen for element:', error);\n});\n```\n\n\n### Exiting Fullscreen Mode: `screenfull.exit()`\n\nThe `screenfull.exit()` method exits fullscreen mode. It also returns a `Promise` that resolves when fullscreen is exited successfully, and rejects if there's an error.\n\n```javascript\nscreenfull.exit().then(() => {\n  console.log('Fullscreen exited successfully!');\n}).catch(error => {\n  console.error('Error exiting fullscreen:', error);\n});\n\n```\n\n### Checking Fullscreen Status: `screenfull.isFullscreen`\n\nThe `screenfull.isFullscreen` property is a boolean value indicating whether the browser is currently in fullscreen mode.  It's a simple and efficient way to check the current fullscreen state.\n\n```javascript\nif (screenfull.isFullscreen) {\n  console.log('Fullscreen is active.');\n  // ... perform actions ...\n} else {\n  console.log('Fullscreen is not active.');\n  // ... perform other actions ...\n}\n```\n\n### Event Handling: `screenfull.on` and `screenfull.off`\n\nScreenfull.js provides event handling through the `screenfull.on()` and `screenfull.off()` methods.  These allow you to listen for and react to fullscreen change events.  The events are:\n\n* **`change`:** Fired whenever the fullscreen state changes (entering or exiting fullscreen).  The event object does not contain additional data.\n\n```javascript\nscreenfull.on('change', () => {\n  console.log('Fullscreen state changed!');\n  if (screenfull.isFullscreen) {\n    // Handle fullscreen entry\n  } else {\n    // Handle fullscreen exit\n  }\n});\n\n//Remove event listener\nscreenfull.off('change');\n\n```\n\n### Handling Errors: `screenfull.onerror`\n\nThe `screenfull.onerror` property allows assignment of an error handler function. This function will be called if any error occurs during fullscreen operations (e.g., permission denied by the user).\n\n```javascript\nscreenfull.onerror = (error) => {\n    console.error(\"Fullscreen error:\", error);\n    // Handle the error appropriately, for example display a user-friendly message\n};\n```\n  Note that the promise rejection in  `screenfull.request()` and `screenfull.exit()`  provide a more robust way to handle errors for those specific actions.  `screenfull.onerror` serves as a more general error handler covering less-specific circumstances.\n\n\n## Advanced Usage\n\n### Working with Different Elements\n\nWhile `screenfull.request()` defaults to the `<html>` element, you can target specific elements for fullscreen mode.  This is useful when you want to fullscreen a particular video, game canvas, or other element within your page, rather than the entire browser window.  Simply pass the element as an argument to `screenfull.request()`:\n\n\n```javascript\nconst myVideo = document.getElementById('myVideo');\nscreenfull.request(myVideo);\n```\n\nRemember that the browser might impose restrictions on which elements can be put into fullscreen mode (e.g., it might not allow an `<img>` element to go fullscreen).\n\n\n### Programmatic Control of Fullscreen\n\nYou can combine the `screenfull.isFullscreen` property with `screenfull.request()` and `screenfull.exit()` to create more complex fullscreen control logic.  For example, you could create a toggle button:\n\n```javascript\nconst fullscreenButton = document.getElementById('fullscreenButton');\nfullscreenButton.addEventListener('click', () => {\n  if (screenfull.isFullscreen) {\n    screenfull.exit();\n  } else {\n    screenfull.request();\n  }\n});\n```\n\nThis allows users to easily enter and exit fullscreen mode by clicking a button.  You can extend this further by incorporating more sophisticated state management based on your application's needs.\n\n\n### Integration with Other Libraries\n\nScreenfull.js is designed to be compatible with other JavaScript libraries.  Its simple API makes it easy to integrate into existing projects.  For instance, you might use it in conjunction with a video player library to provide fullscreen video playback, or with a game engine to enable fullscreen game mode.  Ensure that any potential conflicts with other libraries' event handling mechanisms are resolved appropriately.\n\n\n### Customizing the Fullscreen Experience\n\nWhile Screenfull.js primarily focuses on providing a consistent cross-browser fullscreen API, certain aspects of the fullscreen experience are handled by the browser itself.  You cannot directly customize elements like the browser's fullscreen controls or the appearance of the browser's UI in fullscreen mode through Screenfull.js. These are controlled by the browser's settings and implementation.  However, you *can* customize the content *within* the fullscreened element using standard CSS and JavaScript techniques to create a tailored user experience *inside* the fullscreen area.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Fullscreen not working at all:**  First, ensure Screenfull.js is correctly included in your HTML and that your code is calling the API methods (`screenfull.request()`, `screenfull.exit()`) correctly. Check your browser's console for any JavaScript errors.  Confirm that fullscreen is supported by your browser (see Browser Compatibility section).\n\n* **Fullscreen request is rejected:** This commonly happens if the user has denied fullscreen permissions or if the browser is preventing fullscreen due to security restrictions (e.g., fullscreen is disabled in the browser settings or by a browser extension).  Handle promise rejections appropriately (see `screenfull.onerror` and the `catch` blocks in the API examples).\n\n* **Fullscreen mode not exiting cleanly:** This is less common but can occur due to browser bugs or conflicts with other JavaScript libraries. Try simplifying your code and testing in isolation to identify conflicts.  Handle promise rejections during `screenfull.exit()` to gracefully handle any failures.\n\n\n* **Incorrect Element Target:**  Make sure that you're targeting the correct element with `screenfull.request(element)`.  A typo or using the wrong selector might prevent fullscreen from working correctly.\n\n* **`screenfull.isEnabled` is false:** If `screenfull.isEnabled` is `false`, fullscreen is not supported in the current browser or environment. Your code should handle this condition gracefully (for example, by providing an alternative user experience or informing the user that fullscreen is not available).\n\n\n### Debugging Tips\n\n* **Use your browser's developer console:** The console is invaluable for identifying errors, viewing network requests, and tracking the values of variables related to your fullscreen implementation.\n\n* **Simplify your code:** Isolate the relevant code dealing with Screenfull.js to help pinpoint problems. Create a minimal, reproducible example to simplify debugging.\n\n* **Test in different browsers:** Ensure consistency across multiple browsers (Chrome, Firefox, Safari, Edge) to see if the issue is browser-specific.\n\n* **Check your browser's fullscreen settings:** Make sure fullscreen mode is not disabled in your browser's settings or by a browser extension.\n\n\n### Browser-Specific Problems\n\nWhile Screenfull.js aims for broad compatibility, minor quirks might exist in certain browsers.  If you encounter a problem that seems specific to a particular browser, consult the browser's documentation regarding its fullscreen implementation, and consider reporting the issue as a bug on the Screenfull.js issue tracker, including detailed steps to reproduce the problem.  This aids in improving the library’s cross-browser support.\n\n\n### Troubleshooting Fullscreen Permissions\n\nIf fullscreen requests are consistently denied, check these:\n\n* **User Permissions:** The user might have explicitly denied fullscreen permissions for your website. The browser typically prompts the user for permission.  Ensure you handle promise rejections to inform the user of the permission issue.\n\n* **Browser Security:** The browser might be blocking fullscreen requests due to security measures, possibly triggered by extensions or browser settings.  In such cases, you will see error messages related to permission denial, typically reflected in the promise rejection.\n\n* **HTTPS:** Fullscreen often requires an HTTPS connection.  If you're using HTTP, switching to HTTPS might resolve permission issues.\n\n* **Autoplay restrictions:** Some browsers have restrictions on autoplaying videos or media in fullscreen mode, which can prevent fullscreen from working as expected if the fullscreen request is directly tied to media autoplay.\n\n\n\n\n## API Reference\n\n### `screenfull.request([element])`\n\nInitiates a fullscreen request.\n\n* **`element` (optional):**  An HTML element to enter fullscreen mode. If omitted, the request defaults to the `<html>` element.\n\n* **Returns:** A `Promise` that resolves if the fullscreen request is successful and rejects if it fails. The resolved value is `undefined`. The rejected value is an `Error` object containing details about the failure.\n\n```javascript\nscreenfull.request(myElement).then(() => {\n    console.log('Fullscreen entered successfully!');\n}).catch(error => {\n    console.error('Error entering fullscreen:', error);\n});\n```\n\n\n### `screenfull.exit()`\n\nExits fullscreen mode.\n\n* **Returns:** A `Promise` that resolves if exiting fullscreen is successful and rejects if it fails. The resolved value is `undefined`.  The rejected value is an `Error` object.\n\n```javascript\nscreenfull.exit().then(() => {\n  console.log('Fullscreen exited successfully!');\n}).catch(error => {\n  console.error('Error exiting fullscreen:', error);\n});\n```\n\n### `screenfull.isFullscreen`\n\nA boolean property indicating whether the browser is currently in fullscreen mode.  `true` if fullscreen, `false` otherwise.\n\n\n### `screenfull.on(eventType, listener)`\n\nAdds an event listener for fullscreen events.\n\n* **`eventType`:** The type of event to listen for (currently only `'change'` is supported).\n* **`listener`:** The function to call when the event occurs. This function receives no arguments.\n\n```javascript\nscreenfull.on('change', () => {\n  console.log('Fullscreen state changed!');\n});\n```\n\n### `screenfull.off(eventType, listener)`\n\nRemoves an event listener that was previously added using `screenfull.on()`.\n\n* **`eventType`:** The type of event (must match the `eventType` used in `screenfull.on()`).\n* **`listener`:** The listener function to remove.\n\n```javascript\nconst myListener = () => { /* ... */ };\nscreenfull.on('change', myListener);\n// ... later ...\nscreenfull.off('change', myListener);\n```\n\n### `screenfull.onerror`\n\nA property that can be assigned a function to handle fullscreen errors. This function will receive an `Error` object as an argument. Note that individual `screenfull.request()` and `screenfull.exit()` calls also return promises which will reject upon failure; this property provides a secondary fallback for global error handling.\n\n```javascript\nscreenfull.onerror = (error) => {\n  console.error('Fullscreen error:', error);\n};\n```\n\n### `screenfull.element`\n\nA property that returns the currently fullscreened element, or `null` if no element is in fullscreen mode.  Useful for determining which element is currently displayed fullscreen.\n\n\n### `screenfull.raw`\n\nThis property provides direct access to the underlying browser's fullscreen API.  This is generally not needed for most use cases, as Screenfull.js handles the cross-browser complexities. It's primarily useful for advanced scenarios or debugging purposes.  The contents of `screenfull.raw` vary based on the browser and its fullscreen API implementation.\n\n\n### Event Types\n\nCurrently, only one event type is supported:\n\n* **`change`:** This event is fired whenever the fullscreen state changes (entering or exiting fullscreen mode).  The listener function receives no arguments.\n\n\n## Examples\n\n### Basic Fullscreen Toggle\n\nThis example demonstrates a simple fullscreen toggle button:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Screenfull.js Example</title>\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script>\n</head>\n<body>\n\n<button id=\"fullscreenButton\">Toggle Fullscreen</button>\n\n<script>\nconst button = document.getElementById('fullscreenButton');\nbutton.addEventListener('click', () => {\n  if (screenfull.isEnabled) {\n    if (screenfull.isFullscreen) {\n      screenfull.exit();\n    } else {\n      screenfull.request();\n    }\n  } else {\n    alert('Fullscreen is not supported by this browser.');\n  }\n});\n</script>\n\n</body>\n</html>\n```\n\nThis code creates a button. Clicking the button toggles fullscreen mode for the entire page.  Error handling is included to inform the user if fullscreen isn't supported.\n\n\n### Fullscreen Video Player\n\nThis example shows how to integrate Screenfull.js with a video player:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Fullscreen Video Player</title>\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script>\n</head>\n<body>\n\n<video id=\"myVideo\" controls width=\"640\" height=\"360\">\n  <source src=\"myvideo.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n<button id=\"fullscreenButton\">Fullscreen</button>\n\n<script>\nconst video = document.getElementById('myVideo');\nconst button = document.getElementById('fullscreenButton');\nbutton.addEventListener('click', () => {\n  if (screenfull.isEnabled) {\n    screenfull.request(video);\n  } else {\n    alert('Fullscreen is not supported by this browser.');\n  }\n});\n</script>\n\n</body>\n</html>\n```\n\nHere, the fullscreen button targets the video element specifically, allowing users to view the video in fullscreen.  Remember to replace `\"myvideo.mp4\"` with the actual path to your video file.\n\n\n### Fullscreen Image Gallery\n\nThis example demonstrates basic fullscreen for an image gallery:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Fullscreen Image Gallery</title>\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script>\n</head>\n<body>\n\n<img id=\"myImage\" src=\"image1.jpg\" alt=\"Image 1\" width=\"640\">\n<button id=\"fullscreenButton\">Fullscreen</button>\n\n<script>\nconst image = document.getElementById('myImage');\nconst button = document.getElementById('fullscreenButton');\nbutton.addEventListener('click', () => {\n  if (screenfull.isEnabled) {\n    screenfull.request(image);\n  } else {\n    alert('Fullscreen is not supported by this browser.');\n  }\n});\n</script>\n\n</body>\n</html>\n```\n\nReplace `\"image1.jpg\"` with your image path.  This provides a simple fullscreen view for a single image.  For a true gallery, you'd need additional image switching functionality.\n\n\n### Advanced Fullscreen Controls\n\nThis example provides more robust fullscreen control with error handling and a status indicator:\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Advanced Fullscreen Controls</title>\n<script src=\"https://cdn.jsdelivr.net/npm/screenfull@5.1.0/dist/screenfull.min.js\"></script>\n</head>\n<body>\n\n<button id=\"fullscreenButton\">Fullscreen</button>\n<span id=\"fullscreenStatus\">Fullscreen: Off</span>\n\n<script>\nconst button = document.getElementById('fullscreenButton');\nconst status = document.getElementById('fullscreenStatus');\nbutton.addEventListener('click', () => {\n  if (screenfull.isEnabled) {\n    if (screenfull.isFullscreen) {\n      screenfull.exit().then(() => {\n        status.textContent = 'Fullscreen: Off';\n      }).catch(error => {\n        console.error('Error exiting fullscreen:', error);\n        status.textContent = 'Fullscreen Error: ' + error.message;\n      });\n    } else {\n      screenfull.request().then(() => {\n        status.textContent = 'Fullscreen: On';\n      }).catch(error => {\n        console.error('Error entering fullscreen:', error);\n        status.textContent = 'Fullscreen Error: ' + error.message;\n      });\n    }\n  } else {\n    status.textContent = 'Fullscreen not supported.';\n  }\n});\nscreenfull.on('change', () => {\n    status.textContent = `Fullscreen: ${screenfull.isFullscreen ? 'On' : 'Off'}`;\n});\n</script>\n\n</body>\n</html>\n```\n\nThis example shows how to handle promises, display feedback to the user, and use the `change` event to dynamically update the fullscreen status.  Remember to replace placeholder image and video paths with your actual media files.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"screenfulljs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"Screenfull.js - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}