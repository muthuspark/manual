{"title":"Picturefill - A Developer's Handbook","markdown":{"yaml":{"title":"Picturefill - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction to Picturefill","containsRefs":false,"markdown":"\n\n### What is Picturefill?\n\nPicturefill is a JavaScript polyfill that provides support for the `<picture>` element in browsers that don't natively understand it.  The `<picture>` element allows you to serve different images based on various criteria like screen resolution, device pixel ratio, or even specific media queries. This ensures that the most appropriate image is displayed for each user, optimizing performance and visual quality.  Picturefill essentially emulates the `<picture>` element's functionality, making responsive images a reality across a wider range of browsers.\n\n### Why use Picturefill?\n\nUsing Picturefill offers several key advantages:\n\n* **Responsive Images:** Serve different image sizes optimized for various screen resolutions and devices, improving performance and visual quality. Smaller images load faster on smaller screens, while higher-resolution images are delivered to devices that can handle them.\n\n* **Improved Performance:** By delivering only the necessary image size, Picturefill reduces bandwidth consumption and page load times, improving the user experience, especially on mobile devices.\n\n* **Backward Compatibility:** Picturefill bridges the gap between modern browsers that support `<picture>` and older browsers that don't, ensuring consistent image display across all supported platforms.\n\n* **Simplified Implementation:** It simplifies the process of implementing responsive images, allowing you to manage multiple image sources in a structured and maintainable way through the `<picture>` element's syntax.\n\n* **Flexibility:**  Picturefill supports various criteria for choosing the correct image, including `srcset`, `media` attributes, and even custom selectors.\n\n\n### Browser Support\n\nWhile modern browsers have excellent native support for the `<picture>` element, Picturefill ensures functionality for older browsers.  Therefore, direct browser support for the `<picture>` element is less critical as Picturefill handles the fallback.  However, if Picturefill is not needed, relying on native browser support is always preferable for optimal performance. Check the Picturefill project's website or relevant release notes for the most up-to-date browser compatibility information.\n\n\n### Installation and Setup\n\nPicturefill can be included in your project in several ways:\n\n**1. Using a CDN:** The easiest way is to include Picturefill via a CDN like jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/picturefill\"></script>\n```\n\nThis will automatically load Picturefill on page load.\n\n**2. Downloading and Including Locally:** Download the Picturefill library from its official repository (refer to the project's website for the latest version) and include it in your project's HTML file:\n\n```html\n<script src=\"/path/to/picturefill.min.js\"></script> <!-- Replace with your actual path -->\n```\n\n**3. Using a Package Manager (e.g., npm or yarn):** If you are using a package manager, you can install Picturefill and import it into your project.  The specific commands will depend on your chosen package manager, but generally follow this pattern:\n\n```bash\nnpm install picturefill\n# or\nyarn add picturefill\n```\n\nThen import it into your JavaScript code as needed. Note that this method requires setting up a build process if you are not using a module bundler.\n\nAfter including Picturefill, you can use `<picture>` elements in your HTML as usual, and Picturefill will handle the image selection process. No additional JavaScript code is typically required for basic functionality.\n\n\n## Core Concepts\n\n### The `<picture>` element\n\nThe `<picture>` element is the foundation of responsive images using Picturefill.  It acts as a container for multiple `<source>` elements, each specifying an image source and optional conditions.  The browser (or Picturefill) selects the most appropriate `<source>` based on the provided criteria, and if no suitable `<source>` is found, it falls back to the `<img>` element within the `<picture>`.\n\nA basic example:\n\n```html\n<picture>\n  <source srcset=\"image-highres.jpg\" media=\"(min-width: 1024px)\">\n  <source srcset=\"image-medres.jpg\" media=\"(min-width: 600px)\">\n  <img src=\"image-lowres.jpg\" alt=\"My Image\">\n</picture>\n```\n\nIn this example, the browser will choose `image-highres.jpg` for screens wider than 1024px, `image-medres.jpg` for screens wider than 600px, and `image-lowres.jpg` as a fallback for smaller screens.\n\n\n### Source Sets (`srcset` attribute)\n\nThe `srcset` attribute within each `<source>` element specifies a list of image candidates, along with their associated descriptors.  These descriptors typically indicate image size, allowing the browser to select the most appropriate image based on the device's pixel density or screen resolution.  Descriptors are separated by commas.  A common descriptor is the `x` descriptor which describes the image resolution (e.g., `image.jpg 2x`).\n\nExample:\n\n```html\n<source srcset=\"image-small.jpg, image-large.jpg 2x\" type=\"image/jpeg\">\n```\n\nThis provides `image-small.jpg` as an option and `image-large.jpg` as a 2x resolution option. Picturefill will select the most suitable one based on the device pixel ratio and other factors (like `sizes` attribute).  Note the `type` attribute specifies the image format; it helps the browser pre-select candidates and isn't strictly required by Picturefill but is best practice.\n\n\n### Media Queries (`media` attribute)\n\nThe `media` attribute in each `<source>` element allows you to specify conditions under which a particular image source should be selected. This uses CSS media query syntax.  This lets you select different images based on screen width, device orientation, pixel density, or other relevant factors.\n\nExample:\n\n```html\n<source srcset=\"image-wide.jpg\" media=\"(min-aspect-ratio: 16/9)\">\n<source srcset=\"image-tall.jpg\" media=\"(max-aspect-ratio: 9/16)\">\n```\n\nThis example chooses `image-wide.jpg` for screens with an aspect ratio of 16:9 or wider and `image-tall.jpg` for screens with an aspect ratio of 9:16 or narrower.\n\n\n### Sizes Attribute (`sizes` attribute)\n\nThe `sizes` attribute, used within `<source>` and `<img>` elements, provides a more precise way to control which image is selected by specifying the rendered image size in different contexts.  It uses CSS width units (`px`, `vw`, `vh`, etc.) and allows for more effective selection of images based on their rendered size on the page. This is crucial for avoiding unnecessarily large downloads.\n\nExample:\n\n```html\n<img srcset=\"image-small.jpg, image-medium.jpg 2x\" sizes=\"(max-width: 600px) 50vw, 100vw\" src=\"image-small.jpg\" alt=\"My Image\">\n```\n\nThis tells Picturefill to use a width of 50vw (50% of the viewport width) for screens with a maximum width of 600px and a width of 100vw (full viewport width) for larger screens.  This helps Picturefill select the correct resolution even if the picture's dimensions change in response to the viewport changes.\n\n\n### Art Direction\n\nArt direction refers to serving completely different images based on the screen size or conditions. This might involve using different compositions, crops, or even entirely different images altogether for different contexts. This allows optimal image presentation for various screen sizes.  The `<picture>` element and its attributes empower effective art direction for responsive design.  You can use media queries or other selection criteria in `<source>` elements to achieve different imagery. For example, you might serve a landscape image on large screens and a portrait version on smaller screens, significantly improving the visual appeal.\n\n\n## Using Picturefill\n\n### Basic Implementation\n\nThe most basic implementation involves simply including Picturefill in your HTML and using `<picture>` elements.  Picturefill will automatically handle the selection of the appropriate source image.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Picturefill Example</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/picturefill\"></script> </head>\n<body>\n\n<picture>\n  <source srcset=\"image-large.jpg\" media=\"(min-width: 768px)\">\n  <img src=\"image-small.jpg\" alt=\"My Image\">\n</picture>\n\n</body>\n</html>\n```\n\nThis code will display `image-large.jpg` on screens wider than 768 pixels and `image-small.jpg` otherwise.  Remember to replace `\"image-large.jpg\"` and `\"image-small.jpg\"` with your actual image file paths.\n\n\n### Working with Different Image Formats\n\nPicturefill handles different image formats seamlessly.  You can specify the image format using the `type` attribute within the `<source>` element.  This helps browsers pre-select appropriate candidates, improving performance.\n\n```html\n<picture>\n  <source srcset=\"image.webp\" type=\"image/webp\">\n  <source srcset=\"image.jpg\" type=\"image/jpeg\">\n  <img src=\"image.png\" alt=\"My Image\">\n</picture>\n```\n\nThis example will prioritize WebP if the browser supports it, falling back to JPEG and then PNG.\n\n\n### Responsive Images\n\nPicturefill's core strength lies in its ability to create responsive images. By combining `srcset` and `sizes` attributes with media queries, you can serve appropriately sized images for various screen sizes and pixel densities.\n\n```html\n<picture>\n  <source srcset=\"image-small.jpg 1x, image-small@2x.jpg 2x\" sizes=\"(max-width: 500px) 100vw, 500px\" media=\"(max-width: 500px)\">\n  <source srcset=\"image-medium.jpg 1x, image-medium@2x.jpg 2x\" sizes=\"(max-width: 1000px) 50vw, 500px\" media=\"(min-width: 501px) and (max-width: 1000px)\">\n  <source srcset=\"image-large.jpg 1x, image-large@2x.jpg 2x\" sizes=\"500px\" media=\"(min-width: 1001px)\">\n  <img src=\"image-small.jpg\" alt=\"My Image\">\n</picture>\n```\n\nThis example serves different images and sizes based on screen width, demonstrating sophisticated responsive image handling.\n\n\n### Handling Retina Displays\n\nPicturefill automatically handles Retina displays (and other high-density displays) by using the `srcset` attribute with `x` descriptors.  It selects images with appropriate pixel densities.\n\n```html\n<img srcset=\"image.jpg, image@2x.jpg 2x\" src=\"image.jpg\" alt=\"My Image\">\n```\n\nThis code will select `image@2x.jpg` for devices with a pixel density of 2x or higher.\n\n\n### Advanced Usage with JavaScript API\n\nPicturefill provides a JavaScript API, although it's generally not needed for basic usage. The API allows for more control over the polyfill's behavior, including triggering re-evaluation of image selections or debugging.  Consult the Picturefill documentation for detailed information on the API methods and their parameters.  Generally, including Picturefill via a CDN or script tag is sufficient for most use cases.  The API is primarily for advanced scenarios requiring programmatic control over image selection.\n\n\n## Configuration Options\n\n### Customizing Picturefill Behavior\n\nWhile Picturefill generally works seamlessly out-of-the-box, you can customize its behavior using configuration options. These options allow you to fine-tune the polyfill's image selection process and adapt it to your specific needs.  Configuration is primarily done by passing a configuration object to the `picturefill` function (although this is generally only necessary in advanced scenarios where you need more control beyond simply including the script).\n\n### Available Options and Their Effects\n\nPicturefill's configuration options are generally accessed through a JavaScript object passed as an argument.  The most commonly used options are detailed below; consult the official Picturefill documentation for the most up-to-date and complete list.\n\n* **`w` (width):** This option allows you to override the default width calculation for responsive images.  It might be useful in scenarios where accurate image width calculation is challenging.\n\n* **`h` (height):** Similar to `w`, this option allows overriding the default height calculation. This is less commonly used than the `w` option.\n\n* **`dpr` (device pixel ratio):** This option allows forcing a specific device pixel ratio, useful for testing or debugging purposes.\n\n* **`lazyLoad`:** This boolean option controls whether Picturefill should handle lazy loading of images.  The default is often `true` (though consult your version's documentation to confirm), enabling lazy loading and improving performance. Setting this to `false` disables lazy loading.\n\n* **`slowRespond`:** This boolean option adds a small delay before performing image selection.  Useful for scenarios where there is interference with other JavaScript libraries.\n\n* **`allowUpscale`:** This boolean option, when set to `false`, prevents Picturefill from selecting higher-resolution images than the device's native pixel density. This is useful to enforce only selecting appropriate images.  The default behavior typically allows upscaling.\n\n* **`debug`:** Setting this option to `true` enables more detailed logging in the browser's console, facilitating troubleshooting.\n\nNote that the availability and behavior of these options might vary depending on the Picturefill version.\n\n\n### Example Configurations\n\nHere are examples demonstrating the usage of some configuration options:\n\n**Example 1: Disabling Upscaling:**\n\n```javascript\npicturefill({ allowUpscale: false });\n```\n\nThis configures Picturefill to not upscale images beyond the device's pixel density.\n\n**Example 2: Enabling Debugging:**\n\n```javascript\npicturefill({ debug: true });\n```\n\nThis enables detailed logging to the browser's console.\n\n**Example 3: Customizing Width Calculation:**\n\n```javascript\npicturefill({ w: 800 }); // Override width calculation to 800 pixels.\n```\n\nThis example forces the width calculation to 800 pixels, regardless of the actual viewport width. Note that this overrides other width calculations.  Use with caution!\n\nRemember that the configuration object is passed to the `picturefill` function.  If you are simply including Picturefill via a script tag and not using its API explicitly, you would generally not need these configuration options, as sensible defaults are typically used.  The advanced configuration is for fine-tuning when specific control over image selection is needed.\n\n\n## Troubleshooting and Debugging\n\n### Common Issues and Solutions\n\nSeveral common issues can arise when using Picturefill.  Here are some troubleshooting steps:\n\n* **Images not loading correctly:**  Double-check your image paths, ensuring they are correct and accessible. Verify that the `srcset` attribute contains valid image URLs and appropriate descriptors (like `1x`, `2x`). Make sure the fallback `<img>` tag within the `<picture>` element has a valid `src` attribute.\n\n\n* **Incorrect image selection:** If the wrong image is displayed, review your media queries in the `media` attribute of your `<source>` elements. Ensure that your queries accurately target the desired screen sizes and conditions. Carefully examine your `sizes` attribute to ensure it accurately reflects the intended rendered image dimensions.\n\n\n* **Picturefill not functioning at all:**  Confirm that you have correctly included the Picturefill library in your HTML file (either via CDN or local inclusion).  Inspect your browser's developer console for any JavaScript errors that might indicate problems with Picturefill's loading or execution. Check that there are no conflicting JavaScript libraries that might be interfering with Picturefill's functionality.\n\n\n* **Performance issues:** If performance is slow, consider optimizing your images (reducing their file size without sacrificing quality). Use appropriate image formats (WebP is generally preferred for good quality and compression) and ensure your `srcset` and `sizes` attributes are optimized to provide only necessary image sizes.  Minimizing the number of image candidates in `srcset` can also help.  Using lazy loading, if supported by your Picturefill version, is a significant performance optimization.\n\n\n### Debugging Techniques\n\nSeveral techniques can help debug Picturefill-related issues:\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the network requests and check which images are being loaded. This helps verify if the correct images are selected based on your configurations.\n\n\n* **Console Logging:** Use `console.log()` statements in your JavaScript code to print relevant information to the browser's console.  For example, you might log the viewport dimensions or the selected image URL to track the polyfill's behavior. The `debug` option of Picturefill (if supported by the version used) further enhances debugging by providing detailed logging.\n\n\n* **Simplify Your Markup:** To isolate problems, create a simplified version of your `<picture>` element with minimal `source` elements.  This makes it easier to pinpoint the source of any errors.\n\n\n* **Test with Different Browsers:**  Test your implementation on various browsers and devices to ensure compatibility and identify any browser-specific issues.\n\n\n### Error Handling\n\nPicturefill itself doesn't throw many explicit JavaScript errors. Instead, problems often manifest as incorrect image selection or images not loading.  The primary error-handling strategy involves careful testing and utilizing debugging techniques as described above.  The browser's developer console is your primary tool for detecting errors and identifying the root cause.\n\nIf using the advanced JavaScript API, handle potential errors within your custom JavaScript code using standard JavaScript `try...catch` blocks, if needed.  The Picturefill library itself rarely produces direct errors that need to be handled through its API unless you're using the API to directly interact with the polyfill's functions.\n\n\n## Advanced Techniques\n\n### Integrating with Build Systems\n\nIntegrating Picturefill into a build system (like Webpack, Parcel, Rollup, etc.) typically involves installing it as a package and importing it into your JavaScript code.  The exact steps vary depending on your specific build system, but the general approach is:\n\n1. **Installation:** Install Picturefill using your build system's package manager (npm or yarn).\n\n   ```bash\n   npm install picturefill\n   # or\n   yarn add picturefill\n   ```\n\n2. **Import/Require:**  Import or require the Picturefill library in your JavaScript files.  The syntax depends on your module system (e.g., ES modules, CommonJS).\n\n   * **ES Modules:**\n     ```javascript\n     import picturefill from 'picturefill';\n     ```\n\n   * **CommonJS:**\n     ```javascript\n     const picturefill = require('picturefill');\n     ```\n\n3. **Configuration (Optional):** If needed, pass a configuration object to the `picturefill` function (see the Configuration Options section).\n\n4. **Build Process:** Ensure your build system includes the Picturefill library in your final bundled JavaScript output.  This usually involves appropriate configuration in your build system's configuration file.\n\nNote:  Some build systems may automatically handle the inclusion of Picturefill if you reference it directly in your HTML. However, the above approach ensures better control and often leads to better optimized bundles, especially in larger projects.\n\n\n### Performance Optimization\n\nOptimizing Picturefill's performance centers around efficient image loading and selection. Key strategies include:\n\n* **Image Optimization:** Reduce the file size of your images without significant quality loss using tools like ImageOptim or TinyPNG.  Using appropriate image formats like WebP can significantly reduce file sizes.\n\n* **Efficient `srcset`:** Carefully manage the number of image candidates in your `srcset` attribute.  Too many candidates increase processing time.  Focus on providing only essential sizes and resolutions.\n\n* **`sizes` Attribute:** Use the `sizes` attribute effectively to precisely define the rendered image dimensions for different viewport sizes. This allows Picturefill to make more accurate selections and avoid unnecessary downloads.\n\n* **Lazy Loading:** If supported by your Picturefill version, enable lazy loading to defer image loading until they are visible in the viewport.  This improves initial page load performance.\n\n* **Appropriate Media Queries:** Use media queries judiciously.  Avoid overly granular or unnecessary media queries, which can increase the time spent on image selection.\n\n\n### Using Picturefill with Frameworks (React, Angular, Vue)\n\nPicturefill's integration with popular frameworks like React, Angular, and Vue is generally straightforward.  The core principle is including Picturefill as described in the \"Integrating with Build Systems\" section, then using the `<picture>` element within your framework's component structure as usual.\n\n* **React:**  Use the `<picture>` element directly within your JSX code.\n\n* **Angular:** Use the `<picture>` element in your Angular templates.\n\n* **Vue:** Use the `<picture>` element in your Vue templates.\n\nIn all cases, ensure Picturefill is correctly included and built into your project as part of your framework's build process.  The framework itself generally does not require special integration with Picturefill, beyond standard JavaScript inclusion practices within the framework's environment.\n\n\n### Custom Element Support\n\nPicturefill doesn't directly support custom elements in a special way.  You can use `<picture>` elements within custom elements as you would normally use them within standard HTML.  Picturefill's functionality remains unchanged.  The only consideration is ensuring Picturefill is properly loaded and available in the scope where your custom elements are defined and used.\n\n\n## Best Practices\n\n### Image Optimization for Web Performance\n\nOptimizing images is crucial for web performance, and Picturefill complements these efforts.  Follow these best practices:\n\n* **Choose the Right Format:** Use modern image formats like WebP for superior compression and quality.  If WebP isn't universally supported, provide appropriate fallbacks (like AVIF or JPEG) using the `<source>` element's `type` attribute.\n\n* **Compress Images:** Use image optimization tools to reduce file sizes without significant quality loss.  Tools like ImageOptim, TinyPNG, or online compression services can significantly decrease image weights.\n\n* **Appropriate Resolutions:**  Don't provide unnecessarily high-resolution images.  Use the `srcset` attribute with appropriate `x` descriptors (e.g., 1x, 2x) to serve images optimized for different pixel densities. Avoid overly large images that are scaled down by the browser, as this wastes resources.\n\n* **Responsive Images:** Leverage the `sizes` attribute effectively to control the rendered image dimensions based on the viewport size.  This ensures that only the necessary image sizes are downloaded, optimizing bandwidth usage.\n\n* **Lazy Loading:** Implement lazy loading to defer the loading of images until they are visible in the viewport.  This significantly improves the initial page load time, particularly beneficial for pages with many images. (Check if your Picturefill version supports lazy loading; this may require configuration).\n\n\n### Accessibility Considerations\n\nAccessibility is paramount.  Here's how to ensure your images are accessible when using Picturefill:\n\n* **`alt` Attribute:** Always provide meaningful `alt` text for your `<img>` elements.  This text describes the image's content for screen readers and users who cannot see the image.  Accurate and concise `alt` text is crucial for accessibility.\n\n* **Semantic HTML:** Use semantic HTML5 elements like `<figure>` and `<figcaption>` to structure images appropriately. This improves both accessibility and SEO.\n\n* **Color Contrast:**  Ensure sufficient color contrast between your images and their background.  This improves visibility for users with visual impairments.\n\n* **Keyboard Navigation:** Test your website’s accessibility with keyboard navigation to ensure users can interact with images effectively.  Images should be reachable and understandable through keyboard navigation.\n\n\n### SEO Best Practices\n\nOptimizing images for search engines improves your website's visibility.  Here's how to use Picturefill effectively for SEO:\n\n* **Structured Data Markup:** Consider using schema.org structured data markup to provide search engines with more context about your images.\n\n* **Image Alt Text:** Use descriptive and relevant `alt` text that accurately reflects the image content.  This helps search engines understand your images and improves their ranking in image search results.\n\n* **File Names:** Use descriptive file names for your images.  Avoid generic names like \"image1.jpg\" and instead opt for more descriptive names that reflect the image's content (e.g., \"product-red-large.jpg\").\n\n* **Page Speed:** Optimize your page speed by following the image optimization best practices mentioned above.  Page speed is a significant ranking factor for search engines.  Using Picturefill to serve appropriately sized images directly contributes to improved page speed.\n\n* **Image Sitemaps (Optional):** For large sites with many images, consider creating an image sitemap to help search engines discover and index your images more efficiently.\n\nBy implementing these best practices, you can leverage Picturefill to create highly performant, accessible, and SEO-friendly websites.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Polyfill:** A piece of code (usually JavaScript) that provides functionality not natively supported by a browser.  Picturefill is a polyfill for the `<picture>` element.\n\n* **`<picture>` element:** An HTML element that allows you to specify multiple image sources with associated conditions (media queries, resolutions, etc.).\n\n* **`srcset` attribute:** An attribute within the `<source>` element that specifies a list of image candidates, each with a descriptor indicating its size or resolution.\n\n* **`media` attribute:** An attribute within the `<source>` element that specifies a CSS media query defining the conditions under which a particular image source should be used.\n\n* **`sizes` attribute:** An attribute that specifies the intended size of the image in the context of the layout.  This helps Picturefill choose the most appropriate image from the `srcset`.\n\n* **Device Pixel Ratio (DPR):** The ratio of pixels on a screen to the number of reference pixels used to render the image. A DPR of 2 indicates a \"Retina\" display where each physical pixel is represented by four screen pixels.\n\n* **Art Direction:**  The practice of using different images for different screen sizes or conditions, allowing for customized visual presentation based on the context.\n\n* **Lazy Loading:** A technique that delays loading of images until they are about to be visible in the viewport, improving initial page load times.\n\n* **Descriptor (in `srcset`):**  A value indicating an image's size or resolution (e.g., `1x`, `2x`, `300w`, `500w`).\n\n* **WebP:** A modern image format that often provides better compression than JPEG or PNG, resulting in smaller file sizes and faster loading times.\n\n\n\n### Further Resources and Learning Materials\n\n* **Picturefill Official Website:**  (Insert the actual URL here.  This should link to the official project website.)  This is the primary source of information on Picturefill, including the latest documentation, release notes, and support resources.\n\n* **MDN Web Docs (`<picture>` element):** (Insert the MDN URL for the `<picture>` element documentation here.)  This provides background information and browser compatibility details on the native `<picture>` element.\n\n* **Responsive Images on MDN:** (Insert the MDN URL for responsive images documentation here.)  More comprehensive background on responsive images and the technologies used.\n\n* **Relevant articles and tutorials:** A search for \"responsive images\" or \"Picturefill tutorial\" on sites like Google, MDN Web Docs, or other relevant web development resources will provide a wealth of information and how-tos.\n\n\n### Changelog\n\n(This section should be replaced with the actual changelog for the specific version of Picturefill being documented.  The changelog should provide a chronological list of changes, bug fixes, new features, and other significant updates across different releases.)  For example:\n\n**Version X.Y.Z (Date):**\n\n* Added support for AVIF format.\n* Fixed a bug related to media query parsing.\n* Improved performance of image selection.\n\n**Version X.Y.Z-1 (Date):**\n\n* Initial release.\n\n\nRemember to keep this changelog updated with each new version of Picturefill.\n\n","srcMarkdownNoYaml":"\n## Introduction to Picturefill\n\n### What is Picturefill?\n\nPicturefill is a JavaScript polyfill that provides support for the `<picture>` element in browsers that don't natively understand it.  The `<picture>` element allows you to serve different images based on various criteria like screen resolution, device pixel ratio, or even specific media queries. This ensures that the most appropriate image is displayed for each user, optimizing performance and visual quality.  Picturefill essentially emulates the `<picture>` element's functionality, making responsive images a reality across a wider range of browsers.\n\n### Why use Picturefill?\n\nUsing Picturefill offers several key advantages:\n\n* **Responsive Images:** Serve different image sizes optimized for various screen resolutions and devices, improving performance and visual quality. Smaller images load faster on smaller screens, while higher-resolution images are delivered to devices that can handle them.\n\n* **Improved Performance:** By delivering only the necessary image size, Picturefill reduces bandwidth consumption and page load times, improving the user experience, especially on mobile devices.\n\n* **Backward Compatibility:** Picturefill bridges the gap between modern browsers that support `<picture>` and older browsers that don't, ensuring consistent image display across all supported platforms.\n\n* **Simplified Implementation:** It simplifies the process of implementing responsive images, allowing you to manage multiple image sources in a structured and maintainable way through the `<picture>` element's syntax.\n\n* **Flexibility:**  Picturefill supports various criteria for choosing the correct image, including `srcset`, `media` attributes, and even custom selectors.\n\n\n### Browser Support\n\nWhile modern browsers have excellent native support for the `<picture>` element, Picturefill ensures functionality for older browsers.  Therefore, direct browser support for the `<picture>` element is less critical as Picturefill handles the fallback.  However, if Picturefill is not needed, relying on native browser support is always preferable for optimal performance. Check the Picturefill project's website or relevant release notes for the most up-to-date browser compatibility information.\n\n\n### Installation and Setup\n\nPicturefill can be included in your project in several ways:\n\n**1. Using a CDN:** The easiest way is to include Picturefill via a CDN like jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/picturefill\"></script>\n```\n\nThis will automatically load Picturefill on page load.\n\n**2. Downloading and Including Locally:** Download the Picturefill library from its official repository (refer to the project's website for the latest version) and include it in your project's HTML file:\n\n```html\n<script src=\"/path/to/picturefill.min.js\"></script> <!-- Replace with your actual path -->\n```\n\n**3. Using a Package Manager (e.g., npm or yarn):** If you are using a package manager, you can install Picturefill and import it into your project.  The specific commands will depend on your chosen package manager, but generally follow this pattern:\n\n```bash\nnpm install picturefill\n# or\nyarn add picturefill\n```\n\nThen import it into your JavaScript code as needed. Note that this method requires setting up a build process if you are not using a module bundler.\n\nAfter including Picturefill, you can use `<picture>` elements in your HTML as usual, and Picturefill will handle the image selection process. No additional JavaScript code is typically required for basic functionality.\n\n\n## Core Concepts\n\n### The `<picture>` element\n\nThe `<picture>` element is the foundation of responsive images using Picturefill.  It acts as a container for multiple `<source>` elements, each specifying an image source and optional conditions.  The browser (or Picturefill) selects the most appropriate `<source>` based on the provided criteria, and if no suitable `<source>` is found, it falls back to the `<img>` element within the `<picture>`.\n\nA basic example:\n\n```html\n<picture>\n  <source srcset=\"image-highres.jpg\" media=\"(min-width: 1024px)\">\n  <source srcset=\"image-medres.jpg\" media=\"(min-width: 600px)\">\n  <img src=\"image-lowres.jpg\" alt=\"My Image\">\n</picture>\n```\n\nIn this example, the browser will choose `image-highres.jpg` for screens wider than 1024px, `image-medres.jpg` for screens wider than 600px, and `image-lowres.jpg` as a fallback for smaller screens.\n\n\n### Source Sets (`srcset` attribute)\n\nThe `srcset` attribute within each `<source>` element specifies a list of image candidates, along with their associated descriptors.  These descriptors typically indicate image size, allowing the browser to select the most appropriate image based on the device's pixel density or screen resolution.  Descriptors are separated by commas.  A common descriptor is the `x` descriptor which describes the image resolution (e.g., `image.jpg 2x`).\n\nExample:\n\n```html\n<source srcset=\"image-small.jpg, image-large.jpg 2x\" type=\"image/jpeg\">\n```\n\nThis provides `image-small.jpg` as an option and `image-large.jpg` as a 2x resolution option. Picturefill will select the most suitable one based on the device pixel ratio and other factors (like `sizes` attribute).  Note the `type` attribute specifies the image format; it helps the browser pre-select candidates and isn't strictly required by Picturefill but is best practice.\n\n\n### Media Queries (`media` attribute)\n\nThe `media` attribute in each `<source>` element allows you to specify conditions under which a particular image source should be selected. This uses CSS media query syntax.  This lets you select different images based on screen width, device orientation, pixel density, or other relevant factors.\n\nExample:\n\n```html\n<source srcset=\"image-wide.jpg\" media=\"(min-aspect-ratio: 16/9)\">\n<source srcset=\"image-tall.jpg\" media=\"(max-aspect-ratio: 9/16)\">\n```\n\nThis example chooses `image-wide.jpg` for screens with an aspect ratio of 16:9 or wider and `image-tall.jpg` for screens with an aspect ratio of 9:16 or narrower.\n\n\n### Sizes Attribute (`sizes` attribute)\n\nThe `sizes` attribute, used within `<source>` and `<img>` elements, provides a more precise way to control which image is selected by specifying the rendered image size in different contexts.  It uses CSS width units (`px`, `vw`, `vh`, etc.) and allows for more effective selection of images based on their rendered size on the page. This is crucial for avoiding unnecessarily large downloads.\n\nExample:\n\n```html\n<img srcset=\"image-small.jpg, image-medium.jpg 2x\" sizes=\"(max-width: 600px) 50vw, 100vw\" src=\"image-small.jpg\" alt=\"My Image\">\n```\n\nThis tells Picturefill to use a width of 50vw (50% of the viewport width) for screens with a maximum width of 600px and a width of 100vw (full viewport width) for larger screens.  This helps Picturefill select the correct resolution even if the picture's dimensions change in response to the viewport changes.\n\n\n### Art Direction\n\nArt direction refers to serving completely different images based on the screen size or conditions. This might involve using different compositions, crops, or even entirely different images altogether for different contexts. This allows optimal image presentation for various screen sizes.  The `<picture>` element and its attributes empower effective art direction for responsive design.  You can use media queries or other selection criteria in `<source>` elements to achieve different imagery. For example, you might serve a landscape image on large screens and a portrait version on smaller screens, significantly improving the visual appeal.\n\n\n## Using Picturefill\n\n### Basic Implementation\n\nThe most basic implementation involves simply including Picturefill in your HTML and using `<picture>` elements.  Picturefill will automatically handle the selection of the appropriate source image.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Picturefill Example</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/picturefill\"></script> </head>\n<body>\n\n<picture>\n  <source srcset=\"image-large.jpg\" media=\"(min-width: 768px)\">\n  <img src=\"image-small.jpg\" alt=\"My Image\">\n</picture>\n\n</body>\n</html>\n```\n\nThis code will display `image-large.jpg` on screens wider than 768 pixels and `image-small.jpg` otherwise.  Remember to replace `\"image-large.jpg\"` and `\"image-small.jpg\"` with your actual image file paths.\n\n\n### Working with Different Image Formats\n\nPicturefill handles different image formats seamlessly.  You can specify the image format using the `type` attribute within the `<source>` element.  This helps browsers pre-select appropriate candidates, improving performance.\n\n```html\n<picture>\n  <source srcset=\"image.webp\" type=\"image/webp\">\n  <source srcset=\"image.jpg\" type=\"image/jpeg\">\n  <img src=\"image.png\" alt=\"My Image\">\n</picture>\n```\n\nThis example will prioritize WebP if the browser supports it, falling back to JPEG and then PNG.\n\n\n### Responsive Images\n\nPicturefill's core strength lies in its ability to create responsive images. By combining `srcset` and `sizes` attributes with media queries, you can serve appropriately sized images for various screen sizes and pixel densities.\n\n```html\n<picture>\n  <source srcset=\"image-small.jpg 1x, image-small@2x.jpg 2x\" sizes=\"(max-width: 500px) 100vw, 500px\" media=\"(max-width: 500px)\">\n  <source srcset=\"image-medium.jpg 1x, image-medium@2x.jpg 2x\" sizes=\"(max-width: 1000px) 50vw, 500px\" media=\"(min-width: 501px) and (max-width: 1000px)\">\n  <source srcset=\"image-large.jpg 1x, image-large@2x.jpg 2x\" sizes=\"500px\" media=\"(min-width: 1001px)\">\n  <img src=\"image-small.jpg\" alt=\"My Image\">\n</picture>\n```\n\nThis example serves different images and sizes based on screen width, demonstrating sophisticated responsive image handling.\n\n\n### Handling Retina Displays\n\nPicturefill automatically handles Retina displays (and other high-density displays) by using the `srcset` attribute with `x` descriptors.  It selects images with appropriate pixel densities.\n\n```html\n<img srcset=\"image.jpg, image@2x.jpg 2x\" src=\"image.jpg\" alt=\"My Image\">\n```\n\nThis code will select `image@2x.jpg` for devices with a pixel density of 2x or higher.\n\n\n### Advanced Usage with JavaScript API\n\nPicturefill provides a JavaScript API, although it's generally not needed for basic usage. The API allows for more control over the polyfill's behavior, including triggering re-evaluation of image selections or debugging.  Consult the Picturefill documentation for detailed information on the API methods and their parameters.  Generally, including Picturefill via a CDN or script tag is sufficient for most use cases.  The API is primarily for advanced scenarios requiring programmatic control over image selection.\n\n\n## Configuration Options\n\n### Customizing Picturefill Behavior\n\nWhile Picturefill generally works seamlessly out-of-the-box, you can customize its behavior using configuration options. These options allow you to fine-tune the polyfill's image selection process and adapt it to your specific needs.  Configuration is primarily done by passing a configuration object to the `picturefill` function (although this is generally only necessary in advanced scenarios where you need more control beyond simply including the script).\n\n### Available Options and Their Effects\n\nPicturefill's configuration options are generally accessed through a JavaScript object passed as an argument.  The most commonly used options are detailed below; consult the official Picturefill documentation for the most up-to-date and complete list.\n\n* **`w` (width):** This option allows you to override the default width calculation for responsive images.  It might be useful in scenarios where accurate image width calculation is challenging.\n\n* **`h` (height):** Similar to `w`, this option allows overriding the default height calculation. This is less commonly used than the `w` option.\n\n* **`dpr` (device pixel ratio):** This option allows forcing a specific device pixel ratio, useful for testing or debugging purposes.\n\n* **`lazyLoad`:** This boolean option controls whether Picturefill should handle lazy loading of images.  The default is often `true` (though consult your version's documentation to confirm), enabling lazy loading and improving performance. Setting this to `false` disables lazy loading.\n\n* **`slowRespond`:** This boolean option adds a small delay before performing image selection.  Useful for scenarios where there is interference with other JavaScript libraries.\n\n* **`allowUpscale`:** This boolean option, when set to `false`, prevents Picturefill from selecting higher-resolution images than the device's native pixel density. This is useful to enforce only selecting appropriate images.  The default behavior typically allows upscaling.\n\n* **`debug`:** Setting this option to `true` enables more detailed logging in the browser's console, facilitating troubleshooting.\n\nNote that the availability and behavior of these options might vary depending on the Picturefill version.\n\n\n### Example Configurations\n\nHere are examples demonstrating the usage of some configuration options:\n\n**Example 1: Disabling Upscaling:**\n\n```javascript\npicturefill({ allowUpscale: false });\n```\n\nThis configures Picturefill to not upscale images beyond the device's pixel density.\n\n**Example 2: Enabling Debugging:**\n\n```javascript\npicturefill({ debug: true });\n```\n\nThis enables detailed logging to the browser's console.\n\n**Example 3: Customizing Width Calculation:**\n\n```javascript\npicturefill({ w: 800 }); // Override width calculation to 800 pixels.\n```\n\nThis example forces the width calculation to 800 pixels, regardless of the actual viewport width. Note that this overrides other width calculations.  Use with caution!\n\nRemember that the configuration object is passed to the `picturefill` function.  If you are simply including Picturefill via a script tag and not using its API explicitly, you would generally not need these configuration options, as sensible defaults are typically used.  The advanced configuration is for fine-tuning when specific control over image selection is needed.\n\n\n## Troubleshooting and Debugging\n\n### Common Issues and Solutions\n\nSeveral common issues can arise when using Picturefill.  Here are some troubleshooting steps:\n\n* **Images not loading correctly:**  Double-check your image paths, ensuring they are correct and accessible. Verify that the `srcset` attribute contains valid image URLs and appropriate descriptors (like `1x`, `2x`). Make sure the fallback `<img>` tag within the `<picture>` element has a valid `src` attribute.\n\n\n* **Incorrect image selection:** If the wrong image is displayed, review your media queries in the `media` attribute of your `<source>` elements. Ensure that your queries accurately target the desired screen sizes and conditions. Carefully examine your `sizes` attribute to ensure it accurately reflects the intended rendered image dimensions.\n\n\n* **Picturefill not functioning at all:**  Confirm that you have correctly included the Picturefill library in your HTML file (either via CDN or local inclusion).  Inspect your browser's developer console for any JavaScript errors that might indicate problems with Picturefill's loading or execution. Check that there are no conflicting JavaScript libraries that might be interfering with Picturefill's functionality.\n\n\n* **Performance issues:** If performance is slow, consider optimizing your images (reducing their file size without sacrificing quality). Use appropriate image formats (WebP is generally preferred for good quality and compression) and ensure your `srcset` and `sizes` attributes are optimized to provide only necessary image sizes.  Minimizing the number of image candidates in `srcset` can also help.  Using lazy loading, if supported by your Picturefill version, is a significant performance optimization.\n\n\n### Debugging Techniques\n\nSeveral techniques can help debug Picturefill-related issues:\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the network requests and check which images are being loaded. This helps verify if the correct images are selected based on your configurations.\n\n\n* **Console Logging:** Use `console.log()` statements in your JavaScript code to print relevant information to the browser's console.  For example, you might log the viewport dimensions or the selected image URL to track the polyfill's behavior. The `debug` option of Picturefill (if supported by the version used) further enhances debugging by providing detailed logging.\n\n\n* **Simplify Your Markup:** To isolate problems, create a simplified version of your `<picture>` element with minimal `source` elements.  This makes it easier to pinpoint the source of any errors.\n\n\n* **Test with Different Browsers:**  Test your implementation on various browsers and devices to ensure compatibility and identify any browser-specific issues.\n\n\n### Error Handling\n\nPicturefill itself doesn't throw many explicit JavaScript errors. Instead, problems often manifest as incorrect image selection or images not loading.  The primary error-handling strategy involves careful testing and utilizing debugging techniques as described above.  The browser's developer console is your primary tool for detecting errors and identifying the root cause.\n\nIf using the advanced JavaScript API, handle potential errors within your custom JavaScript code using standard JavaScript `try...catch` blocks, if needed.  The Picturefill library itself rarely produces direct errors that need to be handled through its API unless you're using the API to directly interact with the polyfill's functions.\n\n\n## Advanced Techniques\n\n### Integrating with Build Systems\n\nIntegrating Picturefill into a build system (like Webpack, Parcel, Rollup, etc.) typically involves installing it as a package and importing it into your JavaScript code.  The exact steps vary depending on your specific build system, but the general approach is:\n\n1. **Installation:** Install Picturefill using your build system's package manager (npm or yarn).\n\n   ```bash\n   npm install picturefill\n   # or\n   yarn add picturefill\n   ```\n\n2. **Import/Require:**  Import or require the Picturefill library in your JavaScript files.  The syntax depends on your module system (e.g., ES modules, CommonJS).\n\n   * **ES Modules:**\n     ```javascript\n     import picturefill from 'picturefill';\n     ```\n\n   * **CommonJS:**\n     ```javascript\n     const picturefill = require('picturefill');\n     ```\n\n3. **Configuration (Optional):** If needed, pass a configuration object to the `picturefill` function (see the Configuration Options section).\n\n4. **Build Process:** Ensure your build system includes the Picturefill library in your final bundled JavaScript output.  This usually involves appropriate configuration in your build system's configuration file.\n\nNote:  Some build systems may automatically handle the inclusion of Picturefill if you reference it directly in your HTML. However, the above approach ensures better control and often leads to better optimized bundles, especially in larger projects.\n\n\n### Performance Optimization\n\nOptimizing Picturefill's performance centers around efficient image loading and selection. Key strategies include:\n\n* **Image Optimization:** Reduce the file size of your images without significant quality loss using tools like ImageOptim or TinyPNG.  Using appropriate image formats like WebP can significantly reduce file sizes.\n\n* **Efficient `srcset`:** Carefully manage the number of image candidates in your `srcset` attribute.  Too many candidates increase processing time.  Focus on providing only essential sizes and resolutions.\n\n* **`sizes` Attribute:** Use the `sizes` attribute effectively to precisely define the rendered image dimensions for different viewport sizes. This allows Picturefill to make more accurate selections and avoid unnecessary downloads.\n\n* **Lazy Loading:** If supported by your Picturefill version, enable lazy loading to defer image loading until they are visible in the viewport.  This improves initial page load performance.\n\n* **Appropriate Media Queries:** Use media queries judiciously.  Avoid overly granular or unnecessary media queries, which can increase the time spent on image selection.\n\n\n### Using Picturefill with Frameworks (React, Angular, Vue)\n\nPicturefill's integration with popular frameworks like React, Angular, and Vue is generally straightforward.  The core principle is including Picturefill as described in the \"Integrating with Build Systems\" section, then using the `<picture>` element within your framework's component structure as usual.\n\n* **React:**  Use the `<picture>` element directly within your JSX code.\n\n* **Angular:** Use the `<picture>` element in your Angular templates.\n\n* **Vue:** Use the `<picture>` element in your Vue templates.\n\nIn all cases, ensure Picturefill is correctly included and built into your project as part of your framework's build process.  The framework itself generally does not require special integration with Picturefill, beyond standard JavaScript inclusion practices within the framework's environment.\n\n\n### Custom Element Support\n\nPicturefill doesn't directly support custom elements in a special way.  You can use `<picture>` elements within custom elements as you would normally use them within standard HTML.  Picturefill's functionality remains unchanged.  The only consideration is ensuring Picturefill is properly loaded and available in the scope where your custom elements are defined and used.\n\n\n## Best Practices\n\n### Image Optimization for Web Performance\n\nOptimizing images is crucial for web performance, and Picturefill complements these efforts.  Follow these best practices:\n\n* **Choose the Right Format:** Use modern image formats like WebP for superior compression and quality.  If WebP isn't universally supported, provide appropriate fallbacks (like AVIF or JPEG) using the `<source>` element's `type` attribute.\n\n* **Compress Images:** Use image optimization tools to reduce file sizes without significant quality loss.  Tools like ImageOptim, TinyPNG, or online compression services can significantly decrease image weights.\n\n* **Appropriate Resolutions:**  Don't provide unnecessarily high-resolution images.  Use the `srcset` attribute with appropriate `x` descriptors (e.g., 1x, 2x) to serve images optimized for different pixel densities. Avoid overly large images that are scaled down by the browser, as this wastes resources.\n\n* **Responsive Images:** Leverage the `sizes` attribute effectively to control the rendered image dimensions based on the viewport size.  This ensures that only the necessary image sizes are downloaded, optimizing bandwidth usage.\n\n* **Lazy Loading:** Implement lazy loading to defer the loading of images until they are visible in the viewport.  This significantly improves the initial page load time, particularly beneficial for pages with many images. (Check if your Picturefill version supports lazy loading; this may require configuration).\n\n\n### Accessibility Considerations\n\nAccessibility is paramount.  Here's how to ensure your images are accessible when using Picturefill:\n\n* **`alt` Attribute:** Always provide meaningful `alt` text for your `<img>` elements.  This text describes the image's content for screen readers and users who cannot see the image.  Accurate and concise `alt` text is crucial for accessibility.\n\n* **Semantic HTML:** Use semantic HTML5 elements like `<figure>` and `<figcaption>` to structure images appropriately. This improves both accessibility and SEO.\n\n* **Color Contrast:**  Ensure sufficient color contrast between your images and their background.  This improves visibility for users with visual impairments.\n\n* **Keyboard Navigation:** Test your website’s accessibility with keyboard navigation to ensure users can interact with images effectively.  Images should be reachable and understandable through keyboard navigation.\n\n\n### SEO Best Practices\n\nOptimizing images for search engines improves your website's visibility.  Here's how to use Picturefill effectively for SEO:\n\n* **Structured Data Markup:** Consider using schema.org structured data markup to provide search engines with more context about your images.\n\n* **Image Alt Text:** Use descriptive and relevant `alt` text that accurately reflects the image content.  This helps search engines understand your images and improves their ranking in image search results.\n\n* **File Names:** Use descriptive file names for your images.  Avoid generic names like \"image1.jpg\" and instead opt for more descriptive names that reflect the image's content (e.g., \"product-red-large.jpg\").\n\n* **Page Speed:** Optimize your page speed by following the image optimization best practices mentioned above.  Page speed is a significant ranking factor for search engines.  Using Picturefill to serve appropriately sized images directly contributes to improved page speed.\n\n* **Image Sitemaps (Optional):** For large sites with many images, consider creating an image sitemap to help search engines discover and index your images more efficiently.\n\nBy implementing these best practices, you can leverage Picturefill to create highly performant, accessible, and SEO-friendly websites.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Polyfill:** A piece of code (usually JavaScript) that provides functionality not natively supported by a browser.  Picturefill is a polyfill for the `<picture>` element.\n\n* **`<picture>` element:** An HTML element that allows you to specify multiple image sources with associated conditions (media queries, resolutions, etc.).\n\n* **`srcset` attribute:** An attribute within the `<source>` element that specifies a list of image candidates, each with a descriptor indicating its size or resolution.\n\n* **`media` attribute:** An attribute within the `<source>` element that specifies a CSS media query defining the conditions under which a particular image source should be used.\n\n* **`sizes` attribute:** An attribute that specifies the intended size of the image in the context of the layout.  This helps Picturefill choose the most appropriate image from the `srcset`.\n\n* **Device Pixel Ratio (DPR):** The ratio of pixels on a screen to the number of reference pixels used to render the image. A DPR of 2 indicates a \"Retina\" display where each physical pixel is represented by four screen pixels.\n\n* **Art Direction:**  The practice of using different images for different screen sizes or conditions, allowing for customized visual presentation based on the context.\n\n* **Lazy Loading:** A technique that delays loading of images until they are about to be visible in the viewport, improving initial page load times.\n\n* **Descriptor (in `srcset`):**  A value indicating an image's size or resolution (e.g., `1x`, `2x`, `300w`, `500w`).\n\n* **WebP:** A modern image format that often provides better compression than JPEG or PNG, resulting in smaller file sizes and faster loading times.\n\n\n\n### Further Resources and Learning Materials\n\n* **Picturefill Official Website:**  (Insert the actual URL here.  This should link to the official project website.)  This is the primary source of information on Picturefill, including the latest documentation, release notes, and support resources.\n\n* **MDN Web Docs (`<picture>` element):** (Insert the MDN URL for the `<picture>` element documentation here.)  This provides background information and browser compatibility details on the native `<picture>` element.\n\n* **Responsive Images on MDN:** (Insert the MDN URL for responsive images documentation here.)  More comprehensive background on responsive images and the technologies used.\n\n* **Relevant articles and tutorials:** A search for \"responsive images\" or \"Picturefill tutorial\" on sites like Google, MDN Web Docs, or other relevant web development resources will provide a wealth of information and how-tos.\n\n\n### Changelog\n\n(This section should be replaced with the actual changelog for the specific version of Picturefill being documented.  The changelog should provide a chronological list of changes, bug fixes, new features, and other significant updates across different releases.)  For example:\n\n**Version X.Y.Z (Date):**\n\n* Added support for AVIF format.\n* Fixed a bug related to media query parsing.\n* Improved performance of image selection.\n\n**Version X.Y.Z-1 (Date):**\n\n* Initial release.\n\n\nRemember to keep this changelog updated with each new version of Picturefill.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"picturefill.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"Picturefill - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}