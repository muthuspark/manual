{"title":"imagesLoaded - Documentation","markdown":{"yaml":{"title":"imagesLoaded - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\n\n#### What is imagesLoaded?\n\nimagesLoaded is a small, fast, and robust JavaScript library that provides a callback mechanism once all images within a given container have fully loaded.  This is particularly useful for situations where you need to perform actions (like resizing a layout, revealing hidden content, or triggering animations) that depend on image dimensions being available.  Unlike simply checking for `onload` on each image, imagesLoaded accounts for images that fail to load and handles image caching effectively.\n\n#### Why use imagesLoaded?\n\nUsing imagesLoaded offers several key advantages:\n\n* **Reliability:**  It accurately detects when *all* images, including those loaded from cache, are ready.  Simple `onload` event listeners can be unreliable, particularly with cached images.\n* **Efficiency:**  It's lightweight and performs its work efficiently without significantly impacting page performance.\n* **Error Handling:** It gracefully handles images that fail to load, preventing your application from hanging or producing unexpected results.\n* **Simplicity:**  The API is easy to understand and use, requiring minimal code to integrate into your project.\n* **Flexibility:**  It provides options for handling individual image load events and progress tracking.\n\n\n#### Installation and Setup\n\nimagesLoaded is available via npm and yarn.  You can also include it directly via a CDN.\n\n**Using npm or yarn:**\n\n```bash\nnpm install imagesloaded\n# or\nyarn add imagesloaded\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport imagesLoaded from 'imagesloaded';\n```\n\n**Using a CDN (e.g., jsDelivr):**\n\nInclude the following `<script>` tag in the `<head>` of your HTML file:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/imagesloaded@5/imagesloaded.pkgd.min.js\"></script>\n```\n\n#### Basic Usage Example\n\nThis example shows how to use imagesLoaded to wait for all images within a container with the ID \"my-images\" to load before displaying a message.\n\n```javascript\nimport imagesLoaded from 'imagesloaded';\n\nconst imageContainer = document.getElementById('my-images');\n\nimagesLoaded(imageContainer, function() {\n  console.log('All images loaded!');\n  // Perform actions that depend on image dimensions here, e.g.,\n  document.getElementById('loading-message').style.display = 'none';\n});\n```\n\nRemember to include the `imagesloaded.js` file (either via npm/yarn or CDN) *before* this JavaScript code in your HTML.  This example utilizes an element with the ID \"loading-message\" that will be hidden after all images have loaded.  Replace this with your own logic as needed.  The `imageContainer` can be any DOM element containing images.  It doesn't have to be a `<div>`.  It could even be the `<body>` element itself if you want to wait for all images on the page to load.\n\n\n\n\n## Core Functionality\n\n### Loading Images\n\nThe core functionality of imagesLoaded centers around the `imagesLoaded` function.  This function takes a DOM element as its first argument (the container element containing images) and a callback function as its second. The callback function is executed only after all images within the container have fully loaded.\n\nThe `imagesLoaded` function intelligently handles various scenarios:\n\n* **Cached Images:**  imagesLoaded correctly identifies images already present in the browser's cache and avoids unnecessary re-downloads.  The callback will still fire once these cached images are considered \"loaded\".\n* **Failed Images:** If an image fails to load (e.g., due to a broken link), imagesLoaded will still trigger its callback after a reasonable timeout. You can handle failed images using the `fail` event (detailed below).\n* **Different Image Types:** The library automatically handles various image types (JPEG, PNG, GIF, SVG, etc.) without requiring special configuration.\n\n\n### Event Handling (`progress`, `done`, `fail`)\n\nThe `imagesLoaded` function, while primarily using a callback, also offers a more flexible approach using events. This allows for finer-grained control over the loading process.\n\nInstead of directly passing a callback function to `imagesLoaded`, you can create an instance of the `imagesLoaded` class and then listen for events. This provides more sophisticated control over event handling.  The events emitted are:\n\n* **`progress`:** This event is fired for each image as it loads. The event object contains information about the loaded image, including its `img` element and its `isLoaded` status. This allows you to track the progress of the image loading process.\n\n\n* **`done`:** This event is triggered only after *all* images within the specified container have successfully loaded.\n\n\n* **`fail`:** This event is triggered if one or more images fail to load.  The event data provides information about which images failed.\n\nHere's an example using the event-based approach:\n\n```javascript\nimport imagesLoaded from 'imagesloaded';\n\nconst imageContainer = document.getElementById('my-images');\n\nconst instance = imagesLoaded(imageContainer);\n\ninstance.on( 'progress', function( instance, image ) {\n  console.log( 'image loaded:', image.img );\n});\n\ninstance.on( 'done', function() {\n  console.log( 'All images loaded!' );\n});\n\ninstance.on( 'fail', function( instance, image ) {\n  console.log( 'Image failed to load:', image.img.src);\n});\n```\n\n\n### Handling Different Image Types\n\nimagesLoaded inherently supports various image formats without any additional configuration.  It correctly identifies and handles the loading of JPEG, PNG, GIF, SVG, and other common image types.  You don't need to perform any special checks or pre-processing for different image formats.\n\n\n### Debugging and Troubleshooting\n\n* **Check your image paths:** Ensure all image URLs are correct and accessible.  Broken links are a common cause of issues.\n* **Inspect the console:** Use your browser's developer tools (usually accessed by pressing F12) to check the console for error messages.  imagesLoaded will generally log errors to the console if images fail to load.\n* **Verify DOM element:** Confirm that the DOM element you are passing to `imagesLoaded` actually exists and contains the images you expect.  Inspect it in your browser's developer tools to ensure it's properly structured.\n* **Check for conflicts:** Ensure that there are no conflicts with other JavaScript libraries that might interfere with imagesLoaded's functionality.\n* **Check the network tab:** Use your browser's developer tools' Network tab to check if the images are being requested and their loading status. This helps to pinpoint whether the problem is with the image itself or the network connection.\n* **Simplify your code:**  If you are using a complex setup, try simplifying your code to isolate the problem.  A minimal test case can help to quickly diagnose the issue.\n\nIf you are still experiencing issues, please provide details including your code, the browser you are using, and the specific error message (if any) for more targeted assistance.\n\n\n\n\n## Advanced Usage\n\n### Using imagesLoaded with Frameworks (React, Angular, Vue)\n\nWhile imagesLoaded is a vanilla JavaScript library, integrating it into popular frameworks like React, Angular, and Vue is straightforward.  The core principle remains the same:  you need to select the container element and then use the `imagesLoaded` function or event system.  However, the specifics of how you select the element and handle the callback will depend on the framework.\n\n\n**React:**\n\n```jsx\nimport React, { useEffect, useState } from 'react';\nimport imagesLoaded from 'imagesloaded';\n\nfunction MyComponent() {\n  const [imagesLoadedStatus, setImagesLoadedStatus] = useState(false);\n  const imageContainerRef = useRef(null);\n\n  useEffect(() => {\n    if (imageContainerRef.current) {\n      imagesLoaded(imageContainerRef.current).on('done', () => {\n        setImagesLoadedStatus(true);\n      });\n    }\n  }, []);\n\n  return (\n    <div ref={imageContainerRef}>\n      {/* Your images here */}\n      {imagesLoadedStatus && <p>All images loaded!</p>}\n    </div>\n  );\n}\n```\n\n**Angular:**\n\nYou can use `ViewChild` or `ElementRef` to access the container element within your Angular component, and then call `imagesLoaded` within `ngOnInit` or a similar lifecycle hook.\n\n**Vue:**\n\nYou can use a `ref` to access the container element in your Vue template and then call `imagesLoaded` within a `mounted` lifecycle hook or a watcher.\n\n\nIn all these framework examples, the crucial part is ensuring that the `imagesLoaded` call is made *after* the DOM element containing the images has been rendered.  Framework-specific lifecycle hooks or asynchronous operations (like `useEffect` in React) are essential for proper timing.\n\n\n### Customizing the Loading Process\n\nWhile imagesLoaded automatically handles most scenarios, you can customize certain aspects:\n\n* **Timeout:**  If you need to adjust the timeout period for images that fail to load, you can do so in newer versions (although the default should suffice in most cases). Refer to the updated documentation for details on adjusting the timeout.\n\n* **Debugging:**  Enabling debugging can provide more verbose logging for troubleshooting purposes, again this functionality might depend on version and isn't always available.  Check the latest documentation for any debugging flags or options.\n\n\n### Working with Background Images\n\nimagesLoaded primarily focuses on images that are directly part of the DOM (`<img>` tags). To handle background images, you'll need a different approach, as imagesLoaded does not directly detect the loading of background images.  Consider using the `onload` event listener on a hidden `<img>` tag that points to the background image URL to track when the background image has fully loaded.\n\n\n### Handling Large Numbers of Images\n\nFor exceptionally large numbers of images, optimizing the loading process becomes crucial. Consider these strategies:\n\n* **Lazy Loading:**  Only load images that are currently visible in the viewport.  Libraries or techniques that support lazy loading images can improve performance significantly.\n* **Image Optimization:** Compress images to reduce their file sizes.  Tools are available online to compress images without significantly impacting visual quality.\n* **Prioritization:** Load higher-priority images first.  This might mean showing smaller thumbnails initially and then loading larger versions when needed.\n\n\n### Performance Optimization\n\nBeyond the strategies already mentioned for large numbers of images, other general performance improvements apply to imagesLoaded usage:\n\n* **Minimize DOM Manipulation:**  Avoid unnecessary DOM modifications during the image loading process.  Group your actions that depend on image loading to occur all at once when the `done` event fires.\n* **Use the Event API:** Using the `progress`, `done`, and `fail` events instead of a simple callback function allows more efficient control and minimizes potential overhead.\n* **Avoid unnecessary calls:** Ensure that you are not calling imagesLoaded more often than necessary. Use caching mechanisms in your application logic to prevent duplicate calls if possible.\n\n\nRemember to profile your application to identify specific performance bottlenecks.  Using browser developer tools is key to pinpointing areas for optimization.\n\n\n\n\n## API Reference\n\n### `imagesLoaded(elements, options)`\n\nThe core function of the imagesLoaded library. It takes two arguments:\n\n* **`elements`:**  This is the first and required argument. It can be one of the following:\n    * **A DOM element:** A single element containing images (e.g., a `<div>`).  imagesLoaded will then check for all images within that element.\n    * **An array of DOM elements:** An array of elements, each of which may contain images.\n    * **A selector string:** A CSS selector string (e.g., `'.my-images'`) to select multiple elements containing images.  This uses `document.querySelectorAll` under the hood.\n\n* **`options` (optional):** An object containing optional settings to customize the behavior of imagesLoaded.  Details on the `options` object are provided in the next section.  If omitted, imagesLoaded uses its default settings.\n\n**Return Value:**\n\nThe function returns an `imagesLoaded` instance. This object allows you to listen for events (`progress`, `done`, `fail`) using the `.on()` method.  In older versions a simple callback was provided as the second argument.  The newer event system provides more flexibility.\n\n**Example:**\n\n```javascript\nimport imagesLoaded from 'imagesloaded';\n\nconst myContainer = document.querySelector('.my-image-container');\nconst imgArray = [document.getElementById('image1'), document.getElementById('image2')];\n\n// Using a single element\nconst instance1 = imagesLoaded( myContainer );\ninstance1.on('done', () => console.log('All images in myContainer loaded!') );\n\n// Using an array of elements\nconst instance2 = imagesLoaded( imgArray );\ninstance2.on('done', () => console.log('All images in the array loaded!') );\n\n// Using a selector string\nconst instance3 = imagesLoaded( '.my-other-images' );\ninstance3.on('done', () => console.log('All images in elements with the class my-other-images loaded!') );\n```\n\n\n### Event Handlers\n\nThe `imagesLoaded` instance returned by the `imagesLoaded()` function exposes the `.on()` method to attach event listeners.  Available events are:\n\n* **`progress`:** Fired for each image as it loads. The callback function receives two arguments: `instance` (the `imagesLoaded` instance itself) and `image` (an object containing information about the loaded image, such as its `img` element and its `isLoaded` status (true/false)).\n\n* **`done`:** Fired after all images within the specified elements have loaded successfully. The callback function receives one argument: `instance` (the `imagesLoaded` instance).\n\n* **`fail`:** Fired if one or more images fail to load. The callback function receives two arguments: `instance` and `image` (an object containing information about the failed image, similar to the `progress` event).\n\n**Example using `.on()`:**\n\n```javascript\nconst instance = imagesLoaded(myContainer);\n\ninstance.on( 'progress', (instance, image) => {\n  console.log(`Image loaded: ${image.img.src}`);\n} );\n\ninstance.on( 'done', () => {\n  console.log('All images loaded!');\n} );\n\ninstance.on( 'fail', (instance, image) => {\n  console.log(`Image failed to load: ${image.img.src}`);\n} );\n```\n\n\n### Options Object\n\nThe `options` object (second argument to `imagesLoaded()`) allows for fine-grained control over the loading process.  While not all options are available in all versions,  and newer options might have replaced older ones, the following are representative:\n\n\n* **`background` (boolean):** (Potentially deprecated or version dependent)  This may have been used in older versions to specifically handle background images.  Check current documentation for newer background image handling strategies.  Currently, background images are not directly supported.\n\n* **`timeout` (number, milliseconds):** (May have limited or no effect in recent versions)  Specifies a timeout in milliseconds after which images that haven't loaded will be considered failed.  Check if this setting is even relevant in the version you use.  Modern implementations likely handle timeouts more intelligently.  This option might not exist in newer versions.\n\n\n\nIt's crucial to consult the most up-to-date documentation for the specific version of imagesLoaded you are using, as the API and available options may have changed over time.  The options listed here are illustrative examples and may not represent all options available in all versions.\n\n\n\n\n## Contributing\n\nWe welcome contributions to imagesLoaded!  Whether you're reporting a bug, suggesting a feature, or submitting a pull request, your involvement is valuable.\n\n### Reporting Issues\n\nBefore creating a new issue, please search existing issues to see if the problem has already been reported.  If you can't find a matching issue, please create a new one providing the following information:\n\n* **Clear and concise title:** Briefly describe the issue.\n* **Detailed description:** Explain the problem you encountered, including steps to reproduce it.\n* **Version of imagesLoaded:** Specify the version you are using.\n* **Browser and operating system:**  Include the browser(s) and operating system(s) where the issue occurs.\n* **Relevant code snippets:**  Provide minimal, reproducible code examples that demonstrate the issue.\n* **Expected behavior:** Describe what you expected to happen.\n* **Actual behavior:** Describe what actually happened.\n\n\n### Submitting Pull Requests\n\nIf you'd like to contribute code, follow these steps:\n\n1. **Fork the repository:** Create a fork of the official imagesLoaded repository on GitHub.\n2. **Create a new branch:**  Create a new branch for your changes.  Use descriptive branch names (e.g., `fix-bug-123`, `feature-new-option`).\n3. **Make your changes:** Implement your changes, following the coding style guide (described below).\n4. **Test your changes thoroughly:**  Ensure your changes work correctly and don't introduce new bugs.\n5. **Commit your changes:** Commit your changes with clear and concise commit messages.\n6. **Push your branch:** Push your branch to your forked repository.\n7. **Create a pull request:**  Create a pull request on the original imagesLoaded repository, clearly describing your changes and their purpose.\n\n\n### Coding Style Guide\n\nTo maintain consistency and readability, please adhere to the following coding style guidelines when contributing to imagesLoaded:\n\n* **Indentation:** Use 2 spaces for indentation.\n* **Line Length:** Keep lines under 80 characters.\n* **Semicolons:** Use semicolons at the end of statements.\n* **Variable Naming:** Use camelCase for variable names.\n* **Comments:** Write clear and concise comments to explain complex logic.\n* **Testing:**  Write unit tests to cover your changes.  Use the existing testing framework to ensure proper coverage.\n\nWe use ESLint to enforce code style.  It's recommended to install ESLint and configure it according to the project's `.eslintrc` file before submitting a pull request.  This will help you identify and fix style issues before they are submitted.  The project maintainers might reject pull requests that do not follow the styling guide.\n\n","srcMarkdownNoYaml":"\n\n\n### Introduction\n\n#### What is imagesLoaded?\n\nimagesLoaded is a small, fast, and robust JavaScript library that provides a callback mechanism once all images within a given container have fully loaded.  This is particularly useful for situations where you need to perform actions (like resizing a layout, revealing hidden content, or triggering animations) that depend on image dimensions being available.  Unlike simply checking for `onload` on each image, imagesLoaded accounts for images that fail to load and handles image caching effectively.\n\n#### Why use imagesLoaded?\n\nUsing imagesLoaded offers several key advantages:\n\n* **Reliability:**  It accurately detects when *all* images, including those loaded from cache, are ready.  Simple `onload` event listeners can be unreliable, particularly with cached images.\n* **Efficiency:**  It's lightweight and performs its work efficiently without significantly impacting page performance.\n* **Error Handling:** It gracefully handles images that fail to load, preventing your application from hanging or producing unexpected results.\n* **Simplicity:**  The API is easy to understand and use, requiring minimal code to integrate into your project.\n* **Flexibility:**  It provides options for handling individual image load events and progress tracking.\n\n\n#### Installation and Setup\n\nimagesLoaded is available via npm and yarn.  You can also include it directly via a CDN.\n\n**Using npm or yarn:**\n\n```bash\nnpm install imagesloaded\n# or\nyarn add imagesloaded\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport imagesLoaded from 'imagesloaded';\n```\n\n**Using a CDN (e.g., jsDelivr):**\n\nInclude the following `<script>` tag in the `<head>` of your HTML file:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/imagesloaded@5/imagesloaded.pkgd.min.js\"></script>\n```\n\n#### Basic Usage Example\n\nThis example shows how to use imagesLoaded to wait for all images within a container with the ID \"my-images\" to load before displaying a message.\n\n```javascript\nimport imagesLoaded from 'imagesloaded';\n\nconst imageContainer = document.getElementById('my-images');\n\nimagesLoaded(imageContainer, function() {\n  console.log('All images loaded!');\n  // Perform actions that depend on image dimensions here, e.g.,\n  document.getElementById('loading-message').style.display = 'none';\n});\n```\n\nRemember to include the `imagesloaded.js` file (either via npm/yarn or CDN) *before* this JavaScript code in your HTML.  This example utilizes an element with the ID \"loading-message\" that will be hidden after all images have loaded.  Replace this with your own logic as needed.  The `imageContainer` can be any DOM element containing images.  It doesn't have to be a `<div>`.  It could even be the `<body>` element itself if you want to wait for all images on the page to load.\n\n\n\n\n## Core Functionality\n\n### Loading Images\n\nThe core functionality of imagesLoaded centers around the `imagesLoaded` function.  This function takes a DOM element as its first argument (the container element containing images) and a callback function as its second. The callback function is executed only after all images within the container have fully loaded.\n\nThe `imagesLoaded` function intelligently handles various scenarios:\n\n* **Cached Images:**  imagesLoaded correctly identifies images already present in the browser's cache and avoids unnecessary re-downloads.  The callback will still fire once these cached images are considered \"loaded\".\n* **Failed Images:** If an image fails to load (e.g., due to a broken link), imagesLoaded will still trigger its callback after a reasonable timeout. You can handle failed images using the `fail` event (detailed below).\n* **Different Image Types:** The library automatically handles various image types (JPEG, PNG, GIF, SVG, etc.) without requiring special configuration.\n\n\n### Event Handling (`progress`, `done`, `fail`)\n\nThe `imagesLoaded` function, while primarily using a callback, also offers a more flexible approach using events. This allows for finer-grained control over the loading process.\n\nInstead of directly passing a callback function to `imagesLoaded`, you can create an instance of the `imagesLoaded` class and then listen for events. This provides more sophisticated control over event handling.  The events emitted are:\n\n* **`progress`:** This event is fired for each image as it loads. The event object contains information about the loaded image, including its `img` element and its `isLoaded` status. This allows you to track the progress of the image loading process.\n\n\n* **`done`:** This event is triggered only after *all* images within the specified container have successfully loaded.\n\n\n* **`fail`:** This event is triggered if one or more images fail to load.  The event data provides information about which images failed.\n\nHere's an example using the event-based approach:\n\n```javascript\nimport imagesLoaded from 'imagesloaded';\n\nconst imageContainer = document.getElementById('my-images');\n\nconst instance = imagesLoaded(imageContainer);\n\ninstance.on( 'progress', function( instance, image ) {\n  console.log( 'image loaded:', image.img );\n});\n\ninstance.on( 'done', function() {\n  console.log( 'All images loaded!' );\n});\n\ninstance.on( 'fail', function( instance, image ) {\n  console.log( 'Image failed to load:', image.img.src);\n});\n```\n\n\n### Handling Different Image Types\n\nimagesLoaded inherently supports various image formats without any additional configuration.  It correctly identifies and handles the loading of JPEG, PNG, GIF, SVG, and other common image types.  You don't need to perform any special checks or pre-processing for different image formats.\n\n\n### Debugging and Troubleshooting\n\n* **Check your image paths:** Ensure all image URLs are correct and accessible.  Broken links are a common cause of issues.\n* **Inspect the console:** Use your browser's developer tools (usually accessed by pressing F12) to check the console for error messages.  imagesLoaded will generally log errors to the console if images fail to load.\n* **Verify DOM element:** Confirm that the DOM element you are passing to `imagesLoaded` actually exists and contains the images you expect.  Inspect it in your browser's developer tools to ensure it's properly structured.\n* **Check for conflicts:** Ensure that there are no conflicts with other JavaScript libraries that might interfere with imagesLoaded's functionality.\n* **Check the network tab:** Use your browser's developer tools' Network tab to check if the images are being requested and their loading status. This helps to pinpoint whether the problem is with the image itself or the network connection.\n* **Simplify your code:**  If you are using a complex setup, try simplifying your code to isolate the problem.  A minimal test case can help to quickly diagnose the issue.\n\nIf you are still experiencing issues, please provide details including your code, the browser you are using, and the specific error message (if any) for more targeted assistance.\n\n\n\n\n## Advanced Usage\n\n### Using imagesLoaded with Frameworks (React, Angular, Vue)\n\nWhile imagesLoaded is a vanilla JavaScript library, integrating it into popular frameworks like React, Angular, and Vue is straightforward.  The core principle remains the same:  you need to select the container element and then use the `imagesLoaded` function or event system.  However, the specifics of how you select the element and handle the callback will depend on the framework.\n\n\n**React:**\n\n```jsx\nimport React, { useEffect, useState } from 'react';\nimport imagesLoaded from 'imagesloaded';\n\nfunction MyComponent() {\n  const [imagesLoadedStatus, setImagesLoadedStatus] = useState(false);\n  const imageContainerRef = useRef(null);\n\n  useEffect(() => {\n    if (imageContainerRef.current) {\n      imagesLoaded(imageContainerRef.current).on('done', () => {\n        setImagesLoadedStatus(true);\n      });\n    }\n  }, []);\n\n  return (\n    <div ref={imageContainerRef}>\n      {/* Your images here */}\n      {imagesLoadedStatus && <p>All images loaded!</p>}\n    </div>\n  );\n}\n```\n\n**Angular:**\n\nYou can use `ViewChild` or `ElementRef` to access the container element within your Angular component, and then call `imagesLoaded` within `ngOnInit` or a similar lifecycle hook.\n\n**Vue:**\n\nYou can use a `ref` to access the container element in your Vue template and then call `imagesLoaded` within a `mounted` lifecycle hook or a watcher.\n\n\nIn all these framework examples, the crucial part is ensuring that the `imagesLoaded` call is made *after* the DOM element containing the images has been rendered.  Framework-specific lifecycle hooks or asynchronous operations (like `useEffect` in React) are essential for proper timing.\n\n\n### Customizing the Loading Process\n\nWhile imagesLoaded automatically handles most scenarios, you can customize certain aspects:\n\n* **Timeout:**  If you need to adjust the timeout period for images that fail to load, you can do so in newer versions (although the default should suffice in most cases). Refer to the updated documentation for details on adjusting the timeout.\n\n* **Debugging:**  Enabling debugging can provide more verbose logging for troubleshooting purposes, again this functionality might depend on version and isn't always available.  Check the latest documentation for any debugging flags or options.\n\n\n### Working with Background Images\n\nimagesLoaded primarily focuses on images that are directly part of the DOM (`<img>` tags). To handle background images, you'll need a different approach, as imagesLoaded does not directly detect the loading of background images.  Consider using the `onload` event listener on a hidden `<img>` tag that points to the background image URL to track when the background image has fully loaded.\n\n\n### Handling Large Numbers of Images\n\nFor exceptionally large numbers of images, optimizing the loading process becomes crucial. Consider these strategies:\n\n* **Lazy Loading:**  Only load images that are currently visible in the viewport.  Libraries or techniques that support lazy loading images can improve performance significantly.\n* **Image Optimization:** Compress images to reduce their file sizes.  Tools are available online to compress images without significantly impacting visual quality.\n* **Prioritization:** Load higher-priority images first.  This might mean showing smaller thumbnails initially and then loading larger versions when needed.\n\n\n### Performance Optimization\n\nBeyond the strategies already mentioned for large numbers of images, other general performance improvements apply to imagesLoaded usage:\n\n* **Minimize DOM Manipulation:**  Avoid unnecessary DOM modifications during the image loading process.  Group your actions that depend on image loading to occur all at once when the `done` event fires.\n* **Use the Event API:** Using the `progress`, `done`, and `fail` events instead of a simple callback function allows more efficient control and minimizes potential overhead.\n* **Avoid unnecessary calls:** Ensure that you are not calling imagesLoaded more often than necessary. Use caching mechanisms in your application logic to prevent duplicate calls if possible.\n\n\nRemember to profile your application to identify specific performance bottlenecks.  Using browser developer tools is key to pinpointing areas for optimization.\n\n\n\n\n## API Reference\n\n### `imagesLoaded(elements, options)`\n\nThe core function of the imagesLoaded library. It takes two arguments:\n\n* **`elements`:**  This is the first and required argument. It can be one of the following:\n    * **A DOM element:** A single element containing images (e.g., a `<div>`).  imagesLoaded will then check for all images within that element.\n    * **An array of DOM elements:** An array of elements, each of which may contain images.\n    * **A selector string:** A CSS selector string (e.g., `'.my-images'`) to select multiple elements containing images.  This uses `document.querySelectorAll` under the hood.\n\n* **`options` (optional):** An object containing optional settings to customize the behavior of imagesLoaded.  Details on the `options` object are provided in the next section.  If omitted, imagesLoaded uses its default settings.\n\n**Return Value:**\n\nThe function returns an `imagesLoaded` instance. This object allows you to listen for events (`progress`, `done`, `fail`) using the `.on()` method.  In older versions a simple callback was provided as the second argument.  The newer event system provides more flexibility.\n\n**Example:**\n\n```javascript\nimport imagesLoaded from 'imagesloaded';\n\nconst myContainer = document.querySelector('.my-image-container');\nconst imgArray = [document.getElementById('image1'), document.getElementById('image2')];\n\n// Using a single element\nconst instance1 = imagesLoaded( myContainer );\ninstance1.on('done', () => console.log('All images in myContainer loaded!') );\n\n// Using an array of elements\nconst instance2 = imagesLoaded( imgArray );\ninstance2.on('done', () => console.log('All images in the array loaded!') );\n\n// Using a selector string\nconst instance3 = imagesLoaded( '.my-other-images' );\ninstance3.on('done', () => console.log('All images in elements with the class my-other-images loaded!') );\n```\n\n\n### Event Handlers\n\nThe `imagesLoaded` instance returned by the `imagesLoaded()` function exposes the `.on()` method to attach event listeners.  Available events are:\n\n* **`progress`:** Fired for each image as it loads. The callback function receives two arguments: `instance` (the `imagesLoaded` instance itself) and `image` (an object containing information about the loaded image, such as its `img` element and its `isLoaded` status (true/false)).\n\n* **`done`:** Fired after all images within the specified elements have loaded successfully. The callback function receives one argument: `instance` (the `imagesLoaded` instance).\n\n* **`fail`:** Fired if one or more images fail to load. The callback function receives two arguments: `instance` and `image` (an object containing information about the failed image, similar to the `progress` event).\n\n**Example using `.on()`:**\n\n```javascript\nconst instance = imagesLoaded(myContainer);\n\ninstance.on( 'progress', (instance, image) => {\n  console.log(`Image loaded: ${image.img.src}`);\n} );\n\ninstance.on( 'done', () => {\n  console.log('All images loaded!');\n} );\n\ninstance.on( 'fail', (instance, image) => {\n  console.log(`Image failed to load: ${image.img.src}`);\n} );\n```\n\n\n### Options Object\n\nThe `options` object (second argument to `imagesLoaded()`) allows for fine-grained control over the loading process.  While not all options are available in all versions,  and newer options might have replaced older ones, the following are representative:\n\n\n* **`background` (boolean):** (Potentially deprecated or version dependent)  This may have been used in older versions to specifically handle background images.  Check current documentation for newer background image handling strategies.  Currently, background images are not directly supported.\n\n* **`timeout` (number, milliseconds):** (May have limited or no effect in recent versions)  Specifies a timeout in milliseconds after which images that haven't loaded will be considered failed.  Check if this setting is even relevant in the version you use.  Modern implementations likely handle timeouts more intelligently.  This option might not exist in newer versions.\n\n\n\nIt's crucial to consult the most up-to-date documentation for the specific version of imagesLoaded you are using, as the API and available options may have changed over time.  The options listed here are illustrative examples and may not represent all options available in all versions.\n\n\n\n\n## Contributing\n\nWe welcome contributions to imagesLoaded!  Whether you're reporting a bug, suggesting a feature, or submitting a pull request, your involvement is valuable.\n\n### Reporting Issues\n\nBefore creating a new issue, please search existing issues to see if the problem has already been reported.  If you can't find a matching issue, please create a new one providing the following information:\n\n* **Clear and concise title:** Briefly describe the issue.\n* **Detailed description:** Explain the problem you encountered, including steps to reproduce it.\n* **Version of imagesLoaded:** Specify the version you are using.\n* **Browser and operating system:**  Include the browser(s) and operating system(s) where the issue occurs.\n* **Relevant code snippets:**  Provide minimal, reproducible code examples that demonstrate the issue.\n* **Expected behavior:** Describe what you expected to happen.\n* **Actual behavior:** Describe what actually happened.\n\n\n### Submitting Pull Requests\n\nIf you'd like to contribute code, follow these steps:\n\n1. **Fork the repository:** Create a fork of the official imagesLoaded repository on GitHub.\n2. **Create a new branch:**  Create a new branch for your changes.  Use descriptive branch names (e.g., `fix-bug-123`, `feature-new-option`).\n3. **Make your changes:** Implement your changes, following the coding style guide (described below).\n4. **Test your changes thoroughly:**  Ensure your changes work correctly and don't introduce new bugs.\n5. **Commit your changes:** Commit your changes with clear and concise commit messages.\n6. **Push your branch:** Push your branch to your forked repository.\n7. **Create a pull request:**  Create a pull request on the original imagesLoaded repository, clearly describing your changes and their purpose.\n\n\n### Coding Style Guide\n\nTo maintain consistency and readability, please adhere to the following coding style guidelines when contributing to imagesLoaded:\n\n* **Indentation:** Use 2 spaces for indentation.\n* **Line Length:** Keep lines under 80 characters.\n* **Semicolons:** Use semicolons at the end of statements.\n* **Variable Naming:** Use camelCase for variable names.\n* **Comments:** Write clear and concise comments to explain complex logic.\n* **Testing:**  Write unit tests to cover your changes.  Use the existing testing framework to ensure proper coverage.\n\nWe use ESLint to enforce code style.  It's recommended to install ESLint and configure it according to the project's `.eslintrc` file before submitting a pull request.  This will help you identify and fix style issues before they are submitted.  The project maintainers might reject pull requests that do not follow the styling guide.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"imagesloaded.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"imagesLoaded - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}