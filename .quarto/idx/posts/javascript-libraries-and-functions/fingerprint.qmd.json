{"title":"Fingerprint - Documentation","markdown":{"yaml":{"title":"Fingerprint - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is FingerprintJS?\n\nFingerprintJS is a JavaScript library that generates unique fingerprints for web browsers.  These fingerprints are not based on personally identifiable information (PII) but rather on a combination of browser settings, installed plugins, fonts, and other device characteristics.  The resulting fingerprint is a hash, providing a robust and anonymized identifier for a particular browser instance, allowing for device identification without revealing sensitive data.  It's designed to be resilient against attempts to spoof or change the fingerprint.\n\n### Why use FingerprintJS?\n\nFingerprintJS provides a robust and privacy-respecting solution for identifying and tracking devices across sessions and websites. This is invaluable for various applications where identifying returning users is crucial without relying on cookies or other potentially unreliable or privacy-invasive methods. Its key advantage lies in its ability to identify users even when cookies are disabled or deleted, offering a more persistent and accurate tracking mechanism.  It also helps mitigate fraud and abuse by identifying potentially malicious activity.\n\n### Key Features and Benefits\n\n* **Unique Browser Identification:** Generates a highly unique and stable fingerprint for each browser instance.\n* **Privacy-Preserving:**  Does not collect or store any PII. Fingerprints are anonymized hashes.\n* **Resilient to Spoofing:** Designed to be resistant to various techniques used to manipulate browser characteristics.\n* **Cross-Platform Compatibility:** Works across a wide range of browsers and operating systems.\n* **Lightweight and Efficient:** Minimal impact on website performance.\n* **Flexible Integration:** Easy integration into existing web applications using simple APIs.\n* **Regular Updates:**  The library is regularly updated to adapt to changes in browser technology and to improve accuracy and security.\n\n\n### Use Cases\n\nFingerprintJS finds application in a diverse range of scenarios, including:\n\n* **Fraud Detection:** Identifying potentially fraudulent activities based on unusual patterns in device fingerprints.\n* **User Analytics:** Tracking user behavior across sessions without relying on cookies, providing more accurate and complete data.\n* **Personalized Experiences:** Delivering personalized content and recommendations based on consistent device identification.\n* **A/B Testing:** More accurately measuring the impact of A/B testing variations by tracking unique visitors across sessions.\n* **Access Control and Authentication:** Enhancing security measures by providing an additional layer of identification alongside other authentication methods.\n* **Bot Detection:** Identifying and mitigating bot traffic on websites.\n* **Cross-Device Tracking:**  (With limitations) Tracking users across multiple devices, offering a more holistic view of user behavior.  (Note: This requires additional server-side logic and consideration for user privacy.)\n\n\n\n## Getting Started\n\n### Installation\n\nFingerprintJS is available via npm and a CDN.  Choose the method that best suits your project setup.\n\n**npm:**\n\n```bash\nnpm install fingerprintjs-pro\n```\n\n**CDN (for quick prototyping or smaller projects):**\n\nInclude the following script tag in your HTML file, replacing `<YOUR_API_KEY>` with your actual API key (obtained after registration):\n\n```html\n<script src=\"https://cdn.fingerprintjs.com/agent.js\"></script>\n<script>\n  // Your FingerprintJS code here\n</script>\n```\n\nRemember to replace `\"https://cdn.fingerprintjs.com/agent.js\"` with the correct CDN URL if using a different version. Check the official FingerprintJS documentation for the most up-to-date CDN links.\n\n\n### API Key\n\nAn API key is required to use FingerprintJS Pro.  You will obtain this key after registering an account on the FingerprintJS website.  This key is crucial for accessing the FingerprintJS service and should be kept confidential.  Never expose it directly in client-side code (like embedding it in a publicly accessible JavaScript file); instead, use server-side processing to handle the API key and communicate with the FingerprintJS API.\n\n\n### Basic Implementation\n\nHere's a basic example demonstrating how to get a visitor's fingerprint using the FingerprintJS Pro library (using the npm version):\n\n\n```javascript\nimport FingerprintJS from '@fingerprintjs/fingerprintjs-pro';\n\nconst fpPromise = FingerprintJS.load();\n\nfpPromise.then(fp => {\n  fp.get().then(result => {\n    console.log(result.visitorId); // This is the visitor ID.  Send this to your server for processing.\n    console.log(result.visitorData); // This contains detailed visitor data. Send this to your server for processing.\n  });\n});\n```\n\n**Important Security Note:**  Never directly process or store the `visitorId` or `visitorData` on the client-side.  Always send this data to your secure backend server for processing and storage. This prevents potential security vulnerabilities.\n\n\n### Browser Compatibility\n\nFingerprintJS aims for broad browser compatibility. It is supported on all major modern browsers including:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n* Opera\n\nWhile the library strives for compatibility with older browsers, some features might have limitations. For optimal performance and feature support, it's recommended to use up-to-date and supported browser versions.  Consult the official FingerprintJS documentation for the most current information on browser support and potential limitations.\n\n\n## Core API\n\n### `getFingerprint()`\n\nThe `getFingerprint()` method (or its equivalent depending on the library version) is the primary function for obtaining the browser fingerprint. It returns a promise that resolves with an object containing the fingerprint data.  The exact structure of this object might vary slightly depending on the library version, but it generally includes a `visitorId` (a unique identifier for the visitor) and potentially other visitor data.  This method internally handles the collection and processing of various browser characteristics to generate the unique fingerprint.  Always handle the promise using `.then()` to access the fingerprint data and `.catch()` to handle potential errors.\n\n**Example (Illustrative - adapt to your specific library version):**\n\n```javascript\nfpPromise.then(fp => {\n  fp.getFingerprint().then(fingerprintData => {\n    console.log(fingerprintData); // Contains visitorId and other data.  Send this to your server.\n  }).catch(error => {\n    console.error(\"Error getting fingerprint:\", error);\n  });\n});\n\n```\n\n### `getAgent()`\n\nThis method (if available in your library version) provides access to the underlying FingerprintJS agent object.  This gives you more fine-grained control over the fingerprinting process. It might be useful for advanced customization, accessing low-level settings, or debugging purposes.  Refer to the specific documentation of your FingerprintJS library version for details on the methods and properties exposed by the agent object.\n\n### `getVisitorId()`\n\nThis method (if available, and often directly present within the result of `getFingerprint()` ) returns a unique identifier for the visitor.  This ID is typically a short, alphanumeric string that represents the visitor's browser fingerprint.  It is crucial to understand that this ID is *not* directly tied to any personally identifiable information.   This ID is the core element used to track visitors across sessions.  As with other methods, always send this ID to your secure server for processing and storage â€“ never directly manipulate or store it client-side.\n\n### Advanced Options\n\nThe FingerprintJS library typically offers advanced options to customize the fingerprinting process.  This might include specifying which components to include or exclude in the fingerprint, setting the level of accuracy, controlling the timeout, and handling various other parameters.  Consult the official documentation for your specific FingerprintJS version to understand the available configuration options.  These options might involve passing an options object to the `getFingerprint()` or initialization methods.\n\n\n### Error Handling\n\nProper error handling is crucial when working with the FingerprintJS API. The `getFingerprint()` method returns a promise, allowing you to use `.catch()` to handle potential errors.  Common errors include network issues, browser incompatibilities, or limitations in accessing certain browser characteristics.  Always implement robust error handling to gracefully manage these situations and prevent unexpected behavior in your application.  Provide users with informative feedback if an error occurs, and log errors for debugging purposes.  Error messages will often provide clues regarding the cause of the issue.\n\n**Example:**\n\n```javascript\nfpPromise.then(fp => {\n  fp.get().then(result => {\n    // Success\n  }).catch(error => {\n    console.error('FingerprintJS error:', error); // Log error for debugging\n    // Handle error appropriately, e.g., show an error message to the user\n    // or fallback to alternative identification methods.\n  });\n});\n```\n\n\n## Advanced Usage\n\n### Customizing the Fingerprint\n\nWhile FingerprintJS aims to provide a robust and reliable fingerprint by default, you might need to customize it in certain scenarios. This could involve selectively including or excluding specific components from the fingerprint generation process.  For example, if you are concerned about the impact of a specific component (like a particular browser plugin) on fingerprint uniqueness or stability, you might choose to exclude it.  The exact methods for customization will depend on the specific version of the FingerprintJS library you are using.  Consult the official documentation for details on how to configure the fingerprint components and parameters. This may involve passing configuration objects during initialization or using specific API calls to fine-tune the process.  Remember that any customization might affect the uniqueness and stability of the generated fingerprints, potentially impacting the effectiveness of your application.\n\n\n### Data Privacy Considerations\n\nData privacy is paramount when using FingerprintJS.  Never store or process the visitorId or any other fingerprint data directly on the client-side. Always transmit this information securely to your backend server using HTTPS.  Your server-side processing should adhere to all relevant data privacy regulations (such as GDPR, CCPA, etc.).  Implement appropriate security measures to protect the fingerprint data stored on your server, and ensure compliance with all applicable laws and user consent policies.  Transparency with your users is essential; inform them about your use of fingerprint technology and how you handle their data.  Consider providing options for users to opt out or control the collection of their fingerprint data (though complete opt-out might limit functionality in your application).  Consider using techniques like data minimization and purpose limitation to limit the scope of data collected and its usage.\n\n### Integration with Existing Systems\n\nIntegrating FingerprintJS into an existing system might require adapting your existing workflows and data structures. This may involve adding new database fields to store the `visitorId`, modifying your backend logic to handle fingerprint data, and updating your reporting and analytics systems to incorporate the new data source.  You'll need to design how the `visitorId` interacts with your existing user identification and authentication mechanisms.  Consider using a consistent naming convention for your fingerprint data and integrate it seamlessly with your logging and debugging infrastructure.  Thorough testing is crucial to ensure that the integration is successful and doesn't cause unexpected problems in your existing system.\n\n### Performance Optimization\n\nFingerprintJS is designed to be lightweight and efficient, but you can further optimize its performance in your application.  Avoid unnecessary calls to the `getFingerprint()` method; if you only need the fingerprint once per session, retrieve it only once and store it securely (on the server-side).  Consider using techniques like caching to store the fingerprint on your server to reduce the number of calls to the FingerprintJS API.  If performance remains a concern after basic optimization, review the configuration options of the library; selectively excluding certain components might slightly reduce processing time, but consider the trade-off to fingerprint uniqueness.  Properly profiling your application's performance will help identify any bottlenecks related to FingerprintJS usage.  Always use the most updated version of the FingerprintJS library, as newer versions may include performance enhancements.\n\n\n## Visitor Identification\n\n### Understanding Visitor IDs\n\nThe core of FingerprintJS is its ability to generate unique `visitorId`s.  These IDs are not tied to any personally identifiable information (PII). Instead, they are derived from a hash of various browser characteristics, resulting in a unique identifier for each browser instance.  The `visitorId` remains relatively stable across sessions as long as the browser configuration and environment remain unchanged.  However, significant changes to the browser (e.g., installing new plugins, changing fonts, clearing browser data) *may* lead to a different `visitorId` being generated.  This is a key factor to consider when using `visitorId`s for tracking and identifying returning visitors.  It's crucial to understand that a `visitorId` represents a browser instance, not necessarily a specific individual.  Multiple users could potentially share the same device and therefore the same `visitorId`.\n\n### Managing Visitor IDs\n\nEffective management of `visitorId`s is essential for accurate user tracking and analysis.  The primary method for managing `visitorId`s is through your server-side infrastructure.  When a `visitorId` is obtained from the client-side (using the FingerprintJS API), immediately transmit it securely to your server.   Your server should then store the `visitorId` persistently, linking it to any relevant user data or session information.  This is the central repository for managing visitor identification.  Develop robust procedures on the server for handling potential issues like duplicate `visitorId`s (which could indicate a change in browser configuration or a technical issue) and designing processes for updating or managing IDs as needed.\n\n\n### ID Persistence and Storage\n\nThe `visitorId` itself is not stored on the client-side.  Storing it client-side is a significant security risk.  Instead, your server is responsible for persistent storage of the `visitorId`.  Choose a suitable database technology (like SQL, NoSQL, or a key-value store) to store the `visitorId` along with other relevant data associated with the visitor.  Design your database schema to effectively link `visitorId`s to user sessions, user accounts (if applicable), and any other relevant information.  Implement appropriate security measures to protect the `visitorId` data from unauthorized access or modification.   Consider the potential scale of your application when choosing a storage solution; ensure it can handle the expected volume of `visitorId` data.\n\n### ID Rotation and Expiration\n\nWhile `visitorId`s are designed to be relatively stable, there might be situations where you want to manage the lifespan of these IDs.  Consider implementing an ID rotation strategy to periodically generate new `visitorId`s for existing users.  This could be based on a time interval (e.g., rotating IDs every 30 days) or triggered by significant changes in the browser configuration detected by FingerprintJS.  Similarly, you might implement an expiration policy for `visitorId`s that have not been used for a certain period, freeing up storage space and managing data retention.  The specific implementation of ID rotation and expiration depends on your application's requirements and data retention policies.  Always comply with relevant data privacy regulations when managing the lifecycle of `visitorId`s.\n\n\n## Data Analysis and Reporting\n\n### Interpreting Fingerprint Data\n\nThe data obtained from FingerprintJS primarily consists of the `visitorId` and potentially other browser-related information. The `visitorId` itself doesn't directly reveal personal information; it's an anonymized identifier for a specific browser instance.  The value of this data lies in its ability to track unique browser instances across sessions, even when cookies are disabled or cleared.  By analyzing the frequency and patterns of `visitorId` occurrences, you can gain insights into user behavior, website traffic, and other key metrics.   Don't attempt to reverse-engineer the `visitorId` to obtain PII; this is not possible, and attempts to do so would violate the design and privacy principles of FingerprintJS.  Instead, focus on analyzing the patterns and trends derived from the `visitorId` data within the context of your application's goals.\n\n\n### Data Visualization\n\nEffective data visualization is crucial for understanding the insights derived from FingerprintJS data.  You can use various visualization techniques to represent your data, depending on your analytical goals.  For example:\n\n* **Time series graphs:**  Show the number of unique visitors over time.\n* **Geographic maps:** Visualize visitor distribution based on IP address (Note: IP addresses are not directly provided by FingerprintJS but can be obtained separately and linked to the `visitorId`).\n* **Histograms:** Illustrate the distribution of visitor engagement metrics.\n* **Scatter plots:** Explore relationships between different metrics.\n\nChoose visualization tools that are appropriate for your data volume and the complexity of your analysis.  Consider using specialized business intelligence (BI) tools or data visualization libraries to create insightful dashboards and reports.\n\n\n### Analyzing Trends and Patterns\n\nAnalyzing the patterns and trends in your FingerprintJS data allows you to draw meaningful conclusions about user behavior and website traffic.  For example, you can:\n\n* **Identify returning visitors:** Track the frequency of `visitorId` appearances to understand user loyalty and engagement.\n* **Measure the effectiveness of marketing campaigns:** Analyze the impact of different campaigns on unique visitor counts.\n* **Detect fraudulent activities:** Identify unusual patterns in `visitorId` activity that may suggest fraudulent behavior.\n* **Optimize website design:** Understand user navigation patterns to improve website usability and conversion rates.\n* **Assess the impact of A/B testing:** Track unique visitors across different A/B test variations to measure their effectiveness.\n\nRemember to consider potential biases in your data and to validate your findings using multiple data sources when necessary.\n\n\n### Dashboard Integration\n\nIntegrating FingerprintJS data into your existing dashboards provides a comprehensive view of your website's performance and user behavior.  This integration typically involves linking your data storage (where `visitorId`s and associated data are stored) to your dashboarding tool.  Many popular dashboarding platforms (such as Tableau, Power BI, or custom-built dashboards) allow you to connect to various data sources and visualize the data in interactive dashboards.  This allows you to monitor key metrics derived from FingerprintJS data, such as unique visitor counts, returning visitor rates, and engagement metrics.  Customizing dashboards to highlight relevant metrics for your specific business needs is crucial for maximizing the value of your data analysis.  Regularly reviewing and updating your dashboards helps ensure that your analyses stay relevant and insightful.\n\n\n## Security and Privacy\n\n### Data Security and Encryption\n\nSecurity and encryption are paramount when handling fingerprint data.  Never transmit or store `visitorId`s or any associated data in plain text.  Always use HTTPS to securely transmit data between your client-side application and your server.  Implement robust server-side security measures to protect your database from unauthorized access, including strong passwords, regular security audits, and intrusion detection systems.  Encrypt your fingerprint data both in transit and at rest using industry-standard encryption algorithms.  Regularly review and update your security protocols to address emerging threats and vulnerabilities.  Consider employing techniques like data masking or tokenization to further protect sensitive data associated with `visitorId`s.  Use appropriate access control mechanisms to limit access to fingerprint data to authorized personnel only.\n\n\n### Compliance with Privacy Regulations\n\nFingerprintJS is designed to be privacy-respecting, but you must ensure that your implementation complies with all applicable privacy regulations, such as GDPR, CCPA, and other relevant laws in your target jurisdictions.  This includes obtaining appropriate user consent before collecting and processing fingerprint data.  Clearly and transparently inform users about your use of FingerprintJS and how their data is handled in your privacy policy.  Ensure that your data processing activities are lawful, fair, and transparent.  Implement procedures for users to exercise their rights, such as the right to access, rectification, erasure, and data portability, as mandated by relevant regulations.  Maintain meticulous records of your data processing activities to demonstrate compliance with regulatory requirements.  Consult with legal counsel to ensure that your implementation fully complies with all relevant privacy laws and regulations.\n\n\n### Ethical Considerations\n\nBeyond legal compliance, ethical considerations are crucial when using FingerprintJS.  Always prioritize user privacy and avoid practices that could be perceived as intrusive or deceptive.   Be transparent about your use of fingerprint technology and avoid misleading users about its purpose.  Respect user choices and allow them to opt out of fingerprint tracking if they wish.  Use the data responsibly and avoid engaging in practices that could harm users or violate their trust.  Consider the potential societal impacts of your application and ensure that its benefits outweigh any potential risks to user privacy.   Regularly review your practices to address evolving ethical concerns and best practices in data privacy.\n\n\n### Best Practices for Data Handling\n\nFollow these best practices to ensure secure and responsible data handling:\n\n* **Minimize data collection:** Only collect the necessary fingerprint data.\n* **Limit data retention:** Delete fingerprint data when it's no longer needed.\n* **Secure data storage:** Use strong encryption and access controls.\n* **Regular security audits:** Regularly assess your security measures.\n* **Incident response plan:** Have a plan in place to handle data breaches.\n* **Data anonymization:** Explore techniques to further anonymize fingerprint data.\n* **Transparency and user consent:** Obtain informed consent from users.\n* **Regular updates:** Keep your FingerprintJS library and security software updated.\n* **Employee training:** Train your employees on data security and privacy best practices.\n* **Third-party risk management:** Carefully vet any third-party vendors involved in data processing.\n\nAdhering to these best practices reduces the risk of security breaches and protects user privacy.  Regularly review and update your procedures to maintain the highest standards of security and privacy.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\nHere are some common issues encountered when using FingerprintJS and their potential solutions:\n\n* **`visitorId` is not generated:**  Check your API key is correct and that you have correctly integrated the FingerprintJS library. Ensure you're handling the promise returned by the `getFingerprint()` method appropriately. Network connectivity issues might prevent the fingerprint generation. Verify your server-side is correctly receiving and processing the data. Check the browser console for JavaScript errors.\n\n* **Inconsistent `visitorId`s:**  Significant changes to the browser configuration (e.g., installing plugins, clearing cache, updating browser) can result in a new `visitorId`. This is expected behavior.  Ensure that your application logic accounts for this possibility and handles the changes gracefully.\n\n* **Performance issues:**  If FingerprintJS impacts performance, review your code for inefficient usage.  Avoid multiple calls to the API if not necessary. Consider caching `visitorId`s on your server to reduce API calls. Use the latest version of the FingerprintJS library for potential performance improvements.\n\n* **Errors in the browser console:**  Pay close attention to any JavaScript errors reported in your browser's developer console. These errors often provide valuable clues to resolving the issue.\n\n* **Server-side errors:**  Ensure that your server-side code correctly handles and stores the `visitorId` data. Check for errors in your server logs, database interactions, and any data processing steps.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:**  The developer tools (usually accessed by pressing F12) are indispensable for debugging JavaScript code. Use the console to inspect variables, identify errors, and step through your code.\n\n* **Console logging:** Strategically place `console.log()` statements in your code to track the values of variables and the flow of execution.  This helps identify where issues occur.\n\n* **Network monitoring:** Monitor network requests to ensure that the FingerprintJS API calls are successful and the data is being transmitted correctly.\n\n* **Simplify your code:** Isolate the FingerprintJS integration to minimize the complexity and identify the source of errors.\n\n* **Test in different browsers:**  Test your integration in multiple browsers to identify any browser-specific issues.\n\n* **Check the FingerprintJS documentation:** The official documentation often contains troubleshooting information and examples.\n\n* **Contact support:** If you can't resolve the issue, contact FingerprintJS support for assistance.\n\n\n### Support Resources\n\n* **Official FingerprintJS Documentation:**  The most comprehensive source of information, including API references, tutorials, and troubleshooting guides.\n* **FingerprintJS Community Forums (if available):** Search for existing solutions to common problems or ask questions in the community forums.\n* **FingerprintJS Support Email (if available):**  Contact FingerprintJS support directly for assistance with more complex issues.\n\n\n### FAQ\n\n* **Is FingerprintJS GDPR compliant?** FingerprintJS itself doesn't collect PII; however, your implementation must comply with GDPR and other relevant regulations.  This means obtaining proper user consent and responsibly handling the data.\n\n* **Can FingerprintJS be spoofed?** While it's designed to be resistant to spoofing, no technology is entirely foolproof.  FingerprintJS regularly updates to counteract evolving spoofing techniques.\n\n* **How accurate is FingerprintJS?** Accuracy depends on various factors, including browser configuration and the environment. It offers high accuracy in identifying returning visitors, but occasional variations are possible.\n\n* **What data does FingerprintJS collect?**  It collects information about the browser environment, but this data is hashed and anonymized to create the `visitorId`.  No personally identifiable data is directly collected.\n\n* **Can I use FingerprintJS with other tracking technologies?**  Yes, it can be used alongside other technologies, but careful consideration is needed to respect user privacy and data protection laws.  Avoid redundancy or unnecessary data collection.\n\n\nRemember to always consult the official FingerprintJS documentation for the most up-to-date information and support resources.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Fingerprint:** A unique, anonymized identifier generated for a web browser instance, based on its configuration and characteristics.  It does not contain personally identifiable information (PII).\n\n* **`visitorId`:** The unique identifier generated by FingerprintJS, representing a specific browser instance.\n\n* **PII (Personally Identifiable Information):**  Information that can be used to identify an individual, such as name, address, email address, etc.  FingerprintJS does not collect or store PII.\n\n* **Hash:** A one-way function that transforms input data into a fixed-size string of characters.  The `visitorId` is a hash of browser characteristics.\n\n* **Spoofing:** Attempts to manipulate browser characteristics to generate a different fingerprint.\n\n* **Agent:** The underlying FingerprintJS object that manages the fingerprinting process (term may vary depending on library version).\n\n* **Component:** An individual element of browser configuration or characteristics used in fingerprint generation (e.g., plugins, fonts, etc.).\n\n\n### API Reference\n\n*(This section would contain detailed API documentation, including method descriptions, parameters, return values, and examples.  The specific content would depend on the version of the FingerprintJS library.  A well-structured API reference would include sections for each core function, such as `getFingerprint()`, `getVisitorId()`, along with any advanced options or configuration methods.  Each function would have a clear description of its purpose, the parameters it accepts (data types, descriptions, and whether they are optional or required), the return values (data type, structure, and possible errors), and illustrative examples showing how to use each function.)*\n\n\n### Release Notes\n\n*(This section would contain a changelog of releases, highlighting new features, bug fixes, performance improvements, and any breaking changes in different versions of the FingerprintJS library.  Each entry should specify the version number, the release date, and a concise description of the changes included in that release.  This allows developers to track changes, identify potential compatibility issues, and understand the evolution of the library.)*\n\n\nFor example:\n\n\n**Version 1.2.0 (2024-10-27)**\n* Added support for new browser features.\n* Improved accuracy of fingerprint generation.\n* Fixed bug related to handling of specific browser extensions.\n\n\n**Version 1.1.0 (2024-09-15)**\n* Improved performance.\n* Added new option for customizing fingerprint components.\n\n\n### License Information\n\n*(This section would specify the license under which the FingerprintJS library is distributed.  This typically includes the name of the license (e.g., MIT License, Apache License 2.0), a link to the full license text, and any restrictions or requirements imposed by the license.)*  For example:\n\nThis library is licensed under the MIT License.  See the [LICENSE](LICENSE) file for details.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is FingerprintJS?\n\nFingerprintJS is a JavaScript library that generates unique fingerprints for web browsers.  These fingerprints are not based on personally identifiable information (PII) but rather on a combination of browser settings, installed plugins, fonts, and other device characteristics.  The resulting fingerprint is a hash, providing a robust and anonymized identifier for a particular browser instance, allowing for device identification without revealing sensitive data.  It's designed to be resilient against attempts to spoof or change the fingerprint.\n\n### Why use FingerprintJS?\n\nFingerprintJS provides a robust and privacy-respecting solution for identifying and tracking devices across sessions and websites. This is invaluable for various applications where identifying returning users is crucial without relying on cookies or other potentially unreliable or privacy-invasive methods. Its key advantage lies in its ability to identify users even when cookies are disabled or deleted, offering a more persistent and accurate tracking mechanism.  It also helps mitigate fraud and abuse by identifying potentially malicious activity.\n\n### Key Features and Benefits\n\n* **Unique Browser Identification:** Generates a highly unique and stable fingerprint for each browser instance.\n* **Privacy-Preserving:**  Does not collect or store any PII. Fingerprints are anonymized hashes.\n* **Resilient to Spoofing:** Designed to be resistant to various techniques used to manipulate browser characteristics.\n* **Cross-Platform Compatibility:** Works across a wide range of browsers and operating systems.\n* **Lightweight and Efficient:** Minimal impact on website performance.\n* **Flexible Integration:** Easy integration into existing web applications using simple APIs.\n* **Regular Updates:**  The library is regularly updated to adapt to changes in browser technology and to improve accuracy and security.\n\n\n### Use Cases\n\nFingerprintJS finds application in a diverse range of scenarios, including:\n\n* **Fraud Detection:** Identifying potentially fraudulent activities based on unusual patterns in device fingerprints.\n* **User Analytics:** Tracking user behavior across sessions without relying on cookies, providing more accurate and complete data.\n* **Personalized Experiences:** Delivering personalized content and recommendations based on consistent device identification.\n* **A/B Testing:** More accurately measuring the impact of A/B testing variations by tracking unique visitors across sessions.\n* **Access Control and Authentication:** Enhancing security measures by providing an additional layer of identification alongside other authentication methods.\n* **Bot Detection:** Identifying and mitigating bot traffic on websites.\n* **Cross-Device Tracking:**  (With limitations) Tracking users across multiple devices, offering a more holistic view of user behavior.  (Note: This requires additional server-side logic and consideration for user privacy.)\n\n\n\n## Getting Started\n\n### Installation\n\nFingerprintJS is available via npm and a CDN.  Choose the method that best suits your project setup.\n\n**npm:**\n\n```bash\nnpm install fingerprintjs-pro\n```\n\n**CDN (for quick prototyping or smaller projects):**\n\nInclude the following script tag in your HTML file, replacing `<YOUR_API_KEY>` with your actual API key (obtained after registration):\n\n```html\n<script src=\"https://cdn.fingerprintjs.com/agent.js\"></script>\n<script>\n  // Your FingerprintJS code here\n</script>\n```\n\nRemember to replace `\"https://cdn.fingerprintjs.com/agent.js\"` with the correct CDN URL if using a different version. Check the official FingerprintJS documentation for the most up-to-date CDN links.\n\n\n### API Key\n\nAn API key is required to use FingerprintJS Pro.  You will obtain this key after registering an account on the FingerprintJS website.  This key is crucial for accessing the FingerprintJS service and should be kept confidential.  Never expose it directly in client-side code (like embedding it in a publicly accessible JavaScript file); instead, use server-side processing to handle the API key and communicate with the FingerprintJS API.\n\n\n### Basic Implementation\n\nHere's a basic example demonstrating how to get a visitor's fingerprint using the FingerprintJS Pro library (using the npm version):\n\n\n```javascript\nimport FingerprintJS from '@fingerprintjs/fingerprintjs-pro';\n\nconst fpPromise = FingerprintJS.load();\n\nfpPromise.then(fp => {\n  fp.get().then(result => {\n    console.log(result.visitorId); // This is the visitor ID.  Send this to your server for processing.\n    console.log(result.visitorData); // This contains detailed visitor data. Send this to your server for processing.\n  });\n});\n```\n\n**Important Security Note:**  Never directly process or store the `visitorId` or `visitorData` on the client-side.  Always send this data to your secure backend server for processing and storage. This prevents potential security vulnerabilities.\n\n\n### Browser Compatibility\n\nFingerprintJS aims for broad browser compatibility. It is supported on all major modern browsers including:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n* Opera\n\nWhile the library strives for compatibility with older browsers, some features might have limitations. For optimal performance and feature support, it's recommended to use up-to-date and supported browser versions.  Consult the official FingerprintJS documentation for the most current information on browser support and potential limitations.\n\n\n## Core API\n\n### `getFingerprint()`\n\nThe `getFingerprint()` method (or its equivalent depending on the library version) is the primary function for obtaining the browser fingerprint. It returns a promise that resolves with an object containing the fingerprint data.  The exact structure of this object might vary slightly depending on the library version, but it generally includes a `visitorId` (a unique identifier for the visitor) and potentially other visitor data.  This method internally handles the collection and processing of various browser characteristics to generate the unique fingerprint.  Always handle the promise using `.then()` to access the fingerprint data and `.catch()` to handle potential errors.\n\n**Example (Illustrative - adapt to your specific library version):**\n\n```javascript\nfpPromise.then(fp => {\n  fp.getFingerprint().then(fingerprintData => {\n    console.log(fingerprintData); // Contains visitorId and other data.  Send this to your server.\n  }).catch(error => {\n    console.error(\"Error getting fingerprint:\", error);\n  });\n});\n\n```\n\n### `getAgent()`\n\nThis method (if available in your library version) provides access to the underlying FingerprintJS agent object.  This gives you more fine-grained control over the fingerprinting process. It might be useful for advanced customization, accessing low-level settings, or debugging purposes.  Refer to the specific documentation of your FingerprintJS library version for details on the methods and properties exposed by the agent object.\n\n### `getVisitorId()`\n\nThis method (if available, and often directly present within the result of `getFingerprint()` ) returns a unique identifier for the visitor.  This ID is typically a short, alphanumeric string that represents the visitor's browser fingerprint.  It is crucial to understand that this ID is *not* directly tied to any personally identifiable information.   This ID is the core element used to track visitors across sessions.  As with other methods, always send this ID to your secure server for processing and storage â€“ never directly manipulate or store it client-side.\n\n### Advanced Options\n\nThe FingerprintJS library typically offers advanced options to customize the fingerprinting process.  This might include specifying which components to include or exclude in the fingerprint, setting the level of accuracy, controlling the timeout, and handling various other parameters.  Consult the official documentation for your specific FingerprintJS version to understand the available configuration options.  These options might involve passing an options object to the `getFingerprint()` or initialization methods.\n\n\n### Error Handling\n\nProper error handling is crucial when working with the FingerprintJS API. The `getFingerprint()` method returns a promise, allowing you to use `.catch()` to handle potential errors.  Common errors include network issues, browser incompatibilities, or limitations in accessing certain browser characteristics.  Always implement robust error handling to gracefully manage these situations and prevent unexpected behavior in your application.  Provide users with informative feedback if an error occurs, and log errors for debugging purposes.  Error messages will often provide clues regarding the cause of the issue.\n\n**Example:**\n\n```javascript\nfpPromise.then(fp => {\n  fp.get().then(result => {\n    // Success\n  }).catch(error => {\n    console.error('FingerprintJS error:', error); // Log error for debugging\n    // Handle error appropriately, e.g., show an error message to the user\n    // or fallback to alternative identification methods.\n  });\n});\n```\n\n\n## Advanced Usage\n\n### Customizing the Fingerprint\n\nWhile FingerprintJS aims to provide a robust and reliable fingerprint by default, you might need to customize it in certain scenarios. This could involve selectively including or excluding specific components from the fingerprint generation process.  For example, if you are concerned about the impact of a specific component (like a particular browser plugin) on fingerprint uniqueness or stability, you might choose to exclude it.  The exact methods for customization will depend on the specific version of the FingerprintJS library you are using.  Consult the official documentation for details on how to configure the fingerprint components and parameters. This may involve passing configuration objects during initialization or using specific API calls to fine-tune the process.  Remember that any customization might affect the uniqueness and stability of the generated fingerprints, potentially impacting the effectiveness of your application.\n\n\n### Data Privacy Considerations\n\nData privacy is paramount when using FingerprintJS.  Never store or process the visitorId or any other fingerprint data directly on the client-side. Always transmit this information securely to your backend server using HTTPS.  Your server-side processing should adhere to all relevant data privacy regulations (such as GDPR, CCPA, etc.).  Implement appropriate security measures to protect the fingerprint data stored on your server, and ensure compliance with all applicable laws and user consent policies.  Transparency with your users is essential; inform them about your use of fingerprint technology and how you handle their data.  Consider providing options for users to opt out or control the collection of their fingerprint data (though complete opt-out might limit functionality in your application).  Consider using techniques like data minimization and purpose limitation to limit the scope of data collected and its usage.\n\n### Integration with Existing Systems\n\nIntegrating FingerprintJS into an existing system might require adapting your existing workflows and data structures. This may involve adding new database fields to store the `visitorId`, modifying your backend logic to handle fingerprint data, and updating your reporting and analytics systems to incorporate the new data source.  You'll need to design how the `visitorId` interacts with your existing user identification and authentication mechanisms.  Consider using a consistent naming convention for your fingerprint data and integrate it seamlessly with your logging and debugging infrastructure.  Thorough testing is crucial to ensure that the integration is successful and doesn't cause unexpected problems in your existing system.\n\n### Performance Optimization\n\nFingerprintJS is designed to be lightweight and efficient, but you can further optimize its performance in your application.  Avoid unnecessary calls to the `getFingerprint()` method; if you only need the fingerprint once per session, retrieve it only once and store it securely (on the server-side).  Consider using techniques like caching to store the fingerprint on your server to reduce the number of calls to the FingerprintJS API.  If performance remains a concern after basic optimization, review the configuration options of the library; selectively excluding certain components might slightly reduce processing time, but consider the trade-off to fingerprint uniqueness.  Properly profiling your application's performance will help identify any bottlenecks related to FingerprintJS usage.  Always use the most updated version of the FingerprintJS library, as newer versions may include performance enhancements.\n\n\n## Visitor Identification\n\n### Understanding Visitor IDs\n\nThe core of FingerprintJS is its ability to generate unique `visitorId`s.  These IDs are not tied to any personally identifiable information (PII). Instead, they are derived from a hash of various browser characteristics, resulting in a unique identifier for each browser instance.  The `visitorId` remains relatively stable across sessions as long as the browser configuration and environment remain unchanged.  However, significant changes to the browser (e.g., installing new plugins, changing fonts, clearing browser data) *may* lead to a different `visitorId` being generated.  This is a key factor to consider when using `visitorId`s for tracking and identifying returning visitors.  It's crucial to understand that a `visitorId` represents a browser instance, not necessarily a specific individual.  Multiple users could potentially share the same device and therefore the same `visitorId`.\n\n### Managing Visitor IDs\n\nEffective management of `visitorId`s is essential for accurate user tracking and analysis.  The primary method for managing `visitorId`s is through your server-side infrastructure.  When a `visitorId` is obtained from the client-side (using the FingerprintJS API), immediately transmit it securely to your server.   Your server should then store the `visitorId` persistently, linking it to any relevant user data or session information.  This is the central repository for managing visitor identification.  Develop robust procedures on the server for handling potential issues like duplicate `visitorId`s (which could indicate a change in browser configuration or a technical issue) and designing processes for updating or managing IDs as needed.\n\n\n### ID Persistence and Storage\n\nThe `visitorId` itself is not stored on the client-side.  Storing it client-side is a significant security risk.  Instead, your server is responsible for persistent storage of the `visitorId`.  Choose a suitable database technology (like SQL, NoSQL, or a key-value store) to store the `visitorId` along with other relevant data associated with the visitor.  Design your database schema to effectively link `visitorId`s to user sessions, user accounts (if applicable), and any other relevant information.  Implement appropriate security measures to protect the `visitorId` data from unauthorized access or modification.   Consider the potential scale of your application when choosing a storage solution; ensure it can handle the expected volume of `visitorId` data.\n\n### ID Rotation and Expiration\n\nWhile `visitorId`s are designed to be relatively stable, there might be situations where you want to manage the lifespan of these IDs.  Consider implementing an ID rotation strategy to periodically generate new `visitorId`s for existing users.  This could be based on a time interval (e.g., rotating IDs every 30 days) or triggered by significant changes in the browser configuration detected by FingerprintJS.  Similarly, you might implement an expiration policy for `visitorId`s that have not been used for a certain period, freeing up storage space and managing data retention.  The specific implementation of ID rotation and expiration depends on your application's requirements and data retention policies.  Always comply with relevant data privacy regulations when managing the lifecycle of `visitorId`s.\n\n\n## Data Analysis and Reporting\n\n### Interpreting Fingerprint Data\n\nThe data obtained from FingerprintJS primarily consists of the `visitorId` and potentially other browser-related information. The `visitorId` itself doesn't directly reveal personal information; it's an anonymized identifier for a specific browser instance.  The value of this data lies in its ability to track unique browser instances across sessions, even when cookies are disabled or cleared.  By analyzing the frequency and patterns of `visitorId` occurrences, you can gain insights into user behavior, website traffic, and other key metrics.   Don't attempt to reverse-engineer the `visitorId` to obtain PII; this is not possible, and attempts to do so would violate the design and privacy principles of FingerprintJS.  Instead, focus on analyzing the patterns and trends derived from the `visitorId` data within the context of your application's goals.\n\n\n### Data Visualization\n\nEffective data visualization is crucial for understanding the insights derived from FingerprintJS data.  You can use various visualization techniques to represent your data, depending on your analytical goals.  For example:\n\n* **Time series graphs:**  Show the number of unique visitors over time.\n* **Geographic maps:** Visualize visitor distribution based on IP address (Note: IP addresses are not directly provided by FingerprintJS but can be obtained separately and linked to the `visitorId`).\n* **Histograms:** Illustrate the distribution of visitor engagement metrics.\n* **Scatter plots:** Explore relationships between different metrics.\n\nChoose visualization tools that are appropriate for your data volume and the complexity of your analysis.  Consider using specialized business intelligence (BI) tools or data visualization libraries to create insightful dashboards and reports.\n\n\n### Analyzing Trends and Patterns\n\nAnalyzing the patterns and trends in your FingerprintJS data allows you to draw meaningful conclusions about user behavior and website traffic.  For example, you can:\n\n* **Identify returning visitors:** Track the frequency of `visitorId` appearances to understand user loyalty and engagement.\n* **Measure the effectiveness of marketing campaigns:** Analyze the impact of different campaigns on unique visitor counts.\n* **Detect fraudulent activities:** Identify unusual patterns in `visitorId` activity that may suggest fraudulent behavior.\n* **Optimize website design:** Understand user navigation patterns to improve website usability and conversion rates.\n* **Assess the impact of A/B testing:** Track unique visitors across different A/B test variations to measure their effectiveness.\n\nRemember to consider potential biases in your data and to validate your findings using multiple data sources when necessary.\n\n\n### Dashboard Integration\n\nIntegrating FingerprintJS data into your existing dashboards provides a comprehensive view of your website's performance and user behavior.  This integration typically involves linking your data storage (where `visitorId`s and associated data are stored) to your dashboarding tool.  Many popular dashboarding platforms (such as Tableau, Power BI, or custom-built dashboards) allow you to connect to various data sources and visualize the data in interactive dashboards.  This allows you to monitor key metrics derived from FingerprintJS data, such as unique visitor counts, returning visitor rates, and engagement metrics.  Customizing dashboards to highlight relevant metrics for your specific business needs is crucial for maximizing the value of your data analysis.  Regularly reviewing and updating your dashboards helps ensure that your analyses stay relevant and insightful.\n\n\n## Security and Privacy\n\n### Data Security and Encryption\n\nSecurity and encryption are paramount when handling fingerprint data.  Never transmit or store `visitorId`s or any associated data in plain text.  Always use HTTPS to securely transmit data between your client-side application and your server.  Implement robust server-side security measures to protect your database from unauthorized access, including strong passwords, regular security audits, and intrusion detection systems.  Encrypt your fingerprint data both in transit and at rest using industry-standard encryption algorithms.  Regularly review and update your security protocols to address emerging threats and vulnerabilities.  Consider employing techniques like data masking or tokenization to further protect sensitive data associated with `visitorId`s.  Use appropriate access control mechanisms to limit access to fingerprint data to authorized personnel only.\n\n\n### Compliance with Privacy Regulations\n\nFingerprintJS is designed to be privacy-respecting, but you must ensure that your implementation complies with all applicable privacy regulations, such as GDPR, CCPA, and other relevant laws in your target jurisdictions.  This includes obtaining appropriate user consent before collecting and processing fingerprint data.  Clearly and transparently inform users about your use of FingerprintJS and how their data is handled in your privacy policy.  Ensure that your data processing activities are lawful, fair, and transparent.  Implement procedures for users to exercise their rights, such as the right to access, rectification, erasure, and data portability, as mandated by relevant regulations.  Maintain meticulous records of your data processing activities to demonstrate compliance with regulatory requirements.  Consult with legal counsel to ensure that your implementation fully complies with all relevant privacy laws and regulations.\n\n\n### Ethical Considerations\n\nBeyond legal compliance, ethical considerations are crucial when using FingerprintJS.  Always prioritize user privacy and avoid practices that could be perceived as intrusive or deceptive.   Be transparent about your use of fingerprint technology and avoid misleading users about its purpose.  Respect user choices and allow them to opt out of fingerprint tracking if they wish.  Use the data responsibly and avoid engaging in practices that could harm users or violate their trust.  Consider the potential societal impacts of your application and ensure that its benefits outweigh any potential risks to user privacy.   Regularly review your practices to address evolving ethical concerns and best practices in data privacy.\n\n\n### Best Practices for Data Handling\n\nFollow these best practices to ensure secure and responsible data handling:\n\n* **Minimize data collection:** Only collect the necessary fingerprint data.\n* **Limit data retention:** Delete fingerprint data when it's no longer needed.\n* **Secure data storage:** Use strong encryption and access controls.\n* **Regular security audits:** Regularly assess your security measures.\n* **Incident response plan:** Have a plan in place to handle data breaches.\n* **Data anonymization:** Explore techniques to further anonymize fingerprint data.\n* **Transparency and user consent:** Obtain informed consent from users.\n* **Regular updates:** Keep your FingerprintJS library and security software updated.\n* **Employee training:** Train your employees on data security and privacy best practices.\n* **Third-party risk management:** Carefully vet any third-party vendors involved in data processing.\n\nAdhering to these best practices reduces the risk of security breaches and protects user privacy.  Regularly review and update your procedures to maintain the highest standards of security and privacy.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\nHere are some common issues encountered when using FingerprintJS and their potential solutions:\n\n* **`visitorId` is not generated:**  Check your API key is correct and that you have correctly integrated the FingerprintJS library. Ensure you're handling the promise returned by the `getFingerprint()` method appropriately. Network connectivity issues might prevent the fingerprint generation. Verify your server-side is correctly receiving and processing the data. Check the browser console for JavaScript errors.\n\n* **Inconsistent `visitorId`s:**  Significant changes to the browser configuration (e.g., installing plugins, clearing cache, updating browser) can result in a new `visitorId`. This is expected behavior.  Ensure that your application logic accounts for this possibility and handles the changes gracefully.\n\n* **Performance issues:**  If FingerprintJS impacts performance, review your code for inefficient usage.  Avoid multiple calls to the API if not necessary. Consider caching `visitorId`s on your server to reduce API calls. Use the latest version of the FingerprintJS library for potential performance improvements.\n\n* **Errors in the browser console:**  Pay close attention to any JavaScript errors reported in your browser's developer console. These errors often provide valuable clues to resolving the issue.\n\n* **Server-side errors:**  Ensure that your server-side code correctly handles and stores the `visitorId` data. Check for errors in your server logs, database interactions, and any data processing steps.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:**  The developer tools (usually accessed by pressing F12) are indispensable for debugging JavaScript code. Use the console to inspect variables, identify errors, and step through your code.\n\n* **Console logging:** Strategically place `console.log()` statements in your code to track the values of variables and the flow of execution.  This helps identify where issues occur.\n\n* **Network monitoring:** Monitor network requests to ensure that the FingerprintJS API calls are successful and the data is being transmitted correctly.\n\n* **Simplify your code:** Isolate the FingerprintJS integration to minimize the complexity and identify the source of errors.\n\n* **Test in different browsers:**  Test your integration in multiple browsers to identify any browser-specific issues.\n\n* **Check the FingerprintJS documentation:** The official documentation often contains troubleshooting information and examples.\n\n* **Contact support:** If you can't resolve the issue, contact FingerprintJS support for assistance.\n\n\n### Support Resources\n\n* **Official FingerprintJS Documentation:**  The most comprehensive source of information, including API references, tutorials, and troubleshooting guides.\n* **FingerprintJS Community Forums (if available):** Search for existing solutions to common problems or ask questions in the community forums.\n* **FingerprintJS Support Email (if available):**  Contact FingerprintJS support directly for assistance with more complex issues.\n\n\n### FAQ\n\n* **Is FingerprintJS GDPR compliant?** FingerprintJS itself doesn't collect PII; however, your implementation must comply with GDPR and other relevant regulations.  This means obtaining proper user consent and responsibly handling the data.\n\n* **Can FingerprintJS be spoofed?** While it's designed to be resistant to spoofing, no technology is entirely foolproof.  FingerprintJS regularly updates to counteract evolving spoofing techniques.\n\n* **How accurate is FingerprintJS?** Accuracy depends on various factors, including browser configuration and the environment. It offers high accuracy in identifying returning visitors, but occasional variations are possible.\n\n* **What data does FingerprintJS collect?**  It collects information about the browser environment, but this data is hashed and anonymized to create the `visitorId`.  No personally identifiable data is directly collected.\n\n* **Can I use FingerprintJS with other tracking technologies?**  Yes, it can be used alongside other technologies, but careful consideration is needed to respect user privacy and data protection laws.  Avoid redundancy or unnecessary data collection.\n\n\nRemember to always consult the official FingerprintJS documentation for the most up-to-date information and support resources.\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Fingerprint:** A unique, anonymized identifier generated for a web browser instance, based on its configuration and characteristics.  It does not contain personally identifiable information (PII).\n\n* **`visitorId`:** The unique identifier generated by FingerprintJS, representing a specific browser instance.\n\n* **PII (Personally Identifiable Information):**  Information that can be used to identify an individual, such as name, address, email address, etc.  FingerprintJS does not collect or store PII.\n\n* **Hash:** A one-way function that transforms input data into a fixed-size string of characters.  The `visitorId` is a hash of browser characteristics.\n\n* **Spoofing:** Attempts to manipulate browser characteristics to generate a different fingerprint.\n\n* **Agent:** The underlying FingerprintJS object that manages the fingerprinting process (term may vary depending on library version).\n\n* **Component:** An individual element of browser configuration or characteristics used in fingerprint generation (e.g., plugins, fonts, etc.).\n\n\n### API Reference\n\n*(This section would contain detailed API documentation, including method descriptions, parameters, return values, and examples.  The specific content would depend on the version of the FingerprintJS library.  A well-structured API reference would include sections for each core function, such as `getFingerprint()`, `getVisitorId()`, along with any advanced options or configuration methods.  Each function would have a clear description of its purpose, the parameters it accepts (data types, descriptions, and whether they are optional or required), the return values (data type, structure, and possible errors), and illustrative examples showing how to use each function.)*\n\n\n### Release Notes\n\n*(This section would contain a changelog of releases, highlighting new features, bug fixes, performance improvements, and any breaking changes in different versions of the FingerprintJS library.  Each entry should specify the version number, the release date, and a concise description of the changes included in that release.  This allows developers to track changes, identify potential compatibility issues, and understand the evolution of the library.)*\n\n\nFor example:\n\n\n**Version 1.2.0 (2024-10-27)**\n* Added support for new browser features.\n* Improved accuracy of fingerprint generation.\n* Fixed bug related to handling of specific browser extensions.\n\n\n**Version 1.1.0 (2024-09-15)**\n* Improved performance.\n* Added new option for customizing fingerprint components.\n\n\n### License Information\n\n*(This section would specify the license under which the FingerprintJS library is distributed.  This typically includes the name of the license (e.g., MIT License, Apache License 2.0), a link to the full license text, and any restrictions or requirements imposed by the license.)*  For example:\n\nThis library is licensed under the MIT License.  See the [LICENSE](LICENSE) file for details.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"fingerprint.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Fingerprint - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}