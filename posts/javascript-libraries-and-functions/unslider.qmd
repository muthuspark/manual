---
title: "Unslider - A Developer's Handbook"
categories: [ "JavaScript Libraries and Functions" ]
---
## Introduction

### What is Unslider?

Unslider is a lightweight and dependency-free JavaScript slider.  It's designed to be easily integrated into existing projects without requiring any external libraries or frameworks.  Unslider focuses on simplicity and providing a clean, responsive sliding experience with minimal code.  Its core functionality revolves around creating a simple, elegant slideshow or carousel with intuitive navigation.


### Features and Benefits

* **Lightweight:**  Unslider has a small file size, minimizing the impact on page load times.
* **Dependency-Free:** No jQuery or other libraries are required.  This reduces the complexity of your project and minimizes potential conflicts.
* **Responsive:**  Automatically adapts to different screen sizes, ensuring a consistent experience across devices.
* **Easy to Use:**  The API is simple and straightforward, making it quick and easy to implement.
* **Customizable:** You have control over the appearance and behavior of the slider through simple options.
* **Accessible:**  The slider is designed with accessibility in mind, allowing users with disabilities to interact with it effectively.


### Installation and Setup

Unslider is distributed as a single JavaScript file. You can download it from [Insert Download Link Here] and include it in your project using a `<script>` tag:

```html
<script src="unslider.min.js"></script>
```

Place this script tag before the closing `</body>` tag of your HTML document.  No additional CSS files are required, although you can easily customize its appearance with your own CSS.


### Basic Usage Example

First, create the HTML for your slider.  This involves a container element and the slides themselves:

```html
<div class="unslider">
  <ul>
    <li><img src="image1.jpg" alt="Slide 1"></li>
    <li><img src="image2.jpg" alt="Slide 2"></li>
    <li><img src="image3.jpg" alt="Slide 3"></li>
  </ul>
</div>
```

Then, initialize Unslider using JavaScript:

```javascript
$('.unslider').unslider();
```

This simple line of code will initialize the slider on the element with the class "unslider".  Remember to include jQuery if you are using this method.  For a pure JavaScript alternative see the documentation for options on how to initialize without jQuery.  This will create a basic slider with default settings. You can further customize it using various options as detailed in the Unslider documentation.


## Core Functionality

### Initialization

Unslider can be initialized in two ways:  using jQuery (if included in your project) or using plain JavaScript.

**jQuery Initialization:**  If jQuery is available, initializing Unslider is as simple as:

```javascript
$('.unslider').unslider();
```
This will initialize the slider on all elements with the class "unslider".


**Plain JavaScript Initialization:** For projects without jQuery, use:

```javascript
var myUnslider = new Unslider(document.querySelector('.unslider'));
```
This will initialize the slider and return an Unslider object, allowing for further control. Note that you must select the element using a method compatible with your project (e.g. `document.getElementById()`).

You can also pass options to customize the slider's behavior during initialization (see the options section in the full documentation).


### Navigation Controls

Unslider provides simple navigation controls:

* **Previous/Next Buttons:**  By default, Unslider generates previous and next buttons for navigating between slides.  These are automatically styled and positioned.
* **Dots Navigation:**  Dots are also generated for visual navigation between slides.  Clicking on a dot navigates directly to the corresponding slide.
* **Keyboard Navigation:** The slider responds to left and right arrow keys to navigate between slides.

The visual appearance of these controls is easily customizable using CSS.


### Automatic Slideshow

To enable the automatic slideshow functionality, provide the `speed` option during initialization:

```javascript
$('.unslider').unslider({
  speed: 3000 // Slide change every 3 seconds
});
```

The `speed` option defines the delay in milliseconds between automatic slide transitions.  The automatic slideshow can be paused and resumed using methods described in the full documentation.


### Responsive Design

Unslider automatically adapts to different screen sizes.  It uses a fluid layout based on percentages, so the slider will scale proportionally to its container. No extra configuration is needed for responsive behavior.


### Customizing the Appearance

The appearance of Unslider can be heavily customized using CSS.  Target the relevant classes and IDs within the generated markup (check the generated HTML after initializing the slider) to modify the styles of slides, navigation controls, and the overall slider container.

For instance, to change the background color of the slides, you can use:

```css
.unslider li {
  background-color: #f0f0f0;
}
```

Remember to inspect the generated HTML to identify the exact classes and IDs to target for specific styling changes.


### Adding and Removing Slides

Adding and removing slides dynamically requires manipulating the underlying `<ul>` element within the slider container.  To add a slide:

```javascript
var ul = $('.unslider ul'); // or document.querySelector('.unslider ul')
var newLi = $('<li><img src="newimage.jpg" alt="New Slide"></li>'); // or createElement
ul.append(newLi);
// Re-initialize Unslider after adding/removing slides to refresh it:
$('.unslider').unslider('destroy').unslider(); // or use a similar approach with the plain JS object
```

To remove a slide:

```javascript
$('.unslider ul li:last-child').remove();
// Re-initialize Unslider after adding/removing slides to refresh it:
$('.unslider').unslider('destroy').unslider(); // or use a similar approach with the plain JS object
```

Remember to re-initialize Unslider (using `unslider('destroy').unslider()` with jQuery or the equivalent with plain JS) after modifying the slide list to ensure the slider updates correctly.  Always avoid direct manipulation of the slider's internal state.


## Advanced Techniques

### Custom Events and Callbacks

Unslider triggers several events during its operation.  You can listen for these events and execute custom code in response.  While specific event names might vary depending on the initialization method (jQuery vs. plain Javascript), you can generally listen for events like `beforeSlide`, `afterSlide`, `complete`, etc. The exact events and their usage will be documented in the main Unslider documentation.  Use these events to integrate custom actions with your slider's state transitions. For instance, you could trigger an animation or update other elements on the page when a slide changes.

Example using jQuery (adapt for plain JS as needed):

```javascript
$('.unslider').on('beforeSlide', function(e, data) {
  console.log('Before slide transition to index: ' + data.to);
});
```


### Integrating with Other Libraries

Because Unslider is dependency-free, it can easily integrate with other JavaScript libraries.   You can use other libraries to enhance its functionality (e.g., animation libraries for more sophisticated transitions, or lazy loading libraries for managing large images).  Just be mindful to ensure that no naming conflicts exist between Unslider and other libraries.


### Keyboard Navigation

Unslider supports keyboard navigation by default.  Users can use the left and right arrow keys to navigate between slides.  This feature is automatically enabled and requires no additional configuration.


### Touch Support

Unslider supports touch events on mobile devices.  Swiping left and right on the slider will navigate between slides.  This touch support is built-in and doesn't require any special configuration.


### Accessibility Considerations

For improved accessibility:

* **ARIA Attributes:**  Ensure that appropriate ARIA attributes (like `aria-current` and `role="tablist"` etc) are applied to the slider's elements to help screen readers and assistive technologies convey the slider's state and functionality to users with disabilities. You might need to manually add these attributes if not automatically provided by Unslider.
* **Keyboard Navigation:** The built-in keyboard support is crucial for users who cannot use a mouse.
* **Alternative Text:**  Always provide descriptive `alt` text for any images within the slider.


### Troubleshooting Common Issues

* **Slider not initializing:** Double-check that the Unslider JavaScript file is correctly included in your HTML and that the selector used for initialization targets the correct element. Ensure your Javascript is placed after the slider's HTML element or use DOMContentLoaded.
* **Slides not displaying correctly:**  Inspect the browser's developer tools to check for CSS conflicts or issues with your slide's HTML structure.
* **Navigation controls not working:** Make sure you haven't accidentally overridden the default CSS styles for the navigation elements.
* **Automatic slideshow not working:**  Ensure that the `speed` option is correctly set during initialization and that there are no Javascript errors preventing the slideshow functionality.

If you encounter issues not resolved through these steps, consult the Unslider project's issue tracker or support channels for assistance.  Provide detailed information about your setup, the error messages (if any), and relevant code snippets to facilitate efficient troubleshooting.


## API Reference

### Unslider Options

Unslider accepts several options during initialization to customize its behavior. These options can be passed as a JavaScript object to the `unslider()` function or the Unslider constructor.  The most commonly used options include:

* `speed`: (Integer, default: 500)  The animation speed in milliseconds for slide transitions.  Used also for automatic slideshow interval.
* `delay`: (Integer, default: 3000) Delay in milliseconds between automatic slide transitions (only applicable when automatic slideshow is enabled).  If `speed` is used and `delay` is omitted, `speed` is used as the `delay` value as well.
* `complete`: (Function) A callback function that is executed after each slide transition is complete.
* `keys`: (Boolean, default: true) Enables or disables keyboard navigation.
* `dots`: (Boolean, default: true)  Displays or hides the navigation dots.
* `fluid`: (Boolean, default: true) Enables or disables fluid width responsive behaviour.
* `nav`: (Boolean, default: true) Displays or hides previous/next navigation buttons.
* `start`: (Integer, default: 0)  The index of the slide to start on.


Example usage (jQuery):

```javascript
$('.unslider').unslider({
  speed: 1000,
  delay: 5000,
  dots: false,
  complete: function() {
    console.log('Slide transition complete!');
  }
});
```

Example usage (Plain JavaScript):

```javascript
var myUnslider = new Unslider(document.querySelector('.unslider'), {
    speed: 1000,
    delay: 5000,
    dots: false,
    complete: function() {
        console.log('Slide transition complete!');
    }
});
```


### Methods

Unslider provides several methods to control the slider after initialization.  These methods are usually chained to the slider object.  The specific methods available will depend on the type of initialization (jQuery or plain Javascript) and might vary across different versions.  The available methods might include (but are not limited to):

* `destroy()`:  Removes Unslider from the element, restoring the original HTML.
* `move(index)`: Moves the slider to the specified slide index.
* `next()`: Moves the slider to the next slide.
* `prev()`: Moves the slider to the previous slide.
* `stop()`: Stops the automatic slideshow (if enabled).
* `start()`: Restarts the automatic slideshow (if enabled).
* `current()`: Returns the index of the currently active slide.


Example usage (jQuery):

```javascript
$('.unslider').unslider('next');
var currentIndex = $('.unslider').unslider('current');
$('.unslider').unslider('destroy');
```


Example usage (Plain Javascript):  Assuming `myUnslider` is the object returned by the Unslider constructor

```javascript
myUnslider.next();
var currentIndex = myUnslider.current();
myUnslider.destroy();
```


### Events

Unslider triggers various custom events during its operation.  These events allow you to integrate custom functionality with the slider's behavior. The events and their parameters are likely to be:


* `beforeSlide`: Triggered before a slide transition begins. Receives the `to` (target slide index) and `from` (current slide index) as arguments.
* `afterSlide`: Triggered after a slide transition completes. Receives the `to` (newly active slide index) and `from` (previously active slide index) as arguments.
* `complete`: Triggered after all slider initialization actions.
* `destroy`: Triggered after Unslider is destroyed.

Consult the specific Unslider documentation for the definitive list of events and their parameters.  Remember that event handling will differ slightly depending on your chosen method for initialization (jQuery or plain Javascript).  jQuery uses `.on()` or `.bind()`, while plain Javascript uses `addEventListener()`.


## Examples

These examples assume you have included the Unslider JavaScript file in your project.  Remember to adjust paths to images as needed.


### Simple Slider

This example demonstrates the most basic implementation of Unslider.

**HTML:**

```html
<div class="unslider">
  <ul>
    <li><img src="image1.jpg" alt="Slide 1"></li>
    <li><img src="image2.jpg" alt="Slide 2"></li>
    <li><img src="image3.jpg" alt="Slide 3"></li>
  </ul>
</div>
```

**JavaScript (jQuery):**

```javascript
$('.unslider').unslider();
```

**JavaScript (Plain Javascript):**

```javascript
new Unslider(document.querySelector('.unslider'));
```


### Slider with Custom Navigation

This example shows how to replace the default navigation with custom buttons.

**HTML:**

```html
<div class="unslider">
  <ul>
    <li><img src="image1.jpg" alt="Slide 1"></li>
    <li><img src="image2.jpg" alt="Slide 2"></li>
    <li><img src="image3.jpg" alt="Slide 3"></li>
  </ul>
</div>
<button id="prev">Previous</button>
<button id="next">Next</button>
```

**JavaScript (jQuery):**

```javascript
var slider = $('.unslider').unslider();
$('#prev').click(function() { slider.prev(); });
$('#next').click(function() { slider.next(); });
```

**JavaScript (Plain Javascript):**

```javascript
var slider = new Unslider(document.querySelector('.unslider'));
document.getElementById('prev').addEventListener('click', function() { slider.prev(); });
document.getElementById('next').addEventListener('click', function() { slider.next(); });

```


### Slider with Autoplay

This example demonstrates how to enable the automatic slideshow functionality.

**HTML:** (same as Simple Slider)

**JavaScript (jQuery):**

```javascript
$('.unslider').unslider({ speed: 3000 }); // Change slide every 3 seconds
```

**JavaScript (Plain Javascript):**

```javascript
new Unslider(document.querySelector('.unslider'), { speed: 3000 }); //Change slide every 3 seconds
```


### Responsive Slider

Unslider is responsive by default. No extra code is needed.  Ensure your container (`<div class="unslider">`) is set up with appropriate CSS for responsive design (e.g., using percentages for width).


### Complex Slider with Multiple Features

This example combines several features: autoplay, custom navigation, and a `complete` callback.

**HTML:** (similar to Slider with Custom Navigation)

**JavaScript (jQuery):**

```javascript
var slider = $('.unslider').unslider({
  speed: 4000,
  complete: function(e,data) {
    console.log("Current Slide: " + data.to);
    // Add any other actions here
  }
});
$('#prev').click(function() { slider.prev(); });
$('#next').click(function() { slider.next(); });
```

**JavaScript (Plain Javascript):**

```javascript
var slider = new Unslider(document.querySelector('.unslider'), {
    speed: 4000,
    complete: function(e,data) {
        console.log("Current Slide: " + data.to);
        // Add any other actions here
    }
});
document.getElementById('prev').addEventListener('click', function() { slider.prev(); });
document.getElementById('next').addEventListener('click', function() { slider.next(); });
```

Remember that these are simplified examples.  You can adapt them and add more features based on your project's requirements and the options and methods provided by the Unslider API.  Consult the complete API documentation for a full list of options and methods available.


## Contributing

We welcome contributions to Unslider!  Whether you're fixing bugs, adding features, or improving the documentation, your help is valuable.  Please follow these guidelines to ensure a smooth and collaborative contribution process.


### Contribution Guidelines

1. **Fork the Repository:**  Start by forking the official Unslider repository on GitHub.

2. **Create a Branch:** Create a new branch for your changes.  Use a descriptive name that clearly reflects the purpose of your contribution (e.g., "fix-bug-navigation", "add-feature-lazy-loading").

3. **Make Your Changes:**  Implement your changes, following consistent coding styles and best practices.  Keep your changes focused and well-organized.  Thoroughly test your modifications to ensure they work correctly and don't introduce new issues.

4. **Write Tests:** If you're adding or modifying functionality, write corresponding unit tests to ensure the code works as expected and remains robust.

5. **Update Documentation:** If your contribution affects the API, options, or usage, update the relevant sections of the documentation to reflect the changes.  Ensure the documentation remains clear, concise, and up-to-date.

6. **Commit Your Changes:**  Commit your changes with clear and concise commit messages that explain what you've done and why.  Follow a consistent commit message style.

7. **Submit a Pull Request:**  Submit a pull request to the official Unslider repository, clearly explaining your changes and their purpose.  Be prepared to address any feedback or suggestions from the maintainers.


### Code of Conduct

We expect all contributors to adhere to a professional and respectful code of conduct.  Be polite, considerate, and constructive in your interactions with other contributors and maintainers.  Harassment, discrimination, and abusive behavior will not be tolerated.  We strive to foster a welcoming and inclusive community where everyone feels comfortable contributing.


### Reporting Issues

If you discover a bug or have a feature request, please report it through the issue tracker on the Unslider GitHub repository.  Provide as much detail as possible, including:

* **Steps to reproduce:**  A clear and concise description of how to reproduce the issue.
* **Expected behavior:**  What you expected to happen.
* **Actual behavior:**  What actually happened.
* **Environment:**  Your operating system, browser, and any relevant dependencies.
* **Screenshots or screen recordings:** If applicable, include visual evidence to help illustrate the problem.


### Submitting Pull Requests

When submitting a pull request, please ensure:

* Your changes are well-documented.
* Your code is well-tested.
* Your commit messages are clear and concise.
* Your pull request description explains the purpose of your changes and addresses any relevant issues.
* You have addressed any feedback or suggestions from the code review.


We appreciate your contributions and look forward to working with you to improve Unslider!

