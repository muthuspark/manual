{"title":"fluidvids.js - Documentation","markdown":{"yaml":{"title":"fluidvids.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is fluidvids.js?\n\nfluidvids.js is a lightweight JavaScript library designed to make responsive video embedding effortless.  It intelligently handles various video embed codes (YouTube, Vimeo, Wistia, etc.) ensuring they scale proportionally with their container, maintaining aspect ratio and preventing distorted video playback on different screen sizes and devices.  Unlike CSS-only solutions, fluidvids.js gracefully handles edge cases and inconsistencies across different browsers and embed providers, offering a robust and reliable solution for responsive video integration.\n\n### Key Features and Benefits\n\n* **Responsive Video Embedding:** Automatically adjusts video size to maintain aspect ratio within its parent container, ensuring optimal viewing experience across all devices.\n* **Cross-Browser Compatibility:** Works seamlessly across major browsers, including Chrome, Firefox, Safari, and Edge.\n* **Multiple Provider Support:**  Handles embed codes from popular video platforms like YouTube, Vimeo, Wistia, and others, without requiring specific code adjustments for each.\n* **Lightweight and Efficient:**  Minimal code size adds little overhead to your website's performance.\n* **Easy Implementation:**  Simple integration with minimal HTML and JavaScript required.\n* **No Dependencies:** fluidvids.js doesn't require any other libraries or frameworks.\n\n\n### Getting Started: Installation and Setup\n\nThere are two primary ways to install and include fluidvids.js in your project:\n\n**1. Download and Include (Direct Method):**\n\n* Download the `fluidvids.js` file from https://github.com/toddmotto/fluidvids.\n* Place the `fluidvids.js` file in your project's JavaScript directory.\n* Include the script in your HTML file within the `<head>` or just before the closing `</body>` tag:\n\n```html\n<script src=\"path/to/fluidvids.js\"></script>\n```\nReplace `\"path/to/fluidvids.js\"` with the actual path to the downloaded file.  Fluidvids.js will automatically find and process video embeds on the page.\n\n\n**2. Using a Content Delivery Network (CDN):**\n\nFor quicker integration, you can use a CDN.  While this is less reliable for control over versions, it's often simpler:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/fluidvids@1.0.0/dist/fluidvids.min.js\"></script>  <!-- Replace 1.0.0 with the latest version number -->\n```\nAgain, ensure this script is included in your HTML `<head>` or before the closing `</body>` tag.  The CDN link might change; consult the project's documentation for the most up-to-date link.\n\n\n**After Installation:**\n\nNo further configuration is generally needed. fluidvids.js will automatically find and process any standard video embed code within your HTML, making your videos responsive.  Ensure your video embed code is correctly structured and placed within a container element with defined dimensions (e.g., `width` and `height` attributes or CSS styling).  If problems arise, inspect your HTML and ensure the video embed is correctly formatted.\n\n\n## Core Functionality\n\n### Basic Usage: Applying fluidvids.js to Videos\n\nfluidvids.js requires minimal setup. Once included in your HTML (as described in the Getting Started section), it automatically processes any standard video embed code found within the page.  There's no need to explicitly call any functions or add data attributes to your video elements.\n\nFor example, a standard YouTube embed:\n\n```html\n<div class=\"video-container\">\n  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yourVideoID\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</div>\n```\n\nWill be automatically made responsive. The `width` and `height` attributes within the `<iframe>` tag are used to determine the aspect ratio; these can be removed, but are advisable for providing fallback and initial sizing information for browsers without Javascript enabled.  The key is that the `<iframe>` is placed inside a container (`<div class=\"video-container\">` in this example).  The container's width will determine the video's width, while the height will adjust to maintain the aspect ratio.\n\n\n### Responsive Video Embedding\n\nThe core functionality of fluidvids.js is responsive video embedding.  As the browser window resizes, or the container holding the video changes dimensions, fluidvids.js dynamically adjusts the video's dimensions to maintain its aspect ratio. This prevents distortion and ensures the video always looks its best regardless of the screen size.  The library achieves this by calculating the aspect ratio from the initial dimensions given (or implied by the embed code itself) and applying proportional scaling based on the container's width.\n\n\n### Aspect Ratio and Sizing Options\n\nfluidvids.js automatically detects and respects the aspect ratio of the embedded video.  This is derived primarily from the `width` and `height` attributes of the `<iframe>` or `<video>` element.  If these attributes are missing or inaccurate, the library will attempt to infer the aspect ratio from the video content. In most cases, you should provide the dimensions in the embed code to ensure accuracy.  There are no additional options to explicitly control the aspect ratio.  Overriding the inherent aspect ratio would defeat the purpose of the library.  The library focuses on maintaining the intended ratio.\n\n\n### Customizing the Player Container\n\nYou have full control over the styling of the container element holding the video.  Any CSS applied to this container will affect the layout and appearance of the embedded video.  For instance, you can use CSS to control the:\n\n* **Width:**  The container's width primarily determines the video's displayed width.  You can use percentages, pixels, or any other valid CSS unit.\n* **Height:**  While the height is automatically adjusted to maintain aspect ratio, you can optionally specify a maximum height or other height constraints using CSS.\n* **Padding:** Add padding to create spacing around the video.\n* **Margins:** Control spacing between the container and surrounding elements.\n* **Background Color:**  Set a background color for the container.\n* **Border:**  Add borders to the container for visual separation.\n\nExample:\n\n```css\n.video-container {\n  width: 100%;\n  max-width: 800px;\n  margin: 20px auto;\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n}\n```\n\nThis CSS will make the video responsive, with a maximum width of 800 pixels, centered on the page, and with a light gray background and border.  Remember, the key is that fluidvids.js operates *on* the container, not directly on the embedded video itself.\n\n\n## Advanced Techniques\n\n### Working with Different Video Sources (YouTube, Vimeo, etc.)\n\nfluidvids.js is designed to work seamlessly with various video platforms.  It doesn't require any special handling for different embed codes.  Simply paste the standard embed code from YouTube, Vimeo, Wistia, or other providers into your HTML, and fluidvids.js will automatically process it.  The library identifies the video type based on the `src` attribute of the `<iframe>` or `<video>` tag.  There's no need for platform-specific configurations or adjustments.\n\nFor example, the following Vimeo and Wistia embed codes will both be handled correctly:\n\n**Vimeo:**\n\n```html\n<div class=\"video-container\">\n  <iframe src=\"https://player.vimeo.com/video/YOUR_VIMEO_VIDEO_ID\" width=\"640\" height=\"360\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n```\n\n**Wistia:**\n\n```html\n<div class=\"video-container\">\n  <iframe src=\"https://fast.wistia.net/embed/iframe/YOUR_WISTIA_HASH\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"640\" height=\"360\"></iframe>\n</div>\n```\n\nReplace `YOUR_VIMEO_VIDEO_ID` and `YOUR_WISTIA_HASH` with your actual video IDs.\n\n\n### Handling Multiple Videos on a Single Page\n\nfluidvids.js handles multiple videos on a single page automatically.  There's no need for special configuration or looping. The library iterates through the entire DOM once and processes all qualifying video embed elements it finds.  Each video will be made responsive independently.\n\nJust ensure that each video embed is correctly placed within its own container element.\n\n\n### Integrating with JavaScript Frameworks (React, Angular, Vue)\n\nIntegrating fluidvids.js with popular JavaScript frameworks like React, Angular, and Vue is straightforward.  The core approach involves including the library (using either direct inclusion or a CDN) within your application, and then rendering the video embed code within your component's JSX/template.  Because fluidvids.js operates directly on the DOM, it doesn't require specific framework integrations.  The timing might require some adjustment.\n\n**Example (React):**\n\n```jsx\nimport React, { useEffect } from 'react';\n\nfunction MyVideoComponent() {\n  useEffect(() => {\n    // Ensure fluidvids.js runs *after* the DOM is fully rendered\n    // This might not be strictly necessary in every case, but it's a best practice.\n    require('fluidvids'); // Or import using module bundler\n  }, []);\n\n  return (\n    <div className=\"video-container\">\n      <iframe src=\"https://www.youtube.com/embed/yourVideoID\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n    </div>\n  );\n}\n\nexport default MyVideoComponent;\n```\n\nRemember to adapt the import method to your chosen module bundler (Webpack, Parcel, etc.).  The key is to run the script after the DOM is fully rendered.\n\n\n### Custom Events and Callbacks\n\nfluidvids.js currently doesn't provide a mechanism for custom events or callbacks. Its operation is entirely automated and doesn't trigger any events after the video elements are processed.  Any additional events will need to be handled using the underlying video player's APIs (YouTube IFrame Player API, Vimeo's API, etc.).\n\n\n### Performance Optimization and Best Practices\n\n* **Efficient Container Selection:** Use a class name or other efficient selector to target video containers.  Avoid unnecessarily complex selectors that might slow down the DOM traversal.\n* **Minimize DOM Manipulation:** fluidvids.js already minimizes DOM manipulation, so no further optimizations are needed within the library's scope.\n* **Lazy Loading:** If you have many videos on a page, consider lazy loading them to improve initial page load time.  Load videos only when they are visible in the viewport.\n* **CDN Usage:** Using a CDN (as described in the Getting Started section) can improve performance by leveraging cached resources and reducing latency.\n* **Minified Version:** Always use the minified version of `fluidvids.js` for production deployments to reduce the file size.\n* **Caching:**  The browser itself will cache the fluidvids.js file.\n\n\n\n\n## API Reference\n\nfluidvids.js is designed to be simple and self-contained.  It doesn't expose a large or complex API. Its core functionality operates automatically after inclusion in your HTML.  However, some aspects of its behavior can be influenced and controlled through the options explained below.\n\n\n### fluidvids() Function Options\n\nfluidvids.js does *not* offer a `fluidvids()` function with options that can be directly called.  Its functionality is entirely handled automatically upon inclusion in the HTML page.  All configuration is done via CSS styling of the video container element.  There are no parameters or options that can be passed to a `fluidvids()` function to alter its behavior at runtime.\n\n\n\n### Event Handling\n\nfluidvids.js itself does not trigger any custom events.  Any event handling needs to be done through the APIs provided by the video embedding service (YouTube IFrame API, Vimeo API, etc.).  For example, if you want to respond to a video play event, you need to use the `onStateChange` or similar event of the YouTube IFrame Player API, not an event offered by fluidvids.js.\n\n\n### Methods and Properties\n\nfluidvids.js does not expose any public methods or properties.  It operates entirely passively, automatically processing video elements upon page load.  There are no functions that can be called to directly interact with or manipulate the library after its initial execution.  Any interaction with the videos themselves is done through the methods and properties exposed by the embedding service's own APIs.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Videos not becoming responsive:**  The most common issue is incorrect HTML structure. Ensure that each video embed (`<iframe>` or `<video>`) is contained within a parent element (e.g., a `<div>`).  This container needs to have defined dimensions (either explicitly with `width` and `height` attributes or implicitly through CSS). The `width` attribute of the container is crucial, as the video's width will scale proportionally from this. Check your browser's developer console for JavaScript errors.  Ensure fluidvids.js is correctly included in your HTML.\n\n* **Distorted videos:** This usually indicates a problem with the aspect ratio. Double-check the `width` and `height` attributes of the embedded `<iframe>` or `<video>` tag.  If they are missing or incorrect, the library might infer a wrong aspect ratio.  Incorrectly specifying dimensions in CSS could also lead to this issue.\n\n* **Videos not appearing at all:** Verify that the video embed code itself is correct and working. Test it outside the context of fluidvids.js to rule out issues with the embed code itself.  Ensure that your video hosting service is functioning correctly and that the video is publicly accessible.  Check for JavaScript errors in your browser's developer console.\n\n* **Conflicts with other JavaScript libraries:** Conflicts are unlikely given fluidvids.js's minimal nature. If such a conflict occurs, carefully review your JavaScript inclusion order.  If the conflict is unavoidable, consider using the direct method (download and include) rather than a CDN to ensure consistent library versions.\n\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML and CSS of your video containers. Check for errors in the console.  Examine the computed styles to see the actual dimensions being applied.\n\n* **Simplify your HTML:** Create a minimal test case with just one video embed and its container to isolate the problem.  This will help determine if the issue stems from your HTML structure, CSS styling, or a conflict with other code.\n\n* **Inspect Network Requests:** Use your browser's developer tools to ensure `fluidvids.js` is correctly loaded and processed without errors.  Inspect the network tab to check for loading failures.\n\n* **Check your JavaScript inclusion order:** Ensure fluidvids.js is included after the elements it is supposed to modify are present in the DOM.\n\n\n### Browser Compatibility\n\nfluidvids.js is designed to work across modern browsers.  While extensive testing across all browsers and versions isn't feasible, it should function correctly on any browser that supports modern JavaScript and CSS.  Very old or outdated browsers may encounter compatibility issues.  However, this is unlikely to be an issue for the majority of users in modern web environments.  If you encounter problems with an older browser, try updating it.  If this is impossible, you might need alternative solutions for that specific browser.\n\n\n## Contributing\n\n### Contributing to the Project\n\nContributions to fluidvids.js are welcome!  If you find bugs, have suggestions for improvements, or want to add new features, please follow these guidelines:\n\n1. **Fork the Repository:** Fork the official fluidvids.js repository on GitHub.\n\n2. **Create a Branch:** Create a new branch for your contribution.  Use descriptive branch names (e.g., `fix/bug-responsive-on-IE11`, `feature/add-custom-events`).\n\n3. **Make Your Changes:** Make your code changes, ensuring they adhere to the existing coding style and conventions.  Write clear and concise commit messages.\n\n4. **Test Thoroughly:** Test your changes thoroughly to ensure they don't introduce new bugs or regressions.\n\n5. **Create a Pull Request:** Submit a pull request to the main repository, clearly describing your changes and their purpose.\n\n\n### Reporting Issues\n\nIf you encounter any bugs or have feature requests, please report them through the GitHub issue tracker:  [https://github.com/toddmotto/fluidvids](https://github.com/toddmotto/fluidvids)\n\nWhen reporting an issue, please provide the following information:\n\n* **Detailed Description:** A clear and concise description of the problem.\n* **Reproducible Steps:** Steps to reproduce the issue.\n* **Expected Behavior:** What you expected to happen.\n* **Actual Behavior:** What actually happened.\n* **Browser and Version:** The browser and version you're using.\n* **Operating System:** Your operating system.\n* **Relevant Code Snippets:**  If applicable, share relevant parts of your HTML and CSS code.\n\n\n### Submitting Pull Requests\n\nWhen submitting a pull request, follow these guidelines:\n\n* **Clear Title:** Use a clear and concise title that accurately reflects the changes in your pull request.\n* **Detailed Description:** Provide a detailed description of your changes, including the reason for the changes and any relevant context.\n* **Code Style:** Adhere to the existing code style and conventions of the project.  Use a consistent coding style throughout your changes.\n* **Testing:** Ensure your changes are thoroughly tested.  Include relevant unit tests if appropriate.\n* **Documentation:** Update any relevant documentation to reflect your changes.\n\n\nBefore submitting a pull request, ensure that your code passes all automated tests (if applicable).  The maintainers will review your pull request and provide feedback.  Be prepared to address any comments or suggestions made during the review process.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is fluidvids.js?\n\nfluidvids.js is a lightweight JavaScript library designed to make responsive video embedding effortless.  It intelligently handles various video embed codes (YouTube, Vimeo, Wistia, etc.) ensuring they scale proportionally with their container, maintaining aspect ratio and preventing distorted video playback on different screen sizes and devices.  Unlike CSS-only solutions, fluidvids.js gracefully handles edge cases and inconsistencies across different browsers and embed providers, offering a robust and reliable solution for responsive video integration.\n\n### Key Features and Benefits\n\n* **Responsive Video Embedding:** Automatically adjusts video size to maintain aspect ratio within its parent container, ensuring optimal viewing experience across all devices.\n* **Cross-Browser Compatibility:** Works seamlessly across major browsers, including Chrome, Firefox, Safari, and Edge.\n* **Multiple Provider Support:**  Handles embed codes from popular video platforms like YouTube, Vimeo, Wistia, and others, without requiring specific code adjustments for each.\n* **Lightweight and Efficient:**  Minimal code size adds little overhead to your website's performance.\n* **Easy Implementation:**  Simple integration with minimal HTML and JavaScript required.\n* **No Dependencies:** fluidvids.js doesn't require any other libraries or frameworks.\n\n\n### Getting Started: Installation and Setup\n\nThere are two primary ways to install and include fluidvids.js in your project:\n\n**1. Download and Include (Direct Method):**\n\n* Download the `fluidvids.js` file from https://github.com/toddmotto/fluidvids.\n* Place the `fluidvids.js` file in your project's JavaScript directory.\n* Include the script in your HTML file within the `<head>` or just before the closing `</body>` tag:\n\n```html\n<script src=\"path/to/fluidvids.js\"></script>\n```\nReplace `\"path/to/fluidvids.js\"` with the actual path to the downloaded file.  Fluidvids.js will automatically find and process video embeds on the page.\n\n\n**2. Using a Content Delivery Network (CDN):**\n\nFor quicker integration, you can use a CDN.  While this is less reliable for control over versions, it's often simpler:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/fluidvids@1.0.0/dist/fluidvids.min.js\"></script>  <!-- Replace 1.0.0 with the latest version number -->\n```\nAgain, ensure this script is included in your HTML `<head>` or before the closing `</body>` tag.  The CDN link might change; consult the project's documentation for the most up-to-date link.\n\n\n**After Installation:**\n\nNo further configuration is generally needed. fluidvids.js will automatically find and process any standard video embed code within your HTML, making your videos responsive.  Ensure your video embed code is correctly structured and placed within a container element with defined dimensions (e.g., `width` and `height` attributes or CSS styling).  If problems arise, inspect your HTML and ensure the video embed is correctly formatted.\n\n\n## Core Functionality\n\n### Basic Usage: Applying fluidvids.js to Videos\n\nfluidvids.js requires minimal setup. Once included in your HTML (as described in the Getting Started section), it automatically processes any standard video embed code found within the page.  There's no need to explicitly call any functions or add data attributes to your video elements.\n\nFor example, a standard YouTube embed:\n\n```html\n<div class=\"video-container\">\n  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yourVideoID\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</div>\n```\n\nWill be automatically made responsive. The `width` and `height` attributes within the `<iframe>` tag are used to determine the aspect ratio; these can be removed, but are advisable for providing fallback and initial sizing information for browsers without Javascript enabled.  The key is that the `<iframe>` is placed inside a container (`<div class=\"video-container\">` in this example).  The container's width will determine the video's width, while the height will adjust to maintain the aspect ratio.\n\n\n### Responsive Video Embedding\n\nThe core functionality of fluidvids.js is responsive video embedding.  As the browser window resizes, or the container holding the video changes dimensions, fluidvids.js dynamically adjusts the video's dimensions to maintain its aspect ratio. This prevents distortion and ensures the video always looks its best regardless of the screen size.  The library achieves this by calculating the aspect ratio from the initial dimensions given (or implied by the embed code itself) and applying proportional scaling based on the container's width.\n\n\n### Aspect Ratio and Sizing Options\n\nfluidvids.js automatically detects and respects the aspect ratio of the embedded video.  This is derived primarily from the `width` and `height` attributes of the `<iframe>` or `<video>` element.  If these attributes are missing or inaccurate, the library will attempt to infer the aspect ratio from the video content. In most cases, you should provide the dimensions in the embed code to ensure accuracy.  There are no additional options to explicitly control the aspect ratio.  Overriding the inherent aspect ratio would defeat the purpose of the library.  The library focuses on maintaining the intended ratio.\n\n\n### Customizing the Player Container\n\nYou have full control over the styling of the container element holding the video.  Any CSS applied to this container will affect the layout and appearance of the embedded video.  For instance, you can use CSS to control the:\n\n* **Width:**  The container's width primarily determines the video's displayed width.  You can use percentages, pixels, or any other valid CSS unit.\n* **Height:**  While the height is automatically adjusted to maintain aspect ratio, you can optionally specify a maximum height or other height constraints using CSS.\n* **Padding:** Add padding to create spacing around the video.\n* **Margins:** Control spacing between the container and surrounding elements.\n* **Background Color:**  Set a background color for the container.\n* **Border:**  Add borders to the container for visual separation.\n\nExample:\n\n```css\n.video-container {\n  width: 100%;\n  max-width: 800px;\n  margin: 20px auto;\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n}\n```\n\nThis CSS will make the video responsive, with a maximum width of 800 pixels, centered on the page, and with a light gray background and border.  Remember, the key is that fluidvids.js operates *on* the container, not directly on the embedded video itself.\n\n\n## Advanced Techniques\n\n### Working with Different Video Sources (YouTube, Vimeo, etc.)\n\nfluidvids.js is designed to work seamlessly with various video platforms.  It doesn't require any special handling for different embed codes.  Simply paste the standard embed code from YouTube, Vimeo, Wistia, or other providers into your HTML, and fluidvids.js will automatically process it.  The library identifies the video type based on the `src` attribute of the `<iframe>` or `<video>` tag.  There's no need for platform-specific configurations or adjustments.\n\nFor example, the following Vimeo and Wistia embed codes will both be handled correctly:\n\n**Vimeo:**\n\n```html\n<div class=\"video-container\">\n  <iframe src=\"https://player.vimeo.com/video/YOUR_VIMEO_VIDEO_ID\" width=\"640\" height=\"360\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n```\n\n**Wistia:**\n\n```html\n<div class=\"video-container\">\n  <iframe src=\"https://fast.wistia.net/embed/iframe/YOUR_WISTIA_HASH\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"640\" height=\"360\"></iframe>\n</div>\n```\n\nReplace `YOUR_VIMEO_VIDEO_ID` and `YOUR_WISTIA_HASH` with your actual video IDs.\n\n\n### Handling Multiple Videos on a Single Page\n\nfluidvids.js handles multiple videos on a single page automatically.  There's no need for special configuration or looping. The library iterates through the entire DOM once and processes all qualifying video embed elements it finds.  Each video will be made responsive independently.\n\nJust ensure that each video embed is correctly placed within its own container element.\n\n\n### Integrating with JavaScript Frameworks (React, Angular, Vue)\n\nIntegrating fluidvids.js with popular JavaScript frameworks like React, Angular, and Vue is straightforward.  The core approach involves including the library (using either direct inclusion or a CDN) within your application, and then rendering the video embed code within your component's JSX/template.  Because fluidvids.js operates directly on the DOM, it doesn't require specific framework integrations.  The timing might require some adjustment.\n\n**Example (React):**\n\n```jsx\nimport React, { useEffect } from 'react';\n\nfunction MyVideoComponent() {\n  useEffect(() => {\n    // Ensure fluidvids.js runs *after* the DOM is fully rendered\n    // This might not be strictly necessary in every case, but it's a best practice.\n    require('fluidvids'); // Or import using module bundler\n  }, []);\n\n  return (\n    <div className=\"video-container\">\n      <iframe src=\"https://www.youtube.com/embed/yourVideoID\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n    </div>\n  );\n}\n\nexport default MyVideoComponent;\n```\n\nRemember to adapt the import method to your chosen module bundler (Webpack, Parcel, etc.).  The key is to run the script after the DOM is fully rendered.\n\n\n### Custom Events and Callbacks\n\nfluidvids.js currently doesn't provide a mechanism for custom events or callbacks. Its operation is entirely automated and doesn't trigger any events after the video elements are processed.  Any additional events will need to be handled using the underlying video player's APIs (YouTube IFrame Player API, Vimeo's API, etc.).\n\n\n### Performance Optimization and Best Practices\n\n* **Efficient Container Selection:** Use a class name or other efficient selector to target video containers.  Avoid unnecessarily complex selectors that might slow down the DOM traversal.\n* **Minimize DOM Manipulation:** fluidvids.js already minimizes DOM manipulation, so no further optimizations are needed within the library's scope.\n* **Lazy Loading:** If you have many videos on a page, consider lazy loading them to improve initial page load time.  Load videos only when they are visible in the viewport.\n* **CDN Usage:** Using a CDN (as described in the Getting Started section) can improve performance by leveraging cached resources and reducing latency.\n* **Minified Version:** Always use the minified version of `fluidvids.js` for production deployments to reduce the file size.\n* **Caching:**  The browser itself will cache the fluidvids.js file.\n\n\n\n\n## API Reference\n\nfluidvids.js is designed to be simple and self-contained.  It doesn't expose a large or complex API. Its core functionality operates automatically after inclusion in your HTML.  However, some aspects of its behavior can be influenced and controlled through the options explained below.\n\n\n### fluidvids() Function Options\n\nfluidvids.js does *not* offer a `fluidvids()` function with options that can be directly called.  Its functionality is entirely handled automatically upon inclusion in the HTML page.  All configuration is done via CSS styling of the video container element.  There are no parameters or options that can be passed to a `fluidvids()` function to alter its behavior at runtime.\n\n\n\n### Event Handling\n\nfluidvids.js itself does not trigger any custom events.  Any event handling needs to be done through the APIs provided by the video embedding service (YouTube IFrame API, Vimeo API, etc.).  For example, if you want to respond to a video play event, you need to use the `onStateChange` or similar event of the YouTube IFrame Player API, not an event offered by fluidvids.js.\n\n\n### Methods and Properties\n\nfluidvids.js does not expose any public methods or properties.  It operates entirely passively, automatically processing video elements upon page load.  There are no functions that can be called to directly interact with or manipulate the library after its initial execution.  Any interaction with the videos themselves is done through the methods and properties exposed by the embedding service's own APIs.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Videos not becoming responsive:**  The most common issue is incorrect HTML structure. Ensure that each video embed (`<iframe>` or `<video>`) is contained within a parent element (e.g., a `<div>`).  This container needs to have defined dimensions (either explicitly with `width` and `height` attributes or implicitly through CSS). The `width` attribute of the container is crucial, as the video's width will scale proportionally from this. Check your browser's developer console for JavaScript errors.  Ensure fluidvids.js is correctly included in your HTML.\n\n* **Distorted videos:** This usually indicates a problem with the aspect ratio. Double-check the `width` and `height` attributes of the embedded `<iframe>` or `<video>` tag.  If they are missing or incorrect, the library might infer a wrong aspect ratio.  Incorrectly specifying dimensions in CSS could also lead to this issue.\n\n* **Videos not appearing at all:** Verify that the video embed code itself is correct and working. Test it outside the context of fluidvids.js to rule out issues with the embed code itself.  Ensure that your video hosting service is functioning correctly and that the video is publicly accessible.  Check for JavaScript errors in your browser's developer console.\n\n* **Conflicts with other JavaScript libraries:** Conflicts are unlikely given fluidvids.js's minimal nature. If such a conflict occurs, carefully review your JavaScript inclusion order.  If the conflict is unavoidable, consider using the direct method (download and include) rather than a CDN to ensure consistent library versions.\n\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML and CSS of your video containers. Check for errors in the console.  Examine the computed styles to see the actual dimensions being applied.\n\n* **Simplify your HTML:** Create a minimal test case with just one video embed and its container to isolate the problem.  This will help determine if the issue stems from your HTML structure, CSS styling, or a conflict with other code.\n\n* **Inspect Network Requests:** Use your browser's developer tools to ensure `fluidvids.js` is correctly loaded and processed without errors.  Inspect the network tab to check for loading failures.\n\n* **Check your JavaScript inclusion order:** Ensure fluidvids.js is included after the elements it is supposed to modify are present in the DOM.\n\n\n### Browser Compatibility\n\nfluidvids.js is designed to work across modern browsers.  While extensive testing across all browsers and versions isn't feasible, it should function correctly on any browser that supports modern JavaScript and CSS.  Very old or outdated browsers may encounter compatibility issues.  However, this is unlikely to be an issue for the majority of users in modern web environments.  If you encounter problems with an older browser, try updating it.  If this is impossible, you might need alternative solutions for that specific browser.\n\n\n## Contributing\n\n### Contributing to the Project\n\nContributions to fluidvids.js are welcome!  If you find bugs, have suggestions for improvements, or want to add new features, please follow these guidelines:\n\n1. **Fork the Repository:** Fork the official fluidvids.js repository on GitHub.\n\n2. **Create a Branch:** Create a new branch for your contribution.  Use descriptive branch names (e.g., `fix/bug-responsive-on-IE11`, `feature/add-custom-events`).\n\n3. **Make Your Changes:** Make your code changes, ensuring they adhere to the existing coding style and conventions.  Write clear and concise commit messages.\n\n4. **Test Thoroughly:** Test your changes thoroughly to ensure they don't introduce new bugs or regressions.\n\n5. **Create a Pull Request:** Submit a pull request to the main repository, clearly describing your changes and their purpose.\n\n\n### Reporting Issues\n\nIf you encounter any bugs or have feature requests, please report them through the GitHub issue tracker:  [https://github.com/toddmotto/fluidvids](https://github.com/toddmotto/fluidvids)\n\nWhen reporting an issue, please provide the following information:\n\n* **Detailed Description:** A clear and concise description of the problem.\n* **Reproducible Steps:** Steps to reproduce the issue.\n* **Expected Behavior:** What you expected to happen.\n* **Actual Behavior:** What actually happened.\n* **Browser and Version:** The browser and version you're using.\n* **Operating System:** Your operating system.\n* **Relevant Code Snippets:**  If applicable, share relevant parts of your HTML and CSS code.\n\n\n### Submitting Pull Requests\n\nWhen submitting a pull request, follow these guidelines:\n\n* **Clear Title:** Use a clear and concise title that accurately reflects the changes in your pull request.\n* **Detailed Description:** Provide a detailed description of your changes, including the reason for the changes and any relevant context.\n* **Code Style:** Adhere to the existing code style and conventions of the project.  Use a consistent coding style throughout your changes.\n* **Testing:** Ensure your changes are thoroughly tested.  Include relevant unit tests if appropriate.\n* **Documentation:** Update any relevant documentation to reflect your changes.\n\n\nBefore submitting a pull request, ensure that your code passes all automated tests (if applicable).  The maintainers will review your pull request and provide feedback.  Be prepared to address any comments or suggestions made during the review process.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"fluidvidsjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"fluidvids.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}