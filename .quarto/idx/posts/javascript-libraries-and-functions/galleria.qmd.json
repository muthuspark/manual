{"title":"Galleria - Documentation","markdown":{"yaml":{"title":"Galleria - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is Galleria?\n\nGalleria is a powerful and flexible open-source image gallery framework designed for creating stunning and responsive image galleries.  It provides a clean, modern interface and a variety of customization options to help developers easily integrate beautiful image galleries into their web applications. Galleria prioritizes performance and ease of use, allowing developers to focus on the creative aspects of their projects without getting bogged down in complex code. It supports a wide range of features, including image transitions, captions, thumbnails, and responsive design, all easily configurable through a straightforward API.\n\n### Key Features\n\n* **Responsive Design:** Galleria automatically adapts to different screen sizes and devices, ensuring optimal viewing experience across desktops, tablets, and smartphones.\n* **Customizable Themes:**  Easily customize the look and feel of your gallery using pre-built themes or by creating your own.  Complete control over colors, fonts, and layout is provided.\n* **Smooth Transitions:**  Choose from a selection of elegant and smooth image transitions to enhance the user experience.\n* **Thumbnail Navigation:**  Display thumbnails for easy navigation and browsing of the gallery images.\n* **Caption Support:**  Add descriptive captions to individual images to provide context and information.\n* **Full-Screen Mode:**  Allow users to view images in full-screen mode for an immersive experience.\n* **Lightweight and Fast:**  Galleria is optimized for performance, ensuring quick loading times and smooth navigation, even with large galleries.\n* **Extensive API:**  A comprehensive API provides granular control over all aspects of the gallery's functionality and appearance.\n* **Cross-Browser Compatibility:**  Works seamlessly across all major web browsers.\n* **Easy Integration:**  Simple and straightforward integration into existing web projects.\n\n\n### Target Audience\n\nGalleria is designed for web developers of all skill levels, from beginners to experts.  Its intuitive API and extensive documentation make it accessible to those new to image gallery development, while its powerful features and flexibility cater to the needs of experienced developers building complex and customized galleries.  Anyone needing to integrate a visually appealing and high-performing image gallery into a website or web application will find Galleria a valuable tool.\n\n\n### Setting up the Development Environment\n\nTo start developing with Galleria, you'll need the following:\n\n1. **Code Editor:** Choose a suitable code editor or IDE (Integrated Development Environment) such as Visual Studio Code, Sublime Text, Atom, or WebStorm.\n\n2. **Galleria Files:** Download the latest version of Galleria from the official website or repository (link to be provided).  This will typically include CSS, JavaScript, and potentially HTML template files.\n\n3. **Web Server (Recommended):** While not strictly required for basic testing, using a local web server (like XAMPP, MAMP, or WAMP for Windows/Mac/Linux respectively, or even a simple Python `http.server`) is highly recommended for proper development and testing.  This ensures all assets load correctly, preventing potential issues related to file path resolution.\n\n4. **Basic HTML Knowledge:** A foundational understanding of HTML is necessary to integrate Galleria into your web pages.\n\nOnce you have these prerequisites, you can begin by creating a basic HTML file and including the necessary Galleria files (CSS and JavaScript). The Galleria documentation provides detailed instructions and examples to guide you through the integration process and showcase various configurations.  Consult the API documentation for advanced customization options.\n\n\n## Getting Started\n\n### Installation\n\nGalleria offers several installation methods to suit your workflow.\n\n**Method 1: Using a CDN (Content Delivery Network):** The simplest way to include Galleria is via a CDN.  This avoids the need to download and manage files locally.  Add the following lines within the `<head>` section of your HTML file:\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n```\nReplace `@latest` with a specific version number for better version control if needed.  Check the official Galleria documentation for the most up-to-date CDN links.\n\n**Method 2: Downloading and Including Locally:** Download the Galleria package from the official website or repository. Extract the contents and place the necessary CSS and JavaScript files in your project's directory. Then, link them in your HTML as follows:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/galleria/css/galleria.min.css\">\n<script src=\"path/to/galleria/js/galleria.min.js\"></script>\n```\nRemember to replace `\"path/to/galleria\"` with the actual path to the Galleria files in your project.\n\n\n### Basic Usage\n\nAfter including the Galleria files (using either CDN or local installation), you need to create a container element for the gallery and initialize Galleria using JavaScript.  The basic structure looks like this:\n\n```html\n<div id=\"galleria\">\n  <img src=\"image1.jpg\" data-title=\"Image 1\">\n  <img src=\"image2.jpg\" data-title=\"Image 2\">\n  <img src=\"image3.jpg\" data-description=\"A longer description for image 3.\">\n</div>\n\n<script>\n  Galleria.run('#galleria');\n</script>\n```\n\nReplace `\"image1.jpg\"`, `\"image2.jpg\"`, `\"image3.jpg\"` with the paths to your images.  The `data-title` attribute provides a caption for each image, and `data-description` adds a longer description displayed separately (depending on your theme).  The `#galleria` selector targets the div element with the ID \"galleria\".\n\n\n### First Example\n\nHere's a complete example demonstrating a simple Galleria implementation:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Galleria Example</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\" data-title=\"Image 1\">\n  <img src=\"image2.jpg\" data-title=\"Image 2\">\n  <img src=\"image3.jpg\" data-title=\"Image 3\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script>\n  Galleria.run('#galleria');\n</script>\n</body>\n</html>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, and `\"image3.jpg\"` with actual image paths.  This minimal example will create a basic image gallery.\n\n\n### Project Setup\n\nFor larger projects, consider a more organized approach:\n\n1. **Project Structure:** Create a dedicated folder for your project.  Organize your files into subfolders for images, CSS, JavaScript, and HTML.\n\n2. **Version Control (Git):** Use a version control system like Git to manage your project's codebase.  This allows for easy tracking of changes and collaboration.\n\n3. **Task Runner (Optional):** Tools like npm or yarn with a build process (e.g., using Webpack or Parcel) can streamline development by automating tasks such as minification, concatenation, and other optimization processes.\n\n4. **Image Optimization:** Optimize your images for web use to minimize file sizes and improve loading times. Tools like ImageOptim or TinyPNG can help.\n\n5. **Testing:** Test your gallery across various browsers and devices to ensure compatibility and responsiveness.  Consider using browser developer tools for debugging.\n\nBy following these guidelines, you can establish a robust and maintainable development environment for your Galleria projects.  Remember to consult the Galleria documentation for detailed information and more advanced configuration options.\n\n\n## Core Concepts\n\n### Image Loading and Caching\n\nGalleria employs efficient image loading and caching mechanisms to optimize performance and provide a smooth user experience.  Images are loaded on demand, meaning only the currently viewed image and its immediate neighbors (for smooth transitions) are loaded into memory.  Galleria intelligently caches loaded images to prevent redundant downloads when navigating through the gallery. This caching is handled automatically, but you can influence the caching behavior through certain configuration options (refer to the API documentation for details).  The caching strategy aims to balance responsiveness with memory usage. For very large galleries, consider optimizing image sizes and potentially implementing additional strategies for managing image loading at scale.\n\n### Thumbnails Generation\n\nGalleria doesn't automatically generate thumbnails.  You are responsible for providing thumbnail images alongside your main images.  This gives you complete control over the appearance and dimensions of your thumbnails.  You can use image editing software or other tools to create thumbnails beforehand.   When including images in your Galleria setup,  you would typically include both the main image (`<img src=\"large_image.jpg\">`) and its corresponding thumbnail, often using data attributes to link them (e.g.,  `data-thumb=\"thumbnail_image.jpg\"`).  The exact method for linking thumbnails to main images depends on the specific Galleria configuration and might involve using custom functions or utilizing the API to define the relationship.  Refer to the API documentation for details on how to specify thumbnail images for your gallery.\n\n### Navigation and Controls\n\nGalleria provides intuitive navigation controls by default.  These usually include clickable arrows for moving between images, and often thumbnail navigation allowing users to select specific images.  The exact controls available depend on the theme and any custom configurations applied.  The API allows for extensive control over these elements. You can customize or disable certain controls, add custom controls, or even completely replace the default navigation behavior using custom JavaScript functions.  For example, you could integrate keyboard controls, touch gestures, or create a custom pagination system. The key is to use the Galleria API to modify the existing navigation elements or create completely new ones.\n\n\n### Responsive Design\n\nGalleria is inherently designed to be responsive. It adapts to different screen sizes and device orientations, providing an optimal viewing experience across various devices.  This responsiveness is primarily achieved through CSS media queries and flexible layout techniques.  However, you should ensure your images are appropriately sized and optimized for different screen resolutions to avoid performance issues. Using appropriately sized images prevents unnecessary scaling, which can degrade image quality and negatively impact loading times. The provided CSS and HTML structures are optimized to work across various screen sizes and devices. However, for more complex responsive designs or customization, refer to the API documentation to further tailor the behavior of the gallery based on screen size.\n\n### Accessibility\n\nGalleria aims for good accessibility.  By default, it provides keyboard navigation and ARIA attributes (Accessible Rich Internet Applications) to improve usability for people with disabilities.  However, further improvements might be needed depending on your specific implementation and the complexity of the gallery.  Ensure your image captions (`data-title` and `data-description` attributes) are descriptive and informative.  For screen reader users, provide alternative text descriptions for all images, ensuring that the content is clearly understood without visual context. Consider also providing sufficient color contrast and making sure interactive elements have clear visual cues. Consult accessibility guidelines (like WCAG) and implement suitable ARIA attributes to enhance the accessibility of your gallery further.  The Galleria API can be used to enhance accessibility features to integrate additional assistive technologies or fine-tune the elements already provided.\n\n\n## API Reference\n\nThis section provides a detailed overview of Galleria's API, allowing for advanced customization and control over the gallery's behavior and appearance.  For complete and up-to-date information, please consult the official Galleria documentation.  The examples below are simplified for illustrative purposes.\n\n\n### Constructor Options\n\nThe Galleria constructor accepts several options to configure the gallery's behavior. These options are passed as a JavaScript object to the `Galleria.run()` function.  Here are some key options:\n\n* **`width` (number):** Specifies the width of the gallery.\n* **`height` (number):** Specifies the height of the gallery.\n* **`transition` (string):**  Sets the transition effect between images (e.g., 'fade', 'slide').\n* **`autoplay` (boolean):** Enables or disables automatic image slideshow.\n* **`showInfo` (boolean):** Shows or hides image information (captions, etc.).\n* **`thumbnails` (boolean):** Enables or disables thumbnail navigation.\n* **`dataSource` (array or string):**  Specifies the data source for the gallery. Can be an array of image objects or a selector string.\n\n**Example:**\n\n```javascript\nGalleria.run('#galleria', {\n  width: 600,\n  height: 400,\n  transition: 'slide',\n  autoplay: true,\n  showInfo: true\n});\n```\n\n\n### Methods\n\nGalleria provides several methods to interact with the gallery after initialization.  These methods are called on the Galleria instance.  Here are a few important ones:\n\n* **`Galleria.get(selector)`:** Returns a Galleria instance for the given selector.\n* **`gallery.play()`:** Starts the autoplay slideshow.\n* **`gallery.pause()`:** Pauses the autoplay slideshow.\n* **`gallery.next()`:** Moves to the next image.\n* **`gallery.prev()`:** Moves to the previous image.\n* **`gallery.show(index)`:** Shows the image at the specified index.\n* **`gallery.destroy()`:** Destroys the Galleria instance, removing the gallery from the DOM.\n\n**Example:**\n\n```javascript\nlet gallery = Galleria.get('#galleria');\ngallery.play();\ngallery.show(2); // Shows the third image (index 0-based).\n```\n\n### Events\n\nGalleria triggers several events during its lifecycle.  You can listen for these events using the `on()` method.\n\n* **`loadstart`:** Fired when image loading begins.\n* **`loadfinish`:** Fired when image loading completes.\n* **`image`:** Fired when a new image is displayed.\n* **`play`:** Fired when autoplay starts.\n* **`pause`:** Fired when autoplay pauses.\n* **`fullscreen`:** Fired when full-screen mode is toggled.\n\n**Example:**\n\n```javascript\nGalleria.get('#galleria').on('image', function(e) {\n  console.log('Current image:', e.index);\n});\n```\n\n### Callbacks\n\nCallbacks provide a way to execute custom functions at specific points during the gallery's lifecycle. Several callbacks can be specified as options during initialization. For example:\n\n* **`onImage` (function):** A callback executed when an image is displayed. It receives the current image index as an argument.\n* **`onError` (function):** A callback executed if an image fails to load.\n\n\n**Example (using `onImage` callback):**\n\n```javascript\nGalleria.run('#galleria', {\n  onImage: function(index) {\n    console.log('Image ' + (index + 1) + ' is displayed.');\n  }\n});\n\n```\n\nRemember to consult the official Galleria documentation for a complete list of available constructor options, methods, events, and callbacks, along with detailed explanations and examples. The specific API may vary depending on the version of Galleria you are using.\n\n\n## Customization\n\nGalleria offers extensive customization options to tailor the gallery to your specific design and functionality requirements.\n\n### Themes and Styling\n\nGalleria allows for easy customization of the gallery's appearance through themes and direct CSS styling.\n\n* **Themes:** Galleria may provide pre-built themes that you can easily apply by including a different CSS file.  Check the documentation for available themes and how to apply them.  These themes typically modify the colors, fonts, layout, and overall look of the gallery.\n\n* **Custom CSS:** For more granular control, you can directly style the gallery using custom CSS.  Galleria's CSS classes provide targeting mechanisms for specific elements within the gallery. Inspect the gallery's HTML structure using your browser's developer tools to identify the classes you need to target.  Override default styles or add entirely new styles to create a unique look and feel.  Remember to place your custom CSS after the Galleria CSS file to ensure your styles override the default ones.\n\n* **Customizing HTML Structure (Advanced):** For deeply customized theming beyond simple CSS changes, you might need to modify the HTML structure itself, carefully understanding the implications and consequences.  This level of customization is generally only necessary for complex designs that require fundamental changes to the gallery's layout or composition.  Refer to the advanced customization section in the official documentation before attempting significant HTML alterations.\n\n### Customizing Navigation\n\nGalleria's navigation can be customized to match your design preferences and user experience goals.\n\n* **Modifying Existing Controls:** You can use CSS to style existing navigation elements like the previous/next buttons and thumbnails.  Adjust their size, appearance, position, or even their visual presence by showing or hiding them.\n\n* **Adding Custom Controls:** The Galleria API provides methods to add custom navigation elements.  You can create new buttons or controls (e.g., a custom jump-to-image feature) and integrate them into the gallery using JavaScript.  The API documentation will detail the required steps and methods for injecting new controls into the navigation system.\n\n* **Altering Navigation Behavior:** You can change the default navigation behavior (e.g., disabling autoplay, altering the transition speed or effect). This is usually accomplished through the configuration options provided to the Galleria constructor or by using methods on the Galleria instance to programmatically control the navigation.\n\n### Extending Functionality with Plugins\n\nGalleria supports the use of plugins to extend its functionality.  Plugins provide a modular way to add new features without modifying the core Galleria code.  These plugins might add things like lightbox functionality, social media sharing options, image zooming, or other features.  Consult the Galleria documentation to identify available plugins and learn how to integrate them into your project.  Some plugins might require additional configuration or integration steps beyond simple inclusion.\n\n### Integration with Other Libraries\n\nGalleria can be integrated with other JavaScript libraries to enhance its capabilities.  For example:\n\n* **Image Manipulation Libraries:** Integrate libraries like Cropper.js for in-place image cropping or other libraries for advanced image manipulation.\n\n* **UI Frameworks:**  Galleria can be incorporated into projects using frameworks like React, Angular, or Vue.js.  This will require adapting the integration methods to the specific framework's structure and component lifecycle.\n\n* **Other JavaScript Libraries:** Integrate libraries for adding functionalities like full-screen controls, advanced animation effects, or other features that complement the gallery.\n\nCareful consideration is required to ensure compatibility between Galleria and the chosen libraries, especially regarding potential conflicts or overlapping functionality.  Thorough testing is essential when integrating multiple libraries.  Always refer to the documentation for both Galleria and the other libraries for guidance on integrating them correctly.\n\n\n## Advanced Usage\n\nThis section covers advanced techniques and considerations for using Galleria effectively in complex scenarios.\n\n### Performance Optimization\n\nOptimizing Galleria for performance is crucial, especially when dealing with large galleries or high-resolution images.  Several strategies can be employed:\n\n* **Image Optimization:**  Before integrating images into your gallery, optimize them for web use.  Use tools to compress images without significant loss of quality.  Reduce file sizes by using appropriate formats (see below) and dimensions.  Avoid unnecessarily large images; resize them to fit the intended display area within the gallery.\n\n* **Lazy Loading:** While Galleria handles some aspects of lazy loading, you might explore further optimization through techniques that load only the images visible in the viewport.  This prevents loading unnecessary images until they are scrolled into view.  There might be plugins or custom code solutions available to implement more aggressive lazy loading.\n\n* **Caching:** Galleria employs internal caching mechanisms. However, if performance remains an issue, especially with extremely large datasets, you might need to investigate browser caching settings or consider using a Content Delivery Network (CDN) to serve images from servers closer to your users.\n\n* **Efficient JavaScript:** Avoid unnecessary JavaScript computations or DOM manipulations within your Galleria setup.  Use efficient code and data structures to minimize the processing overhead.\n\n* **Profiling:** Use your browser's developer tools to profile the performance of your Galleria implementation, pinpoint bottlenecks, and optimize accordingly.\n\n\n### Handling Large Datasets\n\nDealing with hundreds or thousands of images requires special consideration:\n\n* **Pagination or Infinite Scroll:** For extremely large image datasets, avoid loading all images simultaneously.  Implement pagination to load images in smaller batches or use infinite scrolling techniques where images load as the user scrolls down.  This prevents overwhelming the browser and ensures responsiveness.\n\n* **Data Structures:** Use efficient data structures (e.g., arrays or custom data objects) to represent your image data. Avoid inefficient approaches that might significantly impact performance when processing large amounts of information.\n\n* **Asynchronous Loading:** Load images asynchronously to avoid blocking the main thread. This allows other parts of the webpage to remain responsive while images load in the background.  Galleria often handles this internally, but ensuring your image loading strategies are efficient is key.\n\n* **Consider Alternatives:** For extremely large galleries, consider alternative approaches such as using a dedicated image viewer or a more specialized image management solution designed for handling vast datasets efficiently.\n\n\n### Working with Different Image Formats\n\nGalleria generally supports common image formats like JPEG, PNG, and GIF. However, factors like image quality, file size, and compatibility need to be considered:\n\n* **JPEG:** Ideal for photographs, offering good compression at the cost of some quality loss. Suitable for most use cases where image quality isn't paramount.\n\n* **PNG:** Better for images with sharp lines, text, or graphics where lossless compression is essential to maintain crisp detail.  File sizes tend to be larger than JPEGs.\n\n* **WebP:**  A modern format offering superior compression to both JPEG and PNG, resulting in smaller file sizes and potentially better quality. However, browser support for WebP might vary, so you might need to serve alternative image formats if WebP isn't supported.  Consider this if browser compatibility isn't a huge concern.\n\n* **Responsive Images:** Use responsive images (`<picture>` element or `srcset` attribute) to serve different image sizes based on the user's device and screen resolution. This optimizes image loading and quality for different contexts.\n\n\n### Troubleshooting\n\nCommon issues and their solutions:\n\n* **Images not loading:** Check image paths, ensure that images exist at the specified locations, and verify that the correct file extensions are used.  Check your server configuration for potential issues.\n\n* **Gallery not rendering:** Check that you've correctly included the required Galleria CSS and JavaScript files and that the correct selector is used to initialize the gallery. Check the browser's developer console for JavaScript errors.\n\n* **Layout issues:** Inspect the gallery's HTML and CSS to identify conflicts with your website's styling. Ensure there are no conflicting styles that might interfere with Galleria's default layout.\n\n* **Performance problems:** Refer to the \"Performance Optimization\" section above. Use your browser's developer tools to identify performance bottlenecks.\n\n* **Plugin errors:** If using plugins, check their documentation for specific troubleshooting steps.  Ensure that the plugin is compatible with your Galleria version.\n\nIf you encounter issues not addressed here, consult the official Galleria documentation, online forums, or support channels for more specific assistance.  Provide detailed information about your setup, including relevant code snippets and error messages, to help resolve the problem efficiently.\n\n\n## Examples\n\nThis section provides several examples to illustrate different aspects of using Galleria.  Remember to replace placeholder image paths with your actual image URLs.  These examples assume you've already included the necessary Galleria CSS and JavaScript files (either via CDN or local inclusion).\n\n\n### Simple Gallery\n\nThis example demonstrates the most basic Galleria setup:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Simple Galleria</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\">\n  <img src=\"image2.jpg\">\n  <img src=\"image3.jpg\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script>\n  Galleria.run('#galleria');\n</script>\n</body>\n</html>\n```\n\n\n### Gallery with Captions\n\nThis example adds captions to each image using the `data-title` attribute:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Galleria with Captions</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\" data-title=\"Image 1 Caption\">\n  <img src=\"image2.jpg\" data-title=\"Image 2 Caption\">\n  <img src=\"image3.jpg\" data-title=\"Image 3 Caption\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script>\n  Galleria.run('#galleria');\n</script>\n</body>\n</html>\n```\n\n\n### Gallery with Zoom Functionality\n\nThis example requires a plugin or custom JavaScript to implement zooming.  This example outlines the basic structure; you would need to include and configure a suitable zoom plugin (if available) or write custom code to achieve zooming functionality.  The exact implementation will depend on the chosen plugin or method.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Galleria with Zoom</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\">\n  <img src=\"image2.jpg\">\n  <img src=\"image3.jpg\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script src=\"path/to/zoom/plugin.js\"></script> \n<script>\n  Galleria.run('#galleria', { /* Zoom plugin configuration here */ });\n</script>\n</body>\n</html>\n```\n\n\n### Gallery with Thumbnails\n\nThis example demonstrates using thumbnails.  You'll need to provide thumbnail images and use the appropriate data attributes to link them to the main images:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Galleria with Thumbnails</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\" data-thumb=\"thumb1.jpg\">\n  <img src=\"image2.jpg\" data-thumb=\"thumb2.jpg\">\n  <img src=\"image3.jpg\" data-thumb=\"thumb3.jpg\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script>\n  Galleria.run('#galleria');\n</script>\n</body>\n</html>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, `\"image3.jpg\"`, `\"thumb1.jpg\"`, `\"thumb2.jpg\"`, and `\"thumb3.jpg\"` with the actual file paths to your images and thumbnails.  The `data-thumb` attribute links each main image to its corresponding thumbnail.  Ensure that the thumbnails are appropriately sized for optimal display in the thumbnail area.  You might need to adjust the Galleria configuration or CSS for optimal thumbnail display.\n\n\n## Contributing\n\nWe welcome contributions to Galleria!  Whether it's fixing bugs, adding new features, or improving the documentation, your help is valuable.  This section outlines the process for contributing to the project.\n\n### Code Style Guide\n\nTo maintain consistency and readability, please adhere to the following code style guidelines:\n\n* **Indentation:** Use 2 spaces for indentation.  Avoid using tabs.\n\n* **Line Length:** Keep lines under 80 characters.\n\n* **Naming Conventions:** Use descriptive variable and function names. Follow camelCase for JavaScript variables and functions.  Use PascalCase for class names.\n\n* **Comments:** Write clear and concise comments to explain complex logic or non-obvious code.\n\n* **Spacing:** Use consistent spacing around operators and punctuation.\n\n* **Linting:** Before submitting a pull request, ensure your code passes linting checks.  We recommend using a linter like ESLint with a configuration appropriate for JavaScript projects.  The specific linting rules and configuration details may be provided in a separate document or within the project's repository.\n\n* **Formatting:** Maintain consistent code formatting.  Tools like Prettier can automatically format your code according to a set of rules, ensuring consistent style across the project.\n\n\n### Testing\n\nGalleria uses a testing framework (specify the framework used, e.g., Jest, Mocha).  Before submitting any code changes, ensure you run the existing tests and add new tests for any added functionality or bug fixes.  The testing instructions and specifics of the testing environment are typically detailed in a `README` file or a separate testing guide within the project's repository.   Tests should cover various scenarios and edge cases to ensure the stability and reliability of your code changes.\n\n\n### Submitting Pull Requests\n\n1. **Fork the Repository:** Create a fork of the Galleria repository on GitHub.\n\n2. **Create a Branch:** Create a new branch for your changes. Use descriptive branch names (e.g., `fix/bug-123` or `feature/new-feature`).\n\n3. **Make Your Changes:** Implement your changes, following the code style guide and adding appropriate tests.\n\n4. **Commit Your Changes:** Commit your changes with clear and concise commit messages that explain the purpose of your changes.\n\n5. **Push Your Branch:** Push your branch to your forked repository.\n\n6. **Create a Pull Request:** Create a pull request from your branch to the main branch of the Galleria repository.  Provide a detailed description of your changes in the pull request, explaining the problem you're solving and the solution you've implemented.\n\n7. **Address Feedback:**  Address any feedback from the maintainers and make necessary revisions.\n\n\n### Reporting Issues\n\nIf you encounter a bug or have a feature request, please report it by creating an issue on the Galleria GitHub repository.  When reporting an issue, please provide the following information:\n\n* **Clear Description:** Briefly describe the problem or feature request.\n\n* **Steps to Reproduce:** If it's a bug, provide detailed steps to reproduce the problem.  Include any relevant information such as browser version, operating system, and any other relevant context.\n\n* **Expected Behavior:** Describe what you expected to happen.\n\n* **Actual Behavior:** Describe what actually happened.\n\n* **Screenshots or Code Snippets:** Include screenshots or relevant code snippets to help illustrate the problem.  This information makes it significantly easier for the maintainers to diagnose and resolve your issue.\n\n\nBy following these guidelines, you can contribute effectively to Galleria and help make it even better.  We appreciate your contributions and look forward to reviewing your pull requests!\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is Galleria?\n\nGalleria is a powerful and flexible open-source image gallery framework designed for creating stunning and responsive image galleries.  It provides a clean, modern interface and a variety of customization options to help developers easily integrate beautiful image galleries into their web applications. Galleria prioritizes performance and ease of use, allowing developers to focus on the creative aspects of their projects without getting bogged down in complex code. It supports a wide range of features, including image transitions, captions, thumbnails, and responsive design, all easily configurable through a straightforward API.\n\n### Key Features\n\n* **Responsive Design:** Galleria automatically adapts to different screen sizes and devices, ensuring optimal viewing experience across desktops, tablets, and smartphones.\n* **Customizable Themes:**  Easily customize the look and feel of your gallery using pre-built themes or by creating your own.  Complete control over colors, fonts, and layout is provided.\n* **Smooth Transitions:**  Choose from a selection of elegant and smooth image transitions to enhance the user experience.\n* **Thumbnail Navigation:**  Display thumbnails for easy navigation and browsing of the gallery images.\n* **Caption Support:**  Add descriptive captions to individual images to provide context and information.\n* **Full-Screen Mode:**  Allow users to view images in full-screen mode for an immersive experience.\n* **Lightweight and Fast:**  Galleria is optimized for performance, ensuring quick loading times and smooth navigation, even with large galleries.\n* **Extensive API:**  A comprehensive API provides granular control over all aspects of the gallery's functionality and appearance.\n* **Cross-Browser Compatibility:**  Works seamlessly across all major web browsers.\n* **Easy Integration:**  Simple and straightforward integration into existing web projects.\n\n\n### Target Audience\n\nGalleria is designed for web developers of all skill levels, from beginners to experts.  Its intuitive API and extensive documentation make it accessible to those new to image gallery development, while its powerful features and flexibility cater to the needs of experienced developers building complex and customized galleries.  Anyone needing to integrate a visually appealing and high-performing image gallery into a website or web application will find Galleria a valuable tool.\n\n\n### Setting up the Development Environment\n\nTo start developing with Galleria, you'll need the following:\n\n1. **Code Editor:** Choose a suitable code editor or IDE (Integrated Development Environment) such as Visual Studio Code, Sublime Text, Atom, or WebStorm.\n\n2. **Galleria Files:** Download the latest version of Galleria from the official website or repository (link to be provided).  This will typically include CSS, JavaScript, and potentially HTML template files.\n\n3. **Web Server (Recommended):** While not strictly required for basic testing, using a local web server (like XAMPP, MAMP, or WAMP for Windows/Mac/Linux respectively, or even a simple Python `http.server`) is highly recommended for proper development and testing.  This ensures all assets load correctly, preventing potential issues related to file path resolution.\n\n4. **Basic HTML Knowledge:** A foundational understanding of HTML is necessary to integrate Galleria into your web pages.\n\nOnce you have these prerequisites, you can begin by creating a basic HTML file and including the necessary Galleria files (CSS and JavaScript). The Galleria documentation provides detailed instructions and examples to guide you through the integration process and showcase various configurations.  Consult the API documentation for advanced customization options.\n\n\n## Getting Started\n\n### Installation\n\nGalleria offers several installation methods to suit your workflow.\n\n**Method 1: Using a CDN (Content Delivery Network):** The simplest way to include Galleria is via a CDN.  This avoids the need to download and manage files locally.  Add the following lines within the `<head>` section of your HTML file:\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n```\nReplace `@latest` with a specific version number for better version control if needed.  Check the official Galleria documentation for the most up-to-date CDN links.\n\n**Method 2: Downloading and Including Locally:** Download the Galleria package from the official website or repository. Extract the contents and place the necessary CSS and JavaScript files in your project's directory. Then, link them in your HTML as follows:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/galleria/css/galleria.min.css\">\n<script src=\"path/to/galleria/js/galleria.min.js\"></script>\n```\nRemember to replace `\"path/to/galleria\"` with the actual path to the Galleria files in your project.\n\n\n### Basic Usage\n\nAfter including the Galleria files (using either CDN or local installation), you need to create a container element for the gallery and initialize Galleria using JavaScript.  The basic structure looks like this:\n\n```html\n<div id=\"galleria\">\n  <img src=\"image1.jpg\" data-title=\"Image 1\">\n  <img src=\"image2.jpg\" data-title=\"Image 2\">\n  <img src=\"image3.jpg\" data-description=\"A longer description for image 3.\">\n</div>\n\n<script>\n  Galleria.run('#galleria');\n</script>\n```\n\nReplace `\"image1.jpg\"`, `\"image2.jpg\"`, `\"image3.jpg\"` with the paths to your images.  The `data-title` attribute provides a caption for each image, and `data-description` adds a longer description displayed separately (depending on your theme).  The `#galleria` selector targets the div element with the ID \"galleria\".\n\n\n### First Example\n\nHere's a complete example demonstrating a simple Galleria implementation:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Galleria Example</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\" data-title=\"Image 1\">\n  <img src=\"image2.jpg\" data-title=\"Image 2\">\n  <img src=\"image3.jpg\" data-title=\"Image 3\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script>\n  Galleria.run('#galleria');\n</script>\n</body>\n</html>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, and `\"image3.jpg\"` with actual image paths.  This minimal example will create a basic image gallery.\n\n\n### Project Setup\n\nFor larger projects, consider a more organized approach:\n\n1. **Project Structure:** Create a dedicated folder for your project.  Organize your files into subfolders for images, CSS, JavaScript, and HTML.\n\n2. **Version Control (Git):** Use a version control system like Git to manage your project's codebase.  This allows for easy tracking of changes and collaboration.\n\n3. **Task Runner (Optional):** Tools like npm or yarn with a build process (e.g., using Webpack or Parcel) can streamline development by automating tasks such as minification, concatenation, and other optimization processes.\n\n4. **Image Optimization:** Optimize your images for web use to minimize file sizes and improve loading times. Tools like ImageOptim or TinyPNG can help.\n\n5. **Testing:** Test your gallery across various browsers and devices to ensure compatibility and responsiveness.  Consider using browser developer tools for debugging.\n\nBy following these guidelines, you can establish a robust and maintainable development environment for your Galleria projects.  Remember to consult the Galleria documentation for detailed information and more advanced configuration options.\n\n\n## Core Concepts\n\n### Image Loading and Caching\n\nGalleria employs efficient image loading and caching mechanisms to optimize performance and provide a smooth user experience.  Images are loaded on demand, meaning only the currently viewed image and its immediate neighbors (for smooth transitions) are loaded into memory.  Galleria intelligently caches loaded images to prevent redundant downloads when navigating through the gallery. This caching is handled automatically, but you can influence the caching behavior through certain configuration options (refer to the API documentation for details).  The caching strategy aims to balance responsiveness with memory usage. For very large galleries, consider optimizing image sizes and potentially implementing additional strategies for managing image loading at scale.\n\n### Thumbnails Generation\n\nGalleria doesn't automatically generate thumbnails.  You are responsible for providing thumbnail images alongside your main images.  This gives you complete control over the appearance and dimensions of your thumbnails.  You can use image editing software or other tools to create thumbnails beforehand.   When including images in your Galleria setup,  you would typically include both the main image (`<img src=\"large_image.jpg\">`) and its corresponding thumbnail, often using data attributes to link them (e.g.,  `data-thumb=\"thumbnail_image.jpg\"`).  The exact method for linking thumbnails to main images depends on the specific Galleria configuration and might involve using custom functions or utilizing the API to define the relationship.  Refer to the API documentation for details on how to specify thumbnail images for your gallery.\n\n### Navigation and Controls\n\nGalleria provides intuitive navigation controls by default.  These usually include clickable arrows for moving between images, and often thumbnail navigation allowing users to select specific images.  The exact controls available depend on the theme and any custom configurations applied.  The API allows for extensive control over these elements. You can customize or disable certain controls, add custom controls, or even completely replace the default navigation behavior using custom JavaScript functions.  For example, you could integrate keyboard controls, touch gestures, or create a custom pagination system. The key is to use the Galleria API to modify the existing navigation elements or create completely new ones.\n\n\n### Responsive Design\n\nGalleria is inherently designed to be responsive. It adapts to different screen sizes and device orientations, providing an optimal viewing experience across various devices.  This responsiveness is primarily achieved through CSS media queries and flexible layout techniques.  However, you should ensure your images are appropriately sized and optimized for different screen resolutions to avoid performance issues. Using appropriately sized images prevents unnecessary scaling, which can degrade image quality and negatively impact loading times. The provided CSS and HTML structures are optimized to work across various screen sizes and devices. However, for more complex responsive designs or customization, refer to the API documentation to further tailor the behavior of the gallery based on screen size.\n\n### Accessibility\n\nGalleria aims for good accessibility.  By default, it provides keyboard navigation and ARIA attributes (Accessible Rich Internet Applications) to improve usability for people with disabilities.  However, further improvements might be needed depending on your specific implementation and the complexity of the gallery.  Ensure your image captions (`data-title` and `data-description` attributes) are descriptive and informative.  For screen reader users, provide alternative text descriptions for all images, ensuring that the content is clearly understood without visual context. Consider also providing sufficient color contrast and making sure interactive elements have clear visual cues. Consult accessibility guidelines (like WCAG) and implement suitable ARIA attributes to enhance the accessibility of your gallery further.  The Galleria API can be used to enhance accessibility features to integrate additional assistive technologies or fine-tune the elements already provided.\n\n\n## API Reference\n\nThis section provides a detailed overview of Galleria's API, allowing for advanced customization and control over the gallery's behavior and appearance.  For complete and up-to-date information, please consult the official Galleria documentation.  The examples below are simplified for illustrative purposes.\n\n\n### Constructor Options\n\nThe Galleria constructor accepts several options to configure the gallery's behavior. These options are passed as a JavaScript object to the `Galleria.run()` function.  Here are some key options:\n\n* **`width` (number):** Specifies the width of the gallery.\n* **`height` (number):** Specifies the height of the gallery.\n* **`transition` (string):**  Sets the transition effect between images (e.g., 'fade', 'slide').\n* **`autoplay` (boolean):** Enables or disables automatic image slideshow.\n* **`showInfo` (boolean):** Shows or hides image information (captions, etc.).\n* **`thumbnails` (boolean):** Enables or disables thumbnail navigation.\n* **`dataSource` (array or string):**  Specifies the data source for the gallery. Can be an array of image objects or a selector string.\n\n**Example:**\n\n```javascript\nGalleria.run('#galleria', {\n  width: 600,\n  height: 400,\n  transition: 'slide',\n  autoplay: true,\n  showInfo: true\n});\n```\n\n\n### Methods\n\nGalleria provides several methods to interact with the gallery after initialization.  These methods are called on the Galleria instance.  Here are a few important ones:\n\n* **`Galleria.get(selector)`:** Returns a Galleria instance for the given selector.\n* **`gallery.play()`:** Starts the autoplay slideshow.\n* **`gallery.pause()`:** Pauses the autoplay slideshow.\n* **`gallery.next()`:** Moves to the next image.\n* **`gallery.prev()`:** Moves to the previous image.\n* **`gallery.show(index)`:** Shows the image at the specified index.\n* **`gallery.destroy()`:** Destroys the Galleria instance, removing the gallery from the DOM.\n\n**Example:**\n\n```javascript\nlet gallery = Galleria.get('#galleria');\ngallery.play();\ngallery.show(2); // Shows the third image (index 0-based).\n```\n\n### Events\n\nGalleria triggers several events during its lifecycle.  You can listen for these events using the `on()` method.\n\n* **`loadstart`:** Fired when image loading begins.\n* **`loadfinish`:** Fired when image loading completes.\n* **`image`:** Fired when a new image is displayed.\n* **`play`:** Fired when autoplay starts.\n* **`pause`:** Fired when autoplay pauses.\n* **`fullscreen`:** Fired when full-screen mode is toggled.\n\n**Example:**\n\n```javascript\nGalleria.get('#galleria').on('image', function(e) {\n  console.log('Current image:', e.index);\n});\n```\n\n### Callbacks\n\nCallbacks provide a way to execute custom functions at specific points during the gallery's lifecycle. Several callbacks can be specified as options during initialization. For example:\n\n* **`onImage` (function):** A callback executed when an image is displayed. It receives the current image index as an argument.\n* **`onError` (function):** A callback executed if an image fails to load.\n\n\n**Example (using `onImage` callback):**\n\n```javascript\nGalleria.run('#galleria', {\n  onImage: function(index) {\n    console.log('Image ' + (index + 1) + ' is displayed.');\n  }\n});\n\n```\n\nRemember to consult the official Galleria documentation for a complete list of available constructor options, methods, events, and callbacks, along with detailed explanations and examples. The specific API may vary depending on the version of Galleria you are using.\n\n\n## Customization\n\nGalleria offers extensive customization options to tailor the gallery to your specific design and functionality requirements.\n\n### Themes and Styling\n\nGalleria allows for easy customization of the gallery's appearance through themes and direct CSS styling.\n\n* **Themes:** Galleria may provide pre-built themes that you can easily apply by including a different CSS file.  Check the documentation for available themes and how to apply them.  These themes typically modify the colors, fonts, layout, and overall look of the gallery.\n\n* **Custom CSS:** For more granular control, you can directly style the gallery using custom CSS.  Galleria's CSS classes provide targeting mechanisms for specific elements within the gallery. Inspect the gallery's HTML structure using your browser's developer tools to identify the classes you need to target.  Override default styles or add entirely new styles to create a unique look and feel.  Remember to place your custom CSS after the Galleria CSS file to ensure your styles override the default ones.\n\n* **Customizing HTML Structure (Advanced):** For deeply customized theming beyond simple CSS changes, you might need to modify the HTML structure itself, carefully understanding the implications and consequences.  This level of customization is generally only necessary for complex designs that require fundamental changes to the gallery's layout or composition.  Refer to the advanced customization section in the official documentation before attempting significant HTML alterations.\n\n### Customizing Navigation\n\nGalleria's navigation can be customized to match your design preferences and user experience goals.\n\n* **Modifying Existing Controls:** You can use CSS to style existing navigation elements like the previous/next buttons and thumbnails.  Adjust their size, appearance, position, or even their visual presence by showing or hiding them.\n\n* **Adding Custom Controls:** The Galleria API provides methods to add custom navigation elements.  You can create new buttons or controls (e.g., a custom jump-to-image feature) and integrate them into the gallery using JavaScript.  The API documentation will detail the required steps and methods for injecting new controls into the navigation system.\n\n* **Altering Navigation Behavior:** You can change the default navigation behavior (e.g., disabling autoplay, altering the transition speed or effect). This is usually accomplished through the configuration options provided to the Galleria constructor or by using methods on the Galleria instance to programmatically control the navigation.\n\n### Extending Functionality with Plugins\n\nGalleria supports the use of plugins to extend its functionality.  Plugins provide a modular way to add new features without modifying the core Galleria code.  These plugins might add things like lightbox functionality, social media sharing options, image zooming, or other features.  Consult the Galleria documentation to identify available plugins and learn how to integrate them into your project.  Some plugins might require additional configuration or integration steps beyond simple inclusion.\n\n### Integration with Other Libraries\n\nGalleria can be integrated with other JavaScript libraries to enhance its capabilities.  For example:\n\n* **Image Manipulation Libraries:** Integrate libraries like Cropper.js for in-place image cropping or other libraries for advanced image manipulation.\n\n* **UI Frameworks:**  Galleria can be incorporated into projects using frameworks like React, Angular, or Vue.js.  This will require adapting the integration methods to the specific framework's structure and component lifecycle.\n\n* **Other JavaScript Libraries:** Integrate libraries for adding functionalities like full-screen controls, advanced animation effects, or other features that complement the gallery.\n\nCareful consideration is required to ensure compatibility between Galleria and the chosen libraries, especially regarding potential conflicts or overlapping functionality.  Thorough testing is essential when integrating multiple libraries.  Always refer to the documentation for both Galleria and the other libraries for guidance on integrating them correctly.\n\n\n## Advanced Usage\n\nThis section covers advanced techniques and considerations for using Galleria effectively in complex scenarios.\n\n### Performance Optimization\n\nOptimizing Galleria for performance is crucial, especially when dealing with large galleries or high-resolution images.  Several strategies can be employed:\n\n* **Image Optimization:**  Before integrating images into your gallery, optimize them for web use.  Use tools to compress images without significant loss of quality.  Reduce file sizes by using appropriate formats (see below) and dimensions.  Avoid unnecessarily large images; resize them to fit the intended display area within the gallery.\n\n* **Lazy Loading:** While Galleria handles some aspects of lazy loading, you might explore further optimization through techniques that load only the images visible in the viewport.  This prevents loading unnecessary images until they are scrolled into view.  There might be plugins or custom code solutions available to implement more aggressive lazy loading.\n\n* **Caching:** Galleria employs internal caching mechanisms. However, if performance remains an issue, especially with extremely large datasets, you might need to investigate browser caching settings or consider using a Content Delivery Network (CDN) to serve images from servers closer to your users.\n\n* **Efficient JavaScript:** Avoid unnecessary JavaScript computations or DOM manipulations within your Galleria setup.  Use efficient code and data structures to minimize the processing overhead.\n\n* **Profiling:** Use your browser's developer tools to profile the performance of your Galleria implementation, pinpoint bottlenecks, and optimize accordingly.\n\n\n### Handling Large Datasets\n\nDealing with hundreds or thousands of images requires special consideration:\n\n* **Pagination or Infinite Scroll:** For extremely large image datasets, avoid loading all images simultaneously.  Implement pagination to load images in smaller batches or use infinite scrolling techniques where images load as the user scrolls down.  This prevents overwhelming the browser and ensures responsiveness.\n\n* **Data Structures:** Use efficient data structures (e.g., arrays or custom data objects) to represent your image data. Avoid inefficient approaches that might significantly impact performance when processing large amounts of information.\n\n* **Asynchronous Loading:** Load images asynchronously to avoid blocking the main thread. This allows other parts of the webpage to remain responsive while images load in the background.  Galleria often handles this internally, but ensuring your image loading strategies are efficient is key.\n\n* **Consider Alternatives:** For extremely large galleries, consider alternative approaches such as using a dedicated image viewer or a more specialized image management solution designed for handling vast datasets efficiently.\n\n\n### Working with Different Image Formats\n\nGalleria generally supports common image formats like JPEG, PNG, and GIF. However, factors like image quality, file size, and compatibility need to be considered:\n\n* **JPEG:** Ideal for photographs, offering good compression at the cost of some quality loss. Suitable for most use cases where image quality isn't paramount.\n\n* **PNG:** Better for images with sharp lines, text, or graphics where lossless compression is essential to maintain crisp detail.  File sizes tend to be larger than JPEGs.\n\n* **WebP:**  A modern format offering superior compression to both JPEG and PNG, resulting in smaller file sizes and potentially better quality. However, browser support for WebP might vary, so you might need to serve alternative image formats if WebP isn't supported.  Consider this if browser compatibility isn't a huge concern.\n\n* **Responsive Images:** Use responsive images (`<picture>` element or `srcset` attribute) to serve different image sizes based on the user's device and screen resolution. This optimizes image loading and quality for different contexts.\n\n\n### Troubleshooting\n\nCommon issues and their solutions:\n\n* **Images not loading:** Check image paths, ensure that images exist at the specified locations, and verify that the correct file extensions are used.  Check your server configuration for potential issues.\n\n* **Gallery not rendering:** Check that you've correctly included the required Galleria CSS and JavaScript files and that the correct selector is used to initialize the gallery. Check the browser's developer console for JavaScript errors.\n\n* **Layout issues:** Inspect the gallery's HTML and CSS to identify conflicts with your website's styling. Ensure there are no conflicting styles that might interfere with Galleria's default layout.\n\n* **Performance problems:** Refer to the \"Performance Optimization\" section above. Use your browser's developer tools to identify performance bottlenecks.\n\n* **Plugin errors:** If using plugins, check their documentation for specific troubleshooting steps.  Ensure that the plugin is compatible with your Galleria version.\n\nIf you encounter issues not addressed here, consult the official Galleria documentation, online forums, or support channels for more specific assistance.  Provide detailed information about your setup, including relevant code snippets and error messages, to help resolve the problem efficiently.\n\n\n## Examples\n\nThis section provides several examples to illustrate different aspects of using Galleria.  Remember to replace placeholder image paths with your actual image URLs.  These examples assume you've already included the necessary Galleria CSS and JavaScript files (either via CDN or local inclusion).\n\n\n### Simple Gallery\n\nThis example demonstrates the most basic Galleria setup:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Simple Galleria</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\">\n  <img src=\"image2.jpg\">\n  <img src=\"image3.jpg\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script>\n  Galleria.run('#galleria');\n</script>\n</body>\n</html>\n```\n\n\n### Gallery with Captions\n\nThis example adds captions to each image using the `data-title` attribute:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Galleria with Captions</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\" data-title=\"Image 1 Caption\">\n  <img src=\"image2.jpg\" data-title=\"Image 2 Caption\">\n  <img src=\"image3.jpg\" data-title=\"Image 3 Caption\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script>\n  Galleria.run('#galleria');\n</script>\n</body>\n</html>\n```\n\n\n### Gallery with Zoom Functionality\n\nThis example requires a plugin or custom JavaScript to implement zooming.  This example outlines the basic structure; you would need to include and configure a suitable zoom plugin (if available) or write custom code to achieve zooming functionality.  The exact implementation will depend on the chosen plugin or method.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Galleria with Zoom</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\">\n  <img src=\"image2.jpg\">\n  <img src=\"image3.jpg\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script src=\"path/to/zoom/plugin.js\"></script> \n<script>\n  Galleria.run('#galleria', { /* Zoom plugin configuration here */ });\n</script>\n</body>\n</html>\n```\n\n\n### Gallery with Thumbnails\n\nThis example demonstrates using thumbnails.  You'll need to provide thumbnail images and use the appropriate data attributes to link them to the main images:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Galleria with Thumbnails</title>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/css/galleria.min.css\">\n</head>\n<body>\n<div id=\"galleria\">\n  <img src=\"image1.jpg\" data-thumb=\"thumb1.jpg\">\n  <img src=\"image2.jpg\" data-thumb=\"thumb2.jpg\">\n  <img src=\"image3.jpg\" data-thumb=\"thumb3.jpg\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@galleria/core@latest/js/galleria.min.js\"></script>\n<script>\n  Galleria.run('#galleria');\n</script>\n</body>\n</html>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, `\"image3.jpg\"`, `\"thumb1.jpg\"`, `\"thumb2.jpg\"`, and `\"thumb3.jpg\"` with the actual file paths to your images and thumbnails.  The `data-thumb` attribute links each main image to its corresponding thumbnail.  Ensure that the thumbnails are appropriately sized for optimal display in the thumbnail area.  You might need to adjust the Galleria configuration or CSS for optimal thumbnail display.\n\n\n## Contributing\n\nWe welcome contributions to Galleria!  Whether it's fixing bugs, adding new features, or improving the documentation, your help is valuable.  This section outlines the process for contributing to the project.\n\n### Code Style Guide\n\nTo maintain consistency and readability, please adhere to the following code style guidelines:\n\n* **Indentation:** Use 2 spaces for indentation.  Avoid using tabs.\n\n* **Line Length:** Keep lines under 80 characters.\n\n* **Naming Conventions:** Use descriptive variable and function names. Follow camelCase for JavaScript variables and functions.  Use PascalCase for class names.\n\n* **Comments:** Write clear and concise comments to explain complex logic or non-obvious code.\n\n* **Spacing:** Use consistent spacing around operators and punctuation.\n\n* **Linting:** Before submitting a pull request, ensure your code passes linting checks.  We recommend using a linter like ESLint with a configuration appropriate for JavaScript projects.  The specific linting rules and configuration details may be provided in a separate document or within the project's repository.\n\n* **Formatting:** Maintain consistent code formatting.  Tools like Prettier can automatically format your code according to a set of rules, ensuring consistent style across the project.\n\n\n### Testing\n\nGalleria uses a testing framework (specify the framework used, e.g., Jest, Mocha).  Before submitting any code changes, ensure you run the existing tests and add new tests for any added functionality or bug fixes.  The testing instructions and specifics of the testing environment are typically detailed in a `README` file or a separate testing guide within the project's repository.   Tests should cover various scenarios and edge cases to ensure the stability and reliability of your code changes.\n\n\n### Submitting Pull Requests\n\n1. **Fork the Repository:** Create a fork of the Galleria repository on GitHub.\n\n2. **Create a Branch:** Create a new branch for your changes. Use descriptive branch names (e.g., `fix/bug-123` or `feature/new-feature`).\n\n3. **Make Your Changes:** Implement your changes, following the code style guide and adding appropriate tests.\n\n4. **Commit Your Changes:** Commit your changes with clear and concise commit messages that explain the purpose of your changes.\n\n5. **Push Your Branch:** Push your branch to your forked repository.\n\n6. **Create a Pull Request:** Create a pull request from your branch to the main branch of the Galleria repository.  Provide a detailed description of your changes in the pull request, explaining the problem you're solving and the solution you've implemented.\n\n7. **Address Feedback:**  Address any feedback from the maintainers and make necessary revisions.\n\n\n### Reporting Issues\n\nIf you encounter a bug or have a feature request, please report it by creating an issue on the Galleria GitHub repository.  When reporting an issue, please provide the following information:\n\n* **Clear Description:** Briefly describe the problem or feature request.\n\n* **Steps to Reproduce:** If it's a bug, provide detailed steps to reproduce the problem.  Include any relevant information such as browser version, operating system, and any other relevant context.\n\n* **Expected Behavior:** Describe what you expected to happen.\n\n* **Actual Behavior:** Describe what actually happened.\n\n* **Screenshots or Code Snippets:** Include screenshots or relevant code snippets to help illustrate the problem.  This information makes it significantly easier for the maintainers to diagnose and resolve your issue.\n\n\nBy following these guidelines, you can contribute effectively to Galleria and help make it even better.  We appreciate your contributions and look forward to reviewing your pull requests!\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"galleria.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Galleria - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}