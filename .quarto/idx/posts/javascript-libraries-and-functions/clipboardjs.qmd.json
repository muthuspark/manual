{"title":"Clipboard.js - Documentation","markdown":{"yaml":{"title":"Clipboard.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is Clipboard.js?\n\nClipboard.js is a small, lightweight JavaScript library for copying text to the clipboard.  It provides a simple and cross-browser way to implement copy-to-clipboard functionality without requiring complex code or server-side assistance.  Instead of relying on Flash or other browser plugins, it utilizes the browser's native clipboard APIs (where available) for optimal performance and security.  Fallback mechanisms are implemented for browsers lacking direct clipboard support.\n\n### Why use Clipboard.js?\n\nUsing Clipboard.js offers several advantages:\n\n* **Simplicity:**  The API is incredibly straightforward, making integration into your projects easy and quick.\n* **Cross-browser compatibility:** Clipboard.js handles the complexities of different browser implementations, providing a consistent experience across platforms.\n* **Lightweight:** The library is small in size, minimizing the impact on your application's load time.\n* **No server-side requirements:** All copying operations are handled client-side, eliminating the need for server interactions.\n* **Security:**  Leveraging native clipboard APIs enhances security compared to workarounds.\n\n\n### Browser Compatibility\n\nClipboard.js aims for broad browser compatibility. While it strives to support as many browsers as possible using fallback mechanisms, optimal functionality relies on modern browser features.  For the most reliable experience,  we recommend using current versions of the following:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n\nOlder browsers or those with disabled clipboard APIs may have limitations in functionality.  Specific compatibility details may vary based on the version of Clipboard.js and the user's browser configuration.\n\n\n### Getting Started\n\nTo use Clipboard.js, first include the library in your project. You can download the minified version from [https://clipboardjs.com/] or use a CDN like unpkg:\n\n```html\n<script src=\"https://unpkg.com/clipboard@2/dist/clipboard.min.js\"></script> </html>\n```\n\nNext, instantiate a new Clipboard object, targeting the element you want to attach the copy functionality to.  This element usually has a data attribute indicating the text to copy:\n\n```javascript\nvar clipboard = new ClipboardJS('.btn');\n```\n\nHere, `'.btn'` selects all elements with the class \"btn\".  Each of these elements should have a `data-clipboard-text` attribute specifying the text to be copied:\n\n```html\n<button class=\"btn\" data-clipboard-text=\"Copy this text!\">Copy</button>\n```\n\nClipboard.js will automatically handle the copying process when the selected element is clicked.  You can optionally add event listeners for success or error callbacks:\n\n```javascript\nvar clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    console.log(e.text); // The text that was copied\n    console.log(e.trigger); // The element that was clicked\n    alert(\"Text copied!\");\n  },\n  error: function(e) {\n    console.error('Action:', e.action);\n    console.error('Trigger:', e.trigger);\n    console.error('Message:', e.text);\n    alert(\"Failed to copy!\");\n  }\n});\n```\n\nRemember to remove the event listener if needed to prevent memory leaks:\n\n```javascript\nclipboard.destroy();\n```\n\n\n## Basic Usage\n\n### Including Clipboard.js\n\nThere are several ways to include Clipboard.js in your project:\n\n* **Download:** Download the minified JavaScript file (`clipboard.min.js`) from https://clipboardjs.com/ and include it in your HTML using a `<script>` tag:\n\n```html\n<script src=\"path/to/clipboard.min.js\"></script>\n```\nReplace `\"path/to/clipboard.min.js\"` with the actual path to the downloaded file.\n\n* **CDN (Content Delivery Network):** Use a CDN like unpkg to include the library:\n\n```html\n<script src=\"https://unpkg.com/clipboard@2/dist/clipboard.min.js\"></script>\n```\n\nThis method is convenient as you don't need to manage the file yourself.  Ensure the CDN link is correct and that the version number (`@2` in this example) matches the documentation.\n\n\n### Creating a Copy Button\n\nCreate a button element in your HTML. This button will trigger the copy action.  It's crucial to include the `data-clipboard-text` attribute, which specifies the text to be copied to the clipboard.  The text can be any valid string, including HTML entities if desired.\n\n```html\n<button class=\"btn\" data-clipboard-text=\"This text will be copied!\">Copy</button>\n```\n\n\n### Targeting Elements\n\nClipboard.js uses the CSS selector you provide to find the elements to attach the copy functionality to.  The selector can be a class (as above), an ID, or any valid CSS selector.  Multiple elements matching the selector will all have copy functionality applied.   Each element *must* have a `data-clipboard-text` attribute to define what text will be copied when it's clicked.  You can target multiple buttons with different content.  If a single element is matched, only that element will have the copy event listener applied.\n\n```html\n<button class=\"btn\" data-clipboard-text=\"Text 1\">Copy 1</button>\n<button id=\"myButton\" data-clipboard-text=\"Text 2\">Copy 2</button>\n<button class=\"btn\" data-clipboard-text=\"Text 3\">Copy 3</button>\n\n```\n\n### Basic Copy Example\n\nThis example combines the inclusion of Clipboard.js, the creation of a button, and the instantiation of the ClipboardJS object:\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Clipboard.js Example</title>\n<script src=\"https://unpkg.com/clipboard@2/dist/clipboard.min.js\"></script>\n</head>\n<body>\n\n<button class=\"btn\" data-clipboard-text=\"Hello, world!\">Copy Text</button>\n\n<script>\n  var clipboard = new ClipboardJS('.btn');\n</script>\n\n</body>\n</html>\n```\n\nThis code will create a button. When clicked, the text \"Hello, world!\" will be copied to the clipboard.  No additional JavaScript is needed for this basic functionality beyond the instantiation of `ClipboardJS`.  Remember to replace the CDN link with your local path if you downloaded the library.\n\n\n## Advanced Usage\n\n### Customizing Button Text\n\nBy default, Clipboard.js doesn't change the button's text.  To dynamically update button text after a copy action, use the success and error callbacks (described below) to modify the button's innerHTML or textContent.  For example:\n\n\n```javascript\nvar clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    e.trigger.textContent = 'Copied!';\n  },\n  error: function(e) {\n    e.trigger.textContent = 'Copy failed!';\n  }\n});\n```\n\nThis code changes the button text to \"Copied!\" on success and \"Copy failed!\" on error.  Remember that directly manipulating the DOM within these callbacks ensures the changes reflect the copy action's outcome.\n\n### Handling Success and Error\n\nThe `success` and `error` callback functions within the `ClipboardJS` options object allow you to handle the outcome of the copy operation.  The `success` callback receives an object with `text` (the copied text) and `trigger` (the clicked element) properties. The `error` callback provides information about the failure, including the `action` attempted, the `trigger` element, and an optional `text` message.\n\n\n```javascript\nvar clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    console.log('Copied:', e.text); // Log the copied text to the console\n    alert('Text copied to clipboard!'); //Show an alert message.\n  },\n  error: function(e) {\n    console.error('Clipboard action failed:', e); // Log error details\n    alert('Failed to copy text to clipboard!'); //Show an alert message\n  }\n});\n```\n\n\n### Text Selection\n\nClipboard.js copies the text specified in the `data-clipboard-text` attribute. It does *not* copy selected text from the page. If you want to copy selected text, you'll need to implement that functionality separately, possibly using the `window.getSelection()` method and setting the `data-clipboard-text` attribute dynamically based on the selected text.\n\n\n### Copying HTML\n\nWhile `data-clipboard-text` accepts HTML, it's typically interpreted as plain text. To copy HTML as formatted HTML (not rendered HTML), you'll need to escape special characters appropriately before assigning them to the `data-clipboard-text` attribute.  Consider using a library or function to properly escape HTML entities to prevent injection vulnerabilities.\n\n\n### Asynchronous Copying\n\nClipboard.js primarily operates synchronously.  However,  if you need to perform actions *before* copying (like dynamically generating the text), you might need to incorporate asynchronous operations, ensuring the `data-clipboard-text` is updated *before* the user interacts with the button:\n\n\n```javascript\n//Simulate Async Data Retrieval\nfunction getAsyncText() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"This is the async text!\");\n    }, 1000); // Simulate a delay\n  });\n}\n\ngetAsyncText().then((text) => {\n  const btn = document.querySelector('.btn');\n  btn.setAttribute('data-clipboard-text', text);\n  new ClipboardJS('.btn');\n})\n```\n\n\n\n### Multiple Copy Buttons\n\nYou can target multiple copy buttons by using a CSS selector that matches all of them.  Each button should have its own `data-clipboard-text` attribute specifying the text it should copy:\n\n\n```html\n<button class=\"copy-button\" data-clipboard-text=\"Text 1\">Copy 1</button>\n<button class=\"copy-button\" data-clipboard-text=\"Text 2\">Copy 2</button>\n<script>\n  var clipboard = new ClipboardJS('.copy-button');\n</script>\n```\n\n### Using with Frameworks (React, Vue, Angular, etc.)\n\nClipboard.js is a plain JavaScript library, and it can be used in any JavaScript framework.  The integration approach depends on the framework.  Common methods include:\n\n* **Direct inclusion:**  Include Clipboard.js as described in the basic usage section, and then instantiate it within the framework's lifecycle methods (like `componentDidMount` in React or a `mounted` hook in Vue).\n* **Wrapper components:**  Create a custom component that wraps the button and handles the Clipboard.js instantiation and management. This approach improves code organization and reusability.\n* **Integration with framework's event system:**  Handle clicks and updates using the framework's event system to trigger copying and update the UI.\n\nRemember to handle potential lifecycle issues (like unmounting components) and to appropriately manage the Clipboard.js instance to avoid memory leaks, particularly in frameworks with component lifecycles.  Consult your framework's documentation for guidance on integrating external libraries.\n\n\n## Options and Configuration\n\n### The `clipboard` Object\n\nThe core of Clipboard.js functionality revolves around the `ClipboardJS` object.  You create an instance of this object, passing in options to customize its behavior.  The options are passed as a single object to the constructor:\n\n```javascript\nconst clipboard = new ClipboardJS(selector, options);\n```\n\nWhere `selector` is a CSS selector string targeting the elements to which you'll attach copy functionality, and `options` is an object detailing the configuration.\n\n\n### The `target` Option\n\nThe `target` option specifies the element whose content should be copied.  It is particularly useful when you want to copy text from an element other than the one that triggered the copy action (e.g., copying text from a hidden element when a button is clicked).   The value should be a CSS selector string targeting the element containing the text to be copied. If not provided, the text will be pulled from the `data-clipboard-text` attribute of the trigger element.\n\n```javascript\nconst clipboard = new ClipboardJS('.copy-button', {\n  target: '#hidden-text'\n});\n```\n\nIn this example, clicking an element with the class `copy-button` will copy the text content of the element with the ID `hidden-text`.\n\n\n### The `text` Option\n\nThe `text` option provides a function that dynamically generates the text to be copied.  This function receives the trigger element as an argument and should return a string. This is especially useful when the text to copy depends on data not directly present in the HTML.\n\n```javascript\nconst clipboard = new ClipboardJS('.copy-button', {\n  text: function(trigger) {\n    return trigger.dataset.customText || 'Default text';\n  }\n});\n```\n\nHere, the function checks for a `data-custom-text` attribute on the trigger element; if present, it uses that value; otherwise, it uses \"Default text\".\n\n\n### The `action` Option\n\nThe `action` option is less frequently used but allows you to specify the copy action to perform.  The default is 'copy'. While other actions might be supported by browsers (like 'cut'), it's typically not necessary to explicitly set it.\n\n```javascript\n// Usually not needed, default is 'copy'\nconst clipboard = new ClipboardJS('.copy-button', {\n  action: 'copy'\n});\n\n```\n\n### The `container` Option\n\nThe `container` option specifies a parent element within which to search for the target element if using the `target` option. If not specified, Clipboard.js searches the entire document. This is useful for optimizing performance when dealing with large documents.\n\n\n```javascript\nconst clipboard = new ClipboardJS('.copy-button', {\n  target: '.target-element',\n  container: '#my-container'\n});\n```\n\nThis limits the search for `.target-element` to only within the element having the ID `my-container`.\n\n\n### The `trigger` Option\n\nThe `trigger` option allows you to manually set the element that should trigger the copy action. While the constructor’s first argument implicitly sets the trigger, this option provides explicit control. It's less commonly needed unless advanced scenarios require decoupling the trigger element from the target element beyond what `target` alone can achieve.\n\n\n### The `debug` Option\n\nThe `debug` option enables verbose logging to the console for debugging purposes. Setting `debug` to `true` will output detailed information about the copy process, which can be helpful for troubleshooting issues.\n\n```javascript\nconst clipboard = new ClipboardJS('.copy-button', {\n  debug: true\n});\n```\n\nThis will print useful information in your browser’s console for analysis during development. Remember to disable this option in production.\n\n\n## Events and Callbacks\n\nClipboard.js provides two main events/callbacks that allow you to respond to the success or failure of a copy operation: `success` and `error`. These are configured within the options object passed to the `ClipboardJS` constructor.\n\n\n### `success` Event\n\nThe `success` callback function is executed when the copy operation is successful. It receives a single argument: an object containing information about the successful copy action.\n\n* **`e.text`**: A string containing the text that was copied to the clipboard.\n* **`e.trigger`**: A DOM element reference to the element that triggered the copy action (the button or element that was clicked).  This allows you to directly manipulate the element (e.g., change its text content to indicate success).\n* **`e.action`**: A string indicating the action performed ('copy').\n\n\n### `error` Event\n\nThe `error` callback function is executed when the copy operation fails.  This can happen for various reasons, including browser limitations or user permissions. The event object passed to the callback contains:\n\n* **`e.action`**: A string indicating the action that failed ('copy').\n* **`e.trigger`**: A DOM element reference to the element that triggered the copy action.\n* **`e.reason`**: (optional) A string providing more specific details about why the copy failed. This might indicate a permission issue or browser incompatibility.  The specific reasons may evolve with Clipboard.js updates and browser changes.\n* **`e.text`**: The text that failed to copy.\n\n\n\n### Event Handling Examples\n\nHere are examples demonstrating how to use the `success` and `error` events:\n\n**Example 1: Basic Success/Error Handling**\n\n```javascript\nconst clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    console.log('Copied text: ', e.text);\n    alert('Text copied to clipboard!');\n  },\n  error: function(e) {\n    console.error('Copy failed: ', e);\n    alert('Failed to copy text. Please try again.');\n  }\n});\n\n```\n\n**Example 2: Updating Button Text**\n\n```javascript\nconst clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    e.trigger.textContent = 'Copied!';\n  },\n  error: function(e) {\n    e.trigger.textContent = 'Copy failed!';\n  }\n});\n```\n\nThis example modifies the button's text after a successful or failed copy attempt.\n\n\n**Example 3:  More Detailed Error Handling**\n\n\n```javascript\nconst clipboard = new ClipboardJS('.btn', {\n    success: function(e) {\n      console.log('Copied:', e.text);\n    },\n    error: function(e) {\n      console.error('Action:', e.action);\n      console.error('Trigger:', e.trigger);\n      if (e.reason) {\n        console.error('Reason:', e.reason);\n        alert(`Copy failed: ${e.reason}`);\n      } else {\n        console.error('An unknown error occurred.');\n        alert('Copy failed. Please check your browser settings and try again.');\n      }\n    }\n  });\n```\n\nThis example provides more informative error messages to the user by checking for the `e.reason` property.  Remember that not all error conditions will necessarily populate the reason field.  Handle cases where `e.reason` is missing to prevent unexpected behavior.\n\n\n## Troubleshooting\n\n### Common Errors and Solutions\n\n**Error:** \"Failed to copy: Not allowed to access clipboard\" or similar permission errors.\n\n**Solution:** This usually indicates a browser security restriction.  Ensure that the website is served over HTTPS (HTTP is typically blocked for clipboard access).  Also, check browser settings related to clipboard access permissions.  The user may need to explicitly allow the website access to the clipboard. Some browser extensions may also interfere with clipboard access. Try disabling such extensions temporarily for testing purposes.\n\n\n**Error:**  The copy action doesn't seem to work at all, no errors in the console.\n\n**Solution:**\n\n* **Check for typos:** Double-check your HTML and JavaScript for any typos in selectors, attribute names (`data-clipboard-text`), or function names.\n* **Incorrect library inclusion:** Make sure you've correctly included the Clipboard.js library in your HTML file. Verify the path is accurate, and that there are no network errors preventing loading.\n* **Selector issues:** Ensure your CSS selector correctly targets the button(s). Use your browser's developer tools to verify that the selector matches the intended elements.\n* **Asynchronous operations:** If you are dynamically setting the `data-clipboard-text` attribute, ensure it's updated *before* the ClipboardJS instance is created.\n\n\n**Error:**  `Uncaught TypeError: Cannot read properties of undefined (reading 'trigger')` or similar errors related to `e.trigger` being undefined.\n\n\n**Solution:** This error often arises if you access `e.trigger` outside the scope of the `success` or `error` callbacks.  These callbacks provide `e.trigger` only within their context. Ensure that you're only accessing `e.trigger` inside these handlers.\n\n\n**Error:**  The copied text is incorrect or incomplete.\n\n**Solution:** Verify the content of the `data-clipboard-text` attribute or the text returned from the `text` option function.  Ensure you are not accidentally copying HTML entities that are not properly escaped.\n\n\n### Debugging Tips\n\n* **Use the browser's developer tools:**  The console in your browser's developer tools is crucial for troubleshooting.  Enable the `debug` option in Clipboard.js for more verbose logging (`{debug: true}`).\n* **Simplify your code:**  If you encounter complex issues, try isolating the problem by creating a minimal, reproducible example. This helps pinpoint the exact source of the error.\n* **Check for conflicts:**  Other JavaScript libraries or scripts on your page could potentially interfere with Clipboard.js. Try temporarily disabling other scripts to see if it resolves the issue.\n* **Check the Network Tab:** In your browser's developer tools, review the Network tab to ensure that Clipboard.js is successfully loaded without errors.\n\n### Browser-Specific Issues\n\nWhile Clipboard.js strives for cross-browser compatibility, minor inconsistencies can occur.  Here are some browser-specific considerations:\n\n* **Older browsers:** Older browsers may lack native clipboard APIs, relying on fallbacks that might have limitations.  For optimal compatibility, aim for modern browsers (recent versions of Chrome, Firefox, Safari, Edge).\n* **Permissions:**  Browsers may require explicit permission to access the clipboard. Always test your application under HTTPS.\n* **Extensions:** Browser extensions might interfere with clipboard functionality.  Temporarily disable extensions to check for conflicts.\n* **Specific browser bugs:**  Rarely, browser-specific bugs might affect Clipboard.js. Check the browser's bug tracking system or community forums for known issues.\n\n\nIf you encounter problems not addressed here, provide a minimal reproducible example, including your code and the browser details, when seeking support.  This greatly aids in diagnosing and resolving the issue.\n\n\n## API Reference\n\nClipboard.js provides a few methods on the instantiated `clipboard` object for advanced control and management of the copy functionality.\n\n\n### `clipboard.on(eventName, callback)`\n\nThis method adds an event listener to the Clipboard.js instance.  It allows you to listen for custom events beyond the built-in `success` and `error` callbacks.  While Clipboard.js doesn't trigger many custom events directly, this method can be useful for integrating with other libraries or for extending functionality.\n\n* `eventName`: A string representing the name of the event to listen for.  Custom event names are typically defined by you and your application's logic.\n* `callback`: A function that will be executed when the event is triggered.  The callback function will receive an event object (the nature of this object depends on how you define and trigger custom events within your application).\n\n\n**Example:** (Illustrative, as Clipboard.js itself doesn't directly trigger `myCustomEvent`)\n\n```javascript\nconst clipboard = new ClipboardJS('.btn');\n\nclipboard.on('myCustomEvent', (event) => {\n  console.log('Custom event triggered:', event);\n});\n\n// You would trigger 'myCustomEvent' from your application logic separately.\n```\n\n\n### `clipboard.off(eventName, callback)`\n\nThis method removes an event listener that was previously added using `clipboard.on()`. If you add multiple listeners for the same event, this will remove only the specific listener callback function provided.\n\n* `eventName`: The name of the event for which to remove the listener.\n* `callback`: The specific callback function to remove.  If omitted, *all* listeners for that event are removed.\n\n**Example:**\n\n```javascript\nconst myCustomCallback = (event) => { /* ... */ };\nclipboard.on('myCustomEvent', myCustomCallback);\n// ... later ...\nclipboard.off('myCustomEvent', myCustomCallback); // Removes only myCustomCallback\nclipboard.off('myCustomEvent'); // Removes all listeners for 'myCustomEvent'\n```\n\n\n### `clipboard.destroy()`\n\nThis method completely destroys the Clipboard.js instance, removing all event listeners and releasing any resources it holds. It's crucial to call this method when you no longer need the Clipboard.js functionality, especially in applications with component lifecycles (like React or Vue), to prevent memory leaks and potential conflicts.  Failing to destroy the instance can lead to unexpected behavior or errors.\n\n**Example:**\n\n```javascript\nconst clipboard = new ClipboardJS('.btn');\n// ... later, when you no longer need the clipboard functionality ...\nclipboard.destroy();\n```\n\nIn frameworks like React, you would typically call `destroy()` within the `componentWillUnmount` lifecycle method to ensure cleanup when the component is removed from the DOM.  In Vue, you might place it within the `beforeDestroy` hook.  Always follow the best practices of your specific framework to effectively manage the lifecycle of external libraries.\n\n\n## Contributing\n\nWe welcome contributions to Clipboard.js!  Whether it's reporting bugs, suggesting improvements, or submitting code changes, your involvement helps make the library better for everyone.\n\n\n### Reporting Issues\n\nWhen reporting an issue, please provide as much detail as possible to help us understand and reproduce the problem.  A minimal, reproducible example is particularly valuable.  Here's what to include:\n\n* **Clear and concise title:** Summarize the problem briefly in the issue title.\n* **Detailed description:** Explain the issue thoroughly, including steps to reproduce it.\n* **Clipboard.js version:** Specify the version of Clipboard.js you're using.\n* **Browser and operating system:** State the browser(s) and operating system(s) where the issue occurs.\n* **Minimal reproducible example:** Provide a simple HTML, CSS, and JavaScript example that demonstrates the problem.  This helps us quickly isolate and fix the issue.  Try to create the smallest possible example that still exhibits the problem.\n* **Expected behavior:** Describe what you expected to happen.\n* **Actual behavior:** Describe what actually happened.\n* **Screenshots or screen recordings (if applicable):** Visual aids can significantly improve understanding.\n\n\n### Submitting Pull Requests\n\nBefore submitting a pull request (PR), please ensure:\n\n* **Fork the repository:** Create a fork of the Clipboard.js repository on GitHub.\n* **Create a new branch:** Create a new branch for your changes.  Use descriptive branch names (e.g., `fix/bug-123` or `feat/new-feature`).\n* **Write tests:** Add or update tests to cover your changes.  This helps ensure the changes work correctly and prevent regressions.  The project uses Jest for testing.\n* **Follow the coding style guide (see below):** Maintain consistent code style throughout the project.\n* **Update documentation (if necessary):** If your changes affect the API or usage, update the documentation accordingly.\n* **Submit a clear PR description:** Describe your changes and why they are needed.  Reference the issue(s) your PR addresses.\n\n\n### Coding Style Guide\n\nClipboard.js follows a consistent coding style to ensure readability and maintainability.  Please adhere to these guidelines when submitting pull requests:\n\n* **Indentation:** Use 2 spaces for indentation.\n* **Line length:** Keep lines under 80 characters.\n* **Variable names:** Use descriptive and consistent variable names (camelCase).\n* **Comments:**  Write clear and concise comments to explain complex logic or non-obvious code.\n* **Semicolons:** Use semicolons to terminate statements.\n* **Spacing:** Use consistent spacing around operators and punctuation.\n* **ESLint:** The project uses ESLint to enforce code style.  Make sure your code passes ESLint checks before submitting a PR.\n\n\nBy following these guidelines, you ensure that your contributions are easily integrated into the project and maintain the overall quality of Clipboard.js.  If you have any questions about the contribution process or coding style, feel free to open an issue or contact the maintainers.\n\n\n## License\n\n### License Information\n\nClipboard.js is licensed under the MIT License.  This means you are free to use, modify, and distribute Clipboard.js in your projects, both commercial and non-commercial, as long as you include the original copyright and license notice in your distribution.\n\nThe full text of the MIT License is as follows:\n\n\n```\nMIT License\n\nCopyright (c) 2017-present Zeno Rocha\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\nFor clarification on the terms of the MIT License, you should consult a legal professional.  This information is provided for convenience and should not be considered legal advice.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is Clipboard.js?\n\nClipboard.js is a small, lightweight JavaScript library for copying text to the clipboard.  It provides a simple and cross-browser way to implement copy-to-clipboard functionality without requiring complex code or server-side assistance.  Instead of relying on Flash or other browser plugins, it utilizes the browser's native clipboard APIs (where available) for optimal performance and security.  Fallback mechanisms are implemented for browsers lacking direct clipboard support.\n\n### Why use Clipboard.js?\n\nUsing Clipboard.js offers several advantages:\n\n* **Simplicity:**  The API is incredibly straightforward, making integration into your projects easy and quick.\n* **Cross-browser compatibility:** Clipboard.js handles the complexities of different browser implementations, providing a consistent experience across platforms.\n* **Lightweight:** The library is small in size, minimizing the impact on your application's load time.\n* **No server-side requirements:** All copying operations are handled client-side, eliminating the need for server interactions.\n* **Security:**  Leveraging native clipboard APIs enhances security compared to workarounds.\n\n\n### Browser Compatibility\n\nClipboard.js aims for broad browser compatibility. While it strives to support as many browsers as possible using fallback mechanisms, optimal functionality relies on modern browser features.  For the most reliable experience,  we recommend using current versions of the following:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n\nOlder browsers or those with disabled clipboard APIs may have limitations in functionality.  Specific compatibility details may vary based on the version of Clipboard.js and the user's browser configuration.\n\n\n### Getting Started\n\nTo use Clipboard.js, first include the library in your project. You can download the minified version from [https://clipboardjs.com/] or use a CDN like unpkg:\n\n```html\n<script src=\"https://unpkg.com/clipboard@2/dist/clipboard.min.js\"></script> </html>\n```\n\nNext, instantiate a new Clipboard object, targeting the element you want to attach the copy functionality to.  This element usually has a data attribute indicating the text to copy:\n\n```javascript\nvar clipboard = new ClipboardJS('.btn');\n```\n\nHere, `'.btn'` selects all elements with the class \"btn\".  Each of these elements should have a `data-clipboard-text` attribute specifying the text to be copied:\n\n```html\n<button class=\"btn\" data-clipboard-text=\"Copy this text!\">Copy</button>\n```\n\nClipboard.js will automatically handle the copying process when the selected element is clicked.  You can optionally add event listeners for success or error callbacks:\n\n```javascript\nvar clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    console.log(e.text); // The text that was copied\n    console.log(e.trigger); // The element that was clicked\n    alert(\"Text copied!\");\n  },\n  error: function(e) {\n    console.error('Action:', e.action);\n    console.error('Trigger:', e.trigger);\n    console.error('Message:', e.text);\n    alert(\"Failed to copy!\");\n  }\n});\n```\n\nRemember to remove the event listener if needed to prevent memory leaks:\n\n```javascript\nclipboard.destroy();\n```\n\n\n## Basic Usage\n\n### Including Clipboard.js\n\nThere are several ways to include Clipboard.js in your project:\n\n* **Download:** Download the minified JavaScript file (`clipboard.min.js`) from https://clipboardjs.com/ and include it in your HTML using a `<script>` tag:\n\n```html\n<script src=\"path/to/clipboard.min.js\"></script>\n```\nReplace `\"path/to/clipboard.min.js\"` with the actual path to the downloaded file.\n\n* **CDN (Content Delivery Network):** Use a CDN like unpkg to include the library:\n\n```html\n<script src=\"https://unpkg.com/clipboard@2/dist/clipboard.min.js\"></script>\n```\n\nThis method is convenient as you don't need to manage the file yourself.  Ensure the CDN link is correct and that the version number (`@2` in this example) matches the documentation.\n\n\n### Creating a Copy Button\n\nCreate a button element in your HTML. This button will trigger the copy action.  It's crucial to include the `data-clipboard-text` attribute, which specifies the text to be copied to the clipboard.  The text can be any valid string, including HTML entities if desired.\n\n```html\n<button class=\"btn\" data-clipboard-text=\"This text will be copied!\">Copy</button>\n```\n\n\n### Targeting Elements\n\nClipboard.js uses the CSS selector you provide to find the elements to attach the copy functionality to.  The selector can be a class (as above), an ID, or any valid CSS selector.  Multiple elements matching the selector will all have copy functionality applied.   Each element *must* have a `data-clipboard-text` attribute to define what text will be copied when it's clicked.  You can target multiple buttons with different content.  If a single element is matched, only that element will have the copy event listener applied.\n\n```html\n<button class=\"btn\" data-clipboard-text=\"Text 1\">Copy 1</button>\n<button id=\"myButton\" data-clipboard-text=\"Text 2\">Copy 2</button>\n<button class=\"btn\" data-clipboard-text=\"Text 3\">Copy 3</button>\n\n```\n\n### Basic Copy Example\n\nThis example combines the inclusion of Clipboard.js, the creation of a button, and the instantiation of the ClipboardJS object:\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Clipboard.js Example</title>\n<script src=\"https://unpkg.com/clipboard@2/dist/clipboard.min.js\"></script>\n</head>\n<body>\n\n<button class=\"btn\" data-clipboard-text=\"Hello, world!\">Copy Text</button>\n\n<script>\n  var clipboard = new ClipboardJS('.btn');\n</script>\n\n</body>\n</html>\n```\n\nThis code will create a button. When clicked, the text \"Hello, world!\" will be copied to the clipboard.  No additional JavaScript is needed for this basic functionality beyond the instantiation of `ClipboardJS`.  Remember to replace the CDN link with your local path if you downloaded the library.\n\n\n## Advanced Usage\n\n### Customizing Button Text\n\nBy default, Clipboard.js doesn't change the button's text.  To dynamically update button text after a copy action, use the success and error callbacks (described below) to modify the button's innerHTML or textContent.  For example:\n\n\n```javascript\nvar clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    e.trigger.textContent = 'Copied!';\n  },\n  error: function(e) {\n    e.trigger.textContent = 'Copy failed!';\n  }\n});\n```\n\nThis code changes the button text to \"Copied!\" on success and \"Copy failed!\" on error.  Remember that directly manipulating the DOM within these callbacks ensures the changes reflect the copy action's outcome.\n\n### Handling Success and Error\n\nThe `success` and `error` callback functions within the `ClipboardJS` options object allow you to handle the outcome of the copy operation.  The `success` callback receives an object with `text` (the copied text) and `trigger` (the clicked element) properties. The `error` callback provides information about the failure, including the `action` attempted, the `trigger` element, and an optional `text` message.\n\n\n```javascript\nvar clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    console.log('Copied:', e.text); // Log the copied text to the console\n    alert('Text copied to clipboard!'); //Show an alert message.\n  },\n  error: function(e) {\n    console.error('Clipboard action failed:', e); // Log error details\n    alert('Failed to copy text to clipboard!'); //Show an alert message\n  }\n});\n```\n\n\n### Text Selection\n\nClipboard.js copies the text specified in the `data-clipboard-text` attribute. It does *not* copy selected text from the page. If you want to copy selected text, you'll need to implement that functionality separately, possibly using the `window.getSelection()` method and setting the `data-clipboard-text` attribute dynamically based on the selected text.\n\n\n### Copying HTML\n\nWhile `data-clipboard-text` accepts HTML, it's typically interpreted as plain text. To copy HTML as formatted HTML (not rendered HTML), you'll need to escape special characters appropriately before assigning them to the `data-clipboard-text` attribute.  Consider using a library or function to properly escape HTML entities to prevent injection vulnerabilities.\n\n\n### Asynchronous Copying\n\nClipboard.js primarily operates synchronously.  However,  if you need to perform actions *before* copying (like dynamically generating the text), you might need to incorporate asynchronous operations, ensuring the `data-clipboard-text` is updated *before* the user interacts with the button:\n\n\n```javascript\n//Simulate Async Data Retrieval\nfunction getAsyncText() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"This is the async text!\");\n    }, 1000); // Simulate a delay\n  });\n}\n\ngetAsyncText().then((text) => {\n  const btn = document.querySelector('.btn');\n  btn.setAttribute('data-clipboard-text', text);\n  new ClipboardJS('.btn');\n})\n```\n\n\n\n### Multiple Copy Buttons\n\nYou can target multiple copy buttons by using a CSS selector that matches all of them.  Each button should have its own `data-clipboard-text` attribute specifying the text it should copy:\n\n\n```html\n<button class=\"copy-button\" data-clipboard-text=\"Text 1\">Copy 1</button>\n<button class=\"copy-button\" data-clipboard-text=\"Text 2\">Copy 2</button>\n<script>\n  var clipboard = new ClipboardJS('.copy-button');\n</script>\n```\n\n### Using with Frameworks (React, Vue, Angular, etc.)\n\nClipboard.js is a plain JavaScript library, and it can be used in any JavaScript framework.  The integration approach depends on the framework.  Common methods include:\n\n* **Direct inclusion:**  Include Clipboard.js as described in the basic usage section, and then instantiate it within the framework's lifecycle methods (like `componentDidMount` in React or a `mounted` hook in Vue).\n* **Wrapper components:**  Create a custom component that wraps the button and handles the Clipboard.js instantiation and management. This approach improves code organization and reusability.\n* **Integration with framework's event system:**  Handle clicks and updates using the framework's event system to trigger copying and update the UI.\n\nRemember to handle potential lifecycle issues (like unmounting components) and to appropriately manage the Clipboard.js instance to avoid memory leaks, particularly in frameworks with component lifecycles.  Consult your framework's documentation for guidance on integrating external libraries.\n\n\n## Options and Configuration\n\n### The `clipboard` Object\n\nThe core of Clipboard.js functionality revolves around the `ClipboardJS` object.  You create an instance of this object, passing in options to customize its behavior.  The options are passed as a single object to the constructor:\n\n```javascript\nconst clipboard = new ClipboardJS(selector, options);\n```\n\nWhere `selector` is a CSS selector string targeting the elements to which you'll attach copy functionality, and `options` is an object detailing the configuration.\n\n\n### The `target` Option\n\nThe `target` option specifies the element whose content should be copied.  It is particularly useful when you want to copy text from an element other than the one that triggered the copy action (e.g., copying text from a hidden element when a button is clicked).   The value should be a CSS selector string targeting the element containing the text to be copied. If not provided, the text will be pulled from the `data-clipboard-text` attribute of the trigger element.\n\n```javascript\nconst clipboard = new ClipboardJS('.copy-button', {\n  target: '#hidden-text'\n});\n```\n\nIn this example, clicking an element with the class `copy-button` will copy the text content of the element with the ID `hidden-text`.\n\n\n### The `text` Option\n\nThe `text` option provides a function that dynamically generates the text to be copied.  This function receives the trigger element as an argument and should return a string. This is especially useful when the text to copy depends on data not directly present in the HTML.\n\n```javascript\nconst clipboard = new ClipboardJS('.copy-button', {\n  text: function(trigger) {\n    return trigger.dataset.customText || 'Default text';\n  }\n});\n```\n\nHere, the function checks for a `data-custom-text` attribute on the trigger element; if present, it uses that value; otherwise, it uses \"Default text\".\n\n\n### The `action` Option\n\nThe `action` option is less frequently used but allows you to specify the copy action to perform.  The default is 'copy'. While other actions might be supported by browsers (like 'cut'), it's typically not necessary to explicitly set it.\n\n```javascript\n// Usually not needed, default is 'copy'\nconst clipboard = new ClipboardJS('.copy-button', {\n  action: 'copy'\n});\n\n```\n\n### The `container` Option\n\nThe `container` option specifies a parent element within which to search for the target element if using the `target` option. If not specified, Clipboard.js searches the entire document. This is useful for optimizing performance when dealing with large documents.\n\n\n```javascript\nconst clipboard = new ClipboardJS('.copy-button', {\n  target: '.target-element',\n  container: '#my-container'\n});\n```\n\nThis limits the search for `.target-element` to only within the element having the ID `my-container`.\n\n\n### The `trigger` Option\n\nThe `trigger` option allows you to manually set the element that should trigger the copy action. While the constructor’s first argument implicitly sets the trigger, this option provides explicit control. It's less commonly needed unless advanced scenarios require decoupling the trigger element from the target element beyond what `target` alone can achieve.\n\n\n### The `debug` Option\n\nThe `debug` option enables verbose logging to the console for debugging purposes. Setting `debug` to `true` will output detailed information about the copy process, which can be helpful for troubleshooting issues.\n\n```javascript\nconst clipboard = new ClipboardJS('.copy-button', {\n  debug: true\n});\n```\n\nThis will print useful information in your browser’s console for analysis during development. Remember to disable this option in production.\n\n\n## Events and Callbacks\n\nClipboard.js provides two main events/callbacks that allow you to respond to the success or failure of a copy operation: `success` and `error`. These are configured within the options object passed to the `ClipboardJS` constructor.\n\n\n### `success` Event\n\nThe `success` callback function is executed when the copy operation is successful. It receives a single argument: an object containing information about the successful copy action.\n\n* **`e.text`**: A string containing the text that was copied to the clipboard.\n* **`e.trigger`**: A DOM element reference to the element that triggered the copy action (the button or element that was clicked).  This allows you to directly manipulate the element (e.g., change its text content to indicate success).\n* **`e.action`**: A string indicating the action performed ('copy').\n\n\n### `error` Event\n\nThe `error` callback function is executed when the copy operation fails.  This can happen for various reasons, including browser limitations or user permissions. The event object passed to the callback contains:\n\n* **`e.action`**: A string indicating the action that failed ('copy').\n* **`e.trigger`**: A DOM element reference to the element that triggered the copy action.\n* **`e.reason`**: (optional) A string providing more specific details about why the copy failed. This might indicate a permission issue or browser incompatibility.  The specific reasons may evolve with Clipboard.js updates and browser changes.\n* **`e.text`**: The text that failed to copy.\n\n\n\n### Event Handling Examples\n\nHere are examples demonstrating how to use the `success` and `error` events:\n\n**Example 1: Basic Success/Error Handling**\n\n```javascript\nconst clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    console.log('Copied text: ', e.text);\n    alert('Text copied to clipboard!');\n  },\n  error: function(e) {\n    console.error('Copy failed: ', e);\n    alert('Failed to copy text. Please try again.');\n  }\n});\n\n```\n\n**Example 2: Updating Button Text**\n\n```javascript\nconst clipboard = new ClipboardJS('.btn', {\n  success: function(e) {\n    e.trigger.textContent = 'Copied!';\n  },\n  error: function(e) {\n    e.trigger.textContent = 'Copy failed!';\n  }\n});\n```\n\nThis example modifies the button's text after a successful or failed copy attempt.\n\n\n**Example 3:  More Detailed Error Handling**\n\n\n```javascript\nconst clipboard = new ClipboardJS('.btn', {\n    success: function(e) {\n      console.log('Copied:', e.text);\n    },\n    error: function(e) {\n      console.error('Action:', e.action);\n      console.error('Trigger:', e.trigger);\n      if (e.reason) {\n        console.error('Reason:', e.reason);\n        alert(`Copy failed: ${e.reason}`);\n      } else {\n        console.error('An unknown error occurred.');\n        alert('Copy failed. Please check your browser settings and try again.');\n      }\n    }\n  });\n```\n\nThis example provides more informative error messages to the user by checking for the `e.reason` property.  Remember that not all error conditions will necessarily populate the reason field.  Handle cases where `e.reason` is missing to prevent unexpected behavior.\n\n\n## Troubleshooting\n\n### Common Errors and Solutions\n\n**Error:** \"Failed to copy: Not allowed to access clipboard\" or similar permission errors.\n\n**Solution:** This usually indicates a browser security restriction.  Ensure that the website is served over HTTPS (HTTP is typically blocked for clipboard access).  Also, check browser settings related to clipboard access permissions.  The user may need to explicitly allow the website access to the clipboard. Some browser extensions may also interfere with clipboard access. Try disabling such extensions temporarily for testing purposes.\n\n\n**Error:**  The copy action doesn't seem to work at all, no errors in the console.\n\n**Solution:**\n\n* **Check for typos:** Double-check your HTML and JavaScript for any typos in selectors, attribute names (`data-clipboard-text`), or function names.\n* **Incorrect library inclusion:** Make sure you've correctly included the Clipboard.js library in your HTML file. Verify the path is accurate, and that there are no network errors preventing loading.\n* **Selector issues:** Ensure your CSS selector correctly targets the button(s). Use your browser's developer tools to verify that the selector matches the intended elements.\n* **Asynchronous operations:** If you are dynamically setting the `data-clipboard-text` attribute, ensure it's updated *before* the ClipboardJS instance is created.\n\n\n**Error:**  `Uncaught TypeError: Cannot read properties of undefined (reading 'trigger')` or similar errors related to `e.trigger` being undefined.\n\n\n**Solution:** This error often arises if you access `e.trigger` outside the scope of the `success` or `error` callbacks.  These callbacks provide `e.trigger` only within their context. Ensure that you're only accessing `e.trigger` inside these handlers.\n\n\n**Error:**  The copied text is incorrect or incomplete.\n\n**Solution:** Verify the content of the `data-clipboard-text` attribute or the text returned from the `text` option function.  Ensure you are not accidentally copying HTML entities that are not properly escaped.\n\n\n### Debugging Tips\n\n* **Use the browser's developer tools:**  The console in your browser's developer tools is crucial for troubleshooting.  Enable the `debug` option in Clipboard.js for more verbose logging (`{debug: true}`).\n* **Simplify your code:**  If you encounter complex issues, try isolating the problem by creating a minimal, reproducible example. This helps pinpoint the exact source of the error.\n* **Check for conflicts:**  Other JavaScript libraries or scripts on your page could potentially interfere with Clipboard.js. Try temporarily disabling other scripts to see if it resolves the issue.\n* **Check the Network Tab:** In your browser's developer tools, review the Network tab to ensure that Clipboard.js is successfully loaded without errors.\n\n### Browser-Specific Issues\n\nWhile Clipboard.js strives for cross-browser compatibility, minor inconsistencies can occur.  Here are some browser-specific considerations:\n\n* **Older browsers:** Older browsers may lack native clipboard APIs, relying on fallbacks that might have limitations.  For optimal compatibility, aim for modern browsers (recent versions of Chrome, Firefox, Safari, Edge).\n* **Permissions:**  Browsers may require explicit permission to access the clipboard. Always test your application under HTTPS.\n* **Extensions:** Browser extensions might interfere with clipboard functionality.  Temporarily disable extensions to check for conflicts.\n* **Specific browser bugs:**  Rarely, browser-specific bugs might affect Clipboard.js. Check the browser's bug tracking system or community forums for known issues.\n\n\nIf you encounter problems not addressed here, provide a minimal reproducible example, including your code and the browser details, when seeking support.  This greatly aids in diagnosing and resolving the issue.\n\n\n## API Reference\n\nClipboard.js provides a few methods on the instantiated `clipboard` object for advanced control and management of the copy functionality.\n\n\n### `clipboard.on(eventName, callback)`\n\nThis method adds an event listener to the Clipboard.js instance.  It allows you to listen for custom events beyond the built-in `success` and `error` callbacks.  While Clipboard.js doesn't trigger many custom events directly, this method can be useful for integrating with other libraries or for extending functionality.\n\n* `eventName`: A string representing the name of the event to listen for.  Custom event names are typically defined by you and your application's logic.\n* `callback`: A function that will be executed when the event is triggered.  The callback function will receive an event object (the nature of this object depends on how you define and trigger custom events within your application).\n\n\n**Example:** (Illustrative, as Clipboard.js itself doesn't directly trigger `myCustomEvent`)\n\n```javascript\nconst clipboard = new ClipboardJS('.btn');\n\nclipboard.on('myCustomEvent', (event) => {\n  console.log('Custom event triggered:', event);\n});\n\n// You would trigger 'myCustomEvent' from your application logic separately.\n```\n\n\n### `clipboard.off(eventName, callback)`\n\nThis method removes an event listener that was previously added using `clipboard.on()`. If you add multiple listeners for the same event, this will remove only the specific listener callback function provided.\n\n* `eventName`: The name of the event for which to remove the listener.\n* `callback`: The specific callback function to remove.  If omitted, *all* listeners for that event are removed.\n\n**Example:**\n\n```javascript\nconst myCustomCallback = (event) => { /* ... */ };\nclipboard.on('myCustomEvent', myCustomCallback);\n// ... later ...\nclipboard.off('myCustomEvent', myCustomCallback); // Removes only myCustomCallback\nclipboard.off('myCustomEvent'); // Removes all listeners for 'myCustomEvent'\n```\n\n\n### `clipboard.destroy()`\n\nThis method completely destroys the Clipboard.js instance, removing all event listeners and releasing any resources it holds. It's crucial to call this method when you no longer need the Clipboard.js functionality, especially in applications with component lifecycles (like React or Vue), to prevent memory leaks and potential conflicts.  Failing to destroy the instance can lead to unexpected behavior or errors.\n\n**Example:**\n\n```javascript\nconst clipboard = new ClipboardJS('.btn');\n// ... later, when you no longer need the clipboard functionality ...\nclipboard.destroy();\n```\n\nIn frameworks like React, you would typically call `destroy()` within the `componentWillUnmount` lifecycle method to ensure cleanup when the component is removed from the DOM.  In Vue, you might place it within the `beforeDestroy` hook.  Always follow the best practices of your specific framework to effectively manage the lifecycle of external libraries.\n\n\n## Contributing\n\nWe welcome contributions to Clipboard.js!  Whether it's reporting bugs, suggesting improvements, or submitting code changes, your involvement helps make the library better for everyone.\n\n\n### Reporting Issues\n\nWhen reporting an issue, please provide as much detail as possible to help us understand and reproduce the problem.  A minimal, reproducible example is particularly valuable.  Here's what to include:\n\n* **Clear and concise title:** Summarize the problem briefly in the issue title.\n* **Detailed description:** Explain the issue thoroughly, including steps to reproduce it.\n* **Clipboard.js version:** Specify the version of Clipboard.js you're using.\n* **Browser and operating system:** State the browser(s) and operating system(s) where the issue occurs.\n* **Minimal reproducible example:** Provide a simple HTML, CSS, and JavaScript example that demonstrates the problem.  This helps us quickly isolate and fix the issue.  Try to create the smallest possible example that still exhibits the problem.\n* **Expected behavior:** Describe what you expected to happen.\n* **Actual behavior:** Describe what actually happened.\n* **Screenshots or screen recordings (if applicable):** Visual aids can significantly improve understanding.\n\n\n### Submitting Pull Requests\n\nBefore submitting a pull request (PR), please ensure:\n\n* **Fork the repository:** Create a fork of the Clipboard.js repository on GitHub.\n* **Create a new branch:** Create a new branch for your changes.  Use descriptive branch names (e.g., `fix/bug-123` or `feat/new-feature`).\n* **Write tests:** Add or update tests to cover your changes.  This helps ensure the changes work correctly and prevent regressions.  The project uses Jest for testing.\n* **Follow the coding style guide (see below):** Maintain consistent code style throughout the project.\n* **Update documentation (if necessary):** If your changes affect the API or usage, update the documentation accordingly.\n* **Submit a clear PR description:** Describe your changes and why they are needed.  Reference the issue(s) your PR addresses.\n\n\n### Coding Style Guide\n\nClipboard.js follows a consistent coding style to ensure readability and maintainability.  Please adhere to these guidelines when submitting pull requests:\n\n* **Indentation:** Use 2 spaces for indentation.\n* **Line length:** Keep lines under 80 characters.\n* **Variable names:** Use descriptive and consistent variable names (camelCase).\n* **Comments:**  Write clear and concise comments to explain complex logic or non-obvious code.\n* **Semicolons:** Use semicolons to terminate statements.\n* **Spacing:** Use consistent spacing around operators and punctuation.\n* **ESLint:** The project uses ESLint to enforce code style.  Make sure your code passes ESLint checks before submitting a PR.\n\n\nBy following these guidelines, you ensure that your contributions are easily integrated into the project and maintain the overall quality of Clipboard.js.  If you have any questions about the contribution process or coding style, feel free to open an issue or contact the maintainers.\n\n\n## License\n\n### License Information\n\nClipboard.js is licensed under the MIT License.  This means you are free to use, modify, and distribute Clipboard.js in your projects, both commercial and non-commercial, as long as you include the original copyright and license notice in your distribution.\n\nThe full text of the MIT License is as follows:\n\n\n```\nMIT License\n\nCopyright (c) 2017-present Zeno Rocha\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\nFor clarification on the terms of the MIT License, you should consult a legal professional.  This information is provided for convenience and should not be considered legal advice.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"clipboardjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Clipboard.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}