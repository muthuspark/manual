{"title":"SweetAlert - Documentation","markdown":{"yaml":{"title":"SweetAlert - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is SweetAlert?\n\nSweetAlert2 is a beautiful, customizable, and accessible replacement for JavaScript's `alert()`, `confirm()`, and `prompt()` boxes.  It provides a more visually appealing and user-friendly way to present notifications, confirmations, and prompts to users in web applications.  Unlike the default browser dialogs, SweetAlert2 offers extensive customization options for styling, content, and functionality.\n\n\n### Why use SweetAlert?\n\n* **Improved User Experience:** SweetAlert2 offers a more modern and aesthetically pleasing alternative to the standard browser alert boxes, leading to a better user experience.\n* **Customization:** It provides extensive options to customize the appearance, content, and functionality of the alerts, allowing developers to seamlessly integrate them into their application's design.\n* **Accessibility:** SweetAlert2 is built with accessibility in mind, ensuring that alerts are usable by people with disabilities.\n* **Responsiveness:** SweetAlert2 adapts to different screen sizes and devices, providing a consistent experience across platforms.\n* **Easy Integration:** It's straightforward to integrate into existing projects, requiring minimal code and dependencies.\n\n\n### Installation and Setup\n\nSweetAlert2 can be installed via several methods:\n\n* **CDN:** Include the SweetAlert2 CSS and JavaScript files directly from a CDN:\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@sweetalert2/themes@6/dark/dark.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\n```\n\n* **npm:** If you're using npm, install it with:\n\n```bash\nnpm install sweetalert2\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport Swal from 'sweetalert2';\n```\n\n* **yarn:** If you're using yarn, install it with:\n\n```bash\nyarn add sweetalert2\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport Swal from 'sweetalert2';\n```\n\n\nAfter installation, you are ready to use SweetAlert2 in your project.\n\n\n### Basic Usage Example\n\nThis example demonstrates a simple success alert:\n\n```javascript\nSwal.fire({\n  icon: 'success',\n  title: 'Success!',\n  text: 'Your action was successful.',\n});\n```\n\nThis code will display a SweetAlert2 popup with a green success icon, the title \"Success!\", and the text \"Your action was successful.\"  More complex examples with different icons, input fields, and custom HTML are possible through additional options documented in the full API reference.\n\n\n## Alert Types\n\nSweetAlert2 provides several built-in alert types, each with a distinct icon and default styling to convey different messages effectively.  These types are easily implemented by setting the `icon` parameter in the `Swal.fire()` function.\n\n### Success Alerts\n\nSuccess alerts indicate a successful operation. They are typically displayed with a green checkmark icon.\n\n```javascript\nSwal.fire({\n  icon: 'success',\n  title: 'Success!',\n  text: 'Your operation was successful.'\n});\n```\n\n### Error Alerts\n\nError alerts inform users of an error that occurred. They are usually displayed with a red exclamation mark icon.\n\n```javascript\nSwal.fire({\n  icon: 'error',\n  title: 'Oops...',\n  text: 'Something went wrong!'\n});\n```\n\n### Warning Alerts\n\nWarning alerts caution users about potential issues or actions that require confirmation.  They typically use a yellow triangle icon.\n\n```javascript\nSwal.fire({\n  icon: 'warning',\n  title: 'Are you sure?',\n  text: 'You won\\'t be able to revert this!',\n  showCancelButton: true,\n  confirmButtonText: 'Yes, delete it!'\n});\n```\n\n### Info Alerts\n\nInfo alerts provide neutral information or updates to the user. They generally display with a blue \"i\" icon.\n\n```javascript\nSwal.fire({\n  icon: 'info',\n  title: 'Information',\n  text: 'Here\\'s some information for you.'\n});\n```\n\n### Question Alerts\n\nQuestion alerts prompt the user for confirmation or a decision. While not a distinct `icon` type, they are commonly implemented using the `warning` icon and `showCancelButton` option for a visually clear choice.  (Alternatively, a custom icon could also be used).\n\n\n```javascript\nSwal.fire({\n  icon: 'question',\n  title: 'Are you sure?',\n  text: 'This action cannot be undone.',\n  showCancelButton: true,\n  confirmButtonText: 'Yes',\n  cancelButtonText: 'No'\n});\n```\n\n\n### Custom Icons\n\nFor more granular control over the alert's visual style, you can use custom icons.  This involves providing an image URL or a data URL as the `imageUrl` property.  The `imageWidth` and `imageHeight` properties can be used to control the size of the custom icon.\n\n```javascript\nSwal.fire({\n  title: 'Custom Icon!',\n  imageUrl: 'path/to/your/custom-icon.png',\n  imageWidth: 100,\n  imageHeight: 100,\n  imageAlt: 'Custom icon'\n});\n```\n\nRemember to replace `'path/to/your/custom-icon.png'` with the actual path to your custom icon image.  Using a data URL allows you to embed the icon directly into your code.\n\n\n## Parameters and Options\n\nSweetAlert2 offers a wide range of parameters and options to customize the appearance and behavior of your alerts.  These are passed as properties within the object passed to `Swal.fire()`.\n\n### title\n\nA string representing the title of the alert.\n\n```javascript\nSwal.fire({\n  title: 'My Alert Title'\n});\n```\n\n### text\n\nA string containing the main text of the alert.\n\n```javascript\nSwal.fire({\n  title: 'My Alert',\n  text: 'This is the alert text.'\n});\n```\n\n### icon\n\nA string specifying the alert's icon type ('success', 'error', 'warning', 'info', 'question', or null for no icon).\n\n```javascript\nSwal.fire({\n  icon: 'warning'\n});\n```\n\n### confirmButtonText\n\nA string to customize the text of the confirmation button.\n\n```javascript\nSwal.fire({\n  confirmButtonText: 'Continue'\n});\n```\n\n### cancelButtonText\n\nA string to customize the text of the cancel button (only shown if `showCancelButton` is true).\n\n```javascript\nSwal.fire({\n  showCancelButton: true,\n  cancelButtonText: 'Abort'\n});\n```\n\n### showCancelButton\n\nA boolean indicating whether to display a cancel button (defaults to false).\n\n```javascript\nSwal.fire({\n  showCancelButton: true\n});\n```\n\n### allowOutsideClick\n\nA boolean controlling whether clicking outside the alert dismisses it (defaults to true).\n\n```javascript\nSwal.fire({\n  allowOutsideClick: false\n});\n```\n\n### allowEscapeKey\n\nA boolean controlling whether pressing the Escape key dismisses the alert (defaults to true).\n\n```javascript\nSwal.fire({\n  allowEscapeKey: false\n});\n```\n\n### timer\n\nA number specifying the time (in milliseconds) before the alert automatically closes.\n\n```javascript\nSwal.fire({\n  timer: 2000 // Closes after 2 seconds\n});\n```\n\n### timerProgressBar\n\nA boolean indicating whether to display a progress bar for the timer (defaults to false).\n\n```javascript\nSwal.fire({\n  timer: 3000,\n  timerProgressBar: true\n});\n```\n\n### customClass\n\nAn object or string containing CSS classes to customize the alert's appearance.\n\n```javascript\nSwal.fire({\n  customClass: {\n    popup: 'my-custom-popup',\n    confirmButton: 'my-custom-confirm-button'\n  }\n});\n```\n\n### position\n\nA string specifying the alert's position ('top', 'top-start', 'top-end', 'center', 'bottom', 'bottom-start', 'bottom-end').\n\n```javascript\nSwal.fire({\n  position: 'top-end'\n});\n```\n\n### background\n\nA string specifying the background color of the alert.\n\n```javascript\nSwal.fire({\n  background: '#f0f0f0'\n});\n```\n\n### width\n\nA string or number specifying the width of the alert (e.g., '500px', 500).\n\n\n```javascript\nSwal.fire({\n  width: '300px'\n});\n```\n\n### padding\n\nA string specifying the padding of the alert.\n\n```javascript\nSwal.fire({\n  padding: '2em'\n});\n```\n\n### input\n\nA string specifying the type of input field to include ('text', 'email', 'password', 'number', 'tel', 'select', 'radio', 'checkbox', 'textarea').\n\n```javascript\nSwal.fire({\n  input: 'text'\n});\n```\n\n### inputValidator\n\nA function that validates the input value.\n\n```javascript\nSwal.fire({\n  input: 'email',\n  inputValidator: (value) => {\n    if (!value) {\n      return 'You need to write something!'\n    }\n    if (!/^[^@]+@[^@]+\\.[^@]+$/.test(value)) {\n      return 'Invalid email address'\n    }\n  }\n})\n```\n\n### inputPlaceholder\n\nA string representing the placeholder text for the input field.\n\n```javascript\nSwal.fire({\n  input: 'text',\n  inputPlaceholder: 'Enter your name'\n});\n```\n\n### inputValue\n\nA string or number representing the initial value for the input field.\n\n```javascript\nSwal.fire({\n  input: 'text',\n  inputValue: 'Initial Value'\n});\n```\n\n### showLoaderOnConfirm\n\nA boolean to show the loading indicator while `preConfirm` is executed.\n\n```javascript\nSwal.fire({\n  showLoaderOnConfirm: true,\n  preConfirm: () => {\n    return new Promise((resolve) => {\n      setTimeout(() => { resolve() }, 2000);\n    });\n  }\n});\n```\n\n### preConfirm\n\nAn asynchronous function executed before the alert closes, allowing for validation or asynchronous operations.  Its return value will be available in the result object after the alert closes.\n\n```javascript\nSwal.fire({\n  input: 'text',\n  preConfirm: (value) => {\n    return fetch(`/api/user/${value}`)\n        .then(response => response.json())\n        .then(data => data.id);\n  }\n}).then((result) => {\n  console.log(result.value) //The id from the api call\n});\n```\n\n\n### onBeforeOpen\n\nA function executed just before the alert opens.\n\n```javascript\nSwal.fire({\n  onBeforeOpen: () => {\n    // Do something before the alert opens\n  }\n});\n```\n\n### onOpen\n\nA function executed after the alert has opened.\n\n```javascript\nSwal.fire({\n  onOpen: () => {\n    // Do something after the alert opens\n  }\n});\n```\n\n### onClose\n\nA function executed after the alert has closed.\n\n```javascript\nSwal.fire({\n  onClose: () => {\n    // Do something after the alert closes\n  }\n});\n```\n\n### onBeforeClose\n\nA function executed before the alert closes.  Can be used to prevent closing. Return `false` from the function to prevent the alert from closing.\n\n```javascript\nSwal.fire({\n  onBeforeClose: () => {\n    // Do something before the alert closes. Return false to prevent closing.\n    return false;\n  }\n});\n```\n\n### onAfterClose\n\nA function executed after the alert has fully closed and been removed from the DOM.\n\n```javascript\nSwal.fire({\n  onAfterClose: () => {\n    // Do something after the alert is fully closed\n  }\n});\n```\n\n### stopOnEsc\n\nA boolean value that controls whether the alert should be closed when the Escape key is pressed (defaults to `true`).\n\n```javascript\nSwal.fire({\n  stopOnEsc: false\n});\n```\n\n### stopOnBackdropClick\n\nA boolean value that controls whether the alert should be closed when the backdrop (the overlay behind the alert) is clicked (defaults to `true`).\n\n```javascript\nSwal.fire({\n  stopOnBackdropClick: false\n});\n```\n\n\n\n## Advanced Usage\n\nThis section covers more complex usage scenarios and techniques for leveraging SweetAlert2's capabilities.\n\n### Ajax Requests\n\nSweetAlert2 integrates seamlessly with Ajax requests.  You can use the `preConfirm` option to make an Ajax call and handle the response before closing the alert.  This is useful for situations where you need to perform server-side validation or retrieve data before confirming an action.\n\n```javascript\nSwal.fire({\n  title: 'Are you sure?',\n  text: 'This action will be performed on the server.',\n  showLoaderOnConfirm: true,\n  preConfirm: () => {\n    return fetch('/api/myaction', { method: 'POST' })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(response.statusText)\n        }\n        return response.json()\n      })\n      .then(data => {\n        if (data.success) {\n          return data.message;\n        } else {\n          throw new Error(data.error);\n        }\n      })\n      .catch(error => {\n        Swal.showValidationMessage(`Request failed: ${error}`)\n      })\n  },\n  allowOutsideClick: () => !Swal.isLoading()\n}).then((result) => {\n  if (result.isConfirmed) {\n    Swal.fire({\n      icon: 'success',\n      title: 'Success!',\n      text: result.value\n    });\n  }\n});\n```\n\n\n### Promises\n\nSweetAlert2 works well with JavaScript Promises.  The `preConfirm` option can return a Promise, allowing you to perform asynchronous operations and handle their results.  The `.then()` method on the `Swal.fire()` call handles the promise's resolution or rejection.\n\n```javascript\nSwal.fire({\n  title: 'Loading...',\n  preConfirm: () => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve('Data loaded successfully!');\n      }, 2000);\n    });\n  }\n}).then((result) => {\n  Swal.fire({\n    title: 'Result',\n    text: result.value\n  });\n});\n```\n\n\n### Chaining Alerts\n\nYou can chain multiple SweetAlert2 instances together to create a sequence of alerts.  The `.then()` method of one alert's promise can trigger the next alert.\n\n```javascript\nSwal.fire({\n  title: 'Alert 1'\n}).then(() => {\n  return Swal.fire({\n    title: 'Alert 2'\n  });\n}).then(() => {\n  Swal.fire({\n    title: 'Alert 3'\n  });\n});\n```\n\n\n### Custom HTML Content\n\nSweetAlert2 allows you to inject custom HTML content into the alert using the `html` parameter.  This is useful for creating more complex and dynamic alerts.\n\n```javascript\nSwal.fire({\n  title: 'Custom HTML!',\n  html: 'You can use <strong>bold text</strong>, <a href=\"#\">links</a> and much more.'\n});\n```\n\n\n### Dynamic Content Updates\n\nYou can dynamically update the content of a SweetAlert2 alert after it's been opened.  Use the `Swal` object's `update()` method to modify properties like `title`, `html`, `text`, etc.\n\n```javascript\nconst swal = Swal.fire({\n  title: 'Initial Title',\n  html: 'Initial Content'\n});\n\nsetTimeout(() => {\n  swal.update({\n    title: 'Updated Title',\n    html: 'Updated Content'\n  });\n}, 2000);\n```\n\n\n### Accessibility Considerations\n\nEnsure your SweetAlert2 alerts are accessible by following these guidelines:\n\n* **ARIA attributes:** SweetAlert2 automatically adds relevant ARIA attributes for screen readers.\n* **Keyboard navigation:**  Ensure users can navigate and interact with the alert using only the keyboard.\n* **Contrast:**  Use sufficient color contrast between text and background for readability.\n* **Alternative text for images:** Provide `alt` text for any custom icons used.\n* **Focus management:** SweetAlert2 automatically handles focus management.\n* **Announce changes:** For dynamic content updates, consider using ARIA live regions to announce changes to screen reader users.\n\n\n\n\n## Themes and Styling\n\nSweetAlert2 provides several ways to customize its appearance to match your application's design.\n\n### Default Theme\n\nSweetAlert2 includes a default theme that offers a clean and modern look.  This theme is applied automatically if no custom theme or CSS modifications are made.  It's responsive and adapts to different screen sizes.\n\n\n### Custom Themes\n\nSweetAlert2 allows you to use pre-built themes or create your own.  While SweetAlert2 itself doesn't directly include many built-in themes beyond its default, you can find community-created themes or build your own. The approach generally involves creating separate CSS files that override or extend SweetAlert2's default styles.  These themes are typically included via CSS imports.\n\n\n### CSS Customization\n\nYou can customize SweetAlert2's appearance by directly modifying its CSS.  This offers the most granular control over styling.  You can target specific elements using their class names (e.g., `.swal2-title`, `.swal2-content`, `.swal2-button`).  Remember to include your custom CSS after the SweetAlert2 CSS file to ensure your styles override the defaults.  Be aware of potential conflicts with your application's existing CSS.  Using a CSS preprocessor (like Sass or SCSS) can help to organize your styles.\n\n```css\n/* Example: Change the background color of the popup */\n.swal2-popup {\n  background-color: #f0f0f0;\n}\n\n/* Example: Change the color of the confirm button */\n.swal2-confirm {\n  background-color: #4CAF50;\n  color: white;\n}\n```\n\n### Sass/SCSS Integration\n\nIf you're using Sass or SCSS in your project, you can integrate SweetAlert2's styling more effectively.  You will need to obtain the SweetAlert2 Sass files (often available through a separate package or by compiling the source code) and include them in your Sass build process.  This enables you to use Sass variables, mixins, and other features to maintain consistency between your application's styles and SweetAlert2's.  This approach allows more maintainable and scalable customization compared to directly editing the generated CSS.\n\nThe exact implementation details will depend on your project setup (e.g., using a build tool like Webpack or Parcel) and the specific way in which you've obtained the SweetAlert2 Sass files.  The basic idea involves importing the SweetAlert2 Sass files into your application's Sass files and then potentially extending or overriding its variables and mixins.\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues encountered when using SweetAlert2.\n\n### Common Errors\n\n* **SweetAlert2 is undefined:** This usually means that the SweetAlert2 library hasn't been correctly included in your project.  Double-check that you've included the JavaScript file (either via CDN or from your package manager) and that the path is correct. Ensure that the script tag is placed correctly in your HTML (ideally just before the closing `</body>` tag).\n\n* **Unexpected token ... in JSON response:** This error typically occurs when your `preConfirm` function receives an invalid JSON response from an Ajax request. Verify that your server is sending a properly formatted JSON response.  Use your browser's developer tools (Network tab) to inspect the actual response.\n\n* **Uncaught TypeError: Cannot read properties of undefined:**  This can happen if you're attempting to access a property of a result object from `Swal.fire().then()` before the promise has resolved or if you're trying to access a property that doesn't exist on the `Swal` object itself.  Check your asynchronous code and ensure you're handling promises correctly.   Carefully review the structure of the result object returned in the `.then()` method.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (Console and Network tabs) to inspect any JavaScript errors or network requests. This helps pinpoint the source of the problem.\n\n* **Console Logging:** Strategically use `console.log()` statements to track variable values and the flow of execution in your code.  This is especially helpful when debugging asynchronous operations or complex logic within `preConfirm` or other callback functions.\n\n* **Simplify Your Code:** If you're facing complex issues, try simplifying your SweetAlert2 code to isolate the problem.  Start with a minimal example and gradually add features until you identify the source of the error.\n\n* **Check for CSS Conflicts:** If the alert's appearance is unexpected, ensure that there are no conflicts between your application's CSS and SweetAlert2's styles. Use your browser's developer tools to inspect the applied CSS rules.\n\n\n### Browser Compatibility\n\nSweetAlert2 generally supports modern browsers. However, extremely outdated browsers might exhibit unexpected behavior.   SweetAlert2 aims for broad compatibility, but very old browsers might lack support for the technologies used by SweetAlert2 (like ES modules or specific CSS features).  For optimal performance and functionality, it's recommended to target modern browsers with appropriate polyfills if necessary for legacy support.\n\n\n### Known Issues\n\nWhile SweetAlert2 is regularly updated, known issues may exist.  Check the SweetAlert2 project's issue tracker or documentation for any reported bugs or workarounds.  If you encounter an issue not documented, consider submitting a detailed report to the project maintainers, including steps to reproduce the problem, browser information, and relevant code snippets.  Providing a codepen demonstrating the issue is very helpful.\n\n\n## Migration Guide (if applicable)\n\nThis section provides guidance on migrating from older versions of SweetAlert2 to the latest version.  The specific changes will depend on the versions involved.  Always consult the official release notes for the most accurate and detailed information.\n\n\n### Changes from previous versions\n\nThis section would list significant changes between the previous major version and the current one. This would include, but not be limited to:\n\n* **New features:**  Any new parameters, options, methods, or functionalities added in the latest version.\n* **Deprecated features:** Features that have been deprecated and will be removed in future versions.  This section should clearly indicate which features are no longer supported and suggest alternative approaches.\n* **Improved performance:**  Any performance optimizations or improvements.\n* **Bug fixes:**  A summary of significant bug fixes.\n* **API changes:**  Any changes to the API, including parameter name changes, removal of parameters, or modifications to the structure of return values from functions.\n\n\n**Exampl:**\n\n* **v11 to v12:** Added support for new input types (e.g., `date`).  Deprecated the `confirmButtonColor` parameter; use `customClass` instead. Improved accessibility by adding ARIA attributes.\n\n\n### Breaking changes\n\nThis section would detail any changes that might cause your existing code to break when upgrading.  This includes, but is not limited to:\n\n* **Removed features:** Features completely removed from the library.\n* **Parameter name changes:** Changes to the names of parameters or options.\n* **Changed parameter types:** Changes to the data type of parameters (e.g., from string to boolean).\n* **Modified return values:**  Significant changes in the structure or content of return values from functions.\n* **Removed or changed methods:**  Changes or removals of methods used in previous versions.\n\n\n**Example:**\n\n* **v10 to v11:** The `inputAttributes` parameter was removed; use the more flexible `inputOptions` parameter instead.  The `onConfirm` callback is now deprecated; use `.then()` instead.\n\n\n### Upgrade instructions\n\nThis section outlines a step-by-step guide to upgrading your code to the latest version:\n\n1. **Check for breaking changes:** Review the breaking changes section to identify any potential issues in your code.\n2. **Update the library:** Update your `package.json` (if using npm or yarn) or replace the CDN links with the latest version.\n3. **Address breaking changes:** Modify your code to address any breaking changes, using the suggestions and alternatives provided.\n4. **Test thoroughly:** After making the changes, thoroughly test your application to ensure everything works as expected.\n\n\n**Example (Illustrative - Adapt to specific version):**\n\nTo upgrade from v10 to v11:\n\n1. Update your `package.json`:  `npm install sweetalert2@11`\n2. Replace `inputAttributes` with `inputOptions` in your SweetAlert2 calls.\n3. Replace calls to `onConfirm` with the appropriate logic using the `.then()` method.\n4. Retest your application to verify functionality.\n\n\nRemember to consult the official release notes and changelog for the most up-to-date and accurate migration instructions.\n\n\n## API Reference\n\nThis section provides a comprehensive reference for the SweetAlert2 API.  For the most up-to-date and detailed information, always refer to the official SweetAlert2 documentation.  This example provides a simplified overview.\n\n\n### SweetAlert2 Methods\n\nSweetAlert2 primarily uses the `Swal.fire()` method to display alerts.  However, there are other utility methods available:\n\n* **`Swal.fire(params)`:** This is the core method to display a SweetAlert2 popup.  `params` is an object containing the various configuration options (title, text, icon, etc.).  This method returns a Promise that resolves with an object containing information about the user's interaction (e.g., whether they clicked \"OK\" or \"Cancel\").\n\n* **`Swal.getPopup()`:** Returns the DOM element of the currently displayed SweetAlert2 popup.  Useful for direct DOM manipulation, though generally discouraged in favor of using the API methods.\n\n* **`Swal.update(params)`:**  Updates the properties of an already open SweetAlert2 popup. The `params` object specifies the properties to change.  Useful for dynamic content updates.\n\n* **`Swal.close()`:** Closes the currently active SweetAlert2 popup.\n\n* **`Swal.isVisible()`:** Returns `true` if a SweetAlert2 popup is currently visible; otherwise, returns `false`.\n\n* **`Swal.showLoading()`:** Displays a loading indicator on an already open SweetAlert2 popup. Useful for indicating that an asynchronous operation is in progress.\n\n* **`Swal.hideLoading()`:** Hides the loading indicator on an already open SweetAlert2 popup.\n\n* **`Swal.clickConfirm()`:** Programmatically simulates a click on the confirm button.\n\n* **`Swal.clickCancel()`:** Programmatically simulates a click on the cancel button.\n\n\n**Example:**\n\n```javascript\nSwal.fire({\n  title: 'Are you sure?',\n  icon: 'warning',\n  showCancelButton: true,\n  confirmButtonText: 'Yes, delete it!'\n}).then((result) => {\n  if (result.isConfirmed) {\n    Swal.fire('Deleted!', '', 'success');\n  }\n});\n```\n\n\n### SweetAlert2 Properties\n\nSweetAlert2 doesn't expose properties directly on a global `Swal` object in the same way it does methods. Instead, the properties are set as parameters within the `Swal.fire()` or `Swal.update()` calls.  These parameters control various aspects of the alert's appearance and behavior (e.g., `title`, `text`, `icon`, `confirmButtonText`, `timer`, `customClass`, etc.).  These parameters are described extensively in other sections of this manual.\n\n\n### SweetAlert2 Events\n\nSweetAlert2 triggers several events throughout its lifecycle. These events can be handled using the `onBeforeOpen`, `onOpen`, `onClose`, `onBeforeClose`, and `onAfterClose` parameters (all functions) within the `Swal.fire()` call.   These functions are called at specific points in the alert's lifecycle:\n\n* **`onBeforeOpen()`:** Called immediately before the alert's popup is opened.\n* **`onOpen()`:** Called immediately after the alert's popup is opened and is fully visible.\n* **`onClose()`:** Called immediately before the alert's popup is closed but still visible.\n* **`onBeforeClose()`:** Called before the alert closes. You can prevent the closing by returning `false` from this function.\n* **`onAfterClose()`:** Called after the alert has been completely removed from the DOM.\n\n\n**Example:**\n\n```javascript\nSwal.fire({\n  title: 'My Alert',\n  onBeforeOpen: () => {\n    console.log('Alert about to open');\n  },\n  onClose: () => {\n    console.log('Alert closing');\n  }\n});\n```\n\nRemember to check the official SweetAlert2 documentation for the most complete and up-to-date API reference.  This is a simplified overview, and more nuanced aspects may exist depending on the specific version.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is SweetAlert?\n\nSweetAlert2 is a beautiful, customizable, and accessible replacement for JavaScript's `alert()`, `confirm()`, and `prompt()` boxes.  It provides a more visually appealing and user-friendly way to present notifications, confirmations, and prompts to users in web applications.  Unlike the default browser dialogs, SweetAlert2 offers extensive customization options for styling, content, and functionality.\n\n\n### Why use SweetAlert?\n\n* **Improved User Experience:** SweetAlert2 offers a more modern and aesthetically pleasing alternative to the standard browser alert boxes, leading to a better user experience.\n* **Customization:** It provides extensive options to customize the appearance, content, and functionality of the alerts, allowing developers to seamlessly integrate them into their application's design.\n* **Accessibility:** SweetAlert2 is built with accessibility in mind, ensuring that alerts are usable by people with disabilities.\n* **Responsiveness:** SweetAlert2 adapts to different screen sizes and devices, providing a consistent experience across platforms.\n* **Easy Integration:** It's straightforward to integrate into existing projects, requiring minimal code and dependencies.\n\n\n### Installation and Setup\n\nSweetAlert2 can be installed via several methods:\n\n* **CDN:** Include the SweetAlert2 CSS and JavaScript files directly from a CDN:\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@sweetalert2/themes@6/dark/dark.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\n```\n\n* **npm:** If you're using npm, install it with:\n\n```bash\nnpm install sweetalert2\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport Swal from 'sweetalert2';\n```\n\n* **yarn:** If you're using yarn, install it with:\n\n```bash\nyarn add sweetalert2\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport Swal from 'sweetalert2';\n```\n\n\nAfter installation, you are ready to use SweetAlert2 in your project.\n\n\n### Basic Usage Example\n\nThis example demonstrates a simple success alert:\n\n```javascript\nSwal.fire({\n  icon: 'success',\n  title: 'Success!',\n  text: 'Your action was successful.',\n});\n```\n\nThis code will display a SweetAlert2 popup with a green success icon, the title \"Success!\", and the text \"Your action was successful.\"  More complex examples with different icons, input fields, and custom HTML are possible through additional options documented in the full API reference.\n\n\n## Alert Types\n\nSweetAlert2 provides several built-in alert types, each with a distinct icon and default styling to convey different messages effectively.  These types are easily implemented by setting the `icon` parameter in the `Swal.fire()` function.\n\n### Success Alerts\n\nSuccess alerts indicate a successful operation. They are typically displayed with a green checkmark icon.\n\n```javascript\nSwal.fire({\n  icon: 'success',\n  title: 'Success!',\n  text: 'Your operation was successful.'\n});\n```\n\n### Error Alerts\n\nError alerts inform users of an error that occurred. They are usually displayed with a red exclamation mark icon.\n\n```javascript\nSwal.fire({\n  icon: 'error',\n  title: 'Oops...',\n  text: 'Something went wrong!'\n});\n```\n\n### Warning Alerts\n\nWarning alerts caution users about potential issues or actions that require confirmation.  They typically use a yellow triangle icon.\n\n```javascript\nSwal.fire({\n  icon: 'warning',\n  title: 'Are you sure?',\n  text: 'You won\\'t be able to revert this!',\n  showCancelButton: true,\n  confirmButtonText: 'Yes, delete it!'\n});\n```\n\n### Info Alerts\n\nInfo alerts provide neutral information or updates to the user. They generally display with a blue \"i\" icon.\n\n```javascript\nSwal.fire({\n  icon: 'info',\n  title: 'Information',\n  text: 'Here\\'s some information for you.'\n});\n```\n\n### Question Alerts\n\nQuestion alerts prompt the user for confirmation or a decision. While not a distinct `icon` type, they are commonly implemented using the `warning` icon and `showCancelButton` option for a visually clear choice.  (Alternatively, a custom icon could also be used).\n\n\n```javascript\nSwal.fire({\n  icon: 'question',\n  title: 'Are you sure?',\n  text: 'This action cannot be undone.',\n  showCancelButton: true,\n  confirmButtonText: 'Yes',\n  cancelButtonText: 'No'\n});\n```\n\n\n### Custom Icons\n\nFor more granular control over the alert's visual style, you can use custom icons.  This involves providing an image URL or a data URL as the `imageUrl` property.  The `imageWidth` and `imageHeight` properties can be used to control the size of the custom icon.\n\n```javascript\nSwal.fire({\n  title: 'Custom Icon!',\n  imageUrl: 'path/to/your/custom-icon.png',\n  imageWidth: 100,\n  imageHeight: 100,\n  imageAlt: 'Custom icon'\n});\n```\n\nRemember to replace `'path/to/your/custom-icon.png'` with the actual path to your custom icon image.  Using a data URL allows you to embed the icon directly into your code.\n\n\n## Parameters and Options\n\nSweetAlert2 offers a wide range of parameters and options to customize the appearance and behavior of your alerts.  These are passed as properties within the object passed to `Swal.fire()`.\n\n### title\n\nA string representing the title of the alert.\n\n```javascript\nSwal.fire({\n  title: 'My Alert Title'\n});\n```\n\n### text\n\nA string containing the main text of the alert.\n\n```javascript\nSwal.fire({\n  title: 'My Alert',\n  text: 'This is the alert text.'\n});\n```\n\n### icon\n\nA string specifying the alert's icon type ('success', 'error', 'warning', 'info', 'question', or null for no icon).\n\n```javascript\nSwal.fire({\n  icon: 'warning'\n});\n```\n\n### confirmButtonText\n\nA string to customize the text of the confirmation button.\n\n```javascript\nSwal.fire({\n  confirmButtonText: 'Continue'\n});\n```\n\n### cancelButtonText\n\nA string to customize the text of the cancel button (only shown if `showCancelButton` is true).\n\n```javascript\nSwal.fire({\n  showCancelButton: true,\n  cancelButtonText: 'Abort'\n});\n```\n\n### showCancelButton\n\nA boolean indicating whether to display a cancel button (defaults to false).\n\n```javascript\nSwal.fire({\n  showCancelButton: true\n});\n```\n\n### allowOutsideClick\n\nA boolean controlling whether clicking outside the alert dismisses it (defaults to true).\n\n```javascript\nSwal.fire({\n  allowOutsideClick: false\n});\n```\n\n### allowEscapeKey\n\nA boolean controlling whether pressing the Escape key dismisses the alert (defaults to true).\n\n```javascript\nSwal.fire({\n  allowEscapeKey: false\n});\n```\n\n### timer\n\nA number specifying the time (in milliseconds) before the alert automatically closes.\n\n```javascript\nSwal.fire({\n  timer: 2000 // Closes after 2 seconds\n});\n```\n\n### timerProgressBar\n\nA boolean indicating whether to display a progress bar for the timer (defaults to false).\n\n```javascript\nSwal.fire({\n  timer: 3000,\n  timerProgressBar: true\n});\n```\n\n### customClass\n\nAn object or string containing CSS classes to customize the alert's appearance.\n\n```javascript\nSwal.fire({\n  customClass: {\n    popup: 'my-custom-popup',\n    confirmButton: 'my-custom-confirm-button'\n  }\n});\n```\n\n### position\n\nA string specifying the alert's position ('top', 'top-start', 'top-end', 'center', 'bottom', 'bottom-start', 'bottom-end').\n\n```javascript\nSwal.fire({\n  position: 'top-end'\n});\n```\n\n### background\n\nA string specifying the background color of the alert.\n\n```javascript\nSwal.fire({\n  background: '#f0f0f0'\n});\n```\n\n### width\n\nA string or number specifying the width of the alert (e.g., '500px', 500).\n\n\n```javascript\nSwal.fire({\n  width: '300px'\n});\n```\n\n### padding\n\nA string specifying the padding of the alert.\n\n```javascript\nSwal.fire({\n  padding: '2em'\n});\n```\n\n### input\n\nA string specifying the type of input field to include ('text', 'email', 'password', 'number', 'tel', 'select', 'radio', 'checkbox', 'textarea').\n\n```javascript\nSwal.fire({\n  input: 'text'\n});\n```\n\n### inputValidator\n\nA function that validates the input value.\n\n```javascript\nSwal.fire({\n  input: 'email',\n  inputValidator: (value) => {\n    if (!value) {\n      return 'You need to write something!'\n    }\n    if (!/^[^@]+@[^@]+\\.[^@]+$/.test(value)) {\n      return 'Invalid email address'\n    }\n  }\n})\n```\n\n### inputPlaceholder\n\nA string representing the placeholder text for the input field.\n\n```javascript\nSwal.fire({\n  input: 'text',\n  inputPlaceholder: 'Enter your name'\n});\n```\n\n### inputValue\n\nA string or number representing the initial value for the input field.\n\n```javascript\nSwal.fire({\n  input: 'text',\n  inputValue: 'Initial Value'\n});\n```\n\n### showLoaderOnConfirm\n\nA boolean to show the loading indicator while `preConfirm` is executed.\n\n```javascript\nSwal.fire({\n  showLoaderOnConfirm: true,\n  preConfirm: () => {\n    return new Promise((resolve) => {\n      setTimeout(() => { resolve() }, 2000);\n    });\n  }\n});\n```\n\n### preConfirm\n\nAn asynchronous function executed before the alert closes, allowing for validation or asynchronous operations.  Its return value will be available in the result object after the alert closes.\n\n```javascript\nSwal.fire({\n  input: 'text',\n  preConfirm: (value) => {\n    return fetch(`/api/user/${value}`)\n        .then(response => response.json())\n        .then(data => data.id);\n  }\n}).then((result) => {\n  console.log(result.value) //The id from the api call\n});\n```\n\n\n### onBeforeOpen\n\nA function executed just before the alert opens.\n\n```javascript\nSwal.fire({\n  onBeforeOpen: () => {\n    // Do something before the alert opens\n  }\n});\n```\n\n### onOpen\n\nA function executed after the alert has opened.\n\n```javascript\nSwal.fire({\n  onOpen: () => {\n    // Do something after the alert opens\n  }\n});\n```\n\n### onClose\n\nA function executed after the alert has closed.\n\n```javascript\nSwal.fire({\n  onClose: () => {\n    // Do something after the alert closes\n  }\n});\n```\n\n### onBeforeClose\n\nA function executed before the alert closes.  Can be used to prevent closing. Return `false` from the function to prevent the alert from closing.\n\n```javascript\nSwal.fire({\n  onBeforeClose: () => {\n    // Do something before the alert closes. Return false to prevent closing.\n    return false;\n  }\n});\n```\n\n### onAfterClose\n\nA function executed after the alert has fully closed and been removed from the DOM.\n\n```javascript\nSwal.fire({\n  onAfterClose: () => {\n    // Do something after the alert is fully closed\n  }\n});\n```\n\n### stopOnEsc\n\nA boolean value that controls whether the alert should be closed when the Escape key is pressed (defaults to `true`).\n\n```javascript\nSwal.fire({\n  stopOnEsc: false\n});\n```\n\n### stopOnBackdropClick\n\nA boolean value that controls whether the alert should be closed when the backdrop (the overlay behind the alert) is clicked (defaults to `true`).\n\n```javascript\nSwal.fire({\n  stopOnBackdropClick: false\n});\n```\n\n\n\n## Advanced Usage\n\nThis section covers more complex usage scenarios and techniques for leveraging SweetAlert2's capabilities.\n\n### Ajax Requests\n\nSweetAlert2 integrates seamlessly with Ajax requests.  You can use the `preConfirm` option to make an Ajax call and handle the response before closing the alert.  This is useful for situations where you need to perform server-side validation or retrieve data before confirming an action.\n\n```javascript\nSwal.fire({\n  title: 'Are you sure?',\n  text: 'This action will be performed on the server.',\n  showLoaderOnConfirm: true,\n  preConfirm: () => {\n    return fetch('/api/myaction', { method: 'POST' })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(response.statusText)\n        }\n        return response.json()\n      })\n      .then(data => {\n        if (data.success) {\n          return data.message;\n        } else {\n          throw new Error(data.error);\n        }\n      })\n      .catch(error => {\n        Swal.showValidationMessage(`Request failed: ${error}`)\n      })\n  },\n  allowOutsideClick: () => !Swal.isLoading()\n}).then((result) => {\n  if (result.isConfirmed) {\n    Swal.fire({\n      icon: 'success',\n      title: 'Success!',\n      text: result.value\n    });\n  }\n});\n```\n\n\n### Promises\n\nSweetAlert2 works well with JavaScript Promises.  The `preConfirm` option can return a Promise, allowing you to perform asynchronous operations and handle their results.  The `.then()` method on the `Swal.fire()` call handles the promise's resolution or rejection.\n\n```javascript\nSwal.fire({\n  title: 'Loading...',\n  preConfirm: () => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve('Data loaded successfully!');\n      }, 2000);\n    });\n  }\n}).then((result) => {\n  Swal.fire({\n    title: 'Result',\n    text: result.value\n  });\n});\n```\n\n\n### Chaining Alerts\n\nYou can chain multiple SweetAlert2 instances together to create a sequence of alerts.  The `.then()` method of one alert's promise can trigger the next alert.\n\n```javascript\nSwal.fire({\n  title: 'Alert 1'\n}).then(() => {\n  return Swal.fire({\n    title: 'Alert 2'\n  });\n}).then(() => {\n  Swal.fire({\n    title: 'Alert 3'\n  });\n});\n```\n\n\n### Custom HTML Content\n\nSweetAlert2 allows you to inject custom HTML content into the alert using the `html` parameter.  This is useful for creating more complex and dynamic alerts.\n\n```javascript\nSwal.fire({\n  title: 'Custom HTML!',\n  html: 'You can use <strong>bold text</strong>, <a href=\"#\">links</a> and much more.'\n});\n```\n\n\n### Dynamic Content Updates\n\nYou can dynamically update the content of a SweetAlert2 alert after it's been opened.  Use the `Swal` object's `update()` method to modify properties like `title`, `html`, `text`, etc.\n\n```javascript\nconst swal = Swal.fire({\n  title: 'Initial Title',\n  html: 'Initial Content'\n});\n\nsetTimeout(() => {\n  swal.update({\n    title: 'Updated Title',\n    html: 'Updated Content'\n  });\n}, 2000);\n```\n\n\n### Accessibility Considerations\n\nEnsure your SweetAlert2 alerts are accessible by following these guidelines:\n\n* **ARIA attributes:** SweetAlert2 automatically adds relevant ARIA attributes for screen readers.\n* **Keyboard navigation:**  Ensure users can navigate and interact with the alert using only the keyboard.\n* **Contrast:**  Use sufficient color contrast between text and background for readability.\n* **Alternative text for images:** Provide `alt` text for any custom icons used.\n* **Focus management:** SweetAlert2 automatically handles focus management.\n* **Announce changes:** For dynamic content updates, consider using ARIA live regions to announce changes to screen reader users.\n\n\n\n\n## Themes and Styling\n\nSweetAlert2 provides several ways to customize its appearance to match your application's design.\n\n### Default Theme\n\nSweetAlert2 includes a default theme that offers a clean and modern look.  This theme is applied automatically if no custom theme or CSS modifications are made.  It's responsive and adapts to different screen sizes.\n\n\n### Custom Themes\n\nSweetAlert2 allows you to use pre-built themes or create your own.  While SweetAlert2 itself doesn't directly include many built-in themes beyond its default, you can find community-created themes or build your own. The approach generally involves creating separate CSS files that override or extend SweetAlert2's default styles.  These themes are typically included via CSS imports.\n\n\n### CSS Customization\n\nYou can customize SweetAlert2's appearance by directly modifying its CSS.  This offers the most granular control over styling.  You can target specific elements using their class names (e.g., `.swal2-title`, `.swal2-content`, `.swal2-button`).  Remember to include your custom CSS after the SweetAlert2 CSS file to ensure your styles override the defaults.  Be aware of potential conflicts with your application's existing CSS.  Using a CSS preprocessor (like Sass or SCSS) can help to organize your styles.\n\n```css\n/* Example: Change the background color of the popup */\n.swal2-popup {\n  background-color: #f0f0f0;\n}\n\n/* Example: Change the color of the confirm button */\n.swal2-confirm {\n  background-color: #4CAF50;\n  color: white;\n}\n```\n\n### Sass/SCSS Integration\n\nIf you're using Sass or SCSS in your project, you can integrate SweetAlert2's styling more effectively.  You will need to obtain the SweetAlert2 Sass files (often available through a separate package or by compiling the source code) and include them in your Sass build process.  This enables you to use Sass variables, mixins, and other features to maintain consistency between your application's styles and SweetAlert2's.  This approach allows more maintainable and scalable customization compared to directly editing the generated CSS.\n\nThe exact implementation details will depend on your project setup (e.g., using a build tool like Webpack or Parcel) and the specific way in which you've obtained the SweetAlert2 Sass files.  The basic idea involves importing the SweetAlert2 Sass files into your application's Sass files and then potentially extending or overriding its variables and mixins.\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues encountered when using SweetAlert2.\n\n### Common Errors\n\n* **SweetAlert2 is undefined:** This usually means that the SweetAlert2 library hasn't been correctly included in your project.  Double-check that you've included the JavaScript file (either via CDN or from your package manager) and that the path is correct. Ensure that the script tag is placed correctly in your HTML (ideally just before the closing `</body>` tag).\n\n* **Unexpected token ... in JSON response:** This error typically occurs when your `preConfirm` function receives an invalid JSON response from an Ajax request. Verify that your server is sending a properly formatted JSON response.  Use your browser's developer tools (Network tab) to inspect the actual response.\n\n* **Uncaught TypeError: Cannot read properties of undefined:**  This can happen if you're attempting to access a property of a result object from `Swal.fire().then()` before the promise has resolved or if you're trying to access a property that doesn't exist on the `Swal` object itself.  Check your asynchronous code and ensure you're handling promises correctly.   Carefully review the structure of the result object returned in the `.then()` method.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (Console and Network tabs) to inspect any JavaScript errors or network requests. This helps pinpoint the source of the problem.\n\n* **Console Logging:** Strategically use `console.log()` statements to track variable values and the flow of execution in your code.  This is especially helpful when debugging asynchronous operations or complex logic within `preConfirm` or other callback functions.\n\n* **Simplify Your Code:** If you're facing complex issues, try simplifying your SweetAlert2 code to isolate the problem.  Start with a minimal example and gradually add features until you identify the source of the error.\n\n* **Check for CSS Conflicts:** If the alert's appearance is unexpected, ensure that there are no conflicts between your application's CSS and SweetAlert2's styles. Use your browser's developer tools to inspect the applied CSS rules.\n\n\n### Browser Compatibility\n\nSweetAlert2 generally supports modern browsers. However, extremely outdated browsers might exhibit unexpected behavior.   SweetAlert2 aims for broad compatibility, but very old browsers might lack support for the technologies used by SweetAlert2 (like ES modules or specific CSS features).  For optimal performance and functionality, it's recommended to target modern browsers with appropriate polyfills if necessary for legacy support.\n\n\n### Known Issues\n\nWhile SweetAlert2 is regularly updated, known issues may exist.  Check the SweetAlert2 project's issue tracker or documentation for any reported bugs or workarounds.  If you encounter an issue not documented, consider submitting a detailed report to the project maintainers, including steps to reproduce the problem, browser information, and relevant code snippets.  Providing a codepen demonstrating the issue is very helpful.\n\n\n## Migration Guide (if applicable)\n\nThis section provides guidance on migrating from older versions of SweetAlert2 to the latest version.  The specific changes will depend on the versions involved.  Always consult the official release notes for the most accurate and detailed information.\n\n\n### Changes from previous versions\n\nThis section would list significant changes between the previous major version and the current one. This would include, but not be limited to:\n\n* **New features:**  Any new parameters, options, methods, or functionalities added in the latest version.\n* **Deprecated features:** Features that have been deprecated and will be removed in future versions.  This section should clearly indicate which features are no longer supported and suggest alternative approaches.\n* **Improved performance:**  Any performance optimizations or improvements.\n* **Bug fixes:**  A summary of significant bug fixes.\n* **API changes:**  Any changes to the API, including parameter name changes, removal of parameters, or modifications to the structure of return values from functions.\n\n\n**Exampl:**\n\n* **v11 to v12:** Added support for new input types (e.g., `date`).  Deprecated the `confirmButtonColor` parameter; use `customClass` instead. Improved accessibility by adding ARIA attributes.\n\n\n### Breaking changes\n\nThis section would detail any changes that might cause your existing code to break when upgrading.  This includes, but is not limited to:\n\n* **Removed features:** Features completely removed from the library.\n* **Parameter name changes:** Changes to the names of parameters or options.\n* **Changed parameter types:** Changes to the data type of parameters (e.g., from string to boolean).\n* **Modified return values:**  Significant changes in the structure or content of return values from functions.\n* **Removed or changed methods:**  Changes or removals of methods used in previous versions.\n\n\n**Example:**\n\n* **v10 to v11:** The `inputAttributes` parameter was removed; use the more flexible `inputOptions` parameter instead.  The `onConfirm` callback is now deprecated; use `.then()` instead.\n\n\n### Upgrade instructions\n\nThis section outlines a step-by-step guide to upgrading your code to the latest version:\n\n1. **Check for breaking changes:** Review the breaking changes section to identify any potential issues in your code.\n2. **Update the library:** Update your `package.json` (if using npm or yarn) or replace the CDN links with the latest version.\n3. **Address breaking changes:** Modify your code to address any breaking changes, using the suggestions and alternatives provided.\n4. **Test thoroughly:** After making the changes, thoroughly test your application to ensure everything works as expected.\n\n\n**Example (Illustrative - Adapt to specific version):**\n\nTo upgrade from v10 to v11:\n\n1. Update your `package.json`:  `npm install sweetalert2@11`\n2. Replace `inputAttributes` with `inputOptions` in your SweetAlert2 calls.\n3. Replace calls to `onConfirm` with the appropriate logic using the `.then()` method.\n4. Retest your application to verify functionality.\n\n\nRemember to consult the official release notes and changelog for the most up-to-date and accurate migration instructions.\n\n\n## API Reference\n\nThis section provides a comprehensive reference for the SweetAlert2 API.  For the most up-to-date and detailed information, always refer to the official SweetAlert2 documentation.  This example provides a simplified overview.\n\n\n### SweetAlert2 Methods\n\nSweetAlert2 primarily uses the `Swal.fire()` method to display alerts.  However, there are other utility methods available:\n\n* **`Swal.fire(params)`:** This is the core method to display a SweetAlert2 popup.  `params` is an object containing the various configuration options (title, text, icon, etc.).  This method returns a Promise that resolves with an object containing information about the user's interaction (e.g., whether they clicked \"OK\" or \"Cancel\").\n\n* **`Swal.getPopup()`:** Returns the DOM element of the currently displayed SweetAlert2 popup.  Useful for direct DOM manipulation, though generally discouraged in favor of using the API methods.\n\n* **`Swal.update(params)`:**  Updates the properties of an already open SweetAlert2 popup. The `params` object specifies the properties to change.  Useful for dynamic content updates.\n\n* **`Swal.close()`:** Closes the currently active SweetAlert2 popup.\n\n* **`Swal.isVisible()`:** Returns `true` if a SweetAlert2 popup is currently visible; otherwise, returns `false`.\n\n* **`Swal.showLoading()`:** Displays a loading indicator on an already open SweetAlert2 popup. Useful for indicating that an asynchronous operation is in progress.\n\n* **`Swal.hideLoading()`:** Hides the loading indicator on an already open SweetAlert2 popup.\n\n* **`Swal.clickConfirm()`:** Programmatically simulates a click on the confirm button.\n\n* **`Swal.clickCancel()`:** Programmatically simulates a click on the cancel button.\n\n\n**Example:**\n\n```javascript\nSwal.fire({\n  title: 'Are you sure?',\n  icon: 'warning',\n  showCancelButton: true,\n  confirmButtonText: 'Yes, delete it!'\n}).then((result) => {\n  if (result.isConfirmed) {\n    Swal.fire('Deleted!', '', 'success');\n  }\n});\n```\n\n\n### SweetAlert2 Properties\n\nSweetAlert2 doesn't expose properties directly on a global `Swal` object in the same way it does methods. Instead, the properties are set as parameters within the `Swal.fire()` or `Swal.update()` calls.  These parameters control various aspects of the alert's appearance and behavior (e.g., `title`, `text`, `icon`, `confirmButtonText`, `timer`, `customClass`, etc.).  These parameters are described extensively in other sections of this manual.\n\n\n### SweetAlert2 Events\n\nSweetAlert2 triggers several events throughout its lifecycle. These events can be handled using the `onBeforeOpen`, `onOpen`, `onClose`, `onBeforeClose`, and `onAfterClose` parameters (all functions) within the `Swal.fire()` call.   These functions are called at specific points in the alert's lifecycle:\n\n* **`onBeforeOpen()`:** Called immediately before the alert's popup is opened.\n* **`onOpen()`:** Called immediately after the alert's popup is opened and is fully visible.\n* **`onClose()`:** Called immediately before the alert's popup is closed but still visible.\n* **`onBeforeClose()`:** Called before the alert closes. You can prevent the closing by returning `false` from this function.\n* **`onAfterClose()`:** Called after the alert has been completely removed from the DOM.\n\n\n**Example:**\n\n```javascript\nSwal.fire({\n  title: 'My Alert',\n  onBeforeOpen: () => {\n    console.log('Alert about to open');\n  },\n  onClose: () => {\n    console.log('Alert closing');\n  }\n});\n```\n\nRemember to check the official SweetAlert2 documentation for the most complete and up-to-date API reference.  This is a simplified overview, and more nuanced aspects may exist depending on the specific version.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"sweetalert.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"SweetAlert - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}