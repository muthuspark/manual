{"title":"jScrollPane - Documentation","markdown":{"yaml":{"title":"jScrollPane - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is jScrollPane?\n\njScrollPane is a small, lightweight, and highly customizable jQuery plugin that provides enhanced scrolling capabilities for various elements on a webpage.  It creates custom scrollbars that are visually appealing and offer improved usability compared to default browser scrollbars, especially on smaller screens or with lengthy content.  It works by wrapping the target element and creating a custom scrollable area with its own scrollbars.\n\n### Why use jScrollPane?\n\n* **Improved Aesthetics:** jScrollPane provides sleek and modern-looking scrollbars that are customizable, offering a consistent user experience across different browsers.  Default browser scrollbars can look inconsistent and dated.\n\n* **Enhanced Usability:** The custom scrollbars often offer better touch support and are more intuitive to use on touch devices.  They can also be improved for accessibility.\n\n* **Customization Options:**  A wide range of options allows developers to tailor the scrollbars' appearance and functionality to perfectly match their website's design.\n\n* **Lightweight and Efficient:** jScrollPane is a small plugin with minimal overhead, making it suitable for performance-sensitive applications.\n\n\n### Browser Compatibility\n\njScrollPane strives for broad compatibility but its reliance on jQuery and CSS means some older browsers may have limited or no support.  While specific versions are not guaranteed, generally, modern browsers (including recent versions of Chrome, Firefox, Safari, Edge, and Internet Explorer 9 and above) are supported.  For best results, always test on your target browser versions.  Support may be reduced for extremely old or obscure browsers.\n\n\n### Installation\n\n1. **Include jQuery:** jScrollPane requires jQuery to function.  Include the jQuery library in your HTML file before including jScrollPane.  You can download jQuery from the official jQuery website or use a CDN.  For example:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n```\n\n2. **Include jScrollPane:** Download the jScrollPane plugin files (the CSS and JavaScript files) and include them in your HTML file after the jQuery inclusion.  You can also use a CDN if one is available.\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\" />\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n```\n\n3. **Initialize jScrollPane:**  Use the jQuery `jScrollPane` method to initialize the plugin on the target element(s). For example, to apply jScrollPane to an element with the ID \"my-scroll-pane\":\n\n```javascript\n$(document).ready(function() {\n  $('#my-scroll-pane').jScrollPane();\n});\n```\n\nRemember to replace `\"path/to/jScrollPane/\"` with the actual path to the jScrollPane files.  Refer to the jScrollPane documentation for advanced configuration options.\n\n\n## Basic Usage\n\n### Including jScrollPane\n\nAs detailed in the Introduction, you need both the jScrollPane CSS and JavaScript files.  Ensure these are included in your HTML file, ideally after the jQuery inclusion.  The order is crucial; jQuery must be loaded first.  For example:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> \n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script> \n```\n\nReplace `\"path/to/jScrollPane/\"` with the correct path to your jScrollPane files. Using a Content Delivery Network (CDN) for jQuery is recommended for better performance and reliability; adjust the URL accordingly if using a different CDN.\n\n\n### Initializing jScrollPane\n\nOnce included, you initialize jScrollPane on a target element using jQuery. The simplest way is to call the `jScrollPane()` method on a jQuery selector targeting the element.  For example, to apply jScrollPane to a `<div>` with the ID \"scrollpane\":\n\n```javascript\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n```\n\nThis code, placed within a `$(document).ready()` function, ensures the script runs after the DOM is fully loaded, preventing errors.\n\n\n### Basic Styling\n\njScrollPane provides a default style, but you can easily customize it.  The primary CSS classes to target are:\n\n* `.jspContainer`:  The container element surrounding the scrollable area.\n* `.jspPane`: The content area inside the scrollable pane.\n* `.jspTrack`: The background track for the scrollbars.\n* `.jspDrag`: The draggable scrollbar thumb.\n\nYou can modify these classes in your custom CSS file to change colors, sizes, and other visual aspects.  For example, to change the scrollbar thumb color:\n\n```css\n.jspDrag {\n    background-color: #a00; /* Example: Red */\n}\n```\n\n\n### Example: Simple Implementation\n\nThis complete example demonstrates a basic implementation of jScrollPane:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Example</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n<style>\n#scrollpane {\n    width: 300px;\n    height: 200px;\n    overflow: hidden; /* Prevent default scrollbars */\n    border: 1px solid #ccc;\n}\n#scrollpane .content {\n    padding: 10px;\n}\n\n</style>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n  <div class=\"content\">\n    <p>This is some sample text to demonstrate jScrollPane.  This text will fill the div and create a scrollbar using jScrollPane.</p>\n    <p>Add more paragraphs here to see the scrollbar in action.  It will automatically appear when needed.</p>\n    <p>More text...</p>\n    <p>Even more text...</p>\n    <!-- Add more content as needed -->\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `\"path/to/jScrollPane/\"` with the actual path.  This example creates a scrollable div with some sample text.  The `overflow: hidden` style on `#scrollpane` prevents default browser scrollbars from appearing.  The jScrollPane plugin then creates its own custom scrollbars.\n\n\n## Configuration Options\n\njScrollPane offers several configuration options to fine-tune its behavior and appearance.  These options are passed as a JavaScript object to the `jScrollPane()` method.\n\n### autoReinitialise\n\nType: `boolean`  Default: `false`\n\nAutomatically re-initializes the jScrollPane instance when the window is resized.  Useful if the content's dimensions might change dynamically based on the window size.  Setting this to `true` can improve responsiveness but might impact performance if used excessively.\n\n\n### autoUpdate\n\nType: `boolean` Default: `true`\n\nAutomatically updates the scrollbar positions when the content within the scrollable area changes. Setting this to `false` can improve performance if you manually control when the scrollbars update, for example, after a batch of changes.\n\n### contentWidth\n\nType: `string` or `number` Default: `'auto'`\n\nSpecifies the width of the content pane.  Accepts a number (in pixels) or a string ('auto' for automatic width determination). Useful for controlling the width of the content independent of the container width, particularly when you have horizontally scrollable content.\n\n### horizontalGutter\n\nType: `number` Default: `4`\n\nSets the horizontal spacing (in pixels) between the content and the vertical scrollbar (if present).\n\n### horizontalScroll\n\nType: `boolean` Default: `true`\n\nEnables or disables horizontal scrolling. Set to `false` to prevent horizontal scrolling even if the content exceeds the container width.\n\n### mouseWheelSpeed\n\nType: `number` Default: `20`\n\nControls the speed of scrolling when using the mouse wheel.  A higher value means faster scrolling.\n\n### reinitialiseOnContentChange\n\nType: `boolean` Default: `true`\n\nReinitializes jScrollPane when content changes. Similar to `autoUpdate`, but performs a full reinitialization.  This should be considered carefully as it can impact performance, especially with frequent content changes.\n\n### verticalGutter\n\nType: `number` Default: `4`\n\nSets the vertical spacing (in pixels) between the content and the horizontal scrollbar (if present).\n\n### verticalScroll\n\nType: `boolean` Default: `true`\n\nEnables or disables vertical scrolling. Set to `false` to prevent vertical scrolling even if the content exceeds the container height.\n\n\n### animateScroll\n\nType: `boolean` Default: `false`\n\nEnables smooth scrolling animations when using the scrollbars or programmatically changing the scroll position.\n\n### animateDuration\n\nType: `number` Default: `300` (milliseconds)\n\nSets the duration (in milliseconds) of the smooth scrolling animation when `animateScroll` is enabled.\n\n### animateEasing\n\nType: `string` Default: `'easeInOutQuad'`\n\nSpecifies the easing function used for the smooth scrolling animation when `animateScroll` is enabled.  Check the jQuery documentation for available easing functions. Common options include: 'linear', 'swing', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', etc.\n\n\n**Example using configuration options:**\n\n```javascript\n$('#my-scroll-pane').jScrollPane({\n    autoReinitialise: true,\n    horizontalScroll: false,\n    mouseWheelSpeed: 30,\n    animateScroll: true,\n    animateEasing: 'easeOutCubic'\n});\n```\n\nThis example enables automatic reinitialization on resize, disables horizontal scrolling, increases mouse wheel speed, and uses a custom easing function for smooth scrolling.  Remember to consult the complete jScrollPane documentation for a full list of options and their details.\n\n\n## Advanced Usage\n\n### Programmatically Scrolling\n\njScrollPane provides methods to control scrolling programmatically.  The primary methods are:\n\n* **`scrollTo(x, y)`:** Scrolls the content to the specified x and y coordinates.  `x` and `y` are numerical values representing the horizontal and vertical scroll positions, respectively.  These values are usually the pixel offsets from the top-left corner of the content pane.\n\n* **`scrollToElement(element, animate, speed)`:** Scrolls to a specific element within the scrollable area.  `element` is a jQuery object or DOM element. `animate` (boolean) determines if the scrolling should be animated, and `speed` (number, optional) defines the animation speed in milliseconds (defaults to jScrollPane's `animateDuration` setting).\n\n\n**Example:**\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp'); // Get the jScrollPane API\n\n// Scroll to coordinates (100px from the left, 200px from the top)\napi.scrollTo(100, 200);\n\n// Scroll to an element with ID 'my-element'\napi.scrollToElement($('#my-element'), true); // Animated scroll\n```\n\nRemember to get the jScrollPane API object using `data('jsp')` after initializing the plugin.\n\n\n### Customizing the Scrollbars\n\nBeyond basic styling (covered earlier), you can achieve more advanced customization by creating custom scrollbar elements.  This involves using the `maintainPosition` setting and overriding the default scrollbar structure.  This is more complex and requires a good understanding of how jScrollPane structures its scrollbars, usually involving creating custom CSS and potentially custom JavaScript to handle events.  Consult the jScrollPane documentation and examples for specific details on this approach.\n\n\n### Working with Different Content Types\n\njScrollPane generally works well with various content types, including text, images, and even complex layouts. However, ensure your content is properly structured within the scrollable area.  For dynamic content updates, use the `autoUpdate` or `reinitialiseOnContentChange` options (carefully) or manually call `reinitialise()` to ensure the scrollbars adjust correctly.  If you're using frameworks like React, Angular, or Vue, you will likely need to reinitialize jScrollPane after DOM updates in these frameworks.\n\n\n### Handling Events\n\njScrollPane triggers several events that you can listen for and use to respond to scroll actions:\n\n* **`jsp-scroll-y`:** Triggered when vertical scrolling occurs.\n* **`jsp-scroll-x`:** Triggered when horizontal scrolling occurs.\n* **`jsp-initialized`:** Triggered after jScrollPane initialization.\n\nYou can bind event handlers to these using jQuery's `on()` method:\n\n```javascript\n$('#my-scroll-pane').on('jsp-scroll-y', function(event, position){\n    console.log('Vertical scroll position:', position);\n});\n```\n\nRefer to the jScrollPane documentation for a complete list of events.\n\n\n### Accessibility Considerations\n\nFor optimal accessibility, consider the following:\n\n* **Keyboard Navigation:**  Ensure users can navigate the content using keyboard controls (arrow keys).  jScrollPane generally supports keyboard navigation, but testing is essential.\n* **Screen Readers:**  Proper semantic HTML structure and ARIA attributes (if needed) can improve screen reader compatibility.\n* **Sufficient Contrast:** Ensure enough contrast between scrollbar elements and the background.\n* **Focus Indicators:** Make sure scrollbar elements receive clear focus indicators when selected using the keyboard.\n\nThorough accessibility testing with assistive technologies is crucial to ensure your implementation is inclusive.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Scrollbars not appearing:** Double-check that you've included both the jQuery library and the jScrollPane CSS and JavaScript files correctly, in the right order, and that the paths are accurate. Ensure the target element has content that actually requires scrolling (i.e., its content exceeds its dimensions).  Make sure there are no JavaScript errors preventing the plugin from initializing correctly. Check your browser's developer console for error messages.\n\n* **Scrollbars are jerky or unresponsive:** This might be due to performance issues, especially with a very large amount of content.  Consider optimizing your content (e.g., using efficient images) or adjusting jScrollPane options like `autoUpdate` or `reinitialiseOnContentChange` to reduce the frequency of updates.\n\n* **Styling issues:** Make sure your custom CSS is correctly targeting the relevant jScrollPane classes (`.jspContainer`, `.jspPane`, `.jspTrack`, `.jspDrag`, etc.) and that it doesn't conflict with other styles on your page.  Use your browser's developer tools to inspect the elements and their styles to identify conflicts.\n\n* **Scrolling not working on touch devices:**  Ensure you're using a recent version of jScrollPane that has good touch support.  Also, verify that your touch events aren't being interfered with by other JavaScript libraries or code on your page.\n\n* **Unexpected behavior after DOM manipulation:** If you're dynamically adding or removing content within the scrollable area, you'll likely need to call the `reinitialise()` method on the jScrollPane API to update the scrollbars.  Failing to do so will result in incorrect scrollbar positions or functionality.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the jScrollPane elements, check for JavaScript errors in the console, and examine the CSS applied to the elements.\n\n* **Simplify Your Code:** If you're encountering unexpected behavior, try simplifying your code to isolate the problem.  Create a minimal example that reproduces the issue. This helps you narrow down the source of the problem.\n\n* **Check for Conflicts:** Ensure no other JavaScript libraries or CSS styles are conflicting with jScrollPane.  Try disabling other plugins or scripts temporarily to see if the issue is resolved.\n\n* **Console Logging:** Add `console.log()` statements to your JavaScript code to track variable values and the execution flow.  This can help you understand what's happening during the plugin's initialization and operation.\n\n* **Read the Source Code:** If you're really stuck, you can examine the jScrollPane source code to better understand how it works internally.  This can be helpful in diagnosing more complex problems.\n\n\n### Known Limitations\n\n* **Complex Layouts:** jScrollPane might have difficulty handling extremely complex or nested layouts.  For exceptionally intricate structures, consider alternative scrolling solutions.\n\n* **Very Large Datasets:**  Scrolling extremely large datasets might result in performance issues.  Explore techniques like virtualization or pagination to improve performance in such cases.\n\n* **Browser-Specific Quirks:** While jScrollPane aims for broad compatibility, some browser-specific quirks might occasionally arise.  Testing across different browsers is crucial.  Refer to the jScrollPane project's issue tracker for any known browser compatibility problems.\n\n* **IE Compatibility (Older Versions):** While jScrollPane has made efforts for broad compatibility, support for very old versions of Internet Explorer might be limited.  The latest releases might not support older versions of this browser.\n\n\n## API Reference\n\nThe jScrollPane plugin exposes a number of methods via its API, allowing for programmatic control over its behavior.  These methods are accessible through the jScrollPane API object, which is obtained using `$('#my-scroll-pane').data('jsp');` after initializing jScrollPane on the element with the ID `my-scroll-pane`.\n\n\n### destroy()\n\nRemoves jScrollPane from the target element, restoring it to its original state.  This reverses the effects of the plugin.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.destroy();\n```\n\n\n### getContentPane()\n\nReturns a jQuery object representing the content pane (the `.jspPane` element) within the jScrollPane container.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\nvar contentPane = api.getContentPane();\n// Now you can manipulate the contentPane using jQuery methods\n```\n\n\n### getContentHeight()\n\nReturns the height (in pixels) of the content pane.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\nvar contentHeight = api.getContentHeight();\n```\n\n\n### getContentWidth()\n\nReturns the width (in pixels) of the content pane.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\nvar contentWidth = api.getContentWidth();\n```\n\n\n### scrollTo(x, y)\n\nScrolls the content pane to the specified coordinates. `x` and `y` represent the horizontal and vertical pixel offsets, respectively, from the top-left corner of the content pane.  You can use negative values to scroll \"up\" and \"left\".\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.scrollTo(100, 200); // Scroll to x=100, y=200\n```\n\n\n### scrollToElement(element, animate, speed)\n\nScrolls the content pane to bring the specified element into view.  `element` is a jQuery object or DOM element within the content pane.  `animate` (boolean, optional, defaults to `false`) determines if the scrolling should be animated; `speed` (number, optional) specifies the animation speed in milliseconds (defaults to jScrollPane's `animateDuration` setting).\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.scrollToElement($('#my-target-element'), true, 500); // Animated scroll to the element\n```\n\n\n### scrollToX(x, animate, speed)\n\nScrolls the content pane horizontally to the specified x-coordinate.  `animate` and `speed` have the same meaning as in `scrollToElement`.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.scrollToX(300, true); // Animated horizontal scroll to x=300\n```\n\n\n### scrollToY(y, animate, speed)\n\nScrolls the content pane vertically to the specified y-coordinate. `animate` and `speed` have the same meaning as in `scrollToElement`.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.scrollToY(150, true); // Animated vertical scroll to y=150\n```\n\n\n### reinitialise()\n\nReinitializes jScrollPane.  Use this after dynamically altering the content or dimensions of the scrollable area to refresh the scrollbars.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.reinitialise();\n```\n\n\n### update()\n\nUpdates the scrollbar positions.  Use this if you've made changes to the content but don't need a full reinitialization (generally faster than `reinitialise()`).\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.update();\n```\n\nRemember that all these methods require obtaining the jScrollPane API object using `.data('jsp')` on the jQuery-wrapped element that has jScrollPane initialized.  Incorrect usage will result in errors.\n\n\n## Examples\n\nThese examples assume you have already included jQuery and the jScrollPane CSS and JavaScript files as described in the \"Basic Usage\" section.  Replace `\"path/to/jScrollPane/\"` with the actual path to your files.\n\n\n### Example 1: Vertical Scrolling\n\nThis example demonstrates basic vertical scrolling.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Vertical Scroll</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n<style>\n#scrollpane {\n    width: 300px;\n    height: 200px;\n    overflow: hidden;\n    border: 1px solid #ccc;\n}\n#scrollpane .content {\n    padding: 10px;\n}\n</style>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n  <div class=\"content\">\n    <p>This is some sample text for vertical scrolling.  Add more paragraphs to make the content scrollable.</p>\n    <p>More text...</p>\n    <p>Even more text...</p>\n    <!-- Add more content as needed -->\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n</script>\n\n</body>\n</html>\n```\n\n\n### Example 2: Horizontal Scrolling\n\nThis example demonstrates horizontal scrolling.  Note the use of `white-space: nowrap;` to prevent line breaks.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Horizontal Scroll</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n<style>\n#scrollpane {\n    width: 300px;\n    height: 100px;\n    overflow: hidden;\n    border: 1px solid #ccc;\n}\n#scrollpane .content {\n    white-space: nowrap; /* Prevent line breaks */\n    padding: 10px;\n}\n</style>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n  <div class=\"content\">\n    <span>This is some sample text for horizontal scrolling.  Add more text to make the content scrollable.</span>\n    <span>More text...</span>\n    <span>Even more text...</span>\n    <!-- Add more content as needed -->\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n</script>\n\n</body>\n</html>\n```\n\n\n### Example 3: Custom Scrollbar Styling\n\nThis example shows how to customize the scrollbar appearance.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Custom Styling</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n<style>\n#scrollpane {\n    width: 300px;\n    height: 200px;\n    overflow: hidden;\n    border: 1px solid #ccc;\n}\n.jspDrag {\n    background-color: #007bff; /* Blue scrollbar thumb */\n}\n.jspTrack {\n    background-color: #f0f0f0; /* Light gray track */\n}\n</style>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n  <div class=\"content\">\n    <!-- ...content... -->\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n</script>\n\n</body>\n</html>\n```\n\n\n### Example 4: Programmatic Scrolling\n\nThis example demonstrates programmatic scrolling using the API.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Programmatic Scrolling</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n    <div class=\"content\">\n        <p>Lots of content here...</p>\n        <button id=\"scroll-button\">Scroll to Bottom</button>\n    </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n    var api = $('#scrollpane').data('jsp');\n    $('#scroll-button').click(function() {\n        api.scrollToY(api.getContentHeight(), true);\n    });\n});\n</script>\n\n</body>\n</html>\n```\n\n\n### Example 5: Handling Events\n\nThis example shows how to handle jScrollPane events.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Event Handling</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n    <div class=\"content\">\n        <!-- ...content... -->\n    </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n    $('#scrollpane').on('jsp-scroll-y', function(event, position) {\n        console.log('Vertical scroll position:', position.y);\n    });\n});\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `\"path/to/jScrollPane/\"` with the correct path to your jScrollPane files and add sufficient content to the `<div class=\"content\">` to trigger scrolling.  These are basic examples; adjust them to fit your specific needs and refer to the full documentation for more advanced configurations and options.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is jScrollPane?\n\njScrollPane is a small, lightweight, and highly customizable jQuery plugin that provides enhanced scrolling capabilities for various elements on a webpage.  It creates custom scrollbars that are visually appealing and offer improved usability compared to default browser scrollbars, especially on smaller screens or with lengthy content.  It works by wrapping the target element and creating a custom scrollable area with its own scrollbars.\n\n### Why use jScrollPane?\n\n* **Improved Aesthetics:** jScrollPane provides sleek and modern-looking scrollbars that are customizable, offering a consistent user experience across different browsers.  Default browser scrollbars can look inconsistent and dated.\n\n* **Enhanced Usability:** The custom scrollbars often offer better touch support and are more intuitive to use on touch devices.  They can also be improved for accessibility.\n\n* **Customization Options:**  A wide range of options allows developers to tailor the scrollbars' appearance and functionality to perfectly match their website's design.\n\n* **Lightweight and Efficient:** jScrollPane is a small plugin with minimal overhead, making it suitable for performance-sensitive applications.\n\n\n### Browser Compatibility\n\njScrollPane strives for broad compatibility but its reliance on jQuery and CSS means some older browsers may have limited or no support.  While specific versions are not guaranteed, generally, modern browsers (including recent versions of Chrome, Firefox, Safari, Edge, and Internet Explorer 9 and above) are supported.  For best results, always test on your target browser versions.  Support may be reduced for extremely old or obscure browsers.\n\n\n### Installation\n\n1. **Include jQuery:** jScrollPane requires jQuery to function.  Include the jQuery library in your HTML file before including jScrollPane.  You can download jQuery from the official jQuery website or use a CDN.  For example:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n```\n\n2. **Include jScrollPane:** Download the jScrollPane plugin files (the CSS and JavaScript files) and include them in your HTML file after the jQuery inclusion.  You can also use a CDN if one is available.\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\" />\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n```\n\n3. **Initialize jScrollPane:**  Use the jQuery `jScrollPane` method to initialize the plugin on the target element(s). For example, to apply jScrollPane to an element with the ID \"my-scroll-pane\":\n\n```javascript\n$(document).ready(function() {\n  $('#my-scroll-pane').jScrollPane();\n});\n```\n\nRemember to replace `\"path/to/jScrollPane/\"` with the actual path to the jScrollPane files.  Refer to the jScrollPane documentation for advanced configuration options.\n\n\n## Basic Usage\n\n### Including jScrollPane\n\nAs detailed in the Introduction, you need both the jScrollPane CSS and JavaScript files.  Ensure these are included in your HTML file, ideally after the jQuery inclusion.  The order is crucial; jQuery must be loaded first.  For example:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> \n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script> \n```\n\nReplace `\"path/to/jScrollPane/\"` with the correct path to your jScrollPane files. Using a Content Delivery Network (CDN) for jQuery is recommended for better performance and reliability; adjust the URL accordingly if using a different CDN.\n\n\n### Initializing jScrollPane\n\nOnce included, you initialize jScrollPane on a target element using jQuery. The simplest way is to call the `jScrollPane()` method on a jQuery selector targeting the element.  For example, to apply jScrollPane to a `<div>` with the ID \"scrollpane\":\n\n```javascript\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n```\n\nThis code, placed within a `$(document).ready()` function, ensures the script runs after the DOM is fully loaded, preventing errors.\n\n\n### Basic Styling\n\njScrollPane provides a default style, but you can easily customize it.  The primary CSS classes to target are:\n\n* `.jspContainer`:  The container element surrounding the scrollable area.\n* `.jspPane`: The content area inside the scrollable pane.\n* `.jspTrack`: The background track for the scrollbars.\n* `.jspDrag`: The draggable scrollbar thumb.\n\nYou can modify these classes in your custom CSS file to change colors, sizes, and other visual aspects.  For example, to change the scrollbar thumb color:\n\n```css\n.jspDrag {\n    background-color: #a00; /* Example: Red */\n}\n```\n\n\n### Example: Simple Implementation\n\nThis complete example demonstrates a basic implementation of jScrollPane:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Example</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n<style>\n#scrollpane {\n    width: 300px;\n    height: 200px;\n    overflow: hidden; /* Prevent default scrollbars */\n    border: 1px solid #ccc;\n}\n#scrollpane .content {\n    padding: 10px;\n}\n\n</style>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n  <div class=\"content\">\n    <p>This is some sample text to demonstrate jScrollPane.  This text will fill the div and create a scrollbar using jScrollPane.</p>\n    <p>Add more paragraphs here to see the scrollbar in action.  It will automatically appear when needed.</p>\n    <p>More text...</p>\n    <p>Even more text...</p>\n    <!-- Add more content as needed -->\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `\"path/to/jScrollPane/\"` with the actual path.  This example creates a scrollable div with some sample text.  The `overflow: hidden` style on `#scrollpane` prevents default browser scrollbars from appearing.  The jScrollPane plugin then creates its own custom scrollbars.\n\n\n## Configuration Options\n\njScrollPane offers several configuration options to fine-tune its behavior and appearance.  These options are passed as a JavaScript object to the `jScrollPane()` method.\n\n### autoReinitialise\n\nType: `boolean`  Default: `false`\n\nAutomatically re-initializes the jScrollPane instance when the window is resized.  Useful if the content's dimensions might change dynamically based on the window size.  Setting this to `true` can improve responsiveness but might impact performance if used excessively.\n\n\n### autoUpdate\n\nType: `boolean` Default: `true`\n\nAutomatically updates the scrollbar positions when the content within the scrollable area changes. Setting this to `false` can improve performance if you manually control when the scrollbars update, for example, after a batch of changes.\n\n### contentWidth\n\nType: `string` or `number` Default: `'auto'`\n\nSpecifies the width of the content pane.  Accepts a number (in pixels) or a string ('auto' for automatic width determination). Useful for controlling the width of the content independent of the container width, particularly when you have horizontally scrollable content.\n\n### horizontalGutter\n\nType: `number` Default: `4`\n\nSets the horizontal spacing (in pixels) between the content and the vertical scrollbar (if present).\n\n### horizontalScroll\n\nType: `boolean` Default: `true`\n\nEnables or disables horizontal scrolling. Set to `false` to prevent horizontal scrolling even if the content exceeds the container width.\n\n### mouseWheelSpeed\n\nType: `number` Default: `20`\n\nControls the speed of scrolling when using the mouse wheel.  A higher value means faster scrolling.\n\n### reinitialiseOnContentChange\n\nType: `boolean` Default: `true`\n\nReinitializes jScrollPane when content changes. Similar to `autoUpdate`, but performs a full reinitialization.  This should be considered carefully as it can impact performance, especially with frequent content changes.\n\n### verticalGutter\n\nType: `number` Default: `4`\n\nSets the vertical spacing (in pixels) between the content and the horizontal scrollbar (if present).\n\n### verticalScroll\n\nType: `boolean` Default: `true`\n\nEnables or disables vertical scrolling. Set to `false` to prevent vertical scrolling even if the content exceeds the container height.\n\n\n### animateScroll\n\nType: `boolean` Default: `false`\n\nEnables smooth scrolling animations when using the scrollbars or programmatically changing the scroll position.\n\n### animateDuration\n\nType: `number` Default: `300` (milliseconds)\n\nSets the duration (in milliseconds) of the smooth scrolling animation when `animateScroll` is enabled.\n\n### animateEasing\n\nType: `string` Default: `'easeInOutQuad'`\n\nSpecifies the easing function used for the smooth scrolling animation when `animateScroll` is enabled.  Check the jQuery documentation for available easing functions. Common options include: 'linear', 'swing', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', etc.\n\n\n**Example using configuration options:**\n\n```javascript\n$('#my-scroll-pane').jScrollPane({\n    autoReinitialise: true,\n    horizontalScroll: false,\n    mouseWheelSpeed: 30,\n    animateScroll: true,\n    animateEasing: 'easeOutCubic'\n});\n```\n\nThis example enables automatic reinitialization on resize, disables horizontal scrolling, increases mouse wheel speed, and uses a custom easing function for smooth scrolling.  Remember to consult the complete jScrollPane documentation for a full list of options and their details.\n\n\n## Advanced Usage\n\n### Programmatically Scrolling\n\njScrollPane provides methods to control scrolling programmatically.  The primary methods are:\n\n* **`scrollTo(x, y)`:** Scrolls the content to the specified x and y coordinates.  `x` and `y` are numerical values representing the horizontal and vertical scroll positions, respectively.  These values are usually the pixel offsets from the top-left corner of the content pane.\n\n* **`scrollToElement(element, animate, speed)`:** Scrolls to a specific element within the scrollable area.  `element` is a jQuery object or DOM element. `animate` (boolean) determines if the scrolling should be animated, and `speed` (number, optional) defines the animation speed in milliseconds (defaults to jScrollPane's `animateDuration` setting).\n\n\n**Example:**\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp'); // Get the jScrollPane API\n\n// Scroll to coordinates (100px from the left, 200px from the top)\napi.scrollTo(100, 200);\n\n// Scroll to an element with ID 'my-element'\napi.scrollToElement($('#my-element'), true); // Animated scroll\n```\n\nRemember to get the jScrollPane API object using `data('jsp')` after initializing the plugin.\n\n\n### Customizing the Scrollbars\n\nBeyond basic styling (covered earlier), you can achieve more advanced customization by creating custom scrollbar elements.  This involves using the `maintainPosition` setting and overriding the default scrollbar structure.  This is more complex and requires a good understanding of how jScrollPane structures its scrollbars, usually involving creating custom CSS and potentially custom JavaScript to handle events.  Consult the jScrollPane documentation and examples for specific details on this approach.\n\n\n### Working with Different Content Types\n\njScrollPane generally works well with various content types, including text, images, and even complex layouts. However, ensure your content is properly structured within the scrollable area.  For dynamic content updates, use the `autoUpdate` or `reinitialiseOnContentChange` options (carefully) or manually call `reinitialise()` to ensure the scrollbars adjust correctly.  If you're using frameworks like React, Angular, or Vue, you will likely need to reinitialize jScrollPane after DOM updates in these frameworks.\n\n\n### Handling Events\n\njScrollPane triggers several events that you can listen for and use to respond to scroll actions:\n\n* **`jsp-scroll-y`:** Triggered when vertical scrolling occurs.\n* **`jsp-scroll-x`:** Triggered when horizontal scrolling occurs.\n* **`jsp-initialized`:** Triggered after jScrollPane initialization.\n\nYou can bind event handlers to these using jQuery's `on()` method:\n\n```javascript\n$('#my-scroll-pane').on('jsp-scroll-y', function(event, position){\n    console.log('Vertical scroll position:', position);\n});\n```\n\nRefer to the jScrollPane documentation for a complete list of events.\n\n\n### Accessibility Considerations\n\nFor optimal accessibility, consider the following:\n\n* **Keyboard Navigation:**  Ensure users can navigate the content using keyboard controls (arrow keys).  jScrollPane generally supports keyboard navigation, but testing is essential.\n* **Screen Readers:**  Proper semantic HTML structure and ARIA attributes (if needed) can improve screen reader compatibility.\n* **Sufficient Contrast:** Ensure enough contrast between scrollbar elements and the background.\n* **Focus Indicators:** Make sure scrollbar elements receive clear focus indicators when selected using the keyboard.\n\nThorough accessibility testing with assistive technologies is crucial to ensure your implementation is inclusive.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Scrollbars not appearing:** Double-check that you've included both the jQuery library and the jScrollPane CSS and JavaScript files correctly, in the right order, and that the paths are accurate. Ensure the target element has content that actually requires scrolling (i.e., its content exceeds its dimensions).  Make sure there are no JavaScript errors preventing the plugin from initializing correctly. Check your browser's developer console for error messages.\n\n* **Scrollbars are jerky or unresponsive:** This might be due to performance issues, especially with a very large amount of content.  Consider optimizing your content (e.g., using efficient images) or adjusting jScrollPane options like `autoUpdate` or `reinitialiseOnContentChange` to reduce the frequency of updates.\n\n* **Styling issues:** Make sure your custom CSS is correctly targeting the relevant jScrollPane classes (`.jspContainer`, `.jspPane`, `.jspTrack`, `.jspDrag`, etc.) and that it doesn't conflict with other styles on your page.  Use your browser's developer tools to inspect the elements and their styles to identify conflicts.\n\n* **Scrolling not working on touch devices:**  Ensure you're using a recent version of jScrollPane that has good touch support.  Also, verify that your touch events aren't being interfered with by other JavaScript libraries or code on your page.\n\n* **Unexpected behavior after DOM manipulation:** If you're dynamically adding or removing content within the scrollable area, you'll likely need to call the `reinitialise()` method on the jScrollPane API to update the scrollbars.  Failing to do so will result in incorrect scrollbar positions or functionality.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the jScrollPane elements, check for JavaScript errors in the console, and examine the CSS applied to the elements.\n\n* **Simplify Your Code:** If you're encountering unexpected behavior, try simplifying your code to isolate the problem.  Create a minimal example that reproduces the issue. This helps you narrow down the source of the problem.\n\n* **Check for Conflicts:** Ensure no other JavaScript libraries or CSS styles are conflicting with jScrollPane.  Try disabling other plugins or scripts temporarily to see if the issue is resolved.\n\n* **Console Logging:** Add `console.log()` statements to your JavaScript code to track variable values and the execution flow.  This can help you understand what's happening during the plugin's initialization and operation.\n\n* **Read the Source Code:** If you're really stuck, you can examine the jScrollPane source code to better understand how it works internally.  This can be helpful in diagnosing more complex problems.\n\n\n### Known Limitations\n\n* **Complex Layouts:** jScrollPane might have difficulty handling extremely complex or nested layouts.  For exceptionally intricate structures, consider alternative scrolling solutions.\n\n* **Very Large Datasets:**  Scrolling extremely large datasets might result in performance issues.  Explore techniques like virtualization or pagination to improve performance in such cases.\n\n* **Browser-Specific Quirks:** While jScrollPane aims for broad compatibility, some browser-specific quirks might occasionally arise.  Testing across different browsers is crucial.  Refer to the jScrollPane project's issue tracker for any known browser compatibility problems.\n\n* **IE Compatibility (Older Versions):** While jScrollPane has made efforts for broad compatibility, support for very old versions of Internet Explorer might be limited.  The latest releases might not support older versions of this browser.\n\n\n## API Reference\n\nThe jScrollPane plugin exposes a number of methods via its API, allowing for programmatic control over its behavior.  These methods are accessible through the jScrollPane API object, which is obtained using `$('#my-scroll-pane').data('jsp');` after initializing jScrollPane on the element with the ID `my-scroll-pane`.\n\n\n### destroy()\n\nRemoves jScrollPane from the target element, restoring it to its original state.  This reverses the effects of the plugin.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.destroy();\n```\n\n\n### getContentPane()\n\nReturns a jQuery object representing the content pane (the `.jspPane` element) within the jScrollPane container.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\nvar contentPane = api.getContentPane();\n// Now you can manipulate the contentPane using jQuery methods\n```\n\n\n### getContentHeight()\n\nReturns the height (in pixels) of the content pane.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\nvar contentHeight = api.getContentHeight();\n```\n\n\n### getContentWidth()\n\nReturns the width (in pixels) of the content pane.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\nvar contentWidth = api.getContentWidth();\n```\n\n\n### scrollTo(x, y)\n\nScrolls the content pane to the specified coordinates. `x` and `y` represent the horizontal and vertical pixel offsets, respectively, from the top-left corner of the content pane.  You can use negative values to scroll \"up\" and \"left\".\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.scrollTo(100, 200); // Scroll to x=100, y=200\n```\n\n\n### scrollToElement(element, animate, speed)\n\nScrolls the content pane to bring the specified element into view.  `element` is a jQuery object or DOM element within the content pane.  `animate` (boolean, optional, defaults to `false`) determines if the scrolling should be animated; `speed` (number, optional) specifies the animation speed in milliseconds (defaults to jScrollPane's `animateDuration` setting).\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.scrollToElement($('#my-target-element'), true, 500); // Animated scroll to the element\n```\n\n\n### scrollToX(x, animate, speed)\n\nScrolls the content pane horizontally to the specified x-coordinate.  `animate` and `speed` have the same meaning as in `scrollToElement`.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.scrollToX(300, true); // Animated horizontal scroll to x=300\n```\n\n\n### scrollToY(y, animate, speed)\n\nScrolls the content pane vertically to the specified y-coordinate. `animate` and `speed` have the same meaning as in `scrollToElement`.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.scrollToY(150, true); // Animated vertical scroll to y=150\n```\n\n\n### reinitialise()\n\nReinitializes jScrollPane.  Use this after dynamically altering the content or dimensions of the scrollable area to refresh the scrollbars.\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.reinitialise();\n```\n\n\n### update()\n\nUpdates the scrollbar positions.  Use this if you've made changes to the content but don't need a full reinitialization (generally faster than `reinitialise()`).\n\n```javascript\nvar api = $('#my-scroll-pane').data('jsp');\napi.update();\n```\n\nRemember that all these methods require obtaining the jScrollPane API object using `.data('jsp')` on the jQuery-wrapped element that has jScrollPane initialized.  Incorrect usage will result in errors.\n\n\n## Examples\n\nThese examples assume you have already included jQuery and the jScrollPane CSS and JavaScript files as described in the \"Basic Usage\" section.  Replace `\"path/to/jScrollPane/\"` with the actual path to your files.\n\n\n### Example 1: Vertical Scrolling\n\nThis example demonstrates basic vertical scrolling.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Vertical Scroll</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n<style>\n#scrollpane {\n    width: 300px;\n    height: 200px;\n    overflow: hidden;\n    border: 1px solid #ccc;\n}\n#scrollpane .content {\n    padding: 10px;\n}\n</style>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n  <div class=\"content\">\n    <p>This is some sample text for vertical scrolling.  Add more paragraphs to make the content scrollable.</p>\n    <p>More text...</p>\n    <p>Even more text...</p>\n    <!-- Add more content as needed -->\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n</script>\n\n</body>\n</html>\n```\n\n\n### Example 2: Horizontal Scrolling\n\nThis example demonstrates horizontal scrolling.  Note the use of `white-space: nowrap;` to prevent line breaks.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Horizontal Scroll</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n<style>\n#scrollpane {\n    width: 300px;\n    height: 100px;\n    overflow: hidden;\n    border: 1px solid #ccc;\n}\n#scrollpane .content {\n    white-space: nowrap; /* Prevent line breaks */\n    padding: 10px;\n}\n</style>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n  <div class=\"content\">\n    <span>This is some sample text for horizontal scrolling.  Add more text to make the content scrollable.</span>\n    <span>More text...</span>\n    <span>Even more text...</span>\n    <!-- Add more content as needed -->\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n</script>\n\n</body>\n</html>\n```\n\n\n### Example 3: Custom Scrollbar Styling\n\nThis example shows how to customize the scrollbar appearance.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Custom Styling</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n<style>\n#scrollpane {\n    width: 300px;\n    height: 200px;\n    overflow: hidden;\n    border: 1px solid #ccc;\n}\n.jspDrag {\n    background-color: #007bff; /* Blue scrollbar thumb */\n}\n.jspTrack {\n    background-color: #f0f0f0; /* Light gray track */\n}\n</style>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n  <div class=\"content\">\n    <!-- ...content... -->\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n});\n</script>\n\n</body>\n</html>\n```\n\n\n### Example 4: Programmatic Scrolling\n\nThis example demonstrates programmatic scrolling using the API.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Programmatic Scrolling</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n    <div class=\"content\">\n        <p>Lots of content here...</p>\n        <button id=\"scroll-button\">Scroll to Bottom</button>\n    </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n    var api = $('#scrollpane').data('jsp');\n    $('#scroll-button').click(function() {\n        api.scrollToY(api.getContentHeight(), true);\n    });\n});\n</script>\n\n</body>\n</html>\n```\n\n\n### Example 5: Handling Events\n\nThis example shows how to handle jScrollPane events.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>jScrollPane Event Handling</title>\n<link rel=\"stylesheet\" href=\"path/to/jScrollPane/jScrollPane.css\">\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"path/to/jScrollPane/jScrollPane.js\"></script>\n</head>\n<body>\n\n<div id=\"scrollpane\">\n    <div class=\"content\">\n        <!-- ...content... -->\n    </div>\n</div>\n\n<script>\n$(document).ready(function() {\n    $('#scrollpane').jScrollPane();\n    $('#scrollpane').on('jsp-scroll-y', function(event, position) {\n        console.log('Vertical scroll position:', position.y);\n    });\n});\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `\"path/to/jScrollPane/\"` with the correct path to your jScrollPane files and add sufficient content to the `<div class=\"content\">` to trigger scrolling.  These are basic examples; adjust them to fit your specific needs and refer to the full documentation for more advanced configurations and options.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"jscrollpane.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"jScrollPane - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}