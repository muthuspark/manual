---
title: "pillow - Documentation"
categories: [ "Python Modules" ]
---


### What is Pillow?

Pillow is a powerful and user-friendly Python imaging library.  It provides a comprehensive set of tools for manipulating images, including format support for a wide variety of image types (JPEG, PNG, GIF, TIFF, and many more), image processing capabilities (resizing, filtering, color adjustments), drawing functionality, and more. Pillow is a fork of the older PIL (Python Imaging Library) and offers significant improvements in terms of features, stability, and maintainability.  It's a crucial library for any Python project involving image manipulation, from simple tasks like resizing images to complex operations like image analysis and computer vision.


### Installation

The easiest way to install Pillow is using pip, the Python package installer:

```bash
pip install Pillow
```

This command will download and install the latest stable version of Pillow.  If you encounter issues, ensure you have a compatible version of Python and that pip is properly configured.  For specific versions or alternative installation methods (e.g., using conda), consult the official Pillow documentation.


### Basic Concepts

Pillow's core functionality revolves around the `Image` object.  This object represents an image loaded into memory.  You can create `Image` objects from files, from scratch (e.g., creating a blank image), or by copying existing images.  Most operations are performed on these `Image` objects, allowing you to manipulate their pixels, attributes, and metadata.  Key concepts include:

* **Image Modes:**  Pillow uses "modes" to describe the type of data stored in an image. Common modes include:
    * `RGB`: Red, Green, Blue (24-bit color)
    * `RGBA`: Red, Green, Blue, Alpha (transparency, 32-bit color)
    * `L`: Luminance (grayscale)
    * `1`: 1-bit pixels (black and white)
* **Pixels:**  Images are composed of pixels, which are the smallest units of color information.  Pillow provides methods to access and modify individual pixels.
* **Image Processing:** Pillow offers functions for various image processing tasks like resizing, rotations, filtering, color transformations, and more.


### Setting up your environment

Setting up your development environment for using Pillow involves several steps:

1. **Python Installation:** Make sure you have Python installed on your system.  Pillow supports multiple Python versions.  Check your system's Python installation or install a specific Python version from [python.org](https://www.python.org/).

2. **Pip Installation:** Verify that pip is installed.  Most Python distributions include pip; otherwise, install it following instructions on the official pip website.

3. **Virtual Environments (Recommended):**  It's strongly recommended to use virtual environments to isolate project dependencies.  Create a virtual environment using `venv` (Python 3.3+) or a similar tool:

   ```bash
   python3 -m venv .venv  # Creates a virtual environment named '.venv'
   source .venv/bin/activate  # Activates the virtual environment (Linux/macOS)
   .venv\Scripts\activate  # Activates the virtual environment (Windows)
   ```

4. **Pillow Installation:**  After activating your virtual environment, install Pillow as described in the "Installation" section above.

5. **IDE (Optional):** Choose a suitable Integrated Development Environment (IDE) like PyCharm, VS Code, or Thonny.  These IDEs provide features like code completion, debugging, and integrated terminal access.

With these steps complete, you're ready to start using Pillow in your Python projects. Remember to consult Pillow's comprehensive documentation for detailed information on specific functions and methods.


## Core Concepts and Functionality

### Image objects

The fundamental element in Pillow is the `Image` object.  This object encapsulates all the data and metadata associated with an image, including pixel data, size, mode (color format), and other attributes.  You create `Image` objects by loading images from files or by creating new ones.  Almost all operations in Pillow involve interacting with `Image` objects.  Key methods include:

* **`Image.open(filename)`:** Opens an image file.  Pillow automatically detects the file format.
* **`Image.new(mode, size, color)`:** Creates a new image with the specified mode, size, and color.
* **`image.save(filename)`:** Saves the `Image` object to a file.  The file format is inferred from the filename extension.
* **`image.show()`:** Displays the image (requires a suitable image viewer).
* **`image.copy()`:** Creates a copy of the `Image` object. This is important for avoiding in-place modifications.
* **`image.close()`:** Closes the image file.  Necessary if you're working with very large images to free up system resources.  (Note:  `Image` objects are automatically closed when garbage collected, but it's good practice to explicitly close them when finished).


### Pixel access

Pillow provides several ways to access and manipulate individual pixels in an image.  The simplest approach is using the `getpixel()` and `putpixel()` methods:

```python
from PIL import Image

img = Image.open("myimage.png")
pixel_value = img.getpixel((x, y))  # Get the pixel value at coordinates (x, y)
img.putpixel((x, y), (r, g, b))  # Set the pixel value at (x, y) to (r, g, b)
```

For more efficient pixel access, especially for larger images, consider using the `load()` method to get a pixel access object:

```python
img = Image.open("myimage.png")
pixels = img.load()
pixels[x, y] = (r, g, b)  # More efficient way to set pixel values
```

Remember that pixel coordinates are (x, y) tuples, where (0, 0) is the top-left corner.


### Image modes

Image modes define the type and number of channels in an image.  Common modes include:

* **`'L'` (Luminance):** 8-bit grayscale image.
* **`'RGB'`:** 24-bit true color image (Red, Green, Blue).
* **`'RGBA'`:** 32-bit true color image with alpha transparency.
* **`'CMYK'`:** Cyan, Magenta, Yellow, Key (Black).
* **`'1'`:** 1-bit image (black and white).
* **`'P'` (Palette):** 8-bit image with a color palette.

The image mode influences how you work with pixel data and which operations are available. You can change the image mode using the `convert()` method:

```python
img = Image.open("myimage.jpg")
gray_img = img.convert('L') # Convert to grayscale
```


### Color palettes

Palette-based images (`'P'` mode) use a color lookup table to define the colors. This is efficient for images with a limited number of colors.  You can create and manipulate color palettes using the `ImagePalette` class.  However, most image manipulation is better done in RGB or RGBA mode for greater flexibility.


### Image processing workflow

A typical image processing workflow in Pillow might involve these steps:

1. **Image Loading:** Open the image using `Image.open()`.
2. **Image Preprocessing:**  Perform operations such as resizing, cropping, or color adjustments.  Pillow provides methods like `resize()`, `crop()`, and color transformation functions for this purpose.
3. **Core Image Processing:** Apply filters, perform edge detection, or other more complex image processing tasks. This often involves using Pillow's image processing filters or working directly with pixel data.
4. **Post-Processing:**  Optional steps such as sharpening, noise reduction, or further adjustments.
5. **Image Saving:** Save the modified image using `image.save()`.


A simple example showcasing the workflow:

```python
from PIL import Image

img = Image.open("myimage.jpg")
img = img.resize((300, 200))  # Resize the image
img = img.rotate(45) # Rotate the image
img.save("modified_image.jpg")
```

This illustrates a basic workflow.  More sophisticated applications might involve many more steps and utilize more advanced Pillow features and possibly external libraries for more complex processing needs.


## Image Manipulation

### Image resizing and scaling

Pillow provides several ways to resize and scale images.  The `resize()` method is the most common, allowing you to specify the new dimensions.  You can choose from different resampling filters to control the quality of the resized image:

```python
from PIL import Image

img = Image.open("myimage.jpg")
resized_img = img.resize((300, 200), Image.Resampling.LANCZOS) # LANCZOS is a high-quality filter
resized_img.save("resized_image.jpg")
```

Other resampling filters include `Image.Resampling.NEAREST`, `Image.Resampling.BILINEAR`, `Image.Resampling.BICUBIC`, and `Image.Resampling.BOX`.  The choice of filter affects the speed and quality of the resizing; higher-quality filters (like LANCZOS) are slower but produce better results.  You can also use `thumbnail()` to create a scaled-down version of an image while maintaining its aspect ratio.


### Image cropping and pasting

Cropping extracts a rectangular region from an image.  The `crop()` method takes a bounding box as a tuple `(left, upper, right, lower)`:

```python
from PIL import Image

img = Image.open("myimage.jpg")
cropped_img = img.crop((100, 50, 400, 300))  # Crop a region from (100, 50) to (400, 300)
cropped_img.save("cropped_image.jpg")
```

Pasting involves inserting one image into another. The `paste()` method requires the image to paste, and a bounding box specifying the location:


```python
from PIL import Image

img = Image.open("background.jpg")
logo = Image.open("logo.png")
img.paste(logo, (10, 10)) # Paste logo at (10, 10)
img.save("combined_image.jpg")
```

Ensure that the pasted image's mode is compatible with the background image.


### Image rotation and flipping

Rotating an image uses the `rotate()` method. You specify the angle in degrees, and optionally provide an expansion parameter to prevent cropping:

```python
from PIL import Image

img = Image.open("myimage.jpg")
rotated_img = img.rotate(45, expand=True) # Rotate by 45 degrees, expanding the canvas
rotated_img.save("rotated_image.jpg")
```

Flipping an image is achieved using the `transpose()` method with the appropriate parameter:

```python
from PIL import Image

img = Image.open("myimage.jpg")
flipped_horizontally = img.transpose(Image.Transpose.FLIP_LEFT_RIGHT)
flipped_vertically = img.transpose(Image.Transpose.FLIP_TOP_BOTTOM)
```


### Image filtering and enhancement

Pillow provides several built-in filters for image enhancement.  These are accessed through the `filter()` method.  Common filters include `ImageFilter.BLUR`, `ImageFilter.CONTOUR`, `ImageFilter.DETAIL`, `ImageFilter.EDGE_ENHANCE`, `ImageFilter.EDGE_ENHANCE_MORE`, `ImageFilter.EMBOSS`, `ImageFilter.FIND_EDGES`, `ImageFilter.SMOOTH`, and `ImageFilter.SHARPEN`.

```python
from PIL import Image, ImageFilter

img = Image.open("myimage.jpg")
blurred_img = img.filter(ImageFilter.BLUR)
sharpened_img = img.filter(ImageFilter.SHARPEN)
```

More advanced filtering might require using custom convolution kernels or other image processing techniques.


### Color adjustments

Pillow allows for various color adjustments. You can adjust brightness, contrast, and color balance using various techniques, often involving direct pixel manipulation or using color transformation functions.  For example, you can increase the image brightness by increasing the pixel values:

```python
from PIL import Image

img = Image.open("myimage.jpg")
#Note: this example is illustrative.  For robust brightness adjustments, consider other methods
pixels = img.load()
for x in range(img.width):
    for y in range(img.height):
        r, g, b = pixels[x, y]
        pixels[x, y] = (r + 50, g + 50, b + 50) #Increase brightness by 50
img.save("brighter_image.jpg")

```

More sophisticated color adjustments might involve using color matrices or other color space transformations.


### Drawing shapes and text

Pillow's `ImageDraw` module allows drawing shapes and text onto images.

```python
from PIL import Image, ImageDraw, ImageFont

img = Image.new('RGB', (200, 200), color = 'white')
d = ImageDraw.Draw(img)
d.rectangle([(10,10),(100,100)], fill ="red", outline ="black") #Draw a rectangle
try:
    font = ImageFont.truetype("arial.ttf", 32) #Load a font (path to font file may need adjustment)
    d.text((20, 120), "Hello, Pillow!", font=font, fill="blue") # Draw text
except IOError:
    print("Font file not found.")
img.save("drawing.png")
```

Remember to install a suitable font or use a system font if needed.  You'll find many shape drawing functions within the `ImageDraw` module.


## Image File Formats

### Supported formats

Pillow supports a wide range of image file formats, including but not limited to:

* **JPEG (`.jpg`, `.jpeg`):** A widely used lossy compressed format suitable for photographs.
* **PNG (`.png`):** A lossless compressed format supporting transparency and suitable for graphics and images with sharp lines.
* **GIF (`.gif`):**  Supports animation and indexed color palettes.  Note that Pillow's GIF support might be limited compared to specialized GIF libraries.
* **TIFF (`.tif`, `.tiff`):** A flexible format supporting various compression methods and metadata.
* **BMP (`.bmp`):** A simple uncompressed format.
* **PPM (`.ppm`, `.pgm`, `.pbm`):**  Raw image formats.
* **WebP (`.webp`):** A modern format offering both lossy and lossless compression.


The complete list of supported formats can be found in the Pillow documentation, and support for specific formats might depend on the Pillow version and the system's libraries.


### Reading images

Reading an image is typically done using the `Image.open()` function:

```python
from PIL import Image

try:
    img = Image.open("myimage.jpg")  # Pillow automatically detects the format
    # Process the image...
    img.close() #Good practice to close after use, especially for large files
except FileNotFoundError:
    print("Image file not found.")
except IOError:
    print("Error opening image file (possibly unsupported format).")

```

Pillow automatically detects the file format based on the file extension and the file's contents. If the format is unsupported, a `IOError` exception is raised.


### Writing images

Saving an image uses the `save()` method of the `Image` object.  The file format is usually determined by the filename extension:

```python
from PIL import Image

img = Image.open("myimage.png")
img.save("myimage.jpg")  # Save as JPEG.  Format detected from extension

# Explicitly specify the format:
img.save("myimage_webp.webp", "WebP") # Save as WebP

img.close()
```

If you need to explicitly specify the format, provide it as the second argument to `save()`.  Some formats might require additional options (see the next section).


### Format-specific options

Some file formats offer options during saving.  For example, JPEG allows controlling the compression quality:

```python
from PIL import Image

img = Image.open("myimage.png")
img.save("myimage_high_quality.jpg", "JPEG", quality=95) # High quality JPEG
img.save("myimage_low_quality.jpg", "JPEG", quality=10)  # Low quality JPEG
img.close()
```

Consult the Pillow documentation for format-specific options.  These options are passed as keyword arguments to the `save()` method.


### Handling metadata

Many image formats store metadata (information about the image, such as EXIF data for photographs or IPTC data for news images).  Pillow can access and modify this metadata using the `info` attribute and the `Image.getexif()` method (for EXIF data in JPEGs).  Note that not all formats support metadata, and metadata handling might vary depending on the format.

```python
from PIL import Image

img = Image.open("myimage.jpg")
metadata = img.info  # Access all metadata (format-dependent)
exif_data = img.getexif() # Access EXIF data (if available)

if exif_data:
  print(f"Camera model: {exif_data.get(306)}")  # Example: accessing camera model
  #Note: EXIF tags are represented by integer constants.


img.close()
```

Modifying metadata usually involves creating a new dictionary with the desired changes and saving the image with the updated metadata.  Be aware of the potential for compatibility issues when altering metadata. Remember that handling metadata requires careful consideration of the format's specific metadata structure.


## Advanced Techniques

### Image processing filters

Beyond the basic filters provided by `ImageFilter`, Pillow allows for more sophisticated image processing using custom convolution kernels. A convolution kernel is a small matrix that's applied to each pixel and its neighbors to produce a new pixel value.  This allows for a wide range of effects, from blurring and sharpening to edge detection and embossing.  You can create a kernel and apply it using the `ImageFilter.Kernel` class:

```python
from PIL import Image, ImageFilter

img = Image.open("myimage.jpg")

# Example: a simple blurring kernel
kernel = ImageFilter.Kernel((3, 3), [1, 1, 1, 1, 1, 1, 1, 1, 1], scale=9)
blurred_img = img.filter(kernel)

# More complex kernels can be created for different effects.  See Pillow documentation.

blurred_img.save("filtered_image.jpg")
```

Remember that designing effective kernels requires understanding image processing principles.


### Working with image layers

Pillow doesn't directly support layers in the same way as image editing software.  However, you can achieve similar effects by pasting images onto each other. This allows for the creation of composite images with multiple elements.  This requires careful management of image positions and transparency:

```python
from PIL import Image

background = Image.open("background.jpg")
layer1 = Image.open("layer1.png")
layer2 = Image.open("layer2.png")

background.paste(layer1, (10, 10), layer1) # Paste layer1, using its alpha channel for transparency
background.paste(layer2, (50, 50), layer2) # Paste layer2, using its alpha channel for transparency

background.save("layered_image.jpg")
```


### Image compression and optimization

Pillow can optimize images for different use cases. For JPEGs, you can adjust the compression quality to balance file size and image quality.  For PNGs, Pillow can utilize different compression strategies.  For optimal compression, you might need to explore additional tools specifically designed for image optimization (outside of Pillow itself).  For instance, tools like `optipng` or `pngquant` are often used to reduce PNG file sizes.

```python
from PIL import Image

img = Image.open("myimage.png")
img.save("optimized_image.png", optimize=True)  # Pillow's built-in optimization (may vary in effectiveness)
```


### Batch image processing

For processing many images, use loops and file system iteration:

```python
import os
from PIL import Image

image_dir = "images"
output_dir = "processed_images"

if not os.path.exists(output_dir):
    os.makedirs(output_dir)

for filename in os.listdir(image_dir):
    if filename.endswith((".jpg", ".jpeg", ".png")):  # Process only JPGs and PNGs
        filepath = os.path.join(image_dir, filename)
        try:
            img = Image.open(filepath)
            # Perform image processing here... (resize, filter, etc.)
            img.save(os.path.join(output_dir, filename))
            img.close()
        except IOError:
            print(f"Error processing {filename}")
```

This code iterates through image files in a directory, processes them, and saves the results to a different directory.  Error handling is crucial in batch processing.


### Image analysis

Pillow can be used for basic image analysis tasks. You can calculate image statistics (e.g., average color, histogram), detect edges, and perform other similar operations.  More advanced image analysis typically requires dedicated computer vision libraries like OpenCV, scikit-image, or others built on top of numerical computing libraries like NumPy.  Here's a simple example of getting average color:

```python
from PIL import Image
import numpy as np

img = Image.open("myimage.jpg")
img_array = np.array(img)
average_color = np.mean(img_array, axis=(0, 1)) #Average RGB values
print(f"Average color: {average_color}")
```

This example uses NumPy for efficient calculation of the average color.  Note that more complex image analysis tasks will usually require significantly more sophisticated code and possibly external libraries.


## Working with Image Data

### Pixel manipulation

Pixel manipulation is at the heart of many image processing tasks.  Pillow provides several ways to access, modify, and work with individual pixels or groups of pixels within an image.  Direct pixel manipulation is generally most efficient for operations involving large-scale changes to image data, although it often requires a deeper understanding of image formats and color representations.


### Accessing pixel data

There are several methods to access pixel data.  The simplest approach is using the `getpixel()` method:

```python
from PIL import Image

img = Image.open("image.png")
r, g, b = img.getpixel((x, y))  # Get RGB values of pixel at (x, y)
print(f"Pixel at ({x}, {y}): R={r}, G={g}, B={b}")

```

For more efficient access, especially for larger images, use the `load()` method which returns a PixelAccess object:

```python
from PIL import Image

img = Image.open("image.png")
pixels = img.load()
r, g, b = pixels[x, y]  # Faster access to pixel data
```

The `load()` method provides faster access compared to repeatedly calling `getpixel()`. Remember that coordinates are (x, y) tuples, starting from (0, 0) at the top-left.


### Modifying pixel data

Modifying pixels uses `putpixel()` with the `getpixel()` method or direct assignment with `load()`:

```python
from PIL import Image

img = Image.open("image.png")
pixels = img.load()

# Modify pixel values
pixels[x, y] = (255, 0, 0)  # Set pixel to red

# ...process other pixels...

img.save("modified_image.png")
```

Direct modification through the PixelAccess object obtained from `load()` is generally significantly faster than repeated calls to `putpixel()`, particularly for processing large numbers of pixels.


### Data types and representations

Pillow uses different data types to represent pixel data depending on the image mode.

* **`'L'` (Luminance):**  Pixels are represented as 8-bit integers (0-255), representing grayscale intensity.
* **`'RGB'`:** Pixels are tuples of three 8-bit integers `(r, g, b)`, representing red, green, and blue components.
* **`'RGBA'`:**  Pixels are tuples of four 8-bit integers `(r, g, b, a)`, including an alpha channel for transparency (0-255, where 0 is fully transparent and 255 is fully opaque).
* **`'CMYK'`:** Pixels are tuples of four floating-point numbers (0.0-1.0), representing cyan, magenta, yellow, and key (black) components.

Understanding these representations is essential for correctly manipulating pixel data. Incorrect data types might lead to unexpected results or errors.  When working with pixel data, it's vital to be aware of the image mode to interpret and modify pixel values accordingly.  You can always check the image mode with `img.mode`.  Using NumPy can be advantageous for manipulating large amounts of pixel data more efficiently.


## Troubleshooting

### Common errors and solutions

Several common errors can occur when using Pillow.  Here are some examples and their solutions:

* **`IOError: cannot identify image file`:** This error means Pillow cannot determine the image format.  Check the file extension and ensure the file is a valid image file.  Try opening it with a different image viewer to confirm it's not corrupted.
* **`ValueError: image file is truncated`:** This indicates a corrupted or incomplete image file.  Try downloading or obtaining the file again.
* **`MemoryError: out of memory`:**  This usually occurs when processing very large images.  Reduce image size, use smaller image chunks, or increase system memory. Use techniques like tiling to process smaller portions of the image, rather than loading the whole thing at once.
* **`TypeError: expected ... got ...`:**  This often results from passing incorrect data types to Pillow functions. Carefully check data types of parameters passed to Pillow functions.  Pay close attention to the expected types (integers, tuples, etc.).
* **`ImportError: No module named 'Pillow'`:**  Ensure Pillow is installed correctly in your Python environment. Use `pip install Pillow` to install it. Verify that the Pillow installation is available in the Python environment you're using (check your virtual environment if you're using one).


Always check error messages carefully for specific details and consult the Pillow documentation for additional information.


### Debugging techniques

Standard Python debugging techniques apply to Pillow.  Use `print()` statements strategically to track variable values and program flow.  Integrated debuggers within IDEs (like PyCharm, VS Code) are also valuable tools.  When dealing with image data, visually inspecting the images at different stages of processing can be immensely helpful in identifying problems.  Carefully examine intermediate image files to pinpoint where errors occur.


### Performance optimization

For large images or computationally intensive tasks, consider these optimizations:

* **Use `load()` for pixel access:**  Accessing pixels via `load()` is significantly faster than repeatedly calling `getpixel()`.
* **Process image in smaller chunks (tiling):** Avoid loading the entire image into memory. Process it in smaller sections.
* **Use appropriate resampling filters:** Choose faster resampling filters (like `NEAREST`) when speed is critical; prioritize quality with slower ones (like `LANCZOS`) when needed.
* **Use NumPy for array operations:**  NumPy offers efficient array operations which can speed up many image manipulations compared to manual pixel looping.
* **Profile your code:** Use Python profiling tools (like `cProfile`) to pinpoint performance bottlenecks.


### Memory management

Memory management is crucial for large images.  Always close `Image` objects using `img.close()` when finished to release resources:

```python
img = Image.open("large_image.tif")
# Process the image...
img.close()
```

Avoid keeping unnecessary references to large images in memory. Use the `del` statement to explicitly delete large image objects from memory if needed. Consider working with image generators or iterators when dealing with extremely large datasets. Utilizing memory-mapped files (if supported by the image format) can be an effective way to manage memory usage for enormous images.  Consider using memory profilers to analyze memory consumption in your application.


## Appendix

### Glossary of terms

* **Image Mode:**  Specifies the color format of an image (e.g., RGB, RGBA, L, CMYK).  Determines how pixel data is represented.
* **Pixel:** The smallest unit of an image; a single point of color.
* **Resampling Filter:** An algorithm used to improve the quality of images during resizing or other transformations.  Different filters offer trade-offs between speed and quality.
* **Alpha Channel:**  A component of an image that controls transparency.  Values range from 0 (fully transparent) to 255 (fully opaque).
* **Color Palette:**  A set of colors used in an image.  Images with limited color palettes are generally smaller in size.
* **Convolution Kernel:** A small matrix used to apply filters to images.  Defines how a filter affects pixels and their neighbors.
* **EXIF Data:** Metadata embedded in image files (especially JPEGs) containing information about the image's origin, camera settings, etc.
* **IPTC Data:**  Metadata standard for news photography, containing information like captions and keywords.
* **PixelAccess Object:**  An object returned by `Image.load()` providing efficient access to image pixels.
* **Bounding Box:**  A rectangular region defined by its upper-left and lower-right coordinates.  Used for cropping and pasting images.


### List of supported file formats

Pillow supports a wide variety of image file formats.  The exact list can vary slightly between versions, but generally includes:

* JPEG (`.jpg`, `.jpeg`)
* PNG (`.png`)
* GIF (`.gif`)
* TIFF (`.tif`, `.tiff`)
* BMP (`.bmp`)
* PPM (`.ppm`, `.pgm`, `.pbm`)
* WebP (`.webp`)
* PCX (`.pcx`)
* ICO (`.ico`)
* IM (`.im`)
* EPS (`.eps`, `.epsi`)  (PostScript support may be limited)
* PSD (`.psd`) (Adobe Photoshop support may be limited)
* and many more...

For the most up-to-date and comprehensive list, consult the official Pillow documentation.  Note that support for some formats might be limited or require additional libraries.


### Further reading and resources

* **Pillow Official Documentation:** The primary source for information on Pillow's features and usage.
* **Pillow GitHub Repository:**  The official source code repository for Pillow.
* **Python Imaging Library (PIL) (Legacy):** While Pillow is the recommended library, you might find some resources that still refer to the older PIL.
* **Online Tutorials and Articles:** Numerous tutorials and blog posts cover Pillow's usage for various image processing tasks.  Search online for topics of interest.
* **Image Processing Books:**  Many books cover image processing concepts and techniques, often including examples using Python and Pillow (or PIL).
* **Stack Overflow:** A valuable resource for finding answers to specific problems or questions regarding Pillow usage.  Remember to include relevant tags such as "python," "pillow," and "image-processing" when searching.

Remember to always check the date of resources to ensure they're relevant to the current version of Pillow.  The official documentation is the most reliable and up-to-date source of information.

