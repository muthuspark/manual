{"title":"spin.js - Documentation","markdown":{"yaml":{"title":"spin.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Spin.js?","containsRefs":false,"markdown":"\n\n\n\nSpin.js is a small, lightweight JavaScript library for creating customizable spinning loading indicators. It provides a simple and efficient way to display a visual cue to users while a page or application is loading data or performing a lengthy operation.  Unlike many other loading spinner libraries, Spin.js prioritizes minimal code size and ease of integration, making it a perfect choice for projects that need to remain performant and maintain a small footprint.  It offers a range of customization options allowing developers to tailor the spinner's appearance to match their application's style.\n\n### Key Features and Benefits\n\n* **Lightweight:** Spin.js has a tiny file size, resulting in faster page load times and reduced bandwidth consumption.\n* **Highly Customizable:**  You can easily adjust the spinner's size, color, lines, speed, and more, ensuring seamless integration with any design.\n* **Simple API:** The library boasts a straightforward and intuitive API, making it quick and easy to learn and use.\n* **Cross-browser Compatibility:** Spin.js is designed to work consistently across a wide range of modern browsers.\n* **No dependencies:** Spin.js works independently and doesn't require any other JavaScript libraries.\n\n\n### Setting up Spin.js: Installation and Configuration\n\nSpin.js is easily integrated into your project. The simplest method is to download the `spin.js` file from the project's website or via a package manager like npm or yarn.\n\n**Using a CDN (Content Delivery Network):**\n\nInclude the following script tag in the `<head>` section of your HTML file:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/spin.js@2.3.2/spin.min.js\"></script> \n```\n\n**Using npm:**\n\n```bash\nnpm install spin.js\n```\n\nThen, import it into your JavaScript code:\n\n```javascript\nimport Spinner from 'spin.js';\n```\n\n**Using yarn:**\n\n```bash\nyarn add spin.js\n```\n\nThen, import it into your JavaScript code:\n\n```javascript\nimport Spinner from 'spin.js';\n```\n\nAfter including the library, you are ready to create and use spinners. No further configuration is typically needed.\n\n\n### Basic Usage Example\n\nThis example demonstrates creating a simple spinner and adding it to a specific element on your page.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Spin.js Example</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/spin.js@2.3.2/spin.min.js\"></script> \n</head>\n<body>\n\n<div id=\"spinner\"></div>\n\n<script>\n  const opts = {\n    lines: 13, // The number of lines to draw\n    length: 20, // The length of each line\n    width: 10, // The line thickness\n    radius: 30, // The radius of the inner circle\n    scale: 1, // Scales overall size of the spinner\n    corners: 1, // Corner roundness (0..1)\n    speed: 1, // Rounds per second\n    rotate: 0, // The rotation offset\n    animation: 'spinner-line-fade-quick', // The CSS animation name for the lines\n    direction: 1, // 1: clockwise, -1: counterclockwise\n    color: '#000', // CSS color or array of colors\n    fadeColor: 'transparent', // CSS color or array of colors\n    shadow: true, // Whether to render a shadow\n    hwaccel: false, // Whether to use hardware acceleration\n    className: 'spinner', // The CSS class to assign to the spinner\n    zIndex: 2e9, // The z-index (defaults to 2000000000)\n    top: '50%', // Top position relative to parent in px\n    left: '50%', // Left position relative to parent in px\n  };\n  const target = document.getElementById('spinner');\n  const spinner = new Spinner(opts).spin(target);\n\n  // ...later, when the loading is complete...\n  spinner.stop();\n</script>\n\n</body>\n</html>\n```\n\nThis code creates a spinner with the specified options and adds it to the element with the ID \"spinner\".  Remember to replace `\"https://cdn.jsdelivr.net/npm/spin.js@2.3.2/spin.min.js\"` with the correct path if you're not using a CDN.  The `spinner.stop()` method is called when the loading process is finished to remove the spinner from the page.  Refer to the Spin.js documentation for a complete list of available options.\n\n\n## Core Concepts\n\n### Understanding Spinners\n\nSpin.js uses the concept of a \"spinner\" object to represent the loading indicator.  This object is created using the `Spinner` constructor, which accepts an optional configuration object as an argument.  The configuration object allows you to customize various aspects of the spinner's appearance and behavior.  Once created, the spinner can be added to the DOM (Document Object Model) using the `spin()` method, which takes a target element as an argument.  This places the spinner visually within the specified element.  The spinner can subsequently be removed by calling the `stop()` method.  At its core, a Spin.js spinner is a collection of lines that rotate, creating the visual effect of a loading animation.  These lines are rendered using CSS, allowing for easy styling and customization.\n\n\n### Customization Options\n\nSpin.js provides a wide range of options for customizing the appearance and behavior of your spinners. These options are passed as a JavaScript object to the `Spinner` constructor.  Key customization options include:\n\n* `lines`: The number of lines in the spinner.\n* `length`: The length of each line in pixels.\n* `width`: The thickness of each line in pixels.\n* `radius`: The radius of the spinner in pixels.\n* `corners`: The roundness of the corners of the lines (0-1).\n* `speed`: The rotation speed of the spinner in rotations per second.\n* `color`: The color of the lines. Can be a single color string or an array of colors for a color animation.\n* `shadow`: A boolean value indicating whether to render a shadow.\n* `className`:  A custom CSS class name to apply to the spinner's container. This allows for further styling using external CSS.\n* `top`, `left`: The position of the spinner relative to its parent container.  Useful for centering spinners.\n\n\nRefer to the complete API documentation for a comprehensive list of all available customization options and their data types.\n\n\n### Spinner Types and Styles\n\nWhile Spin.js doesn't explicitly define different \"types\" of spinners in the sense of pre-built styles, the extensive customization options allow for a wide variety of visual appearances. You can create different styles by adjusting parameters like the number of lines, their length and width, the colors, speed, and the `animation` property.  The `animation` property allows you to specify the name of a CSS animation to apply to the spinner lines, providing a path to create more complex and visually distinct loading indicators.  The flexibility of the CSS-based rendering is key to the diverse styles achievable.\n\n\n### Responsiveness and Adaptability\n\nSpin.js spinners are inherently responsive. Because the size and positioning are controlled via the options passed to the constructor (including `scale`, `radius`, `top`, `left`) and the styling is controlled through CSS, spinners will adapt to different screen sizes and resolutions. You can make your spinners more responsive by using relative units (like percentages) for sizing and positioning within your CSS.  For example, using percentages for `top` and `left` will help center the spinner regardless of the parent container's dimensions.  Likewise, using relative units in your CSS class applied via `className` will ensure that the spinner scales appropriately with its surroundings.  No special configuration within Spin.js is required for responsiveness; it is a result of its design and its reliance on CSS for rendering.\n\n\n## API Reference\n\n### Spinner Constructor\n\nThe `Spinner` constructor creates a new spinner object.  It accepts a single optional argument: an object containing configuration options.  These options determine the spinner's appearance and behavior.  If no options are provided, default values are used.\n\n```javascript\nconst spinner = new Spinner(); // Creates a spinner with default options\nconst spinner = new Spinner({\n  lines: 12,\n  length: 7,\n  width: 5,\n  radius: 10,\n  color: '#000',\n  speed: 1,\n  // ... other options\n});\n```\n\nThe available options are detailed in the \"Customization Options\" section and the full API documentation.  The constructor returns a `Spinner` object which can then be manipulated via its methods.\n\n\n### Methods: `start()`, `stop()`, `toggle()`\n\n* **`start(target)`:** This method starts the spinner animation and adds it to the DOM.  The `target` argument is a DOM element (e.g., obtained via `document.getElementById`) where the spinner will be visually rendered.  If the spinner is already started, calling this method has no effect.\n\n* **`stop()`:** This method stops the spinner animation and removes it from the DOM.  If the spinner is already stopped, calling this method has no effect.\n\n* **`toggle(target)`:** This method toggles the spinner's state. If the spinner is running, it stops it; if it is stopped, it starts it (using the given `target` element).  This is a convenient shorthand for switching between `start()` and `stop()`.\n\n\n### Properties: `color`, `size`, `lines`, `speed` etc.\n\nWhile Spin.js doesn't directly expose properties for modification after the spinner is created,  the visual attributes of the spinner are determined by the options passed to the constructor.   These options effectively act as read-only properties that define the spinner's state.   For example, `color`, `lines`, `length`, `width`, `radius`, `speed`, etc.,  influence the spinner's appearance and behavior. To change these attributes, you would need to create a new `Spinner` object with the updated options and replace the old one.  Direct access and manipulation of properties after initialization are not supported.\n\n\n### Events\n\nSpin.js does not currently offer a built-in event system.  There are no events triggered during the spinner's lifecycle (start, stop, etc.).  If you need event handling related to the spinner's state, you will have to manage it externally within your application's code by monitoring its start/stop status directly, or implement custom event listeners based on the state changes within your application's logic.\n\n\n### Advanced Configuration Options\n\nBeyond the basic customization options, Spin.js offers some more advanced configuration settings:\n\n* **`animation`:** Specifies the CSS animation name to be applied to the spinner lines. This allows for highly customized animations.  You'll need to define the CSS animation yourself.\n* **`direction`:** Controls the rotation direction (1 for clockwise, -1 for counter-clockwise).\n* **`fadeColor`:** Specifies a color or array of colors for a fade-out effect on the spinner lines.\n* **`shadow`:** Enables or disables the shadow effect behind the spinner lines.\n* **`hwaccel`:**  Enables or disables hardware acceleration.  Experimentation may be necessary to see if this provides a performance benefit.\n* **`zIndex`:** Controls the z-index of the spinner, allowing you to ensure it appears above other elements on the page.\n* **`className`:** Allows you to apply a custom CSS class to the spinner's container element for additional styling.\n* **`scale`:**  Scales the entire spinner uniformly.  Values greater than 1 enlarge the spinner, values less than 1 reduce its size.\n\n\nConsult the complete API documentation for a detailed explanation of each option and its possible values. Remember that some options interact with each other, so experimentation may be required to achieve the desired visual effect.\n\n\n## Customization and Styling\n\n### CSS Customization\n\nSpin.js spinners are rendered using CSS, making them highly customizable.  The primary method for styling is through the `className` option passed to the `Spinner` constructor. This option allows you to assign a CSS class to the spinner's container element. You can then define styles for this class in your external CSS stylesheet to control aspects such as:\n\n* **Size and Positioning:**  Use `width`, `height`, `top`, `left`, `margin`, and `padding` to control the spinner's size and placement within its container.\n* **Colors:** Define the spinner's colors using standard CSS properties.  You can target the individual lines or the entire spinner container.\n* **Animations:** Create custom CSS animations to control the spinning effect, going beyond the default animations provided by Spin.js.  The `animation` option in the `Spinner` constructor coordinates with your custom CSS animations.\n\n\nExample CSS:\n\n```css\n.my-spinner {\n  width: 50px;\n  height: 50px;\n  margin: 0 auto; /* Center the spinner */\n}\n\n.my-spinner .spinner-line { /* Style individual lines */\n  background-color: blue; /*Example*/\n}\n\n/*Custom Animation*/\n@keyframes my-custom-spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n.my-spinner {\n    animation: my-custom-spin 2s linear infinite;\n}\n\n```\n\nRemember to include this CSS in your HTML file, usually within a `<style>` tag or linked from an external `.css` file.\n\n\n### Modifying Spinner Appearance\n\nThe appearance of the spinner is primarily controlled through options passed to the `Spinner` constructor (e.g., `lines`, `length`, `width`, `radius`, `color`, `speed`, `corners`, `shadow`, `fadeColor`).  Changing these options will directly affect the visual properties of the spinner.  To modify an existing spinner's appearance you need to stop it, create a new `Spinner` instance with the updated options, and start the new spinner in the same location.\n\n\n### Creating Custom Spinners\n\nCreating custom spinners involves combining the use of the `className` option with custom CSS.   Define a unique class name (e.g., `.my-custom-spinner`) in the `Spinner` constructor's options.  Then, create a set of CSS rules that target this class and define the desired styles for the spinner's lines, container, and any other elements you add. You can leverage CSS animations to create custom spinning or loading effects.  This approach ensures that you can have multiple spinners with different appearances within the same application.\n\n\n### Integrating with Frameworks (React, Angular, Vue)\n\nSpin.js is a vanilla JavaScript library and is framework-agnostic; it can be easily integrated into popular JavaScript frameworks like React, Angular, and Vue.  The integration process generally involves:\n\n* **Installation:** Install `spin.js` using your framework's package manager (npm or yarn).\n* **Import:** Import the `Spinner` class into your component.\n* **Usage:** Create and manage the `Spinner` instances within your component's lifecycle methods (e.g., `componentDidMount`, `componentWillUnmount` in React, or lifecycle hooks in Angular and Vue).\n\n\n**Example (React):**\n\n```jsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport Spinner from 'spin.js';\n\nfunction MyComponent() {\n  const [isLoading, setIsLoading] = useState(true);\n  const spinnerRef = useRef(null);\n\n  useEffect(() => {\n    const opts = { lines: 10, color: 'blue' }; //Your custom options\n    const spinner = new Spinner(opts);\n    spinner.spin(spinnerRef.current);\n    // Simulate loading...\n    setTimeout(() => {\n      setIsLoading(false);\n      spinner.stop();\n    }, 2000);\n    return () => {\n        //Clean up the spinner on unmount if necessary\n        if (spinner) {\n          spinner.stop();\n        }\n      };\n  }, []);\n\n  return (\n    <div>\n      {isLoading && <div ref={spinnerRef}></div>}\n      <h1>My Component</h1>\n    </div>\n  );\n}\n\nexport default MyComponent;\n```\n\nAdapt this pattern for Angular and Vue, using their respective component lifecycle methods and data binding mechanisms. Remember to appropriately handle the creation and destruction of the spinner instances to prevent memory leaks.  The core concept remains the same across all frameworks:  include Spin.js, create a `Spinner` object, control its lifecycle, and style it using CSS.\n\n\n## Advanced Usage\n\n### Performance Optimization\n\nSpin.js is already designed to be lightweight and performant. However, for optimal performance in demanding applications, consider these points:\n\n* **Minimize Unnecessary Spinners:** Avoid creating and destroying spinners excessively.  Reuse a single spinner instance whenever possible by moving it between containers using the `stop()` and `spin(newTarget)` methods.  Excessive creation and destruction can impact performance.\n\n* **Efficient DOM Manipulation:** Spin.js interacts minimally with the DOM. Ensure your application's other DOM manipulations are efficient to prevent performance bottlenecks unrelated to Spin.js itself.\n\n* **Hardware Acceleration (hwaccel):** Experiment with the `hwaccel` option in the `Spinner` constructor.  While it may improve performance in some browsers and hardware configurations, it might have no effect or even a slightly negative impact in others. Test thoroughly before relying on this option.\n\n* **Avoid Complex Animations:** Extremely complex CSS animations can negatively impact performance.  While Spin.js supports custom animations via the `animation` option, keep your animations relatively simple to maintain good performance.\n\n\n### Accessibility Considerations\n\nAccessibility is crucial for inclusive design. While Spin.js itself doesn't directly handle accessibility features, you should ensure your implementation considers accessibility best practices.  Here are some key points:\n\n* **ARIA attributes:** When using a spinner, add appropriate ARIA attributes to the surrounding element to provide context to screen reader users.  For instance, use `aria-busy=\"true\"` while the spinner is active to indicate that the application is busy processing.  Remove the attribute when loading completes.\n\n* **Alternative Text:** Consider providing alternative content that describes the loading process for users who cannot see the spinner (e.g., a textual message such as \"Loading...\").\n\n* **Color Contrast:** Ensure there's sufficient color contrast between the spinner and its background.  Poor contrast can make it difficult for users with low vision to see the spinner.\n\n\n### Troubleshooting Common Issues\n\n* **Spinner Not Appearing:** Ensure that the `spin()` method is called with a valid DOM element as an argument. Double-check that the element exists in the DOM at the time `spin()` is called and that you're not inadvertently using a stale reference.\n\n* **Spinner Not Stopping:**  If the spinner does not stop when expected, ensure your application's logic correctly calls the `stop()` method.  Look for asynchronous operations that might outlive your expectation of the loading completion.\n\n* **Styling Issues:** If styling isn't applying correctly, inspect the browser's developer tools to ensure that your CSS rules are being applied correctly and that there are no conflicting styles.  Verify the class name in your CSS matches the `className` property used in the `Spinner` constructor.\n\n* **Unexpected Behavior:** If you're experiencing unexpected behavior, check the Spin.js documentation and examples.  Also, consider simplifying your code to rule out conflicts with other libraries or application logic.\n\n\n### Integration with other libraries\n\nSpin.js integrates seamlessly with most other JavaScript libraries since it's a simple, self-contained library without external dependencies. However, there are a few considerations:\n\n* **Conflicting CSS:** Ensure your CSS selectors are specific enough to avoid conflicts with styles from other libraries.  Use unique class names for your spinners to avoid unintended styling changes.\n\n* **JavaScript Conflicts:** Avoid name collisions between Spin.js variables and variables from other libraries.  While Spin.js has a very small API surface, this is generally not a significant issue.\n\n* **Library-Specific Integration:**  If you're using a framework like React, Angular, or Vue, refer to the integration example in the \"Customization and Styling\" section.  Each framework has its own approach to component lifecycle and DOM management, and handling these aspects properly will guarantee correct integration.\n\n\nRemember to always consult the documentation for both Spin.js and any other libraries you're integrating with to ensure compatibility and proper usage.\n\n\n## Examples and Use Cases\n\n### Loading Indicators\n\nThe most common use case for Spin.js is as a loading indicator.  Display a spinner while fetching data from an API, processing a large file, or performing any other time-consuming operation.  This provides visual feedback to the user, letting them know that the application is working.\n\n```javascript\nconst opts = { color: '#007bff', lines: 12, length: 10 }; // Example options\nconst spinner = new Spinner(opts);\nconst target = document.getElementById('loading-indicator');\n\n// Start spinner before API call\nspinner.spin(target);\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => {\n    // Update UI with data\n    // ...\n    spinner.stop(); // Stop spinner after data is received\n  })\n  .catch(error => {\n    // Handle error\n    spinner.stop(); // Stop spinner even on error\n  });\n```\n\nRemember to add a `<div id=\"loading-indicator\"></div>` to your HTML where the spinner will be displayed.\n\n\n### Progress Bars\n\nWhile Spin.js itself is not a progress bar, it can be effectively combined with one. You could display a progress bar alongside a spinner to provide more detailed feedback to the user. The spinner could indicate that an operation is in progress, while the progress bar displays the percentage of completion.  This would require additional logic within your application to manage both the spinner and the progress bar.\n\n\n### Interactive Spinners\n\nYou can make spinners more interactive by associating them with user events or actions.  For instance, a spinner could appear when a user clicks a button that initiates a long-running process, and disappear after the process is complete.  Or a spinner could be dynamically displayed within a form while data is submitted to the server.  This involves properly integrating the spinner's lifecycle (start and stop) with the events relevant to your application.\n\n```javascript\nconst button = document.getElementById('myButton');\nconst spinnerContainer = document.getElementById('spinnerContainer');\nconst spinner = new Spinner({ color: 'green' });\n\nbutton.addEventListener('click', () => {\n  spinner.spin(spinnerContainer);\n  // Perform some lengthy operation...\n  setTimeout(() => {\n    spinner.stop();\n    // Update the UI after the operation completes\n  }, 3000);\n});\n\n```\n\nThis example shows a spinner appearing only when the button is clicked.\n\n\n### Custom Animations\n\nSpin.js allows for custom CSS animations through the `animation` option.   Define a CSS animation using `@keyframes` and specify its name in the `animation` property when creating the spinner. This enables a high degree of control over the spinner's visual style.\n\n```css\n@keyframes myCustomSpin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* ... later in your JavaScript ... */\nconst spinner = new Spinner({\n    animation: 'myCustomSpin',\n    color: 'orange'\n});\nspinner.spin(document.getElementById('mySpinner'));\n```\n\nThis approach enables the creation of unique and visually appealing spinners beyond the default styles. Remember that complex animations might impact performance; strive for simplicity when creating custom animations.\n\n\n## Contributing to Spin.js\n\nThis section outlines how to contribute to the Spin.js project.  Contributions are welcome, whether it's bug fixes, new features, or improvements to the documentation.\n\n### Setting up Development Environment\n\n1. **Fork the Repository:** Fork the official Spin.js repository on GitHub to your own account.\n\n2. **Clone Your Fork:** Clone your forked repository to your local machine:\n\n   ```bash\n   git clone <your-fork-url>\n   ```\n\n3. **Install Dependencies:** Navigate to the project directory and install the necessary dependencies using npm or yarn:\n\n   ```bash\n   npm install  // or yarn install\n   ```\n\n4. **Set up a Development Server (optional):** While not strictly required for contributing code changes, setting up a development server can be helpful for testing and previewing your changes.  Spin.js doesn't have a built-in development server. You'll need to build one as needed, possibly using a simple HTTP server to serve the files.  This is usually only necessary for large-scale changes or new features that require extensive testing.\n\n5. **Run Tests (recommended):** Before making any changes, run the existing tests to ensure the project is working correctly on your machine. See the \"Testing and Debugging\" section for more details.\n\n### Code Style Guide\n\nSpin.js follows a consistent code style.  Adhere to these guidelines when submitting code changes:\n\n* **Indentation:** Use 2 spaces for indentation.\n* **Line Length:** Keep lines under 80 characters.\n* **Semicolons:** Use semicolons to terminate statements.\n* **Naming Conventions:** Use descriptive variable and function names.  Follow camelCase for variables and functions.\n* **Comments:** Write clear and concise comments to explain complex logic.\n\n\nEnsure your code is well-formatted and follows these guidelines before submitting a pull request.  Use a code formatter (e.g., Prettier) to help maintain consistent styling.\n\n\n### Testing and Debugging\n\nSpin.js uses a testing framework.  The specific testing framework may be listed in the project's README or documentation.  The tests typically cover the core functionality of the library.\n\n1. **Run Tests:** Run the tests using the command specified in the project's documentation (likely `npm test` or `yarn test`).  This will verify that the existing code functions correctly.\n\n2. **Write Tests:** When adding new features or fixing bugs, write corresponding tests to ensure your changes do not introduce regressions.  Good test coverage is essential for maintaining the quality of the project.\n\n3. **Debugging:** Use your browser's developer tools to debug your code. Set breakpoints in your code and step through the execution to identify issues.\n\n\n### Submitting Pull Requests\n\n1. **Create a Branch:** Create a new branch from the `main` or `master` branch for your changes:\n\n   ```bash\n   git checkout -b <your-branch-name>\n   ```\n\n2. **Make Your Changes:** Make your code changes and commit them with clear and descriptive commit messages.\n\n3. **Push Your Branch:** Push your branch to your forked repository:\n\n   ```bash\n   git push origin <your-branch-name>\n   ```\n\n4. **Create a Pull Request:** On GitHub, create a pull request from your branch to the main branch of the original Spin.js repository.  Provide a clear description of your changes and address any feedback from reviewers.\n\n5. **Address Feedback:** Respond to any comments or requests for changes from the project maintainers.  Make necessary revisions and push updates to your branch.\n\nRemember to follow the project's contribution guidelines, if any, when submitting your pull request.  A well-written pull request with clear explanations of your changes increases the likelihood of a timely review and acceptance.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Spin.js?\n\nSpin.js is a small, lightweight JavaScript library for creating customizable spinning loading indicators. It provides a simple and efficient way to display a visual cue to users while a page or application is loading data or performing a lengthy operation.  Unlike many other loading spinner libraries, Spin.js prioritizes minimal code size and ease of integration, making it a perfect choice for projects that need to remain performant and maintain a small footprint.  It offers a range of customization options allowing developers to tailor the spinner's appearance to match their application's style.\n\n### Key Features and Benefits\n\n* **Lightweight:** Spin.js has a tiny file size, resulting in faster page load times and reduced bandwidth consumption.\n* **Highly Customizable:**  You can easily adjust the spinner's size, color, lines, speed, and more, ensuring seamless integration with any design.\n* **Simple API:** The library boasts a straightforward and intuitive API, making it quick and easy to learn and use.\n* **Cross-browser Compatibility:** Spin.js is designed to work consistently across a wide range of modern browsers.\n* **No dependencies:** Spin.js works independently and doesn't require any other JavaScript libraries.\n\n\n### Setting up Spin.js: Installation and Configuration\n\nSpin.js is easily integrated into your project. The simplest method is to download the `spin.js` file from the project's website or via a package manager like npm or yarn.\n\n**Using a CDN (Content Delivery Network):**\n\nInclude the following script tag in the `<head>` section of your HTML file:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/spin.js@2.3.2/spin.min.js\"></script> \n```\n\n**Using npm:**\n\n```bash\nnpm install spin.js\n```\n\nThen, import it into your JavaScript code:\n\n```javascript\nimport Spinner from 'spin.js';\n```\n\n**Using yarn:**\n\n```bash\nyarn add spin.js\n```\n\nThen, import it into your JavaScript code:\n\n```javascript\nimport Spinner from 'spin.js';\n```\n\nAfter including the library, you are ready to create and use spinners. No further configuration is typically needed.\n\n\n### Basic Usage Example\n\nThis example demonstrates creating a simple spinner and adding it to a specific element on your page.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Spin.js Example</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/spin.js@2.3.2/spin.min.js\"></script> \n</head>\n<body>\n\n<div id=\"spinner\"></div>\n\n<script>\n  const opts = {\n    lines: 13, // The number of lines to draw\n    length: 20, // The length of each line\n    width: 10, // The line thickness\n    radius: 30, // The radius of the inner circle\n    scale: 1, // Scales overall size of the spinner\n    corners: 1, // Corner roundness (0..1)\n    speed: 1, // Rounds per second\n    rotate: 0, // The rotation offset\n    animation: 'spinner-line-fade-quick', // The CSS animation name for the lines\n    direction: 1, // 1: clockwise, -1: counterclockwise\n    color: '#000', // CSS color or array of colors\n    fadeColor: 'transparent', // CSS color or array of colors\n    shadow: true, // Whether to render a shadow\n    hwaccel: false, // Whether to use hardware acceleration\n    className: 'spinner', // The CSS class to assign to the spinner\n    zIndex: 2e9, // The z-index (defaults to 2000000000)\n    top: '50%', // Top position relative to parent in px\n    left: '50%', // Left position relative to parent in px\n  };\n  const target = document.getElementById('spinner');\n  const spinner = new Spinner(opts).spin(target);\n\n  // ...later, when the loading is complete...\n  spinner.stop();\n</script>\n\n</body>\n</html>\n```\n\nThis code creates a spinner with the specified options and adds it to the element with the ID \"spinner\".  Remember to replace `\"https://cdn.jsdelivr.net/npm/spin.js@2.3.2/spin.min.js\"` with the correct path if you're not using a CDN.  The `spinner.stop()` method is called when the loading process is finished to remove the spinner from the page.  Refer to the Spin.js documentation for a complete list of available options.\n\n\n## Core Concepts\n\n### Understanding Spinners\n\nSpin.js uses the concept of a \"spinner\" object to represent the loading indicator.  This object is created using the `Spinner` constructor, which accepts an optional configuration object as an argument.  The configuration object allows you to customize various aspects of the spinner's appearance and behavior.  Once created, the spinner can be added to the DOM (Document Object Model) using the `spin()` method, which takes a target element as an argument.  This places the spinner visually within the specified element.  The spinner can subsequently be removed by calling the `stop()` method.  At its core, a Spin.js spinner is a collection of lines that rotate, creating the visual effect of a loading animation.  These lines are rendered using CSS, allowing for easy styling and customization.\n\n\n### Customization Options\n\nSpin.js provides a wide range of options for customizing the appearance and behavior of your spinners. These options are passed as a JavaScript object to the `Spinner` constructor.  Key customization options include:\n\n* `lines`: The number of lines in the spinner.\n* `length`: The length of each line in pixels.\n* `width`: The thickness of each line in pixels.\n* `radius`: The radius of the spinner in pixels.\n* `corners`: The roundness of the corners of the lines (0-1).\n* `speed`: The rotation speed of the spinner in rotations per second.\n* `color`: The color of the lines. Can be a single color string or an array of colors for a color animation.\n* `shadow`: A boolean value indicating whether to render a shadow.\n* `className`:  A custom CSS class name to apply to the spinner's container. This allows for further styling using external CSS.\n* `top`, `left`: The position of the spinner relative to its parent container.  Useful for centering spinners.\n\n\nRefer to the complete API documentation for a comprehensive list of all available customization options and their data types.\n\n\n### Spinner Types and Styles\n\nWhile Spin.js doesn't explicitly define different \"types\" of spinners in the sense of pre-built styles, the extensive customization options allow for a wide variety of visual appearances. You can create different styles by adjusting parameters like the number of lines, their length and width, the colors, speed, and the `animation` property.  The `animation` property allows you to specify the name of a CSS animation to apply to the spinner lines, providing a path to create more complex and visually distinct loading indicators.  The flexibility of the CSS-based rendering is key to the diverse styles achievable.\n\n\n### Responsiveness and Adaptability\n\nSpin.js spinners are inherently responsive. Because the size and positioning are controlled via the options passed to the constructor (including `scale`, `radius`, `top`, `left`) and the styling is controlled through CSS, spinners will adapt to different screen sizes and resolutions. You can make your spinners more responsive by using relative units (like percentages) for sizing and positioning within your CSS.  For example, using percentages for `top` and `left` will help center the spinner regardless of the parent container's dimensions.  Likewise, using relative units in your CSS class applied via `className` will ensure that the spinner scales appropriately with its surroundings.  No special configuration within Spin.js is required for responsiveness; it is a result of its design and its reliance on CSS for rendering.\n\n\n## API Reference\n\n### Spinner Constructor\n\nThe `Spinner` constructor creates a new spinner object.  It accepts a single optional argument: an object containing configuration options.  These options determine the spinner's appearance and behavior.  If no options are provided, default values are used.\n\n```javascript\nconst spinner = new Spinner(); // Creates a spinner with default options\nconst spinner = new Spinner({\n  lines: 12,\n  length: 7,\n  width: 5,\n  radius: 10,\n  color: '#000',\n  speed: 1,\n  // ... other options\n});\n```\n\nThe available options are detailed in the \"Customization Options\" section and the full API documentation.  The constructor returns a `Spinner` object which can then be manipulated via its methods.\n\n\n### Methods: `start()`, `stop()`, `toggle()`\n\n* **`start(target)`:** This method starts the spinner animation and adds it to the DOM.  The `target` argument is a DOM element (e.g., obtained via `document.getElementById`) where the spinner will be visually rendered.  If the spinner is already started, calling this method has no effect.\n\n* **`stop()`:** This method stops the spinner animation and removes it from the DOM.  If the spinner is already stopped, calling this method has no effect.\n\n* **`toggle(target)`:** This method toggles the spinner's state. If the spinner is running, it stops it; if it is stopped, it starts it (using the given `target` element).  This is a convenient shorthand for switching between `start()` and `stop()`.\n\n\n### Properties: `color`, `size`, `lines`, `speed` etc.\n\nWhile Spin.js doesn't directly expose properties for modification after the spinner is created,  the visual attributes of the spinner are determined by the options passed to the constructor.   These options effectively act as read-only properties that define the spinner's state.   For example, `color`, `lines`, `length`, `width`, `radius`, `speed`, etc.,  influence the spinner's appearance and behavior. To change these attributes, you would need to create a new `Spinner` object with the updated options and replace the old one.  Direct access and manipulation of properties after initialization are not supported.\n\n\n### Events\n\nSpin.js does not currently offer a built-in event system.  There are no events triggered during the spinner's lifecycle (start, stop, etc.).  If you need event handling related to the spinner's state, you will have to manage it externally within your application's code by monitoring its start/stop status directly, or implement custom event listeners based on the state changes within your application's logic.\n\n\n### Advanced Configuration Options\n\nBeyond the basic customization options, Spin.js offers some more advanced configuration settings:\n\n* **`animation`:** Specifies the CSS animation name to be applied to the spinner lines. This allows for highly customized animations.  You'll need to define the CSS animation yourself.\n* **`direction`:** Controls the rotation direction (1 for clockwise, -1 for counter-clockwise).\n* **`fadeColor`:** Specifies a color or array of colors for a fade-out effect on the spinner lines.\n* **`shadow`:** Enables or disables the shadow effect behind the spinner lines.\n* **`hwaccel`:**  Enables or disables hardware acceleration.  Experimentation may be necessary to see if this provides a performance benefit.\n* **`zIndex`:** Controls the z-index of the spinner, allowing you to ensure it appears above other elements on the page.\n* **`className`:** Allows you to apply a custom CSS class to the spinner's container element for additional styling.\n* **`scale`:**  Scales the entire spinner uniformly.  Values greater than 1 enlarge the spinner, values less than 1 reduce its size.\n\n\nConsult the complete API documentation for a detailed explanation of each option and its possible values. Remember that some options interact with each other, so experimentation may be required to achieve the desired visual effect.\n\n\n## Customization and Styling\n\n### CSS Customization\n\nSpin.js spinners are rendered using CSS, making them highly customizable.  The primary method for styling is through the `className` option passed to the `Spinner` constructor. This option allows you to assign a CSS class to the spinner's container element. You can then define styles for this class in your external CSS stylesheet to control aspects such as:\n\n* **Size and Positioning:**  Use `width`, `height`, `top`, `left`, `margin`, and `padding` to control the spinner's size and placement within its container.\n* **Colors:** Define the spinner's colors using standard CSS properties.  You can target the individual lines or the entire spinner container.\n* **Animations:** Create custom CSS animations to control the spinning effect, going beyond the default animations provided by Spin.js.  The `animation` option in the `Spinner` constructor coordinates with your custom CSS animations.\n\n\nExample CSS:\n\n```css\n.my-spinner {\n  width: 50px;\n  height: 50px;\n  margin: 0 auto; /* Center the spinner */\n}\n\n.my-spinner .spinner-line { /* Style individual lines */\n  background-color: blue; /*Example*/\n}\n\n/*Custom Animation*/\n@keyframes my-custom-spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n.my-spinner {\n    animation: my-custom-spin 2s linear infinite;\n}\n\n```\n\nRemember to include this CSS in your HTML file, usually within a `<style>` tag or linked from an external `.css` file.\n\n\n### Modifying Spinner Appearance\n\nThe appearance of the spinner is primarily controlled through options passed to the `Spinner` constructor (e.g., `lines`, `length`, `width`, `radius`, `color`, `speed`, `corners`, `shadow`, `fadeColor`).  Changing these options will directly affect the visual properties of the spinner.  To modify an existing spinner's appearance you need to stop it, create a new `Spinner` instance with the updated options, and start the new spinner in the same location.\n\n\n### Creating Custom Spinners\n\nCreating custom spinners involves combining the use of the `className` option with custom CSS.   Define a unique class name (e.g., `.my-custom-spinner`) in the `Spinner` constructor's options.  Then, create a set of CSS rules that target this class and define the desired styles for the spinner's lines, container, and any other elements you add. You can leverage CSS animations to create custom spinning or loading effects.  This approach ensures that you can have multiple spinners with different appearances within the same application.\n\n\n### Integrating with Frameworks (React, Angular, Vue)\n\nSpin.js is a vanilla JavaScript library and is framework-agnostic; it can be easily integrated into popular JavaScript frameworks like React, Angular, and Vue.  The integration process generally involves:\n\n* **Installation:** Install `spin.js` using your framework's package manager (npm or yarn).\n* **Import:** Import the `Spinner` class into your component.\n* **Usage:** Create and manage the `Spinner` instances within your component's lifecycle methods (e.g., `componentDidMount`, `componentWillUnmount` in React, or lifecycle hooks in Angular and Vue).\n\n\n**Example (React):**\n\n```jsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport Spinner from 'spin.js';\n\nfunction MyComponent() {\n  const [isLoading, setIsLoading] = useState(true);\n  const spinnerRef = useRef(null);\n\n  useEffect(() => {\n    const opts = { lines: 10, color: 'blue' }; //Your custom options\n    const spinner = new Spinner(opts);\n    spinner.spin(spinnerRef.current);\n    // Simulate loading...\n    setTimeout(() => {\n      setIsLoading(false);\n      spinner.stop();\n    }, 2000);\n    return () => {\n        //Clean up the spinner on unmount if necessary\n        if (spinner) {\n          spinner.stop();\n        }\n      };\n  }, []);\n\n  return (\n    <div>\n      {isLoading && <div ref={spinnerRef}></div>}\n      <h1>My Component</h1>\n    </div>\n  );\n}\n\nexport default MyComponent;\n```\n\nAdapt this pattern for Angular and Vue, using their respective component lifecycle methods and data binding mechanisms. Remember to appropriately handle the creation and destruction of the spinner instances to prevent memory leaks.  The core concept remains the same across all frameworks:  include Spin.js, create a `Spinner` object, control its lifecycle, and style it using CSS.\n\n\n## Advanced Usage\n\n### Performance Optimization\n\nSpin.js is already designed to be lightweight and performant. However, for optimal performance in demanding applications, consider these points:\n\n* **Minimize Unnecessary Spinners:** Avoid creating and destroying spinners excessively.  Reuse a single spinner instance whenever possible by moving it between containers using the `stop()` and `spin(newTarget)` methods.  Excessive creation and destruction can impact performance.\n\n* **Efficient DOM Manipulation:** Spin.js interacts minimally with the DOM. Ensure your application's other DOM manipulations are efficient to prevent performance bottlenecks unrelated to Spin.js itself.\n\n* **Hardware Acceleration (hwaccel):** Experiment with the `hwaccel` option in the `Spinner` constructor.  While it may improve performance in some browsers and hardware configurations, it might have no effect or even a slightly negative impact in others. Test thoroughly before relying on this option.\n\n* **Avoid Complex Animations:** Extremely complex CSS animations can negatively impact performance.  While Spin.js supports custom animations via the `animation` option, keep your animations relatively simple to maintain good performance.\n\n\n### Accessibility Considerations\n\nAccessibility is crucial for inclusive design. While Spin.js itself doesn't directly handle accessibility features, you should ensure your implementation considers accessibility best practices.  Here are some key points:\n\n* **ARIA attributes:** When using a spinner, add appropriate ARIA attributes to the surrounding element to provide context to screen reader users.  For instance, use `aria-busy=\"true\"` while the spinner is active to indicate that the application is busy processing.  Remove the attribute when loading completes.\n\n* **Alternative Text:** Consider providing alternative content that describes the loading process for users who cannot see the spinner (e.g., a textual message such as \"Loading...\").\n\n* **Color Contrast:** Ensure there's sufficient color contrast between the spinner and its background.  Poor contrast can make it difficult for users with low vision to see the spinner.\n\n\n### Troubleshooting Common Issues\n\n* **Spinner Not Appearing:** Ensure that the `spin()` method is called with a valid DOM element as an argument. Double-check that the element exists in the DOM at the time `spin()` is called and that you're not inadvertently using a stale reference.\n\n* **Spinner Not Stopping:**  If the spinner does not stop when expected, ensure your application's logic correctly calls the `stop()` method.  Look for asynchronous operations that might outlive your expectation of the loading completion.\n\n* **Styling Issues:** If styling isn't applying correctly, inspect the browser's developer tools to ensure that your CSS rules are being applied correctly and that there are no conflicting styles.  Verify the class name in your CSS matches the `className` property used in the `Spinner` constructor.\n\n* **Unexpected Behavior:** If you're experiencing unexpected behavior, check the Spin.js documentation and examples.  Also, consider simplifying your code to rule out conflicts with other libraries or application logic.\n\n\n### Integration with other libraries\n\nSpin.js integrates seamlessly with most other JavaScript libraries since it's a simple, self-contained library without external dependencies. However, there are a few considerations:\n\n* **Conflicting CSS:** Ensure your CSS selectors are specific enough to avoid conflicts with styles from other libraries.  Use unique class names for your spinners to avoid unintended styling changes.\n\n* **JavaScript Conflicts:** Avoid name collisions between Spin.js variables and variables from other libraries.  While Spin.js has a very small API surface, this is generally not a significant issue.\n\n* **Library-Specific Integration:**  If you're using a framework like React, Angular, or Vue, refer to the integration example in the \"Customization and Styling\" section.  Each framework has its own approach to component lifecycle and DOM management, and handling these aspects properly will guarantee correct integration.\n\n\nRemember to always consult the documentation for both Spin.js and any other libraries you're integrating with to ensure compatibility and proper usage.\n\n\n## Examples and Use Cases\n\n### Loading Indicators\n\nThe most common use case for Spin.js is as a loading indicator.  Display a spinner while fetching data from an API, processing a large file, or performing any other time-consuming operation.  This provides visual feedback to the user, letting them know that the application is working.\n\n```javascript\nconst opts = { color: '#007bff', lines: 12, length: 10 }; // Example options\nconst spinner = new Spinner(opts);\nconst target = document.getElementById('loading-indicator');\n\n// Start spinner before API call\nspinner.spin(target);\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => {\n    // Update UI with data\n    // ...\n    spinner.stop(); // Stop spinner after data is received\n  })\n  .catch(error => {\n    // Handle error\n    spinner.stop(); // Stop spinner even on error\n  });\n```\n\nRemember to add a `<div id=\"loading-indicator\"></div>` to your HTML where the spinner will be displayed.\n\n\n### Progress Bars\n\nWhile Spin.js itself is not a progress bar, it can be effectively combined with one. You could display a progress bar alongside a spinner to provide more detailed feedback to the user. The spinner could indicate that an operation is in progress, while the progress bar displays the percentage of completion.  This would require additional logic within your application to manage both the spinner and the progress bar.\n\n\n### Interactive Spinners\n\nYou can make spinners more interactive by associating them with user events or actions.  For instance, a spinner could appear when a user clicks a button that initiates a long-running process, and disappear after the process is complete.  Or a spinner could be dynamically displayed within a form while data is submitted to the server.  This involves properly integrating the spinner's lifecycle (start and stop) with the events relevant to your application.\n\n```javascript\nconst button = document.getElementById('myButton');\nconst spinnerContainer = document.getElementById('spinnerContainer');\nconst spinner = new Spinner({ color: 'green' });\n\nbutton.addEventListener('click', () => {\n  spinner.spin(spinnerContainer);\n  // Perform some lengthy operation...\n  setTimeout(() => {\n    spinner.stop();\n    // Update the UI after the operation completes\n  }, 3000);\n});\n\n```\n\nThis example shows a spinner appearing only when the button is clicked.\n\n\n### Custom Animations\n\nSpin.js allows for custom CSS animations through the `animation` option.   Define a CSS animation using `@keyframes` and specify its name in the `animation` property when creating the spinner. This enables a high degree of control over the spinner's visual style.\n\n```css\n@keyframes myCustomSpin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* ... later in your JavaScript ... */\nconst spinner = new Spinner({\n    animation: 'myCustomSpin',\n    color: 'orange'\n});\nspinner.spin(document.getElementById('mySpinner'));\n```\n\nThis approach enables the creation of unique and visually appealing spinners beyond the default styles. Remember that complex animations might impact performance; strive for simplicity when creating custom animations.\n\n\n## Contributing to Spin.js\n\nThis section outlines how to contribute to the Spin.js project.  Contributions are welcome, whether it's bug fixes, new features, or improvements to the documentation.\n\n### Setting up Development Environment\n\n1. **Fork the Repository:** Fork the official Spin.js repository on GitHub to your own account.\n\n2. **Clone Your Fork:** Clone your forked repository to your local machine:\n\n   ```bash\n   git clone <your-fork-url>\n   ```\n\n3. **Install Dependencies:** Navigate to the project directory and install the necessary dependencies using npm or yarn:\n\n   ```bash\n   npm install  // or yarn install\n   ```\n\n4. **Set up a Development Server (optional):** While not strictly required for contributing code changes, setting up a development server can be helpful for testing and previewing your changes.  Spin.js doesn't have a built-in development server. You'll need to build one as needed, possibly using a simple HTTP server to serve the files.  This is usually only necessary for large-scale changes or new features that require extensive testing.\n\n5. **Run Tests (recommended):** Before making any changes, run the existing tests to ensure the project is working correctly on your machine. See the \"Testing and Debugging\" section for more details.\n\n### Code Style Guide\n\nSpin.js follows a consistent code style.  Adhere to these guidelines when submitting code changes:\n\n* **Indentation:** Use 2 spaces for indentation.\n* **Line Length:** Keep lines under 80 characters.\n* **Semicolons:** Use semicolons to terminate statements.\n* **Naming Conventions:** Use descriptive variable and function names.  Follow camelCase for variables and functions.\n* **Comments:** Write clear and concise comments to explain complex logic.\n\n\nEnsure your code is well-formatted and follows these guidelines before submitting a pull request.  Use a code formatter (e.g., Prettier) to help maintain consistent styling.\n\n\n### Testing and Debugging\n\nSpin.js uses a testing framework.  The specific testing framework may be listed in the project's README or documentation.  The tests typically cover the core functionality of the library.\n\n1. **Run Tests:** Run the tests using the command specified in the project's documentation (likely `npm test` or `yarn test`).  This will verify that the existing code functions correctly.\n\n2. **Write Tests:** When adding new features or fixing bugs, write corresponding tests to ensure your changes do not introduce regressions.  Good test coverage is essential for maintaining the quality of the project.\n\n3. **Debugging:** Use your browser's developer tools to debug your code. Set breakpoints in your code and step through the execution to identify issues.\n\n\n### Submitting Pull Requests\n\n1. **Create a Branch:** Create a new branch from the `main` or `master` branch for your changes:\n\n   ```bash\n   git checkout -b <your-branch-name>\n   ```\n\n2. **Make Your Changes:** Make your code changes and commit them with clear and descriptive commit messages.\n\n3. **Push Your Branch:** Push your branch to your forked repository:\n\n   ```bash\n   git push origin <your-branch-name>\n   ```\n\n4. **Create a Pull Request:** On GitHub, create a pull request from your branch to the main branch of the original Spin.js repository.  Provide a clear description of your changes and address any feedback from reviewers.\n\n5. **Address Feedback:** Respond to any comments or requests for changes from the project maintainers.  Make necessary revisions and push updates to your branch.\n\nRemember to follow the project's contribution guidelines, if any, when submitting your pull request.  A well-written pull request with clear explanations of your changes increases the likelihood of a timely review and acceptance.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"spinjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"spin.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}