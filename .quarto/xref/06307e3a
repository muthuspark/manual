{"entries":[],"headings":["introduction-to-ramda","what-is-ramda","why-use-ramda","key-concepts-immutability-and-point-free-style","setting-up-ramda","example-a-simple-ramda-program","core-functions","data-manipulation-map-filter-reduce","composition-compose-pipe","currying-and-partial-application","higher-order-functions","predicates-and-logic-functions","working-with-lists-and-arrays","iteration-map-reduce-filter","transformations-append-prepend-reverse-sort","searching-and-finding-find-indexof-contains","combining-arrays-concat-merge","unique-values-uniq-uniqby","working-with-objects","object-manipulation-assoc-dissoc-merge-pick-omit","object-traversal-and-access-path-props-values","object-creation-and-modification-frompairs-topairs","working-with-object-keys-keys-values-has","logic-and-control-flow","conditional-logic-ifelse-when-unless","boolean-logic-and-or-not","comparison-equals-gt-lt-lte-gte","type-checking-isnil-isarray-isobject-type","advanced-techniques","point-free-programming","currying-in-depth","composition-strategies","lens-and-functional-programming","working-with-ramdas-internal-data-structures","practical-applications-and-examples","data-validation","form-handling","asynchronous-operations","building-reusable-components","real-world-examples-and-case-studies","appendix","glossary-of-terms","complete-function-reference","troubleshooting","contributing-to-ramda"]}