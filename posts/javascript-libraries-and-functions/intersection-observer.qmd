---
title: "Intersection Observer - Documentation"
categories: [ "JavaScript Libraries and Functions" ]
---
## Intersection Observer API

### What is the Intersection Observer API?

The Intersection Observer API is a powerful browser feature that provides a mechanism to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.  In simpler terms, it lets you know when an element becomes visible (or partially visible) within another element, without constantly polling for changes. This is highly efficient and avoids performance issues associated with traditional methods like using `scroll` events.  Instead of actively checking for visibility, the browser notifies your code when the intersection changes.


### Why use Intersection Observer?

* **Improved Performance:**  Avoids the performance overhead of continuously checking element visibility using timers or event listeners on `scroll`.  This is crucial for applications with many elements or complex layouts.

* **Efficiency:**  Intersection Observer only triggers callbacks when a change in intersection occurs, reducing unnecessary computations.

* **Flexibility:** Allows observation of intersection with any ancestor element, not just the viewport. This opens possibilities for creating sophisticated, interactive elements within complex layouts.

* **Simplified Code:** The API provides a clean and concise way to handle visibility changes, making your code easier to read and maintain.


### When to use Intersection Observer?

Intersection Observer is ideal for scenarios where:

* **Lazy Loading:** Efficiently load images or other resources only when they are about to become visible in the viewport, improving initial page load times.

* **Infinite Scrolling:**  Detect when to load more content as the user scrolls down the page.

* **Ad Management:** Trigger ad display or tracking only when an ad element enters the viewport.

* **Animations and Effects:**  Initiate animations or effects based on element visibility.

* **Progress Indicators:** Display progress bars or other indicators based on the visibility of elements representing different steps in a process.

* **Performance Optimizations:** Detect when elements are visible to perform actions that are only needed when the user sees them.


### Browser Compatibility

Intersection Observer enjoys broad support across modern browsers.  However, it's important to check compatibility for older browsers and provide fallbacks if necessary.  You can use a polyfill (such as the one provided by [https://github.com/w3c/IntersectionObserver](https://github.com/w3c/IntersectionObserver)) for broader support. Consult a compatibility table like [caniuse.com](https://caniuse.com/?search=Intersection%20Observer) for the most up-to-date information.


### Basic Terminology

* **Root:** The element against which the intersection of the target is checked. If `null`, the root is the viewport.

* **Target:** The element being observed for intersection changes.

* **Threshold:** A number or an array of numbers between 0 and 1, specifying the intersection ratio at which callbacks are triggered.  A value of 0 means the callback triggers as soon as any part of the target intersects the root. A value of 1 means the callback triggers only when the target is fully visible within the root.  An array allows for triggering at multiple intersection ratios.

* **Intersection Ratio:** A value between 0 and 1 representing the percentage of the target element that is visible within the root.  0 means no intersection, 1 means complete intersection.

* **Intersection Observer Callback:** A function that is called whenever the intersection ratio of the target element changes. This function receives an array of `IntersectionObserverEntry` objects, each containing information about the intersection.

* **IntersectionObserverEntry:** An object containing information about the intersection of a single target element, including the `intersectionRatio`, `boundingClientRect`, `rootBounds`, `time`, and `isIntersecting` properties.


This introduction provides a foundational understanding for developers working with the Intersection Observer API.  The following sections will detail specific usage examples and advanced techniques.


## Core Concepts

This section delves into the core components of the Intersection Observer API, providing detailed explanations and examples.

### The `IntersectionObserver` Constructor

The `IntersectionObserver` constructor creates a new Intersection Observer instance.  It takes two arguments:

* **`callback` (required):** A function that will be executed whenever the intersection of a target element with its root changes.  This function receives an array of `IntersectionObserverEntry` objects as an argument.

* **`options` (optional):** An object that allows you to customize the observer's behavior.  This object can include the following properties:

    * **`root`:** The element that serves as the root for checking intersections.  If omitted or set to `null`, the viewport is used as the root.  Must be a valid DOM element.

    * **`rootMargin`:** A string specifying an offset to the root's bounding box. This allows you to adjust the intersection detection area. It follows the CSS `margin` syntax (e.g., "10px 20px 30px 40px", "10px", "10px 10px").

    * **`threshold`:** A number or array of numbers between 0 and 1, inclusive.  Specifies the intersection ratio(s) at which the callback should be triggered.  A single number represents a single threshold; an array allows for triggering at multiple ratios.  For instance, `0.5` will trigger when 50% of the target is visible; `[0, 0.25, 0.5]` will trigger at 0%, 25%, and 50% visibility.


**Example:**

```javascript
const observer = new IntersectionObserver(callback, {
  root: document.querySelector('#myRootElement'),
  rootMargin: '10px',
  threshold: 0.5
});
```


### The `IntersectionObserverEntry` Object

The `IntersectionObserverEntry` object contains information about the intersection of a single target element with its root.  Each entry in the array passed to the `callback` function is an `IntersectionObserverEntry` object.  It has the following properties:

* **`isIntersecting`:** A boolean indicating whether the target element is intersecting its root.

* **`intersectionRatio`:** A number between 0 and 1 indicating the percentage of the target element that is intersecting its root.

* **`boundingClientRect`:** A `DOMRect` object representing the size and position of the target element relative to the viewport.

* **`rootBounds`:** A `DOMRect` object representing the size and position of the root element relative to the viewport (or viewport itself if `root` is null).

* **`intersectionRect`:** A `DOMRect` object representing the size and position of the intersection area between the target and the root.

* **`time`:** A DOMHighResTimeStamp indicating the time when the intersection change occurred.

* **`target`:** The target element being observed.


### The `IntersectionObserverCallback` Function

The `IntersectionObserverCallback` function is the function passed to the `IntersectionObserver` constructor. It's called whenever the intersection status of observed targets changes.  It receives an array of `IntersectionObserverEntry` objects as its argument.  Each entry represents a single target and its current intersection status.

**Example:**

```javascript
function callback(entries, observer) {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      console.log('Element is intersecting:', entry.target);
      // Perform actions when the element intersects
    } else {
      console.log('Element is not intersecting:', entry.target);
      // Perform actions when the element is not intersecting
    }
  });
}
```


### Understanding `isIntersecting`

The `isIntersecting` property is a simple boolean value indicating whether any part of the target element is currently intersecting the root element.  It's a quick way to check for basic visibility.


### Understanding `intersectionRatio`

The `intersectionRatio` property is a more nuanced measure of visibility.  It's a floating-point number between 0 and 1, inclusive, representing the proportion of the target element's area that is visible within the root element.  A value of 0 means no intersection, while 1 means the target is completely visible within the root.


### Understanding `boundingClientRect`, `rootBounds`, and `intersectionRect`

These three `DOMRect` properties provide detailed geometric information:

* **`boundingClientRect`:**  Gives the size and position of the target element relative to the viewport.

* **`rootBounds`:** Gives the size and position of the root element relative to the viewport (or the viewport itself if `root` is `null`).

* **`intersectionRect`:** Gives the size and position of the area where the target and root overlap. This rectangle represents the actual visible portion of the target element within the root.


### Understanding `time`

The `time` property provides a high-resolution timestamp representing the moment when the intersection change occurred. This can be useful for performance analysis or for precisely timing actions related to visibility changes.


### Root, rootMargin, and threshold Parameters

These parameters control how the Intersection Observer behaves:

* **`root`:** Defines the ancestor element against which intersection is determined.  `null` uses the viewport.

* **`rootMargin`:**  Allows adding margins to the root's bounding box.  Useful for triggering actions slightly before or after the target is fully visible within the root's boundaries.  A positive margin expands the intersection area; a negative margin shrinks it.

* **`threshold`:**  Determines the intersection ratio(s) that trigger the callback.  A single number or an array of numbers between 0 and 1 can be used.  A threshold of 0.5 means the callback triggers when 50% of the target is visible. Using an array allows for actions at multiple visibility percentages.


These core concepts are fundamental to using the Intersection Observer API effectively.  The next sections will demonstrate practical applications and advanced techniques.


## Using the Intersection Observer API

This section provides practical examples demonstrating how to use the Intersection Observer API in various scenarios.


### Creating an Intersection Observer Instance

The first step is to create an `IntersectionObserver` instance.  This requires a callback function and an optional options object:

```javascript
const observer = new IntersectionObserver(callback, {
  root: null, // or a DOM element
  rootMargin: '0px', //optional offset
  threshold: 0.5 // or an array of thresholds [0, 0.25, 0.5]
});
```

*   **`callback`:**  A function that will be executed whenever the observed element's intersection changes.  This function receives an array of `IntersectionObserverEntry` objects as its argument.
*   **`options`:**  An object containing optional parameters: `root`, `rootMargin`, and `threshold`.  `root` specifies the element against which intersection is checked (default is the viewport if `null`).  `rootMargin` adds an offset to the root's bounding box. `threshold` specifies the intersection ratio(s) at which the callback should be triggered.


### Observing a Target Element

After creating the observer, you need to start observing target elements using the `observe()` method:

```javascript
const targetElement = document.querySelector('#myTargetElement');
observer.observe(targetElement);
```

This adds the `targetElement` to the observer's list of monitored elements.  The observer will now start tracking its intersection with the root element and trigger the callback function whenever the intersection changes.


### Handling Intersection Changes

The `callback` function receives an array of `IntersectionObserverEntry` objects, one for each observed element that has experienced an intersection change.  You can iterate over these entries and perform actions based on the `isIntersecting` and `intersectionRatio` properties:

```javascript
function callback(entries, observer) {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      // Element is intersecting, perform actions
      console.log('Element is intersecting:', entry.target);
      // Example: Load an image
      if (entry.target.tagName === 'IMG') {
        entry.target.src = entry.target.dataset.src; //Lazy Loading
      }
    } else {
      // Element is not intersecting, perform actions
      console.log('Element is not intersecting:', entry.target);
      // Example: Remove Placeholder image
    }
  });
}
```


### Disconnecting the Observer

When you no longer need to observe elements, disconnect the observer using the `disconnect()` method:

```javascript
observer.disconnect();
```

This stops the observer from monitoring any elements and prevents further callback executions.  It's essential for efficient resource management, especially when dealing with many observers.


### Example: Lazy Loading Images

```javascript
const lazyImages = document.querySelectorAll('img[data-src]');
const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const img = entry.target;
      img.src = img.dataset.src;
      img.classList.remove('lazy'); //For Visual Placeholder Removal
      observer.unobserve(img);
    }
  });
}, {
  threshold: 0.5 // Load image when 50% visible
});

lazyImages.forEach(img => observer.observe(img));
```


### Example: Infinite Scrolling

```javascript
//This is a simplified example, a fully featured implementation
//would require more sophisticated pagination logic.

let loading = false;
const container = document.getElementById('content-container');
const observer = new IntersectionObserver(entries => {
  if(entries[0].isIntersecting && !loading) {
    loading = true;
    fetchMoreData().then(() => loading = false);
  }
}, {
  root: null,
  threshold: 0.1 //Trigger fetch when 10% of the end of the page is visible
});

const sentinel = document.createElement('div'); //sentinel element to observe
sentinel.id = 'sentinel';
container.appendChild(sentinel);
observer.observe(sentinel);

// Placeholder for data fetching logic. Replace this with your data fetching API call.
async function fetchMoreData() {
  console.log('Fetching more data...');
  //Simulate network latency
  await new Promise(res => setTimeout(res, 1000));
  //Append more data elements to the container.
  console.log('Data fetched and appended.');
}
```



### Example: Tracking Element Visibility

```javascript
const element = document.getElementById('myElement');
const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      console.log('Element is visible:', entry.intersectionRatio);
    } else {
      console.log('Element is hidden');
    }
  });
});

observer.observe(element);
```


### Example: Implementing a Progress Bar Based on Visibility

This example requires a progress bar element to be present in the HTML, updated based on the intersectionRatio of multiple elements.

```javascript
const progress = document.getElementById('progress');
const elements = document.querySelectorAll('.progress-step');
let totalVisibleRatio = 0;
const observer = new IntersectionObserver(entries => {
    totalVisibleRatio = 0;
    entries.forEach(entry => {
        totalVisibleRatio += entry.intersectionRatio;
    });
    const percentage = Math.round((totalVisibleRatio / elements.length) * 100);
    progress.style.width = `${percentage}%`;
}, {threshold: [0, 0.25, 0.5, 0.75, 1]});

elements.forEach(element => observer.observe(element));

```

Remember to adapt these examples to your specific needs and context.  Properly structuring your HTML and CSS is crucial for successful implementation.  Consider adding error handling and ensuring compatibility for older browsers using polyfills.


## Advanced Techniques

This section explores more sophisticated uses of the Intersection Observer API, addressing performance considerations and integration with other technologies.


### Using Multiple Thresholds

Instead of a single `threshold` value, you can provide an array of thresholds.  This allows the callback to fire at multiple intersection ratios, providing finer-grained control over how you handle visibility changes.

```javascript
const observer = new IntersectionObserver(callback, {
  threshold: [0, 0.25, 0.5, 0.75, 1] //Triggers at 0%, 25%, 50%, 75%, and 100% visibility
});

function callback(entries, observer) {
  entries.forEach(entry => {
    console.log(`Element is ${entry.isIntersecting ? '' : 'not '}intersecting, intersectionRatio: ${entry.intersectionRatio}`);
    // Perform different actions based on entry.intersectionRatio
  });
}
```

This allows for different actions based on the degree of visibility. For example, you might load a low-resolution image at 25% visibility and a high-resolution one only at 75% or 100%.


### Working with Different Root Elements

The `root` option allows you to specify an ancestor element other than the viewport as the root for intersection detection. This is useful for creating more complex layouts and interactive components.

```javascript
const container = document.getElementById('myContainer');
const observer = new IntersectionObserver(callback, { root: container });
observer.observe(document.getElementById('myElement'));
```

Now, the observer checks the intersection of `myElement` relative to `myContainer`, not the viewport. This is helpful for observing elements within scrollable containers or other complex structures.


### Using `rootMargin` for Custom Margins

The `rootMargin` option lets you add margins to the root's bounding box.  This effectively expands or shrinks the area considered for intersection.  Positive values enlarge the area, while negative values shrink it.  This is valuable for anticipating visibility or delaying actions.

```javascript
const observer = new IntersectionObserver(callback, {
  rootMargin: '50px 0px -50px 0px', //50px top margin, 50px bottom margin removed
  threshold: 0.5
});
```

This example adds a 50px top margin and removes a 50px bottom margin from the root's bounds, making the intersection trigger earlier (top) and later (bottom) than without `rootMargin`.


### Optimizing Performance for Many Observed Elements

Observing a large number of elements can impact performance.  Here are some optimization strategies:

* **Use appropriate thresholds:** Avoid overly frequent callbacks by using fewer or higher thresholds.
* **Unobserve elements when no longer needed:** Use `unobserve()` to remove elements from observation once you're done with them.  This is particularly important for lazy-loading where images should be unobserved after loading.
* **Batch observations:** Instead of observing individual elements, consider grouping related elements for better performance.
* **Throttle or debounce callbacks:**  If the callback involves computationally expensive operations, throttle or debounce it to limit execution frequency.


### Handling Unobserved Elements (Disconnect and Re-observe)

Sometimes, you might need to temporarily stop observing elements and then start observing them again later.  This is easily done using `disconnect()` and `observe()`.

```javascript
observer.disconnect(); // Stop observing
// ... some other code ...
observer.observe(element); // Start observing again
```

This is useful when dynamically adding or removing elements to the DOM or when you only want to observe elements under specific conditions.


### Integration with Other APIs (e.g., Animation Libraries)

The Intersection Observer API integrates well with animation libraries like GSAP, Anime.js, or Velocity.js. You can trigger animations based on element visibility.

```javascript
// Example with GSAP
const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      gsap.to(entry.target, { opacity: 1, y: 0, duration: 1 }); // Animate element's opacity and position
    }
  });
});

// Observe elements you want to animate
// ...
```

This shows how Intersection Observer's visibility data can trigger animation effects smoothly and efficiently, enhancing user experience and application performance.  Replace `gsap` with your preferred animation library's API.  Remember to include the animation library in your project. Remember to handle cases where the element leaves the viewport and potentially reverse the animation or reset properties.


## Troubleshooting and Best Practices

This section addresses common issues, performance optimization, accessibility considerations, and debugging strategies related to the Intersection Observer API.


### Common Errors and Their Solutions

* **`TypeError: Failed to construct 'IntersectionObserver': 1 argument required, but only 0 present`:** This error occurs when the `IntersectionObserver` constructor is called without the required callback function. Ensure you provide a callback function as the first argument.

* **`Uncaught TypeError: Cannot read properties of undefined (reading 'observe')`:** This often means that `observer` is undefined because the Intersection Observer wasn't correctly created or the variable is being accessed before initialization. Double-check your `IntersectionObserver` instantiation and ensure the code that uses `observer` runs after its creation.

* **Callback function not being triggered:** Verify that:
    * The target element is actually intersecting the root (check using browser developer tools).
    * The `threshold` value is appropriate for your needs; a very high threshold may never be met.
    * The root element exists and is correctly specified.
    * There are no errors preventing the callback from executing (check the console).

* **Unexpected intersection ratios:**  Incorrect `rootMargin` settings can lead to unexpected intersection ratios. Carefully review your `rootMargin` values and ensure they reflect your intended behavior.


### Performance Considerations and Optimization Strategies

* **Minimize the number of observed elements:** Avoid observing unnecessary elements. Only observe elements whose visibility truly needs to be tracked.

* **Use appropriate thresholds:**  Avoid overly frequent callbacks by using higher threshold values or a smaller number of threshold values.  Choose thresholds that match the granularity needed for your application logic.

* **Un-observe elements when done:** When an element's visibility state is no longer needed, use `observer.unobserve(element)` to remove it from observation. This is especially critical for lazy-loading images, where once an image is loaded, it should be unobserved.

* **Use `rootMargin` strategically:** Carefully choose `rootMargin` values to reduce the number of intersection changes.

* **Batch similar elements:** If multiple elements require similar actions based on their visibility, combine their observations to reduce overhead.

* **Debounce or throttle the callback:** If your callback function performs expensive computations, debounce or throttle it to prevent performance degradation. This reduces the frequency of callback executions.

* **Use Intersection Observer effectively with other optimization techniques:** Combine Intersection Observer with other performance optimization techniques such as lazy loading of scripts or CSS.


### Accessibility Considerations

* **Ensure functionality without JavaScript:**  Provide fallback mechanisms for users with JavaScript disabled or using assistive technologies.  Lazy-loading, for instance, should have appropriate placeholders visible even if JavaScript fails.

* **Avoid visual changes dependent solely on Intersection Observer:** Avoid relying solely on Intersection Observer for crucial visual changes or functionality that could impact screen readers or other assistive technology.  Alternative approaches using ARIA attributes or CSS should be considered for robustness.

* **Provide appropriate ARIA attributes for visual changes triggered by Intersection Observer:**  Use ARIA attributes (like `aria-hidden`, `aria-describedby`, etc.) to make the changes triggered by the observer understandable for assistive technologies.


### Debugging Techniques

* **Use the browser's developer tools:**  The browser's developer tools (especially the console) are invaluable for debugging Intersection Observer issues.  Check for errors, inspect the `IntersectionObserverEntry` objects, and step through your code.

* **Log intersection events:** Add `console.log()` statements within your callback function to monitor the intersection events and their associated data.  This allows you to pinpoint when and why the callback is (or isn't) being triggered.

* **Simplify your code:** To isolate issues, temporarily remove unnecessary features or logic from your code.  This can help narrow down the source of the problem.

* **Test with different browsers and devices:** Test your implementation in various browsers and devices to ensure consistent behavior.  Use a polyfill if you need to support older browsers that don't natively support Intersection Observer.


### Alternative Approaches for Specific Use Cases

While Intersection Observer is excellent for many visibility-based tasks, some use cases might benefit from alternative approaches:

* **Simple visibility checks:** For very basic visibility checks, a simpler approach using element's boundingClientRect and window scroll events might suffice, particularly in scenarios with only a few elements.  However, Intersection Observer is significantly more efficient for many elements.

* **Complex animations:** For highly complex animations, using specialized animation libraries with their built-in visibility handling might be preferred.

* **Specific browser requirements:**  For very old browsers, use a polyfill.  For highly specialized situations, there could be alternative browser APIs or solutions, depending on the exact scenario.

Remember that Intersection Observer offers an efficient and powerful solution for many visibility-related tasks. By understanding its capabilities and limitations and following the best practices outlined above, developers can leverage this API to create responsive and performant web applications.


## Appendix

This appendix provides supplementary information to aid in the understanding and application of the Intersection Observer API.


### Complete Code Examples

This section presents complete, runnable code examples for the scenarios described earlier in the manual.  Remember to include necessary HTML structure for these examples to function correctly.

**1. Lazy Loading Images:**

```html
<!DOCTYPE html>
<html>
<head>
<title>Lazy Loading Images</title>
<style>
.lazy {
  opacity: 0;
  transition: opacity 0.5s ease-in-out;
}
.lazy.loaded {
  opacity: 1;
}
</style>
</head>
<body>

<img class="lazy" data-src="image1.jpg" alt="Image 1">
<img class="lazy" data-src="image2.jpg" alt="Image 2">
<img class="lazy" data-src="image3.jpg" alt="Image 3">

<script>
const lazyImages = document.querySelectorAll('img[data-src]');
const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const img = entry.target;
      img.src = img.dataset.src;
      img.classList.add('loaded');
      observer.unobserve(img);
    }
  });
}, {
  threshold: 0.5
});

lazyImages.forEach(img => observer.observe(img));
</script>

</body>
</html>
```

**2. Infinite Scrolling (Simplified):**

```html
<!DOCTYPE html>
<html>
<head>
<title>Infinite Scrolling</title>
</head>
<body>
<div id="content-container">
  <!-- Content goes here -->
  <div id="sentinel"></div>
</div>

<script>
let loading = false;
const container = document.getElementById('content-container');
const observer = new IntersectionObserver(entries => {
  if (entries[0].isIntersecting && !loading) {
    loading = true;
    fetchMoreData().then(() => loading = false);
  }
}, {
  root: null,
  threshold: 0.1
});

const sentinel = document.getElementById('sentinel');
observer.observe(sentinel);

async function fetchMoreData() {
  console.log('Fetching more data...');
  await new Promise(res => setTimeout(res, 1000));
  //Append new content here
  console.log('Data fetched and appended.');
}
</script>
</body>
</html>
```

**(Remember to replace placeholder image URLs and implement actual data fetching in the Infinite Scrolling example.)**  These are simplified examples; a production-ready implementation would require more robust error handling and data management.


### Browser Compatibility Table (Detailed)

| Browser             | Version     | Support          | Notes                                      |
|----------------------|--------------|-------------------|----------------------------------------------|
| Chrome              | 65+         | Full              |                                              |
| Firefox             | 66+         | Full              |                                              |
| Safari              | 12.1+       | Full              |                                              |
| Edge                 | 79+         | Full              |                                              |
| Opera               | 52+         | Full              |                                              |
| Internet Explorer  |  N/A        | No Support       | Requires a polyfill                            |
| Android Browser     | Varies       | Varies            | Check specific version compatibility          |
| iOS Safari          | Varies       | Varies            | Check specific version compatibility          |


**Note:**  This table is subject to change. Always refer to [caniuse.com](https://caniuse.com/?search=Intersection%20Observer) for the most up-to-date information.  "Full Support" means full implementation of the spec.


### Glossary of Terms

* **Intersection Observer API:** A browser API that allows asynchronous observation of changes in the intersection of a target element with its root.

* **Root:** The element used as the reference for determining the intersection of a target element.  If `null`, the viewport is used.

* **Target:** The element whose intersection with the root is being observed.

* **Threshold:** A number or array of numbers indicating the intersection ratio at which the callback is triggered.

* **Intersection Ratio:**  A value between 0 and 1 representing the percentage of the target element visible within the root.

* **Intersection Observer Entry:** An object containing information about the intersection of a target element with its root.

* **Intersection Observer Callback:** A function called when an intersection change occurs.

* **`rootMargin`:** A CSS margin-like string that adds an offset to the root element's bounding box.

* **`boundingClientRect`:** A `DOMRect` representing the size and position of the element relative to the viewport.

* **`rootBounds`:** A `DOMRect` representing the size and position of the root element relative to the viewport.

* **`intersectionRect`:** A `DOMRect` representing the intersection rectangle of the target and root.


### Further Reading and Resources

* **MDN Web Docs - Intersection Observer API:** [https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)  This is the official documentation for the API.

* **Can I Use - Intersection Observer:** [https://caniuse.com/?search=Intersection%20Observer](https://caniuse.com/?search=Intersection%20Observer)  Check for browser compatibility.

* **Polyfill for Intersection Observer:** [https://github.com/w3c/IntersectionObserver](https://github.com/w3c/IntersectionObserver)  A polyfill to add support for older browsers.


This appendix provides additional information to aid developers in their usage of the Intersection Observer API.  Always refer to the latest official documentation for the most accurate and up-to-date details.

