---
title: "SignalR - Documentation"
categories: [ "JavaScript Libraries and Functions" ]
---


### What is SignalR?

SignalR is a free and open-source library that simplifies the process of adding real-time web functionality to your applications.  It allows bidirectional communication between a server and clients, enabling features like instant messaging, live dashboards, and real-time notifications.  Unlike traditional request/response models where the client must constantly poll the server for updates, SignalR uses persistent connections, pushing updates to the client as soon as they become available.  This significantly improves responsiveness and user experience.  It handles the complexities of managing these persistent connections, allowing developers to focus on application logic rather than low-level networking details.  SignalR supports multiple transports, automatically selecting the best option for the client's capabilities.


### Key Concepts: Hubs, Clients, and Connections

* **Hubs:**  Hubs are the central components of a SignalR application. They act as a bridge between clients and the server, enabling clients to invoke server-side methods and the server to invoke client-side methods.  Methods defined within a hub can be called from either the server or the client. Hubs use a contract-based approach, allowing you to define the methods available to clients.

* **Clients:** Clients are the web applications (e.g., websites, mobile apps) that connect to the SignalR server. They can receive messages and invoke methods on the server through the hub.  SignalR provides client libraries for various platforms including JavaScript, .NET, Java, and others, simplifying integration into different applications.

* **Connections:**  A connection represents a single client's ongoing communication with the SignalR server. SignalR manages these connections, handling connection establishment, maintenance, and disconnections gracefully.  Information about the connection can be used within the hub to provide features like personalized messages or connection tracking.


### Benefits of Using SignalR

* **Real-time updates:** Push notifications and updates to clients without polling.
* **Simplified development:**  High-level API abstracts away the complexities of managing persistent connections.
* **Scalability:**  Designed to handle many concurrent connections.
* **Cross-platform support:**  Client libraries for multiple platforms.
* **Multiple transport options:** Automatically chooses the best transport (WebSockets, Server-Sent Events, etc.) based on client capabilities.


### When to Use SignalR

SignalR is a great choice when your application requires real-time, bidirectional communication between the server and clients.  Consider using SignalR for features like:

* **Live dashboards:** Displaying dynamic, constantly updating information.
* **Chat applications:** Enabling instant messaging between users.
* **Online games:**  Providing real-time interaction between players.
* **Real-time notifications:**  Sending alerts or updates to users instantly.
* **Collaborative editing:** Allowing multiple users to edit the same document concurrently.


### Comparison with other technologies

Other technologies can provide some aspects of real-time functionality, but SignalR offers a more comprehensive and easier-to-use solution:

* **Polling:**  Repeatedly requesting data from the server.  Inefficient and leads to increased server load. SignalR avoids this.
* **WebSockets:** A lower-level protocol for real-time communication.  SignalR builds on top of WebSockets and provides a higher-level API, simplifying development and handling fallback transports when WebSockets aren't available.
* **Server-Sent Events (SSE):**  Allows the server to push updates to the client.  However, SSE is unidirectional; clients cannot send data back to the server easily. SignalR offers bidirectional communication.
* **Long Polling:** A technique to reduce polling overhead.  However, it's still less efficient than SignalR's persistent connection approach.


SignalR provides a superior solution for most real-time application needs by abstracting away the complexity of underlying technologies, while providing excellent performance and scalability.


## Setting up a SignalR Project

### Installing the SignalR Client Library

The process for installing the SignalR client library depends on the client platform you're targeting.  Here's a general overview:

* **JavaScript (for web clients):**  Use a package manager like npm or yarn.  For example, with npm:  `npm install @microsoft/signalr`  This installs the core SignalR client.  You might also need additional packages depending on your chosen framework (e.g., `@aspnet/signalr-browser` for ASP.NET Core clients).

* **.NET (for .NET clients):** Use NuGet Package Manager. Search for and install the `Microsoft.AspNetCore.SignalR.Client` package.

* **Other platforms:** SignalR client libraries exist for various platforms (e.g., Java, Python). Consult the official SignalR documentation for specific installation instructions for your chosen platform.  These libraries are typically available through platform-specific package managers.


### Creating a Hub

A Hub is a class that acts as the central point for communication between the server and clients.  In ASP.NET Core, create a class inheriting from `Hub`:

```csharp
using Microsoft.AspNetCore.SignalR;

public class ChatHub : Hub
{
    public async Task SendMessage(string user, string message)
    {
        await Clients.All.SendAsync("ReceiveMessage", user, message);
    }
}
```

This `ChatHub` defines a method `SendMessage` that can be called from a client.  The `Clients.All.SendAsync` method sends the `ReceiveMessage` method to all connected clients.  The `ReceiveMessage` method is a client-side function (defined in the client code) that handles the incoming message.


### Configuring the SignalR Server

SignalR server configuration primarily happens within the `Startup.cs` (or `Program.cs` in .NET 6 and later) file in ASP.NET Core.  You need to add SignalR services and map the hub route:

```csharp
// .NET 6 and later (Program.cs)
builder.Services.AddSignalR();
app.MapHub<ChatHub>("/chatHub");

// Older .NET Core versions (Startup.cs)
public void ConfigureServices(IServiceCollection services)
{
    services.AddSignalR();
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    app.UseRouting();
    app.UseEndpoints(endpoints =>
    {
        endpoints.MapHub<ChatHub>("/chatHub");
    });
}
```

This registers the SignalR services and maps the `ChatHub` to the `/chatHub` URL. Clients will connect to this URL.  Further configuration options, like enabling detailed logging, can be added as needed.


### Establishing a Connection to the Server

On the client-side, you'll use the SignalR client library to establish a connection to the server.  Here's an example using JavaScript:

```javascript
const connection = new signalR.HubConnectionBuilder()
    .withUrl("/chatHub")
    .build();

connection.on("ReceiveMessage", (user, message) => {
    // Handle the incoming message
    console.log(user + ": " + message);
});

connection.start().catch(err => console.error(err));

// Send a message
connection.invoke("SendMessage", "User1", "Hello, world!").catch(err => console.error(err));
```

This code creates a connection to `/chatHub`, registers a handler for the `ReceiveMessage` method, starts the connection, and then sends a message.  Error handling is crucial. Remember to replace `/chatHub` with your actual hub URL.


### Example Project Setup (ASP.NET Core)

1. **Create a new ASP.NET Core Web Application:** Use the default template or choose the Web API template.

2. **Install the SignalR NuGet package:** In the project's NuGet Package Manager, search for and install `Microsoft.AspNetCore.SignalR`.

3. **Create the Hub:** Add a class as shown in the "Creating a Hub" section.

4. **Configure SignalR:** Update `Startup.cs` (or `Program.cs`) as shown in the "Configuring the SignalR Server" section.

5. **Create a Client-Side Application:** Create a separate web application (e.g., using React, Angular, Vue, or plain JavaScript) or integrate directly into your existing one.

6. **Install the SignalR client library:**  Install the appropriate SignalR client library for your chosen client-side framework (see "Installing the SignalR Client Library").

7. **Connect to the Server and Implement Client-Side Logic:**  Use the SignalR client library to connect to the server and handle incoming messages as shown in the "Establishing a Connection to the Server" section.


This basic setup provides a foundation for building a real-time application using SignalR in ASP.NET Core.  You'll expand upon this by adding more complex hub methods and implementing rich client-side UI elements.


## Client-Side Development

### Connecting to the Hub

The first step in client-side development is establishing a connection to the SignalR hub on the server.  This involves creating a `HubConnection` object and starting the connection. The connection URL should point to the route defined in your server-side configuration (e.g., `/chatHub`).  Here's how you'd do it using the SignalR JavaScript client:

```javascript
const connection = new signalR.HubConnectionBuilder()
    .withUrl("/chatHub") // Replace with your hub URL
    .build();

connection.start()
    .then(() => console.log('Connection started!'))
    .catch(err => console.error('Connection failed: ', err));
```

The `withUrl` method specifies the connection URL.  The `start()` method initiates the connection; the promise resolves when the connection is successfully established and rejects if an error occurs.  Always include robust error handling.


### Sending and Receiving Data

Communication between the client and the server happens through methods defined in the hub. Clients invoke server-side methods using `connection.invoke()`, and the server pushes data to the client using the `SendAsync()` method within the hub.

**Client-side invocation (JavaScript):**

```javascript
connection.invoke("SendMessage", "user123", "Hello from client!")
    .catch(err => console.error(err));
```

This code invokes the `SendMessage` method on the server, passing "user123" and "Hello from client!" as arguments.

**Server-side (C#):**

```csharp
public class ChatHub : Hub
{
    public async Task SendMessage(string user, string message)
    {
        await Clients.All.SendAsync("ReceiveMessage", user, message);
    }
}
```

The server's `SendMessage` method then uses `Clients.All.SendAsync` to send the `ReceiveMessage` message to all connected clients.

**Client-side receiving (JavaScript):**

```javascript
connection.on("ReceiveMessage", (user, message) => {
    console.log(`${user}: ${message}`);
    // Update UI with the received message
});
```

This registers a handler for the `ReceiveMessage` method.  When the server sends this message, the callback function will be executed, and you can update the user interface accordingly.


### Handling Connection Events

SignalR provides events to manage different connection states:

* **`connection.on('connecting', () => { ... });`**:  Triggered when the connection is attempting to connect.
* **`connection.on('connected', () => { ... });`**: Triggered when the connection is successfully established.
* **`connection.on('reconnecting', () => { ... });`**: Triggered when the connection is attempting to reconnect after a disconnection.
* **`connection.on('reconnected', () => { ... });`**: Triggered when the reconnection is successful.
* **`connection.on('disconnected', (error) => { ... });`**: Triggered when the connection is closed.  The `error` parameter provides information about the reason for disconnection (if any).
* **`connection.onclose(error => { ... });`**:  An alternative way to handle disconnections.

Handle these events to provide feedback to the user and to take appropriate actions, such as retrying the connection or displaying an error message.


### Managing Client State

Managing client-side state is crucial for maintaining context across multiple messages.  Use variables within your client-side code to store information relevant to the connection and the user's session.  Consider using local storage or session storage for persistence across page reloads, if needed.


### Error Handling and Reconnection

SignalR offers built-in mechanisms for handling errors and reconnections.  The `connection.start()` method returns a promise that allows you to catch errors during the connection process.  Add error handling within the `connection.on` event handlers to catch errors during data transmission.  Configure automatic reconnection by setting `withAutomaticReconnect` in the `HubConnectionBuilder`:

```javascript
const connection = new signalR.HubConnectionBuilder()
    .withUrl("/chatHub")
    .withAutomaticReconnect([0, 2000, 5000]) // Retry after 0, 2, and 5 seconds
    .build();
```


### Using the SignalR JavaScript Client Library

The SignalR JavaScript client library provides a simple and efficient way to interact with SignalR hubs.  Make sure to include the library in your HTML file:


```html
<script src="https://cdn.jsdelivr.net/npm/@microsoft/signalr@7.0.9/dist/browser/signalr.min.js"></script>  </html>
```

(Replace the URL with the correct CDN link or the path to your local copy).

Then, use the methods described above to connect to the hub, send and receive messages, and manage the connection lifecycle.  Remember to consult the official SignalR documentation for the most up-to-date information and detailed API references.


## Server-Side Development (Hubs)

### Defining Hub Methods

Hub methods are the core of server-side SignalR functionality.  They define the actions clients can invoke and the data the server can send to clients.  Methods are defined as `async Task` methods within your hub class (inheriting from `Hub`).  These methods can accept parameters from the client and return values (though it's often better to use unidirectional pushes for better performance).


```csharp
using Microsoft.AspNetCore.SignalR;

public class ChatHub : Hub
{
    public async Task SendMessage(string user, string message)
    {
        await Clients.All.SendAsync("ReceiveMessage", user, message); //Broadcasting
    }

    public async Task JoinGroup(string groupName)
    {
        await Groups.AddToGroupAsync(Context.ConnectionId, groupName);
    }

    public string GetServerTime()
    {
        return DateTime.Now.ToString(); //Simple return value
    }
}
```


This example shows `SendMessage`, which broadcasts a message, `JoinGroup`, which adds a client to a group, and `GetServerTime`, demonstrating a method returning a value.  The `async` keyword is crucial for non-blocking operations and maintaining responsiveness.



### Handling Client Connections

SignalR provides events to monitor client connections and disconnections:

* **`OnConnectedAsync()`:**  Called when a client connects to the hub.  Use this for tasks like logging connection events, initializing user data, or adding the client to default groups.

* **`OnDisconnectedAsync(Exception exception)`:** Called when a client disconnects.  The `exception` parameter provides information about the reason for disconnection. Use it for cleanup tasks like removing the client from groups or updating user status.


```csharp
public class ChatHub : Hub
{
    public override async Task OnConnectedAsync()
    {
        await Clients.Caller.SendAsync("ConnectionEstablished"); // Send a message to the connected client
        await base.OnConnectedAsync();
    }

    public override async Task OnDisconnectedAsync(Exception exception)
    {
        await Clients.Others.SendAsync("UserDisconnected", Context.ConnectionId); // Notify other clients
        await base.OnDisconnectedAsync(exception);
    }
}
```


### Broadcasting Messages to Clients

SignalR simplifies broadcasting messages to connected clients using the `Clients` property of the `Hub` class:

* **`Clients.All`:** Sends the message to all connected clients.
* **`Clients.Others`:** Sends the message to all clients except the caller.
* **`Clients.Caller`:** Sends the message only to the client that invoked the method.
* **`Clients.Group(groupName)`:** Sends the message to clients in a specific group.
* **`Clients.User(userId)`:** Sends the message to clients associated with a specific user ID (requires user identification).


```csharp
await Clients.All.SendAsync("BroadcastMessage", "Message for everyone!");
await Clients.Others.SendAsync("MessageToOthers", "This is for everyone but you!");
```

The first line sends a broadcast message to all connected clients.  The second line sends to everyone except the client who initiated the hub method. The `SendAsync` method uses the client-side method name as the first argument.



### Grouping Clients

Grouping allows sending messages to subsets of connected clients.  Use `Groups.AddToGroupAsync`, `Groups.RemoveFromGroupAsync`, and `Groups.RemoveFromGroupsAsync`  to manage group membership:


```csharp
await Groups.AddToGroupAsync(Context.ConnectionId, "RoomA");
await Clients.Group("RoomA").SendAsync("RoomAMessage", "Message only for RoomA");
```

This adds the current client to the "RoomA" group and then sends a message only to clients within that group.


### Managing Connections

You can access information about the current connection through the `Context` property:

* **`Context.ConnectionId`:** A unique identifier for the current connection.  Essential for tracking individual clients and removing them from groups.

* **`Context.UserIdentifier`:** (If authentication is implemented) an identifier for the user associated with the connection.


Use this information to manage connections, personalize messages, and enforce security rules.


### Implementing Business Logic within Hubs

While it's possible to put some business logic directly in the hub, for larger applications it's generally better practice to keep the hub lean and delegate complex operations to separate services. The hub should primarily focus on communication, while services handle data processing and persistence.

Inject dependencies (services) into your hub via constructor injection to access these services:

```csharp
public class ChatHub : Hub
{
    private readonly IChatService _chatService;

    public ChatHub(IChatService chatService)
    {
        _chatService = chatService;
    }

    public async Task SendMessage(string user, string message)
    {
        //Store message in database using _chatService
        await _chatService.SaveMessageAsync(user, message);
        await Clients.All.SendAsync("ReceiveMessage", user, message);
    }
}
```



### Security Considerations

Security is paramount in real-time applications.  Always validate and sanitize data received from clients to prevent injection attacks.  Implement robust authentication and authorization to control access to hub methods and data.  Avoid exposing sensitive information through hub methods.  Consider using HTTPS to secure the connection.  Use features like connection id whitelisting (or blacklisting) to enhance security.  Regularly review and update SignalR libraries to benefit from security patches.


## Advanced SignalR Techniques

### Streaming Data

Streaming allows sending a sequence of data items to the client without waiting for the entire data set to be processed. This is ideal for scenarios like live data feeds or long-running operations.  On the server-side, use `Stream` method to send data incrementally. On the client, use the appropriate asynchronous method for receiving the stream.


**Server-side (C#):**

```csharp
public async IAsyncEnumerable<string> StreamData()
{
    for (int i = 0; i < 10; i++)
    {
        await Task.Delay(1000); // Simulate delay
        yield return $"Data item {i}";
    }
}
```

**Client-side (JavaScript):**

```javascript
const stream = await connection.stream("StreamData");
for await (const data of stream) {
    console.log(data);
}
```


### Handling Large Messages

Sending very large messages can impact performance.  Consider these approaches:

* **Chunking:** Break large messages into smaller chunks and send them individually.  The client reassembles the message.

* **Compression:** Compress data before sending to reduce message size.

* **Alternatives:** For very large datasets, consider using other technologies better suited for bulk data transfer like a separate REST API endpoint or a message queue, rather than pushing everything through SignalR.


### Scaling SignalR Applications

As your application grows, you may need to scale SignalR to handle a large number of concurrent connections.  Consider these options:

* **Load Balancing:** Distribute the load across multiple SignalR servers using a load balancer.

* **Redis Backplane:** Use Redis to enable communication between multiple SignalR servers, allowing messages to be distributed efficiently.

* **Azure SignalR Service:** A fully managed service that handles scaling and infrastructure management for you.  This is often the simplest and most scalable approach.


### Implementing Custom Transports

While SignalR automatically selects the best transport, you can customize the transport used for communication:

* **WebSockets:** The most efficient but requires browser support.

* **Server-Sent Events (SSE):**  A unidirectional transport useful for scenarios where the server primarily pushes data to clients.

* **Long Polling:** A fallback transport for older browsers.

You'd typically configure this through the `HubConnectionBuilder` but it's rarely needed with modern browsers that support WebSockets.  SignalR's fallback mechanisms usually handle this automatically.


### Integrating with other technologies

SignalR can integrate with other technologies to build comprehensive applications:

* **Authentication:** Integrate with identity providers (e.g., ASP.NET Identity, Azure Active Directory) to authenticate users and authorize access to hub methods.

* **Databases:** Use databases to store and retrieve data related to your application's state.

* **Messaging Queues:** Use messaging queues (e.g., RabbitMQ, Azure Service Bus) to handle asynchronous operations and scale your application.

* **Other APIs:** Integrate with REST APIs or other services to fetch and update data in real-time.


### Performance Optimization

Several strategies can improve SignalR performance:

* **Minimize data payload:** Send only necessary data to clients.

* **Efficient data serialization:**  Use efficient serialization formats (e.g., JSON).

* **Optimize hub methods:** Avoid blocking operations within hub methods to maintain responsiveness.

* **Use appropriate data structures:**  Use efficient data structures to store and process data.

* **Caching:** Cache frequently accessed data to reduce database load.

* **Connection pooling:** (On the server) Efficiently reuse connections.

* **Proper error handling:** Prevent errors from cascading and impacting performance.


By employing these advanced techniques, you can build highly scalable, efficient, and robust real-time applications using SignalR.  Remember to always profile your application to identify bottlenecks and optimize accordingly.


## Troubleshooting and Debugging

### Common Errors and Solutions

Several common issues can arise when working with SignalR. Here are some frequent problems and their solutions:

* **Connection failures:**  Check your server configuration (hub URL, routing), ensure the SignalR server is running, and verify network connectivity.  Inspect browser console for network errors. Client-side error handling (`.catch` blocks) are crucial for diagnosing connection problems.

* **Messages not received:** Ensure the client correctly subscribes to the appropriate methods using `connection.on()`. Verify the server is sending the messages using logging or debugging tools.  Check for typos in method names (server and client must match exactly).

* **Server-side exceptions:** Implement robust error handling in your hub methods using `try-catch` blocks. Log exceptions to identify their root cause. Use a debugger to step through the code.

* **Serialization issues:** Ensure that data sent between the client and server can be correctly serialized and deserialized using the chosen format (usually JSON).  Check for type mismatches or unsupported data types.

* **Performance issues:** Use profiling tools to identify performance bottlenecks. Optimize hub methods to avoid blocking operations.  Consider scaling strategies for high-concurrent applications.


### Debugging Tools and Techniques

Effective debugging is essential for resolving SignalR issues.  Here are some useful tools and techniques:

* **Browser developer tools:** Use the browser's developer tools (Network tab, Console) to inspect network requests and identify errors.

* **Server-side logging:** Implement detailed logging on your server to track connections, messages, and exceptions.  Use a logging framework like Serilog or NLog for structured logging.

* **Debugging tools (e.g., Visual Studio Debugger):** Use a debugger to step through your code and examine variables to pinpoint the source of errors.  Set breakpoints in your hub methods and client-side code.

* **Network monitoring tools:**  Use network monitoring tools (like Fiddler or Wireshark) to capture and analyze network traffic between the client and server.  This helps identify network-related issues.


### Monitoring SignalR Applications

Monitoring your SignalR application is vital for ensuring performance, stability, and identifying potential issues proactively. Consider these monitoring approaches:

* **Application Insights (or similar APM):**  Integrate with an application performance monitoring (APM) tool to track key metrics like connection count, message throughput, latency, and error rates.  Application Insights provides detailed diagnostics and alerts.

* **Custom metrics:** Implement custom metrics within your application to monitor specific aspects of your SignalR implementation.  Log connection counts, message processing times, or other relevant data.

* **Logging:**  Use structured logging to monitor various aspects of your application, including connection events, message handling, and exceptions.  Use a centralized logging system to aggregate logs from multiple servers.

* **Dashboards:**  Create dashboards to visualize key metrics and alerts.  This allows you to quickly identify problems and respond accordingly.  Many APM solutions provide built-in dashboarding features.

By implementing these monitoring strategies, you gain valuable insight into your SignalR application's health and performance, enabling you to proactively address potential issues and optimize its performance.


## Security Best Practices

### Authentication and Authorization

Securely identifying and controlling access to your SignalR hub is critical. Implement robust authentication and authorization mechanisms:

* **Authentication:** Verify the identity of connecting clients.  Integrate with your existing authentication system (e.g., ASP.NET Identity, Azure Active Directory, OAuth 2.0).  Use JWT (JSON Web Tokens) or other secure methods for transmitting authentication information.

* **Authorization:** Control access to hub methods based on user roles or permissions.  Use attributes (like `[Authorize]`) or custom authorization logic to restrict access.  Don't expose sensitive operations to unauthorized clients.

* **User identification:**  Once authenticated, use `Context.UserIdentifier` (or a similar mechanism depending on your authentication provider) to identify the user within your hub methods. This allows for personalized responses and targeted messaging.


### Protecting against Cross-Site Scripting (XSS)

XSS attacks inject malicious scripts into your application. Protect against them by:

* **Encoding data:**  Always encode data received from clients before displaying it on the client-side.  Use appropriate encoding mechanisms based on the context (HTML encoding, JavaScript encoding, URL encoding). This prevents malicious scripts from executing.

* **Content Security Policy (CSP):** Implement a Content Security Policy to control the resources the browser is allowed to load. This helps prevent the execution of untrusted scripts.

* **Input validation:**  Validate all user inputs to prevent malicious code from being injected.  Don't trust any data coming from the client.

* **Output encoding:** Encode all data displayed on the client-side, including data sent from the server. This helps prevent the execution of malicious scripts that might be embedded in the data.


### Preventing Denial-of-Service (DoS) Attacks

DoS attacks aim to make your application unavailable. Implement these measures:

* **Rate limiting:** Limit the number of requests a client can make within a specific timeframe. This prevents a single client from overwhelming the server.  Use middleware or other mechanisms to enforce rate limits.

* **Throttling:** Control the rate at which messages are processed or sent to clients.  This helps prevent the server from becoming overloaded.

* **Input validation:**  Validate the size and format of incoming data to prevent large or malformed messages from consuming excessive resources.

* **Distributed denial-of-service (DDoS) mitigation:**  For large-scale attacks, consider using a DDoS protection service to filter malicious traffic.


### Data Validation and Sanitization

Always validate and sanitize data received from clients, regardless of the source:

* **Data type validation:** Check if data is of the expected type (e.g., string, integer, date).  Reject requests with invalid data types.

* **Length validation:**  Limit the length of strings and other data types to prevent excessively long inputs.

* **Format validation:** Validate the format of data (e.g., email address, phone number).  Use regular expressions for precise validation.

* **Sanitization:** Remove or escape potentially harmful characters from user input (e.g., `<`, `>`, `&`, `"`).  Use appropriate escaping techniques based on the context (e.g., HTML encoding, URL encoding).

* **Parameter validation:**  Validate all parameters passed to hub methods before processing them.  Reject requests with invalid parameters.

By adhering to these security best practices, you can significantly reduce the risk of vulnerabilities in your SignalR applications.  Regularly update your software and libraries to benefit from the latest security patches. Remember that security is an ongoing process requiring constant vigilance and adaptation to emerging threats.


## Appendix: API Reference

This appendix provides a high-level overview of the key APIs.  For complete and up-to-date details, refer to the official Microsoft documentation for the specific version of SignalR you are using.  The API surface can change between versions.


### SignalR Client Library API

The SignalR client library API varies slightly depending on the platform (JavaScript, .NET, etc.). However, common functionalities include:

* **`HubConnectionBuilder`:** Used to create a new `HubConnection` instance.  Methods include `withUrl` (specifying the hub URL), `withAutomaticReconnect` (configuring automatic reconnection attempts), and potentially others depending on the platform and version.

* **`HubConnection`:** Represents the connection to the SignalR hub.  Key methods include:
    * `start()`: Establishes the connection to the server.  This typically returns a promise (in JavaScript) that resolves when the connection is successful or rejects on failure.
    * `stop()`: Closes the connection.
    * `on(methodName, callback)`: Registers a callback function to handle messages received from the server for a specified method name.
    * `invoke(methodName, ...args)`: Invokes a method on the server.  This also returns a promise which resolves when the server responds.
    * `send(methodName, ...args)`: Sends a message to the server (similar to `invoke`, but usually without expecting a response).
    * `stream(methodName, ...args)`: Starts a streaming operation.
    * `onclose(callback)`: Registers a callback for connection closure.
    * Various methods for connection state management (e.g., checking connection state).


* **Error Handling:**  The client library typically uses promises (in JavaScript) or async/await patterns (in .NET) to facilitate error handling.  `catch` blocks (JavaScript) or `try-catch` statements (C#) are used to manage connection errors and exceptions during method invocations.


The specific methods and properties might differ slightly across different client library versions and platforms, so refer to the relevant documentation for your specific version and target platform.


### SignalR Hub API

The SignalR Hub API (server-side) is primarily defined within your Hub class (inheriting from `Hub` in ASP.NET Core).  Key features include:

* **Hub Methods:**  Methods defined within your Hub class represent the operations clients can invoke. They are typically declared as `public async Task SomeMethodName(...)`.

* **`Clients` Property:**  Allows you to send messages to clients.  This property provides various targets:
    * `Clients.All`: Sends to all connected clients.
    * `Clients.Caller`: Sends only to the client that initiated the call.
    * `Clients.Others`: Sends to all clients except the caller.
    * `Clients.Group(groupName)`: Sends to clients in a specific group.
    * `Clients.User(userId)`: Sends to clients associated with a specific user ID (requires user identification).
    * `Clients.User(userId)`: Sends to specific users (requires user identification and proper setup).

* **`Groups` Property:**  Allows managing client groups.  Methods include:
    * `AddToGroupAsync(connectionId, groupName)`: Adds a client to a group.
    * `RemoveFromGroupAsync(connectionId, groupName)`: Removes a client from a group.
    * `RemoveFromGroupsAsync(connectionId, groupNames)`: Removes a client from multiple groups.

* **`Context` Property:** Provides information about the current connection, including `ConnectionId` and potentially `User`.

* **`OnConnectedAsync()` and `OnDisconnectedAsync()`:**  Methods called when a client connects and disconnects, respectively.  These are often used for logging and managing client state.

* **Streaming:** The `IAsyncEnumerable<T>` type enables streaming data to clients.

Again, consult the official SignalR documentation for the most up-to-date API details for your specific version.  The exact names and behavior of methods might vary across versions.  Always check for changes in new releases.

