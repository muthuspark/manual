{"title":"OWL Carousel - Documentation","markdown":{"yaml":{"title":"OWL Carousel - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n\n\nThis section guides you through the initial setup and basic usage of OWL Carousel.\n\n### Installation\n\nOWL Carousel can be installed in several ways:\n\n**1. Using npm (Node Package Manager):**\n\nThis is recommended for larger projects using a package manager.\n\n```bash\nnpm install owl.carousel\n```\n\nAfter installation, you'll need to import the CSS and JS files into your project.  See the CSS Integration section for details.\n\n**2. Using yarn (Yarn Package Manager):**\n\nSimilar to npm, yarn is another popular package manager.\n\n```bash\nyarn add owl.carousel\n```\n\nAgain, you'll need to import the CSS and JS files afterwards.\n\n**3. Downloading Directly:**\n\nFor smaller projects or quick integrations, you can download the files directly from the [OWL Carousel website](link_to_website_here).  Extract the downloaded archive and include the necessary CSS and JS files in your project.\n\n\n### Basic Usage\n\nAfter installing OWL Carousel, you need to initialize it on your HTML element.  This is done by calling the `owlCarousel` method on a jQuery selector targeting your carousel container.  Here's a basic example:\n\n```javascript\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    margin:10,\n    nav:true,\n    responsive:{\n        0:{\n            items:1\n        },\n        600:{\n            items:3\n        },\n        1000:{\n            items:5\n        }\n    }\n  });\n});\n```\n\nThis code snippet assumes you have included jQuery and the OWL Carousel JavaScript file.  It creates a carousel with looping enabled, a 10-pixel margin between items, navigation buttons, and responsive behavior adapting to different screen sizes.  Refer to the configuration options section (to be added later in the full manual) for a complete list of available settings.\n\n### HTML Structure\n\nOWL Carousel requires a specific HTML structure to function correctly.  Your carousel container must have the class `owl-carousel`, and each item within the carousel should be wrapped in a `<div>` with the class `item`.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n  <!-- Add more items as needed -->\n</div>\n```\n\nThis structure allows OWL Carousel to identify and manage the carousel items efficiently.  You can customize the content within each `item` div to include images, text, or any other HTML elements.\n\n\n### CSS Integration\n\nTo use OWL Carousel, you need to include both the CSS and JavaScript files.  If you installed via npm or yarn, the paths will depend on your project structure.  If you downloaded the files directly, adjust the paths accordingly.\n\n**1. Include the CSS file:**  Link the `owlcarousel.min.css` (or `owlcarousel.css` for the unminified version) file in your HTML `<head>`:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/owlcarousel/assets/owl.carousel.min.css\">\n<link rel=\"stylesheet\" href=\"path/to/owlcarousel/assets/owl.theme.default.min.css\">\n```\n\n**2. Include jQuery:** OWL Carousel relies on jQuery. Ensure you have included a jQuery library in your HTML `<head>` before including the OWL Carousel JavaScript.\n\n\n```html\n<script src=\"path/to/jquery/jquery.min.js\"></script>\n```\n\n\n**3. Include the JavaScript file:** Add the `owl.carousel.min.js` (or `owl.carousel.js`) file in your HTML `<body>` before the closing `</body>` tag or within a `<script>` tag after including jQuery:\n\n```html\n<script src=\"path/to/owlcarousel/owl.carousel.min.js\"></script>\n```\n\nRemember to replace `\"path/to/owlcarousel\"` and `\"path/to/jquery\"` with the actual paths to your files.  After including these files and adding the initialization code (as shown in the Basic Usage section), your OWL Carousel should be working correctly.\n\n\n\n\n## Core Options\n\nThis section details some of the most commonly used configuration options for OWL Carousel.  For a complete list, please refer to the [full documentation](link_to_full_documentation_here).  All options are passed as a JavaScript object to the `owlCarousel()` method.\n\n### Items Per Page (`items`)\n\nThis option controls the number of items visible on the carousel at once.  You can specify a single number for a fixed number of items, or use responsive settings (see Responsive Design) for different screen sizes.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  items: 3 // Shows 3 items at a time\n});\n```\n\n\n### Autoplay (`autoplay`)\n\nEnables automatic sliding of the carousel.  Set to `true` to enable, `false` to disable.  You can also control the autoplay speed using `autoplayTimeout` (in milliseconds).\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  autoplay: true,\n  autoplayTimeout: 3000 // Slides every 3 seconds\n});\n```\n\nTo pause autoplay, you can use:\n```javascript\n$('.owl-carousel').trigger('stop.owl.autoplay');\n```\n\nTo resume autoplay:\n```javascript\n$('.owl-carousel').trigger('play.owl.autoplay');\n```\n\n\n### Loop (`loop`)\n\nEnables continuous looping of the carousel.  Set to `true` to enable infinite looping, `false` to disable.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  loop: true\n});\n```\n\n\n### Navigation (`nav`, `navText`)\n\nAdds navigation buttons (previous and next) to the carousel.  Set `nav` to `true` to enable.  You can customize the button text using the `navText` option, which accepts an array of two strings (left button text, right button text).\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  nav: true,\n  navText: [\"Previous\", \"Next\"]\n});\n```\n\n### Pagination (`dots`)\n\nAdds pagination dots below the carousel. Set `dots` to `true` to enable.  You can also style the pagination dots using CSS.\n\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  dots: true\n});\n```\n\n### Responsive Design (`responsive`)\n\nAllows you to define different settings for various screen sizes.  This option takes an object where keys are breakpoint widths (in pixels) and values are configuration objects.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  responsive: {\n    0: {\n      items: 1\n    },\n    600: {\n      items: 3\n    },\n    1000: {\n      items: 5\n    }\n  }\n});\n```\nThis example shows 1 item on screens smaller than 600px, 3 items between 600px and 1000px, and 5 items on screens larger than 1000px.\n\n### Auto Height (`autoHeight`)\n\nAutomatically adjusts the carousel height based on the height of the current item.  Set to `true` to enable.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  autoHeight: true\n});\n```\n\n\n### Center (`center`)\n\nCenters the current active item within the visible area. Set to `true` to enable.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  center: true\n});\n```\n\nNote: this option works best with an odd number of `items`.\n\n\n### URL Hashing (`URLhashing`)\n\nEnables linking to specific slides using URL hashes. Set to `true` to enable.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  URLhashing: true\n});\n```\n\n\n### Lazy Loading (`lazyLoad`)\n\nLoads images only when they are about to become visible.  Set to `true` to enable.  You can also specify a custom loading image using the `lazyLoadEager` option.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  lazyLoad: true\n});\n```\n\nRemember to add the `lazy` class to your image elements for lazy loading to work correctly:\n\n```html\n<div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\" class=\"lazy\"></div>\n```\n\nThis provides a comprehensive overview of essential OWL Carousel configuration options.  Consult the complete documentation for a more exhaustive list and detailed explanations of all available settings and their usage.\n\n\n\n\n## Advanced Options and Customization\n\nThis section delves into more advanced features and customization options for OWL Carousel, allowing you to tailor its behavior and appearance to your specific needs.\n\n### Custom Navigation\n\nWhile OWL Carousel provides built-in navigation, you can customize it further or create entirely custom navigation controls.  This typically involves creating your own HTML elements for the buttons and then using jQuery to bind them to OWL Carousel's events.\n\nFor example, to create custom \"Prev\" and \"Next\" buttons:\n\n```html\n<button class=\"custom-prev\">Prev</button>\n<button class=\"custom-next\">Next</button>\n```\n\nThen, in your JavaScript:\n\n```javascript\n$('.custom-next').click(function() {\n  $('.owl-carousel').trigger('next.owl.carousel');\n});\n\n$('.custom-prev').click(function() {\n  $('.owl-carousel').trigger('prev.owl.carousel');\n});\n```\n\nThis binds clicks on the custom buttons to the `next` and `prev` events of the carousel.\n\n\n### Custom Pagination\n\nSimilar to navigation, you can create custom pagination.  Create your own pagination elements (e.g., buttons or links) and bind them to the `to.owl.carousel` event to navigate to specific items.\n\nFor example, let's say you have pagination elements like this:\n\n```html\n<div class=\"custom-pagination\">\n  <a href=\"#\" data-slide=\"0\">1</a>\n  <a href=\"#\" data-slide=\"1\">2</a>\n  <a href=\"#\" data-slide=\"2\">3</a>\n</div>\n```\n\nThen in your JavaScript:\n\n```javascript\n$('.custom-pagination a').click(function(e) {\n  e.preventDefault();\n  $('.owl-carousel').trigger('to.owl.carousel', [$(this).data('slide'), 300, true]); // 300ms speed, true for smooth transition\n});\n```\n\n\n### Callbacks and Events\n\nOWL Carousel offers various callbacks and events that trigger at different stages of carousel operation (e.g., initialization, transition start/end, change). You can use these to execute custom code in response to specific actions.  See the full documentation for a complete list of events and how to use them.  Example using `changed.owl.carousel`:\n\n```javascript\n$('.owl-carousel').on('changed.owl.carousel', function(event) {\n  console.log('Current item:', event.item.index);\n});\n```\n\n\n### Adding and Removing Items\n\nYou can dynamically add and remove items from the carousel after initialization.\n\n**Adding Items:**\n\n```javascript\nvar newItem = $('<div class=\"item\">New Item</div>');\n$('.owl-carousel').trigger('add.owl.carousel', newItem).trigger('refresh.owl.carousel');\n```\n\n**Removing Items:**\n\n```javascript\n$('.owl-carousel .item:first').remove();\n$('.owl-carousel').trigger('refresh.owl.carousel');\n```\n\nRemember to call `refresh.owl.carousel` after adding or removing items to update the carousel's layout.\n\n\n### Programmatic Control\n\nOWL Carousel provides methods for controlling its behavior programmatically.  You can use these methods to navigate, jump to specific items, stop/start autoplay, and more.  See the full documentation for a detailed list of methods.  Example of going to a specific item:\n\n```javascript\n$('.owl-carousel').trigger('to.owl.carousel', 2); // Goes to the third item (index 2)\n```\n\n### Animation Options\n\nWhile OWL Carousel provides smooth transitions by default, you can further customize the animation using CSS transitions or animations.  Target the appropriate classes (e.g., `.owl-item`, `.owl-item-active`) with your custom CSS to achieve desired effects.\n\n### Drag and Drop\n\nBy default, OWL Carousel supports drag and drop navigation.  You can disable this using the `dragBeforeAnimFinish` option.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  dragBeforeAnimFinish: false\n});\n```\n\n### RTL Support (`rtl`)\n\nOWL Carousel supports right-to-left (RTL) languages.  Set the `rtl` option to `true` to enable RTL mode.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  rtl: true\n});\n```\n\n### Accessibility\n\nEnsure your carousel is accessible to users with disabilities by providing appropriate ARIA attributes and keyboard navigation.  Use ARIA roles, attributes, and landmarks according to accessibility guidelines (WCAG).  OWL Carousel itself doesn't automatically handle all aspects of accessibility, so you will need to add the correct attributes to your HTML and potentially utilize JavaScript to manage keyboard navigation.  Consult accessibility guidelines and best practices for web development.\n\nThis section provides a more advanced overview of OWL Carousel's capabilities. The comprehensive documentation should be consulted for exhaustive details and examples.\n\n\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues and optimizing your OWL Carousel implementation.\n\n\n### Common Issues\n\n* **Carousel not working:**  Double-check that you have included jQuery, the OWL Carousel CSS, and JavaScript files correctly.  Ensure the paths are accurate and the files are being loaded in the correct order (jQuery first, then OWL Carousel). Inspect your browser's developer console for any JavaScript errors.  Verify that your HTML structure adheres to the required format (using the `owl-carousel` and `item` classes).\n\n* **Items not displaying correctly:** Check your responsive settings (`responsive` option). Ensure that the breakpoint values are appropriate for your design.  Inspect the CSS to ensure there are no conflicting styles affecting the carousel layout.  Make sure you haven't inadvertently set `items` to 0.\n\n* **Autoplay not working:** Verify that the `autoplay` option is set to `true` and that `autoplayTimeout` is set to a reasonable value (in milliseconds).  Ensure no other JavaScript code is interfering with the autoplay functionality.\n\n* **Navigation/Pagination not working:**  Confirm that the `nav` and/or `dots` options are set to `true`. Ensure that you haven't accidentally removed or overwritten the generated navigation/pagination elements with custom CSS or JavaScript.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML, CSS, and JavaScript of your carousel. Check the console for error messages and use the debugger to step through your code.\n\n* **Simplify:** If you're encountering issues with a complex setup, try simplifying your configuration to isolate the problem.  Start with the most basic configuration and gradually add options to pinpoint the source of the error.\n\n* **Test in Multiple Browsers:**  Test your carousel in different browsers (Chrome, Firefox, Safari, Edge) to identify browser-specific issues.\n\n* **Check for Conflicting Styles:**  Make sure that your custom CSS doesn't conflict with OWL Carousel's default styles.  Use your browser's developer tools to inspect the applied styles and identify any conflicts.\n\n* **Console Logging:** Use `console.log()` statements to track the values of variables and the flow of your JavaScript code. This can help you identify unexpected behavior.\n\n### Browser Compatibility\n\nOWL Carousel aims for broad browser compatibility, but minor rendering inconsistencies across different browsers and versions are possible.  Thorough testing in various browsers is recommended.  Generally, modern browsers (Chrome, Firefox, Safari, Edge) provide good support.  Very old browsers may require polyfills or may not be fully supported.\n\n### Known Bugs\n\nCheck the [OWL Carousel GitHub repository](link_to_github_repo_here) or official website for a list of known bugs and their workarounds.  Reporting any new bugs you encounter through the appropriate channels will help improve the library.\n\n\n### Performance Optimization\n\n* **Image Optimization:** Optimize your images (reduce file size without significant quality loss) to improve loading times.  Use appropriate image formats (e.g., WebP) and consider using lazy loading (`lazyLoad` option).\n\n* **Minimize JavaScript:**  Keep your JavaScript code concise and efficient. Avoid unnecessary computations or DOM manipulations within the carousel's callback functions.\n\n* **CSS Optimization:** Ensure your CSS is well-structured and avoids unnecessary selectors or complex styles.  Minimize the use of computationally expensive CSS properties.\n\n* **Caching:** Leverage browser caching to speed up subsequent loads of your website and its resources.\n\n* **Consider Alternatives:**  For exceptionally large carousels, explore alternatives that may be more performance-friendly, such as virtual scrolling techniques, or investigate if a carousel is even the best user experience in the first place.\n\nFollowing these troubleshooting steps and optimization techniques should help you resolve any issues and create a smooth, efficient OWL Carousel implementation. Remember to always consult the official documentation and community resources for the most up-to-date information and support.\n\n\n\n\n## Examples\n\nThis section provides several examples demonstrating different configurations and features of OWL Carousel.  Remember to include the necessary CSS and JavaScript files (as described in the Getting Started section) for these examples to work.\n\n\n### Simple Carousel\n\nThis example shows a basic carousel with three items, looping enabled, and automatic sliding.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    autoplay:true,\n    autoplayTimeout:3000,\n    items: 1\n  });\n});\n</script>\n```\n\n\n### Carousel with Navigation\n\nThis example adds navigation buttons (Prev/Next) to the carousel.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    nav:true,\n    items: 1\n  });\n});\n</script>\n```\n\n\n### Carousel with Pagination\n\nThis example adds pagination dots below the carousel.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    dots:true,\n    items: 1\n  });\n});\n</script>\n```\n\n\n### Responsive Carousel\n\nThis example demonstrates responsive behavior, adjusting the number of items visible based on screen size.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n  <div class=\"item\"><img src=\"image4.jpg\" alt=\"Image 4\"></div>\n  <div class=\"item\"><img src=\"image5.jpg\" alt=\"Image 5\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    responsive:{\n        0:{\n            items:1\n        },\n        600:{\n            items:3\n        },\n        1000:{\n            items:5\n        }\n    }\n  });\n});\n</script>\n```\n\n\n### Carousel with Custom Navigation\n\nThis example shows how to create and use custom navigation buttons.\n\n```html\n<div class=\"owl-carousel\">\n  <!-- Items -->\n</div>\n<button class=\"custom-prev\">Prev</button>\n<button class=\"custom-next\">Next</button>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    items:1\n  });\n\n  $('.custom-next').click(function() {\n    $('.owl-carousel').trigger('next.owl.carousel');\n  });\n\n  $('.custom-prev').click(function() {\n    $('.owl-carousel').trigger('prev.owl.carousel');\n  });\n});\n</script>\n```\n\n\n### Carousel with Lazy Loading\n\nThis example demonstrates lazy loading of images.  Remember to add the `lazy` class to your image elements.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img data-src=\"image1.jpg\" alt=\"Image 1\" class=\"lazy\"></div>\n  <div class=\"item\"><img data-src=\"image2.jpg\" alt=\"Image 2\" class=\"lazy\"></div>\n  <div class=\"item\"><img data-src=\"image3.jpg\" alt=\"Image 3\" class=\"lazy\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    lazyLoad:true,\n    items: 1\n  });\n});\n</script>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, and `\"image3.jpg\"` with the actual paths to your images.  These examples provide a starting point; you can combine and modify these examples to create more complex and customized carousels.  Always refer to the complete documentation for a full list of options and advanced configurations.\n\n\n\n\n## API Reference\n\nThis section provides a comprehensive reference for the OWL Carousel API, including the constructor, available methods, triggered events, and supported data attributes.\n\n\n### Constructor\n\nThe OWL Carousel constructor initializes the carousel on a given jQuery selection.  It accepts a single argument: an options object containing the carousel's configuration.\n\n```javascript\n$('.owl-carousel').owlCarousel(options);\n```\n\n* `options`: (Object) An object containing configuration options for the carousel.  See the Core Options and Advanced Options sections for details on available options.  This is optional; if omitted, OWL Carousel will use default settings.\n\n\n### Methods\n\nOWL Carousel provides several methods for controlling its behavior programmatically.  These methods are called on a jQuery selection containing the carousel element.\n\n* **`destroy()`:**  Completely destroys the carousel, removing all event handlers and restoring the original HTML structure.\n\n```javascript\n$('.owl-carousel').owlCarousel('destroy');\n```\n\n* **`data()`:** Returns the carousel's current configuration options.\n\n```javascript\nlet options = $('.owl-carousel').owlCarousel('data');\nconsole.log(options);\n```\n\n* **`get()`:** Returns specific carousel data based on the provided parameter.  Valid parameters are `'item'`, `'items'`, `'stage'`, and `'position'`.  For example, to get the current item's index:\n\n```javascript\nlet currentIndex = $('.owl-carousel').owlCarousel('get', 'item.index');\n```\n\n* **`to(index, speed, smoothStop)`:** Jumps to a specific item in the carousel.\n\n```javascript\n$('.owl-carousel').owlCarousel('to', 2); // Goes to the third item (index 2)\n```\n    * `index`: (Number) The index of the item to jump to (0-based).\n    * `speed`: (Number, optional) The transition speed in milliseconds (default: 300).\n    * `smoothStop`: (Boolean, optional) Whether to smoothly stop at the target position (default: true).\n\n* **`next(speed)`:** Moves to the next item.\n\n```javascript\n$('.owl-carousel').owlCarousel('next');\n```\n    * `speed`: (Number, optional) The transition speed in milliseconds (default: 300).\n\n* **`prev(speed)`:** Moves to the previous item.\n\n```javascript\n$('.owl-carousel').owlCarousel('prev');\n```\n    * `speed`: (Number, optional) The transition speed in milliseconds (default: 300).\n\n* **`refresh()`:** Refreshes the carousel's layout, useful after dynamically adding or removing items.\n\n```javascript\n$('.owl-carousel').owlCarousel('refresh');\n```\n\n* **`update()`:**  Updates the carousel's internal state, useful after significant changes to the content or window size.\n\n```javascript\n$('.owl-carousel').owlCarousel('update');\n```\n\n\n* **`trigger(eventName, [data])`:** Triggers a custom event on the carousel.  Use this for internal or custom event handling.  For example, `$('.owl-carousel').trigger('refresh.owl.carousel');`\n\n    * `eventName` (String): Name of the event to trigger (often including the `.owl.carousel` namespace).\n    * `data` (Optional): Data to be passed with the event.\n\n\n\n### Events\n\nOWL Carousel triggers several events during its operation.  These events can be listened for using jQuery's `.on()` method.  Most events are namespaced with `.owl.carousel`.\n\nHere are some key events:\n\n* **`initialized.owl.carousel`:** Triggered after the carousel is initialized.\n* **`changed.owl.carousel`:** Triggered after the current item changes.  The event object contains properties like `item.index` (index of the new current item).\n* **`resized.owl.carousel`:** Triggered after the carousel is resized.\n* **`translated.owl.carousel`:** Triggered after the carousel's items are translated (during transitions).\n* **`drag`:** Triggered while dragging the carousel.\n* **`dragged`:** Triggered after dragging the carousel.\n* **`autoplay-started`:** Triggered when autoplay starts.\n* **`autoplay-stopped`:** Triggered when autoplay stops.\n* **`autoplay-timeout`:** Triggered periodically during autoplay.\n* **`play.owl.autoplay`:** Event to resume autoplay.\n* **`stop.owl.autoplay`:** Event to pause autoplay.\n\n\nYou can listen for these events like this:\n\n```javascript\n$('.owl-carousel').on('changed.owl.carousel', function(event) {\n  console.log('Current item:', event.item.index);\n});\n```\n\n\n### Data Attributes\n\nOWL Carousel supports several data attributes that can be used to configure the carousel directly in the HTML.  These attributes override the options passed to the `owlCarousel` constructor.\n\n* `data-owl-carousel`:  Marks the element as an OWL Carousel.  This is required.\n* `data-owl-options`: Allows JSON options to be set directly on the element.  This is the most flexible but requires valid JSON.\n* Individual option attributes (e.g., `data-owl-loop`, `data-owl-nav`, etc): You can set individual options using the standard `data-*` attributes, mirroring the options object structure.\n\nFor example:\n\n```html\n<div class=\"owl-carousel\" data-owl-loop=\"true\" data-owl-nav=\"true\" data-owl-items=\"3\">\n  <!-- Carousel items -->\n</div>\n```\n\nThis API reference provides a summary of the core functionalities.  Always consult the official documentation for the most up-to-date and comprehensive information.\n\n","srcMarkdownNoYaml":"\n\n\n## Getting Started\n\nThis section guides you through the initial setup and basic usage of OWL Carousel.\n\n### Installation\n\nOWL Carousel can be installed in several ways:\n\n**1. Using npm (Node Package Manager):**\n\nThis is recommended for larger projects using a package manager.\n\n```bash\nnpm install owl.carousel\n```\n\nAfter installation, you'll need to import the CSS and JS files into your project.  See the CSS Integration section for details.\n\n**2. Using yarn (Yarn Package Manager):**\n\nSimilar to npm, yarn is another popular package manager.\n\n```bash\nyarn add owl.carousel\n```\n\nAgain, you'll need to import the CSS and JS files afterwards.\n\n**3. Downloading Directly:**\n\nFor smaller projects or quick integrations, you can download the files directly from the [OWL Carousel website](link_to_website_here).  Extract the downloaded archive and include the necessary CSS and JS files in your project.\n\n\n### Basic Usage\n\nAfter installing OWL Carousel, you need to initialize it on your HTML element.  This is done by calling the `owlCarousel` method on a jQuery selector targeting your carousel container.  Here's a basic example:\n\n```javascript\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    margin:10,\n    nav:true,\n    responsive:{\n        0:{\n            items:1\n        },\n        600:{\n            items:3\n        },\n        1000:{\n            items:5\n        }\n    }\n  });\n});\n```\n\nThis code snippet assumes you have included jQuery and the OWL Carousel JavaScript file.  It creates a carousel with looping enabled, a 10-pixel margin between items, navigation buttons, and responsive behavior adapting to different screen sizes.  Refer to the configuration options section (to be added later in the full manual) for a complete list of available settings.\n\n### HTML Structure\n\nOWL Carousel requires a specific HTML structure to function correctly.  Your carousel container must have the class `owl-carousel`, and each item within the carousel should be wrapped in a `<div>` with the class `item`.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n  <!-- Add more items as needed -->\n</div>\n```\n\nThis structure allows OWL Carousel to identify and manage the carousel items efficiently.  You can customize the content within each `item` div to include images, text, or any other HTML elements.\n\n\n### CSS Integration\n\nTo use OWL Carousel, you need to include both the CSS and JavaScript files.  If you installed via npm or yarn, the paths will depend on your project structure.  If you downloaded the files directly, adjust the paths accordingly.\n\n**1. Include the CSS file:**  Link the `owlcarousel.min.css` (or `owlcarousel.css` for the unminified version) file in your HTML `<head>`:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/owlcarousel/assets/owl.carousel.min.css\">\n<link rel=\"stylesheet\" href=\"path/to/owlcarousel/assets/owl.theme.default.min.css\">\n```\n\n**2. Include jQuery:** OWL Carousel relies on jQuery. Ensure you have included a jQuery library in your HTML `<head>` before including the OWL Carousel JavaScript.\n\n\n```html\n<script src=\"path/to/jquery/jquery.min.js\"></script>\n```\n\n\n**3. Include the JavaScript file:** Add the `owl.carousel.min.js` (or `owl.carousel.js`) file in your HTML `<body>` before the closing `</body>` tag or within a `<script>` tag after including jQuery:\n\n```html\n<script src=\"path/to/owlcarousel/owl.carousel.min.js\"></script>\n```\n\nRemember to replace `\"path/to/owlcarousel\"` and `\"path/to/jquery\"` with the actual paths to your files.  After including these files and adding the initialization code (as shown in the Basic Usage section), your OWL Carousel should be working correctly.\n\n\n\n\n## Core Options\n\nThis section details some of the most commonly used configuration options for OWL Carousel.  For a complete list, please refer to the [full documentation](link_to_full_documentation_here).  All options are passed as a JavaScript object to the `owlCarousel()` method.\n\n### Items Per Page (`items`)\n\nThis option controls the number of items visible on the carousel at once.  You can specify a single number for a fixed number of items, or use responsive settings (see Responsive Design) for different screen sizes.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  items: 3 // Shows 3 items at a time\n});\n```\n\n\n### Autoplay (`autoplay`)\n\nEnables automatic sliding of the carousel.  Set to `true` to enable, `false` to disable.  You can also control the autoplay speed using `autoplayTimeout` (in milliseconds).\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  autoplay: true,\n  autoplayTimeout: 3000 // Slides every 3 seconds\n});\n```\n\nTo pause autoplay, you can use:\n```javascript\n$('.owl-carousel').trigger('stop.owl.autoplay');\n```\n\nTo resume autoplay:\n```javascript\n$('.owl-carousel').trigger('play.owl.autoplay');\n```\n\n\n### Loop (`loop`)\n\nEnables continuous looping of the carousel.  Set to `true` to enable infinite looping, `false` to disable.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  loop: true\n});\n```\n\n\n### Navigation (`nav`, `navText`)\n\nAdds navigation buttons (previous and next) to the carousel.  Set `nav` to `true` to enable.  You can customize the button text using the `navText` option, which accepts an array of two strings (left button text, right button text).\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  nav: true,\n  navText: [\"Previous\", \"Next\"]\n});\n```\n\n### Pagination (`dots`)\n\nAdds pagination dots below the carousel. Set `dots` to `true` to enable.  You can also style the pagination dots using CSS.\n\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  dots: true\n});\n```\n\n### Responsive Design (`responsive`)\n\nAllows you to define different settings for various screen sizes.  This option takes an object where keys are breakpoint widths (in pixels) and values are configuration objects.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  responsive: {\n    0: {\n      items: 1\n    },\n    600: {\n      items: 3\n    },\n    1000: {\n      items: 5\n    }\n  }\n});\n```\nThis example shows 1 item on screens smaller than 600px, 3 items between 600px and 1000px, and 5 items on screens larger than 1000px.\n\n### Auto Height (`autoHeight`)\n\nAutomatically adjusts the carousel height based on the height of the current item.  Set to `true` to enable.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  autoHeight: true\n});\n```\n\n\n### Center (`center`)\n\nCenters the current active item within the visible area. Set to `true` to enable.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  center: true\n});\n```\n\nNote: this option works best with an odd number of `items`.\n\n\n### URL Hashing (`URLhashing`)\n\nEnables linking to specific slides using URL hashes. Set to `true` to enable.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  URLhashing: true\n});\n```\n\n\n### Lazy Loading (`lazyLoad`)\n\nLoads images only when they are about to become visible.  Set to `true` to enable.  You can also specify a custom loading image using the `lazyLoadEager` option.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  lazyLoad: true\n});\n```\n\nRemember to add the `lazy` class to your image elements for lazy loading to work correctly:\n\n```html\n<div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\" class=\"lazy\"></div>\n```\n\nThis provides a comprehensive overview of essential OWL Carousel configuration options.  Consult the complete documentation for a more exhaustive list and detailed explanations of all available settings and their usage.\n\n\n\n\n## Advanced Options and Customization\n\nThis section delves into more advanced features and customization options for OWL Carousel, allowing you to tailor its behavior and appearance to your specific needs.\n\n### Custom Navigation\n\nWhile OWL Carousel provides built-in navigation, you can customize it further or create entirely custom navigation controls.  This typically involves creating your own HTML elements for the buttons and then using jQuery to bind them to OWL Carousel's events.\n\nFor example, to create custom \"Prev\" and \"Next\" buttons:\n\n```html\n<button class=\"custom-prev\">Prev</button>\n<button class=\"custom-next\">Next</button>\n```\n\nThen, in your JavaScript:\n\n```javascript\n$('.custom-next').click(function() {\n  $('.owl-carousel').trigger('next.owl.carousel');\n});\n\n$('.custom-prev').click(function() {\n  $('.owl-carousel').trigger('prev.owl.carousel');\n});\n```\n\nThis binds clicks on the custom buttons to the `next` and `prev` events of the carousel.\n\n\n### Custom Pagination\n\nSimilar to navigation, you can create custom pagination.  Create your own pagination elements (e.g., buttons or links) and bind them to the `to.owl.carousel` event to navigate to specific items.\n\nFor example, let's say you have pagination elements like this:\n\n```html\n<div class=\"custom-pagination\">\n  <a href=\"#\" data-slide=\"0\">1</a>\n  <a href=\"#\" data-slide=\"1\">2</a>\n  <a href=\"#\" data-slide=\"2\">3</a>\n</div>\n```\n\nThen in your JavaScript:\n\n```javascript\n$('.custom-pagination a').click(function(e) {\n  e.preventDefault();\n  $('.owl-carousel').trigger('to.owl.carousel', [$(this).data('slide'), 300, true]); // 300ms speed, true for smooth transition\n});\n```\n\n\n### Callbacks and Events\n\nOWL Carousel offers various callbacks and events that trigger at different stages of carousel operation (e.g., initialization, transition start/end, change). You can use these to execute custom code in response to specific actions.  See the full documentation for a complete list of events and how to use them.  Example using `changed.owl.carousel`:\n\n```javascript\n$('.owl-carousel').on('changed.owl.carousel', function(event) {\n  console.log('Current item:', event.item.index);\n});\n```\n\n\n### Adding and Removing Items\n\nYou can dynamically add and remove items from the carousel after initialization.\n\n**Adding Items:**\n\n```javascript\nvar newItem = $('<div class=\"item\">New Item</div>');\n$('.owl-carousel').trigger('add.owl.carousel', newItem).trigger('refresh.owl.carousel');\n```\n\n**Removing Items:**\n\n```javascript\n$('.owl-carousel .item:first').remove();\n$('.owl-carousel').trigger('refresh.owl.carousel');\n```\n\nRemember to call `refresh.owl.carousel` after adding or removing items to update the carousel's layout.\n\n\n### Programmatic Control\n\nOWL Carousel provides methods for controlling its behavior programmatically.  You can use these methods to navigate, jump to specific items, stop/start autoplay, and more.  See the full documentation for a detailed list of methods.  Example of going to a specific item:\n\n```javascript\n$('.owl-carousel').trigger('to.owl.carousel', 2); // Goes to the third item (index 2)\n```\n\n### Animation Options\n\nWhile OWL Carousel provides smooth transitions by default, you can further customize the animation using CSS transitions or animations.  Target the appropriate classes (e.g., `.owl-item`, `.owl-item-active`) with your custom CSS to achieve desired effects.\n\n### Drag and Drop\n\nBy default, OWL Carousel supports drag and drop navigation.  You can disable this using the `dragBeforeAnimFinish` option.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  dragBeforeAnimFinish: false\n});\n```\n\n### RTL Support (`rtl`)\n\nOWL Carousel supports right-to-left (RTL) languages.  Set the `rtl` option to `true` to enable RTL mode.\n\n```javascript\n$('.owl-carousel').owlCarousel({\n  rtl: true\n});\n```\n\n### Accessibility\n\nEnsure your carousel is accessible to users with disabilities by providing appropriate ARIA attributes and keyboard navigation.  Use ARIA roles, attributes, and landmarks according to accessibility guidelines (WCAG).  OWL Carousel itself doesn't automatically handle all aspects of accessibility, so you will need to add the correct attributes to your HTML and potentially utilize JavaScript to manage keyboard navigation.  Consult accessibility guidelines and best practices for web development.\n\nThis section provides a more advanced overview of OWL Carousel's capabilities. The comprehensive documentation should be consulted for exhaustive details and examples.\n\n\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues and optimizing your OWL Carousel implementation.\n\n\n### Common Issues\n\n* **Carousel not working:**  Double-check that you have included jQuery, the OWL Carousel CSS, and JavaScript files correctly.  Ensure the paths are accurate and the files are being loaded in the correct order (jQuery first, then OWL Carousel). Inspect your browser's developer console for any JavaScript errors.  Verify that your HTML structure adheres to the required format (using the `owl-carousel` and `item` classes).\n\n* **Items not displaying correctly:** Check your responsive settings (`responsive` option). Ensure that the breakpoint values are appropriate for your design.  Inspect the CSS to ensure there are no conflicting styles affecting the carousel layout.  Make sure you haven't inadvertently set `items` to 0.\n\n* **Autoplay not working:** Verify that the `autoplay` option is set to `true` and that `autoplayTimeout` is set to a reasonable value (in milliseconds).  Ensure no other JavaScript code is interfering with the autoplay functionality.\n\n* **Navigation/Pagination not working:**  Confirm that the `nav` and/or `dots` options are set to `true`. Ensure that you haven't accidentally removed or overwritten the generated navigation/pagination elements with custom CSS or JavaScript.\n\n\n### Debugging Tips\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML, CSS, and JavaScript of your carousel. Check the console for error messages and use the debugger to step through your code.\n\n* **Simplify:** If you're encountering issues with a complex setup, try simplifying your configuration to isolate the problem.  Start with the most basic configuration and gradually add options to pinpoint the source of the error.\n\n* **Test in Multiple Browsers:**  Test your carousel in different browsers (Chrome, Firefox, Safari, Edge) to identify browser-specific issues.\n\n* **Check for Conflicting Styles:**  Make sure that your custom CSS doesn't conflict with OWL Carousel's default styles.  Use your browser's developer tools to inspect the applied styles and identify any conflicts.\n\n* **Console Logging:** Use `console.log()` statements to track the values of variables and the flow of your JavaScript code. This can help you identify unexpected behavior.\n\n### Browser Compatibility\n\nOWL Carousel aims for broad browser compatibility, but minor rendering inconsistencies across different browsers and versions are possible.  Thorough testing in various browsers is recommended.  Generally, modern browsers (Chrome, Firefox, Safari, Edge) provide good support.  Very old browsers may require polyfills or may not be fully supported.\n\n### Known Bugs\n\nCheck the [OWL Carousel GitHub repository](link_to_github_repo_here) or official website for a list of known bugs and their workarounds.  Reporting any new bugs you encounter through the appropriate channels will help improve the library.\n\n\n### Performance Optimization\n\n* **Image Optimization:** Optimize your images (reduce file size without significant quality loss) to improve loading times.  Use appropriate image formats (e.g., WebP) and consider using lazy loading (`lazyLoad` option).\n\n* **Minimize JavaScript:**  Keep your JavaScript code concise and efficient. Avoid unnecessary computations or DOM manipulations within the carousel's callback functions.\n\n* **CSS Optimization:** Ensure your CSS is well-structured and avoids unnecessary selectors or complex styles.  Minimize the use of computationally expensive CSS properties.\n\n* **Caching:** Leverage browser caching to speed up subsequent loads of your website and its resources.\n\n* **Consider Alternatives:**  For exceptionally large carousels, explore alternatives that may be more performance-friendly, such as virtual scrolling techniques, or investigate if a carousel is even the best user experience in the first place.\n\nFollowing these troubleshooting steps and optimization techniques should help you resolve any issues and create a smooth, efficient OWL Carousel implementation. Remember to always consult the official documentation and community resources for the most up-to-date information and support.\n\n\n\n\n## Examples\n\nThis section provides several examples demonstrating different configurations and features of OWL Carousel.  Remember to include the necessary CSS and JavaScript files (as described in the Getting Started section) for these examples to work.\n\n\n### Simple Carousel\n\nThis example shows a basic carousel with three items, looping enabled, and automatic sliding.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    autoplay:true,\n    autoplayTimeout:3000,\n    items: 1\n  });\n});\n</script>\n```\n\n\n### Carousel with Navigation\n\nThis example adds navigation buttons (Prev/Next) to the carousel.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    nav:true,\n    items: 1\n  });\n});\n</script>\n```\n\n\n### Carousel with Pagination\n\nThis example adds pagination dots below the carousel.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    dots:true,\n    items: 1\n  });\n});\n</script>\n```\n\n\n### Responsive Carousel\n\nThis example demonstrates responsive behavior, adjusting the number of items visible based on screen size.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img src=\"image1.jpg\" alt=\"Image 1\"></div>\n  <div class=\"item\"><img src=\"image2.jpg\" alt=\"Image 2\"></div>\n  <div class=\"item\"><img src=\"image3.jpg\" alt=\"Image 3\"></div>\n  <div class=\"item\"><img src=\"image4.jpg\" alt=\"Image 4\"></div>\n  <div class=\"item\"><img src=\"image5.jpg\" alt=\"Image 5\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    responsive:{\n        0:{\n            items:1\n        },\n        600:{\n            items:3\n        },\n        1000:{\n            items:5\n        }\n    }\n  });\n});\n</script>\n```\n\n\n### Carousel with Custom Navigation\n\nThis example shows how to create and use custom navigation buttons.\n\n```html\n<div class=\"owl-carousel\">\n  <!-- Items -->\n</div>\n<button class=\"custom-prev\">Prev</button>\n<button class=\"custom-next\">Next</button>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    items:1\n  });\n\n  $('.custom-next').click(function() {\n    $('.owl-carousel').trigger('next.owl.carousel');\n  });\n\n  $('.custom-prev').click(function() {\n    $('.owl-carousel').trigger('prev.owl.carousel');\n  });\n});\n</script>\n```\n\n\n### Carousel with Lazy Loading\n\nThis example demonstrates lazy loading of images.  Remember to add the `lazy` class to your image elements.\n\n```html\n<div class=\"owl-carousel\">\n  <div class=\"item\"><img data-src=\"image1.jpg\" alt=\"Image 1\" class=\"lazy\"></div>\n  <div class=\"item\"><img data-src=\"image2.jpg\" alt=\"Image 2\" class=\"lazy\"></div>\n  <div class=\"item\"><img data-src=\"image3.jpg\" alt=\"Image 3\" class=\"lazy\"></div>\n</div>\n\n<script>\n$(document).ready(function(){\n  $('.owl-carousel').owlCarousel({\n    loop:true,\n    lazyLoad:true,\n    items: 1\n  });\n});\n</script>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, and `\"image3.jpg\"` with the actual paths to your images.  These examples provide a starting point; you can combine and modify these examples to create more complex and customized carousels.  Always refer to the complete documentation for a full list of options and advanced configurations.\n\n\n\n\n## API Reference\n\nThis section provides a comprehensive reference for the OWL Carousel API, including the constructor, available methods, triggered events, and supported data attributes.\n\n\n### Constructor\n\nThe OWL Carousel constructor initializes the carousel on a given jQuery selection.  It accepts a single argument: an options object containing the carousel's configuration.\n\n```javascript\n$('.owl-carousel').owlCarousel(options);\n```\n\n* `options`: (Object) An object containing configuration options for the carousel.  See the Core Options and Advanced Options sections for details on available options.  This is optional; if omitted, OWL Carousel will use default settings.\n\n\n### Methods\n\nOWL Carousel provides several methods for controlling its behavior programmatically.  These methods are called on a jQuery selection containing the carousel element.\n\n* **`destroy()`:**  Completely destroys the carousel, removing all event handlers and restoring the original HTML structure.\n\n```javascript\n$('.owl-carousel').owlCarousel('destroy');\n```\n\n* **`data()`:** Returns the carousel's current configuration options.\n\n```javascript\nlet options = $('.owl-carousel').owlCarousel('data');\nconsole.log(options);\n```\n\n* **`get()`:** Returns specific carousel data based on the provided parameter.  Valid parameters are `'item'`, `'items'`, `'stage'`, and `'position'`.  For example, to get the current item's index:\n\n```javascript\nlet currentIndex = $('.owl-carousel').owlCarousel('get', 'item.index');\n```\n\n* **`to(index, speed, smoothStop)`:** Jumps to a specific item in the carousel.\n\n```javascript\n$('.owl-carousel').owlCarousel('to', 2); // Goes to the third item (index 2)\n```\n    * `index`: (Number) The index of the item to jump to (0-based).\n    * `speed`: (Number, optional) The transition speed in milliseconds (default: 300).\n    * `smoothStop`: (Boolean, optional) Whether to smoothly stop at the target position (default: true).\n\n* **`next(speed)`:** Moves to the next item.\n\n```javascript\n$('.owl-carousel').owlCarousel('next');\n```\n    * `speed`: (Number, optional) The transition speed in milliseconds (default: 300).\n\n* **`prev(speed)`:** Moves to the previous item.\n\n```javascript\n$('.owl-carousel').owlCarousel('prev');\n```\n    * `speed`: (Number, optional) The transition speed in milliseconds (default: 300).\n\n* **`refresh()`:** Refreshes the carousel's layout, useful after dynamically adding or removing items.\n\n```javascript\n$('.owl-carousel').owlCarousel('refresh');\n```\n\n* **`update()`:**  Updates the carousel's internal state, useful after significant changes to the content or window size.\n\n```javascript\n$('.owl-carousel').owlCarousel('update');\n```\n\n\n* **`trigger(eventName, [data])`:** Triggers a custom event on the carousel.  Use this for internal or custom event handling.  For example, `$('.owl-carousel').trigger('refresh.owl.carousel');`\n\n    * `eventName` (String): Name of the event to trigger (often including the `.owl.carousel` namespace).\n    * `data` (Optional): Data to be passed with the event.\n\n\n\n### Events\n\nOWL Carousel triggers several events during its operation.  These events can be listened for using jQuery's `.on()` method.  Most events are namespaced with `.owl.carousel`.\n\nHere are some key events:\n\n* **`initialized.owl.carousel`:** Triggered after the carousel is initialized.\n* **`changed.owl.carousel`:** Triggered after the current item changes.  The event object contains properties like `item.index` (index of the new current item).\n* **`resized.owl.carousel`:** Triggered after the carousel is resized.\n* **`translated.owl.carousel`:** Triggered after the carousel's items are translated (during transitions).\n* **`drag`:** Triggered while dragging the carousel.\n* **`dragged`:** Triggered after dragging the carousel.\n* **`autoplay-started`:** Triggered when autoplay starts.\n* **`autoplay-stopped`:** Triggered when autoplay stops.\n* **`autoplay-timeout`:** Triggered periodically during autoplay.\n* **`play.owl.autoplay`:** Event to resume autoplay.\n* **`stop.owl.autoplay`:** Event to pause autoplay.\n\n\nYou can listen for these events like this:\n\n```javascript\n$('.owl-carousel').on('changed.owl.carousel', function(event) {\n  console.log('Current item:', event.item.index);\n});\n```\n\n\n### Data Attributes\n\nOWL Carousel supports several data attributes that can be used to configure the carousel directly in the HTML.  These attributes override the options passed to the `owlCarousel` constructor.\n\n* `data-owl-carousel`:  Marks the element as an OWL Carousel.  This is required.\n* `data-owl-options`: Allows JSON options to be set directly on the element.  This is the most flexible but requires valid JSON.\n* Individual option attributes (e.g., `data-owl-loop`, `data-owl-nav`, etc): You can set individual options using the standard `data-*` attributes, mirroring the options object structure.\n\nFor example:\n\n```html\n<div class=\"owl-carousel\" data-owl-loop=\"true\" data-owl-nav=\"true\" data-owl-items=\"3\">\n  <!-- Carousel items -->\n</div>\n```\n\nThis API reference provides a summary of the core functionalities.  Always consult the official documentation for the most up-to-date and comprehensive information.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"owl-carousel.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"OWL Carousel - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}