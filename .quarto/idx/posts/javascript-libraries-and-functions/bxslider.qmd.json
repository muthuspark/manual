{"title":"bxSlider - A Developer's Handbook","markdown":{"yaml":{"title":"bxSlider - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nbxSlider can be installed via several methods:\n\n* **Download:** Download the latest release from the [official bxSlider website](link-to-website-here). Extract the contents and include the necessary files (jquery.bxslider.js and jquery.bxslider.css) in your project.  Ensure jQuery is included *before* bxSlider.\n\n* **CDN:** Use a CDN like jsDelivr or cdnjs to include bxSlider in your project.  This avoids the need to download and manage the files yourself.  Remember jQuery is still a prerequisite.  An example using jsDelivr:\n\n```html\n<link href=\"https://cdn.jsdelivr.net/npm/bxslider@4/dist/jquery.bxslider.css\" rel=\"stylesheet\" />\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bxslider@4/dist/jquery.bxslider.js\"></script>\n```\n\n* **npm:** If you are using npm, install bxSlider using:  `npm install bxslider`  Then import the necessary files into your project according to your module bundler (e.g., Webpack, Parcel).\n\n\n### Basic Usage\n\nOnce installed, using bxSlider is straightforward.  After including jQuery and the bxSlider files, simply select your slider container element using jQuery and call the `bxSlider()` method.\n\n```javascript\n$(document).ready(function(){\n  $('.bxslider').bxSlider();\n});\n```\n\nThis will initialize a basic slider on any element with the class \"bxslider\".  More advanced configurations are possible using options, detailed in the options section of this manual.\n\n\n### HTML Structure\n\nYour HTML should contain a container element (e.g., `<ul>`, `<div>`) that holds the slider items.  Each item should be a list item (`<li>`) or a child element of your container.\n\n**Example using a `<ul>`:**\n\n```html\n<ul class=\"bxslider\">\n  <li><img src=\"image1.jpg\" /></li>\n  <li><img src=\"image2.jpg\" /></li>\n  <li><img src=\"image3.jpg\" /></li>\n</ul>\n```\n\n**Example using a `<div>`:**\n\n```html\n<div class=\"bxslider\">\n  <div><img src=\"image1.jpg\" /></div>\n  <div><img src=\"image2.jpg\" /></div>\n  <div><img src=\"image3.jpg\" /></div>\n</div>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, and `\"image3.jpg\"` with the actual paths to your images.  The class \"bxslider\" is crucial for bxSlider to identify and initialize the slider.  You can, of course, change this class name, but you'll need to adjust the jQuery selector accordingly.\n\n\n### CSS Integration\n\nbxSlider comes with a default CSS file (`jquery.bxslider.css`). Include this file in your HTML `<head>` section to apply the default styling.  You can customize the slider's appearance by overriding the default styles in your own CSS file.  Make sure your custom CSS file is included *after* the bxSlider CSS file to ensure your styles take precedence.\n\n```html\n<link href=\"jquery.bxslider.css\" rel=\"stylesheet\" />\n<link href=\"my-custom-styles.css\" rel=\"stylesheet\" />\n```\n\nRemember to consult the bxSlider CSS documentation for the available CSS classes and selectors you can target for customization.\n\n\n## Configuration Options\n\nbxSlider offers a wide range of configuration options to customize its behavior and appearance.  These options are passed as a JavaScript object to the `bxSlider()` method.\n\n### auto\n\nType: `boolean`  Default: `false`\n\nAutomatically transitions to the next slide after a specified interval (controlled by the `pause` option).  Set to `true` to enable auto-sliding.\n\n### controls\n\nType: `boolean`  Default: `true`\n\nDisplays the \"next\" and \"previous\" controls.  Set to `false` to hide them.\n\n### pager\n\nType: `boolean`  Default: `true`\n\nDisplays the pager (a visual indicator of the current slide and total slides). Set to `false` to hide it.\n\n\n### mode\n\nType: `string`  Default: `'horizontal'`\n\nSpecifies the slider's orientation.  Options: `'horizontal'` (default), `'vertical'` (slides transition vertically).\n\n### speed\n\nType: `integer`  Default: `500`\n\nThe transition speed in milliseconds.\n\n### easing\n\nType: `string`  Default: `'swing'`\n\nThe easing function used for transitions (e.g., 'swing', 'linear', 'easeInOutExpo').  Refer to jQuery's easing library for available options.\n\n### pause\n\nType: `integer`  Default: `4000`\n\nThe time in milliseconds between auto transitions (only relevant when `auto` is `true`).\n\n### autoHover\n\nType: `boolean`  Default: `true`\n\nPauses the auto-sliding when the mouse hovers over the slider.\n\n### infiniteLoop\n\nType: `boolean`  Default: `true`\n\nEnables infinite looping.  If `false`, the slider will stop at the first and last slides.\n\n### hideControlOnEnd\n\nType: `boolean`  Default: `false`\n\nHides the navigation controls when the slider reaches the first or last slide (only relevant when `infiniteLoop` is `false`).\n\n### startSlide\n\nType: `integer`  Default: `0`\n\nSpecifies the index of the slide to start on (0-based index).\n\n### randomStart\n\nType: `boolean`  Default: `false`\n\nStarts the slider on a random slide.\n\n### captions\n\nType: `boolean`  Default: `false`\n\nDisplays captions (if available as child elements of the slider items).\n\n### adaptiveHeight\n\nType: `boolean`  Default: `false`\n\nAdjusts the slider's height to match the height of the current slide.\n\n### touchEnabled\n\nType: `boolean`  Default: `true`\n\nEnables touch support on mobile devices.\n\n### preventDefaultSwipeX\n\nType: `boolean`  Default: `false`\n\nPrevents default page scrolling behavior during horizontal swipes.\n\n### preventDefaultSwipeY\n\nType: `boolean`  Default: `false`\n\nPrevents default page scrolling behavior during vertical swipes.\n\n### minSlides\n\nType: `integer`  Default: `1`\n\nThe minimum number of slides visible at a time.\n\n### maxSlides\n\nType: `integer`  Default: `1`\n\nThe maximum number of slides visible at a time.\n\n### moveSlides\n\nType: `integer`  Default: `1`\n\nThe number of slides to move with each transition.\n\n### slideWidth\n\nType: `integer` or `string`  Default: `null`\n\nThe width of each slide (can be a number or a string like '300px').  If not specified, bxSlider will use the width of the slider container.\n\n### slideMargin\n\nType: `integer`  Default: `0`\n\nThe margin between slides.\n\n### buildPager\n\nType: `boolean`  Default: `true`\n\nAutomatically creates pager links (Only used when pager is enabled).\n\n### pagerCustom\n\nType: `string`  Default: `null`\n\nAllows for custom pager HTML.  Specify a selector to use as your pager.\n\n### pagerType\n\nType: `string` Default: `'full'`\n\nType of pager, either 'full' or 'short'. Short pager hides the total count and shows only current page.\n\n### buildControls\n\nType: `boolean`  Default: `true`\n\nAutomatically creates navigation controls. (Only used when controls are enabled).\n\n### nextSelector\n\nType: `string`  Default: `null`\n\nAllows specifying custom \"next\" button.\n\n### prevSelector\n\nType: `string`  Default: `null`\n\nAllows specifying custom \"previous\" button.\n\n### nextText\n\nType: `string`  Default: `&gt;`\n\nText for the \"next\" button.\n\n### prevText\n\nType: `string`  Default: `&lt;`\n\nText for the \"previous\" button.\n\n### responsive\n\nType: `boolean` or `object`  Default: `false`\n\nEnables responsive behavior. Can be a boolean or an object defining breakpoints and settings for different screen sizes. See documentation for details on the object structure.\n\n### onSliderLoad\n\nType: `function`  Default: `null`\n\nA callback function that is executed when the slider is fully loaded.\n\n### onSlideBefore\n\nType: `function`  Default: `null`\n\nA callback function executed before a slide transition.\n\n### onSlideAfter\n\nType: `function`  Default: `null`\n\nA callback function executed after a slide transition.\n\n### onSlideNext\n\nType: `function`  Default: `null`\n\nA callback function executed when transitioning to the next slide.\n\n### onSlidePrev\n\nType: `function`  Default: `null`\n\nA callback function executed when transitioning to the previous slide.\n\n\n\n## Methods\n\nbxSlider provides several methods to control the slider's behavior after initialization.  These methods are called on the bxSlider instance.  To get the instance, you need to store the result of the `bxSlider()` call:\n\n```javascript\nvar slider = $('.bxslider').bxSlider({ /* options */ });\n```\n\nThen call the methods on `slider`.\n\n\n### startAuto()\n\nStarts the auto-sliding functionality.  If `auto` was set to `true` during initialization, this method is unnecessary.\n\n```javascript\nslider.startAuto();\n```\n\n### stopAuto()\n\nStops the auto-sliding functionality.\n\n```javascript\nslider.stopAuto();\n```\n\n### goToNextSlide()\n\nTransitions to the next slide.\n\n```javascript\nslider.goToNextSlide();\n```\n\n### goToPrevSlide()\n\nTransitions to the previous slide.\n\n```javascript\nslider.goToPrevSlide();\n```\n\n### goToSlide()\n\nTransitions to a specific slide.  The argument is the slide index (0-based).\n\n```javascript\nslider.goToSlide(2); // Go to the third slide\n```\n\n### reloadSlider()\n\nReloads the slider. Useful if the content of the slider has changed dynamically.\n\n```javascript\nslider.reloadSlider();\n```\n\n### destroySlider()\n\nCompletely destroys the slider, removing all bxSlider-related elements and event handlers.  The slider cannot be restarted after this method is called without re-initializing it.\n\n```javascript\nslider.destroySlider();\n```\n\n\n## Events\n\nbxSlider triggers several events during its lifecycle.  These events can be used to execute custom JavaScript code at specific points in the slider's operation.  You can bind event handlers using jQuery's `.on()` method.  Remember to bind to the slider instance, not the original selector.\n\n\n### onSliderLoad\n\nTriggered when the slider has finished loading and is ready.  This is a good place to perform actions that depend on the slider being fully initialized.\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSliderLoad: function() {\n    console.log('Slider loaded!');\n    // Perform actions here...\n  }\n});\n```\n\nYou can also bind this event after initialization:\n\n```javascript\n$('.bxslider').on('onSliderLoad', function(){\n    console.log('Slider loaded!');\n    //Perform actions here...\n});\n```\n\n\n### onSlideBefore\n\nTriggered *before* a slide transition begins.  You can use this to perform actions before a slide changes (e.g., animations, or cancelling the transition).\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSlideBefore: function(slideIndex, oldIndex) {\n    console.log('Before slide change: ' + slideIndex + ' (from ' + oldIndex + ')');\n    // Perform actions here...  Returning `false` will cancel the transition.\n  }\n});\n```\n\n### onSlideAfter\n\nTriggered *after* a slide transition completes.   Use this to perform actions once a slide change is finished (e.g., updating UI elements based on the current slide).\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSlideAfter: function(slideIndex) {\n    console.log('After slide change: ' + slideIndex);\n    // Perform actions here...\n  }\n});\n```\n\n### onSlideNext\n\nTriggered specifically when transitioning to the *next* slide.\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSlideNext: function(slideIndex) {\n    console.log('Next slide: ' + slideIndex);\n    // Perform actions here...\n  }\n});\n```\n\n### onSlidePrev\n\nTriggered specifically when transitioning to the *previous* slide.\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSlidePrev: function(slideIndex) {\n    console.log('Previous slide: ' + slideIndex);\n    // Perform actions here...\n  }\n});\n```\n\nRemember that all these event handlers receive the current slide index (0-based) as an argument.  `onSlideBefore` also receives the index of the previous slide.  Returning `false` from `onSlideBefore` will prevent the slide transition from occurring.\n\n\n## Responsive Design\n\nbxSlider supports responsive design, allowing you to adjust the slider's behavior based on the screen size.\n\n### Using the `responsive` option\n\nThe core of bxSlider's responsive capabilities lies in the `responsive` option.  This option accepts either a boolean value (`true` or `false`) or a JavaScript object defining breakpoints and corresponding settings.\n\n* **Boolean `true`:**  If you set `responsive` to `true`, bxSlider will automatically adjust its behavior based on the available screen width.  It will attempt to optimize the slider for different screen sizes, but without fine-grained control over the specific breakpoints and settings.\n\n* **Responsive Object:** For more precise control, provide a JavaScript object specifying breakpoints and settings for each breakpoint.  The object's keys are the breakpoint widths (in pixels), and the values are objects containing the bxSlider settings to apply at that breakpoint.\n\n\n### Managing breakpoints\n\nThe responsive object's structure looks like this:\n\n```javascript\nresponsive: {\n  320: {\n    minSlides: 1,\n    maxSlides: 1\n  },\n  640: {\n    minSlides: 2,\n    maxSlides: 2\n  },\n  1024: {\n    minSlides: 3,\n    maxSlides: 3\n  }\n}\n```\n\nIn this example:\n\n* At screen widths below 320 pixels, the slider will show only one slide at a time (`minSlides: 1`, `maxSlides: 1`).\n* Between 320 and 640 pixels, it will show two slides (`minSlides: 2`, `maxSlides: 2`).\n* Above 640 pixels and up to 1024 pixels it shows 3 slides.\n* Above 1024 pixels, it will use the default settings (if defined, otherwise defaults to 1 slide).\n\nYou can define as many breakpoints as needed.  Any bxSlider option can be overridden within a breakpoint's settings object.\n\n\n### Examples\n\n**Example 1: Basic responsive setup**\n\n```javascript\n$('.bxslider').bxSlider({\n  responsive: true\n});\n```\n\nThis will enable basic responsive adjustments.\n\n\n**Example 2: Custom breakpoints and settings**\n\n```javascript\n$('.bxslider').bxSlider({\n  minSlides: 1,\n  maxSlides: 3,\n  slideWidth: 200,\n  slideMargin: 20,\n  responsive: {\n    320: {\n      minSlides: 1,\n      maxSlides: 1,\n      slideWidth: 100,\n      slideMargin: 10\n    },\n    768: {\n      minSlides: 2,\n      maxSlides: 2\n    }\n  }\n});\n```\n\nThis example sets default settings for a 3-slide slider with custom slide width and margin. At 320px width or less, it shows only one slide with adjusted width and margin. Above 768px width, it displays two slides.  Larger screen sizes will use the default settings. Remember that the breakpoints are *inclusive* from the lower bound.\n\n\nRemember that any settings specified directly in the main `bxSlider()` options will be overridden by the breakpoint settings if a breakpoint matches the current screen width.  The responsiveness only occurs on window resize events.  Therefore, you should ensure that you have an event listener in your code for window resize.\n\n\n## Advanced Usage\n\nThis section covers more advanced techniques for using bxSlider to achieve customized functionality and integrations.\n\n### Customizing the pager\n\nWhile bxSlider provides a default pager, you can heavily customize its appearance and functionality. The primary methods for this are `pagerCustom` and `buildPager`.\n\n* **`pagerCustom`:**  Instead of letting bxSlider generate the pager, you can provide your own HTML structure.  Specify the selector of your custom pager element using the `pagerCustom` option.  bxSlider will then populate this element with the necessary pager links.  You are responsible for styling this element.\n\n    ```javascript\n    $('.bxslider').bxSlider({\n      pagerCustom: '#my-custom-pager'\n    });\n\n    // ... your custom pager HTML in your document ...\n    <div id=\"my-custom-pager\"></div>\n    ```\n\n* **`buildPager`:** Set `buildPager` to `false` to prevent bxSlider from automatically creating the pager.  Useful if you want complete control over pager generation.  You would then have to manually create and update the pager elements in your custom event handlers (like `onSliderLoad` and `onSlideAfter`).\n\n\n### Customizing the controls\n\nSimilar to the pager, you can customize the \"next\" and \"previous\" controls.  The `nextSelector` and `prevSelector` options allow you to specify selectors for your custom control elements.  `nextText` and `prevText` modify the text within the controls.\n\n```javascript\n$('.bxslider').bxSlider({\n  nextSelector: '#my-next-button',\n  prevSelector: '#my-prev-button',\n  nextText: 'Go Right',\n  prevText: 'Go Left'\n});\n\n// ...your custom control buttons in your document...\n<button id=\"my-prev-button\">Go Left</button>\n<button id=\"my-next-button\">Go Right</button>\n```\n\nRemember that your custom control elements must be present in the document and styled appropriately.\n\n\n### Using callbacks\n\nbxSlider provides several callback functions (`onSliderLoad`, `onSlideBefore`, `onSlideAfter`, `onSlideNext`, `onSlidePrev`) to execute custom code at various stages of the slider's operation. These callbacks allow for dynamic updates and interactions with the slider, making it possible to integrate with other parts of your application. Refer to the \"Events\" section for details on using these callbacks.\n\n\n### Handling touch events\n\nbxSlider has built-in support for touch events on mobile devices.  The `touchEnabled`, `preventDefaultSwipeX`, and `preventDefaultSwipeY` options control the touch behavior.  `preventDefaultSwipeX` and `preventDefaultSwipeY` are particularly useful for preventing unwanted page scrolling while swiping the slider.\n\n\n### Integration with other libraries\n\nbxSlider can be integrated with other JavaScript libraries.  Ensure that any other libraries are included *before* bxSlider to avoid conflicts.  Common integration scenarios include:\n\n* **Lazy Loading:**  Use a lazy-loading library to load images only when they become visible in the slider.\n* **Animations:** Combine bxSlider with animation libraries like GSAP (GreenSock Animation Platform) to create more elaborate slide transitions.\n* **Infinite Scrolling:** Integrate bxSlider with infinite scrolling libraries to create a continuous scrolling effect.\n\nWhen integrating with other libraries, be mindful of potential conflicts, particularly regarding event handling and DOM manipulation.  Thorough testing is crucial to ensure compatibility.\n\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues encountered when using bxSlider.\n\n### Common Issues\n\n* **Slider not initializing:**  This often occurs due to incorrect inclusion of jQuery or bxSlider files, typos in selectors, or conflicts with other JavaScript libraries. Double-check your file paths, jQuery version compatibility, and ensure your slider container has the correct class name.\n\n* **Slider not responding to events:** Verify that the correct events are being triggered and that your event handlers are correctly bound to the bxSlider instance, not just the initial selector.  Conflicts with other JavaScript libraries might also interfere with event handling.\n\n* **Incorrect slide display:**  Check your `minSlides`, `maxSlides`, `slideWidth`, and `slideMargin` settings.  Incorrect values can lead to slides being displayed improperly or overlapping. Ensure your slider items have consistent dimensions.  Also, check if `adaptiveHeight` is causing unexpected height changes.\n\n* **Styling issues:**  Examine your CSS rules to ensure that they correctly target the bxSlider elements.  Conflicts between bxSlider's default styles and your custom CSS might be causing unexpected visual results.  Use your browser's developer tools to inspect the rendered HTML and CSS.\n\n* **Auto-sliding not working:**  Verify that the `auto` option is set to `true` and that the `pause` value is correctly set.  Also, ensure that `autoHover` isn't interfering if the mouse is hovering over the slider.\n\n* **Touch events not working:** Check that `touchEnabled` is set to `true` and that there are no conflicts with other touch event handlers on your page.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:**  Inspect the rendered HTML and CSS, check the console for JavaScript errors, and use the debugger to step through your code.\n\n* **Simplify your setup:**  Create a minimal test case to isolate the problem.  Start with a simple bxSlider configuration and gradually add features to identify the source of the issue.\n\n* **Check the bxSlider documentation and forums:**  The official documentation and community forums often contain solutions to common problems.\n\n* **Inspect the bxSlider instance:**  Log the bxSlider instance to the console to inspect its properties and methods.  This can provide valuable information about the slider's current state.\n\n\n### Solutions to Common Problems\n\n* **Slider not initializing:**  Ensure jQuery is included *before* bxSlider.  Double-check the file paths and the selector you use to initialize the slider.\n\n* **Slides overlapping:** Adjust `slideWidth` and `slideMargin` to provide sufficient spacing between slides.\n\n* **Auto-sliding not working:** Ensure `auto` is `true` and `pause` is a positive number.  If using `autoHover`, ensure it is behaving as expected.\n\n* **Styling issues:**  Use your browser's developer tools to identify CSS conflicts.  Ensure your custom CSS is loaded after the bxSlider CSS file.  Try inspecting the generated HTML to see if the bxSlider classes are applied correctly.\n\n* **Touch events not working:** Verify `touchEnabled` is `true`, and check if any other JavaScript code might be interfering with touch event handling.\n\nIf you've exhausted these troubleshooting steps and are still facing issues, please provide detailed information about your setup (HTML, JavaScript, CSS, bxSlider options) and the specific problem you're experiencing so that more specific assistance can be provided.\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nbxSlider can be installed via several methods:\n\n* **Download:** Download the latest release from the [official bxSlider website](link-to-website-here). Extract the contents and include the necessary files (jquery.bxslider.js and jquery.bxslider.css) in your project.  Ensure jQuery is included *before* bxSlider.\n\n* **CDN:** Use a CDN like jsDelivr or cdnjs to include bxSlider in your project.  This avoids the need to download and manage the files yourself.  Remember jQuery is still a prerequisite.  An example using jsDelivr:\n\n```html\n<link href=\"https://cdn.jsdelivr.net/npm/bxslider@4/dist/jquery.bxslider.css\" rel=\"stylesheet\" />\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bxslider@4/dist/jquery.bxslider.js\"></script>\n```\n\n* **npm:** If you are using npm, install bxSlider using:  `npm install bxslider`  Then import the necessary files into your project according to your module bundler (e.g., Webpack, Parcel).\n\n\n### Basic Usage\n\nOnce installed, using bxSlider is straightforward.  After including jQuery and the bxSlider files, simply select your slider container element using jQuery and call the `bxSlider()` method.\n\n```javascript\n$(document).ready(function(){\n  $('.bxslider').bxSlider();\n});\n```\n\nThis will initialize a basic slider on any element with the class \"bxslider\".  More advanced configurations are possible using options, detailed in the options section of this manual.\n\n\n### HTML Structure\n\nYour HTML should contain a container element (e.g., `<ul>`, `<div>`) that holds the slider items.  Each item should be a list item (`<li>`) or a child element of your container.\n\n**Example using a `<ul>`:**\n\n```html\n<ul class=\"bxslider\">\n  <li><img src=\"image1.jpg\" /></li>\n  <li><img src=\"image2.jpg\" /></li>\n  <li><img src=\"image3.jpg\" /></li>\n</ul>\n```\n\n**Example using a `<div>`:**\n\n```html\n<div class=\"bxslider\">\n  <div><img src=\"image1.jpg\" /></div>\n  <div><img src=\"image2.jpg\" /></div>\n  <div><img src=\"image3.jpg\" /></div>\n</div>\n```\n\nRemember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, and `\"image3.jpg\"` with the actual paths to your images.  The class \"bxslider\" is crucial for bxSlider to identify and initialize the slider.  You can, of course, change this class name, but you'll need to adjust the jQuery selector accordingly.\n\n\n### CSS Integration\n\nbxSlider comes with a default CSS file (`jquery.bxslider.css`). Include this file in your HTML `<head>` section to apply the default styling.  You can customize the slider's appearance by overriding the default styles in your own CSS file.  Make sure your custom CSS file is included *after* the bxSlider CSS file to ensure your styles take precedence.\n\n```html\n<link href=\"jquery.bxslider.css\" rel=\"stylesheet\" />\n<link href=\"my-custom-styles.css\" rel=\"stylesheet\" />\n```\n\nRemember to consult the bxSlider CSS documentation for the available CSS classes and selectors you can target for customization.\n\n\n## Configuration Options\n\nbxSlider offers a wide range of configuration options to customize its behavior and appearance.  These options are passed as a JavaScript object to the `bxSlider()` method.\n\n### auto\n\nType: `boolean`  Default: `false`\n\nAutomatically transitions to the next slide after a specified interval (controlled by the `pause` option).  Set to `true` to enable auto-sliding.\n\n### controls\n\nType: `boolean`  Default: `true`\n\nDisplays the \"next\" and \"previous\" controls.  Set to `false` to hide them.\n\n### pager\n\nType: `boolean`  Default: `true`\n\nDisplays the pager (a visual indicator of the current slide and total slides). Set to `false` to hide it.\n\n\n### mode\n\nType: `string`  Default: `'horizontal'`\n\nSpecifies the slider's orientation.  Options: `'horizontal'` (default), `'vertical'` (slides transition vertically).\n\n### speed\n\nType: `integer`  Default: `500`\n\nThe transition speed in milliseconds.\n\n### easing\n\nType: `string`  Default: `'swing'`\n\nThe easing function used for transitions (e.g., 'swing', 'linear', 'easeInOutExpo').  Refer to jQuery's easing library for available options.\n\n### pause\n\nType: `integer`  Default: `4000`\n\nThe time in milliseconds between auto transitions (only relevant when `auto` is `true`).\n\n### autoHover\n\nType: `boolean`  Default: `true`\n\nPauses the auto-sliding when the mouse hovers over the slider.\n\n### infiniteLoop\n\nType: `boolean`  Default: `true`\n\nEnables infinite looping.  If `false`, the slider will stop at the first and last slides.\n\n### hideControlOnEnd\n\nType: `boolean`  Default: `false`\n\nHides the navigation controls when the slider reaches the first or last slide (only relevant when `infiniteLoop` is `false`).\n\n### startSlide\n\nType: `integer`  Default: `0`\n\nSpecifies the index of the slide to start on (0-based index).\n\n### randomStart\n\nType: `boolean`  Default: `false`\n\nStarts the slider on a random slide.\n\n### captions\n\nType: `boolean`  Default: `false`\n\nDisplays captions (if available as child elements of the slider items).\n\n### adaptiveHeight\n\nType: `boolean`  Default: `false`\n\nAdjusts the slider's height to match the height of the current slide.\n\n### touchEnabled\n\nType: `boolean`  Default: `true`\n\nEnables touch support on mobile devices.\n\n### preventDefaultSwipeX\n\nType: `boolean`  Default: `false`\n\nPrevents default page scrolling behavior during horizontal swipes.\n\n### preventDefaultSwipeY\n\nType: `boolean`  Default: `false`\n\nPrevents default page scrolling behavior during vertical swipes.\n\n### minSlides\n\nType: `integer`  Default: `1`\n\nThe minimum number of slides visible at a time.\n\n### maxSlides\n\nType: `integer`  Default: `1`\n\nThe maximum number of slides visible at a time.\n\n### moveSlides\n\nType: `integer`  Default: `1`\n\nThe number of slides to move with each transition.\n\n### slideWidth\n\nType: `integer` or `string`  Default: `null`\n\nThe width of each slide (can be a number or a string like '300px').  If not specified, bxSlider will use the width of the slider container.\n\n### slideMargin\n\nType: `integer`  Default: `0`\n\nThe margin between slides.\n\n### buildPager\n\nType: `boolean`  Default: `true`\n\nAutomatically creates pager links (Only used when pager is enabled).\n\n### pagerCustom\n\nType: `string`  Default: `null`\n\nAllows for custom pager HTML.  Specify a selector to use as your pager.\n\n### pagerType\n\nType: `string` Default: `'full'`\n\nType of pager, either 'full' or 'short'. Short pager hides the total count and shows only current page.\n\n### buildControls\n\nType: `boolean`  Default: `true`\n\nAutomatically creates navigation controls. (Only used when controls are enabled).\n\n### nextSelector\n\nType: `string`  Default: `null`\n\nAllows specifying custom \"next\" button.\n\n### prevSelector\n\nType: `string`  Default: `null`\n\nAllows specifying custom \"previous\" button.\n\n### nextText\n\nType: `string`  Default: `&gt;`\n\nText for the \"next\" button.\n\n### prevText\n\nType: `string`  Default: `&lt;`\n\nText for the \"previous\" button.\n\n### responsive\n\nType: `boolean` or `object`  Default: `false`\n\nEnables responsive behavior. Can be a boolean or an object defining breakpoints and settings for different screen sizes. See documentation for details on the object structure.\n\n### onSliderLoad\n\nType: `function`  Default: `null`\n\nA callback function that is executed when the slider is fully loaded.\n\n### onSlideBefore\n\nType: `function`  Default: `null`\n\nA callback function executed before a slide transition.\n\n### onSlideAfter\n\nType: `function`  Default: `null`\n\nA callback function executed after a slide transition.\n\n### onSlideNext\n\nType: `function`  Default: `null`\n\nA callback function executed when transitioning to the next slide.\n\n### onSlidePrev\n\nType: `function`  Default: `null`\n\nA callback function executed when transitioning to the previous slide.\n\n\n\n## Methods\n\nbxSlider provides several methods to control the slider's behavior after initialization.  These methods are called on the bxSlider instance.  To get the instance, you need to store the result of the `bxSlider()` call:\n\n```javascript\nvar slider = $('.bxslider').bxSlider({ /* options */ });\n```\n\nThen call the methods on `slider`.\n\n\n### startAuto()\n\nStarts the auto-sliding functionality.  If `auto` was set to `true` during initialization, this method is unnecessary.\n\n```javascript\nslider.startAuto();\n```\n\n### stopAuto()\n\nStops the auto-sliding functionality.\n\n```javascript\nslider.stopAuto();\n```\n\n### goToNextSlide()\n\nTransitions to the next slide.\n\n```javascript\nslider.goToNextSlide();\n```\n\n### goToPrevSlide()\n\nTransitions to the previous slide.\n\n```javascript\nslider.goToPrevSlide();\n```\n\n### goToSlide()\n\nTransitions to a specific slide.  The argument is the slide index (0-based).\n\n```javascript\nslider.goToSlide(2); // Go to the third slide\n```\n\n### reloadSlider()\n\nReloads the slider. Useful if the content of the slider has changed dynamically.\n\n```javascript\nslider.reloadSlider();\n```\n\n### destroySlider()\n\nCompletely destroys the slider, removing all bxSlider-related elements and event handlers.  The slider cannot be restarted after this method is called without re-initializing it.\n\n```javascript\nslider.destroySlider();\n```\n\n\n## Events\n\nbxSlider triggers several events during its lifecycle.  These events can be used to execute custom JavaScript code at specific points in the slider's operation.  You can bind event handlers using jQuery's `.on()` method.  Remember to bind to the slider instance, not the original selector.\n\n\n### onSliderLoad\n\nTriggered when the slider has finished loading and is ready.  This is a good place to perform actions that depend on the slider being fully initialized.\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSliderLoad: function() {\n    console.log('Slider loaded!');\n    // Perform actions here...\n  }\n});\n```\n\nYou can also bind this event after initialization:\n\n```javascript\n$('.bxslider').on('onSliderLoad', function(){\n    console.log('Slider loaded!');\n    //Perform actions here...\n});\n```\n\n\n### onSlideBefore\n\nTriggered *before* a slide transition begins.  You can use this to perform actions before a slide changes (e.g., animations, or cancelling the transition).\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSlideBefore: function(slideIndex, oldIndex) {\n    console.log('Before slide change: ' + slideIndex + ' (from ' + oldIndex + ')');\n    // Perform actions here...  Returning `false` will cancel the transition.\n  }\n});\n```\n\n### onSlideAfter\n\nTriggered *after* a slide transition completes.   Use this to perform actions once a slide change is finished (e.g., updating UI elements based on the current slide).\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSlideAfter: function(slideIndex) {\n    console.log('After slide change: ' + slideIndex);\n    // Perform actions here...\n  }\n});\n```\n\n### onSlideNext\n\nTriggered specifically when transitioning to the *next* slide.\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSlideNext: function(slideIndex) {\n    console.log('Next slide: ' + slideIndex);\n    // Perform actions here...\n  }\n});\n```\n\n### onSlidePrev\n\nTriggered specifically when transitioning to the *previous* slide.\n\n```javascript\nvar slider = $('.bxslider').bxSlider({\n  onSlidePrev: function(slideIndex) {\n    console.log('Previous slide: ' + slideIndex);\n    // Perform actions here...\n  }\n});\n```\n\nRemember that all these event handlers receive the current slide index (0-based) as an argument.  `onSlideBefore` also receives the index of the previous slide.  Returning `false` from `onSlideBefore` will prevent the slide transition from occurring.\n\n\n## Responsive Design\n\nbxSlider supports responsive design, allowing you to adjust the slider's behavior based on the screen size.\n\n### Using the `responsive` option\n\nThe core of bxSlider's responsive capabilities lies in the `responsive` option.  This option accepts either a boolean value (`true` or `false`) or a JavaScript object defining breakpoints and corresponding settings.\n\n* **Boolean `true`:**  If you set `responsive` to `true`, bxSlider will automatically adjust its behavior based on the available screen width.  It will attempt to optimize the slider for different screen sizes, but without fine-grained control over the specific breakpoints and settings.\n\n* **Responsive Object:** For more precise control, provide a JavaScript object specifying breakpoints and settings for each breakpoint.  The object's keys are the breakpoint widths (in pixels), and the values are objects containing the bxSlider settings to apply at that breakpoint.\n\n\n### Managing breakpoints\n\nThe responsive object's structure looks like this:\n\n```javascript\nresponsive: {\n  320: {\n    minSlides: 1,\n    maxSlides: 1\n  },\n  640: {\n    minSlides: 2,\n    maxSlides: 2\n  },\n  1024: {\n    minSlides: 3,\n    maxSlides: 3\n  }\n}\n```\n\nIn this example:\n\n* At screen widths below 320 pixels, the slider will show only one slide at a time (`minSlides: 1`, `maxSlides: 1`).\n* Between 320 and 640 pixels, it will show two slides (`minSlides: 2`, `maxSlides: 2`).\n* Above 640 pixels and up to 1024 pixels it shows 3 slides.\n* Above 1024 pixels, it will use the default settings (if defined, otherwise defaults to 1 slide).\n\nYou can define as many breakpoints as needed.  Any bxSlider option can be overridden within a breakpoint's settings object.\n\n\n### Examples\n\n**Example 1: Basic responsive setup**\n\n```javascript\n$('.bxslider').bxSlider({\n  responsive: true\n});\n```\n\nThis will enable basic responsive adjustments.\n\n\n**Example 2: Custom breakpoints and settings**\n\n```javascript\n$('.bxslider').bxSlider({\n  minSlides: 1,\n  maxSlides: 3,\n  slideWidth: 200,\n  slideMargin: 20,\n  responsive: {\n    320: {\n      minSlides: 1,\n      maxSlides: 1,\n      slideWidth: 100,\n      slideMargin: 10\n    },\n    768: {\n      minSlides: 2,\n      maxSlides: 2\n    }\n  }\n});\n```\n\nThis example sets default settings for a 3-slide slider with custom slide width and margin. At 320px width or less, it shows only one slide with adjusted width and margin. Above 768px width, it displays two slides.  Larger screen sizes will use the default settings. Remember that the breakpoints are *inclusive* from the lower bound.\n\n\nRemember that any settings specified directly in the main `bxSlider()` options will be overridden by the breakpoint settings if a breakpoint matches the current screen width.  The responsiveness only occurs on window resize events.  Therefore, you should ensure that you have an event listener in your code for window resize.\n\n\n## Advanced Usage\n\nThis section covers more advanced techniques for using bxSlider to achieve customized functionality and integrations.\n\n### Customizing the pager\n\nWhile bxSlider provides a default pager, you can heavily customize its appearance and functionality. The primary methods for this are `pagerCustom` and `buildPager`.\n\n* **`pagerCustom`:**  Instead of letting bxSlider generate the pager, you can provide your own HTML structure.  Specify the selector of your custom pager element using the `pagerCustom` option.  bxSlider will then populate this element with the necessary pager links.  You are responsible for styling this element.\n\n    ```javascript\n    $('.bxslider').bxSlider({\n      pagerCustom: '#my-custom-pager'\n    });\n\n    // ... your custom pager HTML in your document ...\n    <div id=\"my-custom-pager\"></div>\n    ```\n\n* **`buildPager`:** Set `buildPager` to `false` to prevent bxSlider from automatically creating the pager.  Useful if you want complete control over pager generation.  You would then have to manually create and update the pager elements in your custom event handlers (like `onSliderLoad` and `onSlideAfter`).\n\n\n### Customizing the controls\n\nSimilar to the pager, you can customize the \"next\" and \"previous\" controls.  The `nextSelector` and `prevSelector` options allow you to specify selectors for your custom control elements.  `nextText` and `prevText` modify the text within the controls.\n\n```javascript\n$('.bxslider').bxSlider({\n  nextSelector: '#my-next-button',\n  prevSelector: '#my-prev-button',\n  nextText: 'Go Right',\n  prevText: 'Go Left'\n});\n\n// ...your custom control buttons in your document...\n<button id=\"my-prev-button\">Go Left</button>\n<button id=\"my-next-button\">Go Right</button>\n```\n\nRemember that your custom control elements must be present in the document and styled appropriately.\n\n\n### Using callbacks\n\nbxSlider provides several callback functions (`onSliderLoad`, `onSlideBefore`, `onSlideAfter`, `onSlideNext`, `onSlidePrev`) to execute custom code at various stages of the slider's operation. These callbacks allow for dynamic updates and interactions with the slider, making it possible to integrate with other parts of your application. Refer to the \"Events\" section for details on using these callbacks.\n\n\n### Handling touch events\n\nbxSlider has built-in support for touch events on mobile devices.  The `touchEnabled`, `preventDefaultSwipeX`, and `preventDefaultSwipeY` options control the touch behavior.  `preventDefaultSwipeX` and `preventDefaultSwipeY` are particularly useful for preventing unwanted page scrolling while swiping the slider.\n\n\n### Integration with other libraries\n\nbxSlider can be integrated with other JavaScript libraries.  Ensure that any other libraries are included *before* bxSlider to avoid conflicts.  Common integration scenarios include:\n\n* **Lazy Loading:**  Use a lazy-loading library to load images only when they become visible in the slider.\n* **Animations:** Combine bxSlider with animation libraries like GSAP (GreenSock Animation Platform) to create more elaborate slide transitions.\n* **Infinite Scrolling:** Integrate bxSlider with infinite scrolling libraries to create a continuous scrolling effect.\n\nWhen integrating with other libraries, be mindful of potential conflicts, particularly regarding event handling and DOM manipulation.  Thorough testing is crucial to ensure compatibility.\n\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues encountered when using bxSlider.\n\n### Common Issues\n\n* **Slider not initializing:**  This often occurs due to incorrect inclusion of jQuery or bxSlider files, typos in selectors, or conflicts with other JavaScript libraries. Double-check your file paths, jQuery version compatibility, and ensure your slider container has the correct class name.\n\n* **Slider not responding to events:** Verify that the correct events are being triggered and that your event handlers are correctly bound to the bxSlider instance, not just the initial selector.  Conflicts with other JavaScript libraries might also interfere with event handling.\n\n* **Incorrect slide display:**  Check your `minSlides`, `maxSlides`, `slideWidth`, and `slideMargin` settings.  Incorrect values can lead to slides being displayed improperly or overlapping. Ensure your slider items have consistent dimensions.  Also, check if `adaptiveHeight` is causing unexpected height changes.\n\n* **Styling issues:**  Examine your CSS rules to ensure that they correctly target the bxSlider elements.  Conflicts between bxSlider's default styles and your custom CSS might be causing unexpected visual results.  Use your browser's developer tools to inspect the rendered HTML and CSS.\n\n* **Auto-sliding not working:**  Verify that the `auto` option is set to `true` and that the `pause` value is correctly set.  Also, ensure that `autoHover` isn't interfering if the mouse is hovering over the slider.\n\n* **Touch events not working:** Check that `touchEnabled` is set to `true` and that there are no conflicts with other touch event handlers on your page.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:**  Inspect the rendered HTML and CSS, check the console for JavaScript errors, and use the debugger to step through your code.\n\n* **Simplify your setup:**  Create a minimal test case to isolate the problem.  Start with a simple bxSlider configuration and gradually add features to identify the source of the issue.\n\n* **Check the bxSlider documentation and forums:**  The official documentation and community forums often contain solutions to common problems.\n\n* **Inspect the bxSlider instance:**  Log the bxSlider instance to the console to inspect its properties and methods.  This can provide valuable information about the slider's current state.\n\n\n### Solutions to Common Problems\n\n* **Slider not initializing:**  Ensure jQuery is included *before* bxSlider.  Double-check the file paths and the selector you use to initialize the slider.\n\n* **Slides overlapping:** Adjust `slideWidth` and `slideMargin` to provide sufficient spacing between slides.\n\n* **Auto-sliding not working:** Ensure `auto` is `true` and `pause` is a positive number.  If using `autoHover`, ensure it is behaving as expected.\n\n* **Styling issues:**  Use your browser's developer tools to identify CSS conflicts.  Ensure your custom CSS is loaded after the bxSlider CSS file.  Try inspecting the generated HTML to see if the bxSlider classes are applied correctly.\n\n* **Touch events not working:** Verify `touchEnabled` is `true`, and check if any other JavaScript code might be interfering with touch event handling.\n\nIf you've exhausted these troubleshooting steps and are still facing issues, please provide detailed information about your setup (HTML, JavaScript, CSS, bxSlider options) and the specific problem you're experiencing so that more specific assistance can be provided.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"bxslider.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"bxSlider - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}