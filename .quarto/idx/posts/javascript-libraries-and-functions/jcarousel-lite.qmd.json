{"title":"JCarousel Lite - A Developer's Handbook","markdown":{"yaml":{"title":"JCarousel Lite - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is JCarousel Lite?\n\nJCarousel Lite is a small, lightweight, and highly customizable jQuery plugin designed to create attractive and functional carousels.  Unlike some larger carousel plugins, JCarousel Lite prioritizes simplicity and ease of use without sacrificing functionality. It's ideal for projects where you need a clean, efficient, and easily integrated carousel solution without the overhead of a large library. It's perfect for showcasing images, product listings, testimonials, or any other content that benefits from a horizontal scrolling presentation.\n\n\n### Key Features and Benefits\n\n* **Lightweight and Fast:** JCarousel Lite boasts a small file size, leading to faster page load times and improved performance.\n* **Easy Customization:**  Extensive options allow you to finely tune the carousel's appearance and behavior to match your design.  You can adjust the scroll speed, animation, visible items, and more through simple configuration.\n* **Simple Implementation:** Integrating JCarousel Lite into your project is straightforward, requiring minimal code. The plugin's API is designed for intuitive use.\n* **Cross-Browser Compatibility:** JCarousel Lite is built to work consistently across a wide range of modern browsers.\n* **jQuery Dependency:**  Requires jQuery, a widely used JavaScript library, ensuring compatibility with a vast number of existing projects.\n* **No external dependencies beyond jQuery:** Keeps the plugin slim and avoids potential conflicts with other libraries.\n\n\n### Getting Started: Installation and Setup\n\n1. **Include jQuery:** Ensure you have jQuery included in your HTML file.  You can download it from the jQuery website ([https://jquery.com/](https://jquery.com/)) or use a CDN like Google Hosted Libraries.  Place the `<script>` tag in the `<head>` section of your HTML:\n\n   ```html\n   <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n   ```\n\n2. **Download JCarousel Lite:** Download the JCarousel Lite JavaScript file (`jcarousellite.js`) from the project's source.\n\n3. **Include JCarousel Lite:** Include the JCarousel Lite JavaScript file in your HTML, after the jQuery inclusion:\n\n   ```html\n   <script src=\"jcarousellite.js\"></script>\n   ```\n\n4. **Create your Carousel HTML:** Create a container `<ul>` element for your carousel items. Each item should be wrapped in a `<li>` element:\n\n   ```html\n   <ul id=\"mycarousel\">\n       <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n       <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n       <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n   </ul>\n   ```\n\n5. **Initialize the Carousel:**  Use jQuery to initialize JCarousel Lite on your container. You can customize various options (refer to the options documentation for a complete list).  A basic example:\n\n   ```javascript\n   $(function() {\n       $(\"#mycarousel\").jCarouselLite({\n           auto: true, // Auto-scroll\n           speed: 1000 // Scroll speed in milliseconds\n       });\n   });\n   ```\n\nThis will create a basic auto-scrolling carousel.  Remember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, etc. with the actual paths to your images.  Consult the options documentation for further customization possibilities.\n\n\n## Basic Usage\n\n### Creating a Carousel\n\nThe fundamental structure of a JCarousel Lite carousel involves a container element (`<ul>`) that holds list items (`<li>`) representing each carousel item.  These list items will contain the content you wish to display (images, text, etc.).\n\n1. **HTML Structure:** Create an unordered list (`<ul>`) with the `id` attribute set to a unique identifier (e.g., `mycarousel`). This `id` will be used to target the carousel with jQuery.  Each list item (`<li>`) within this `ul` represents a single item in the carousel.\n\n   ```html\n   <ul id=\"mycarousel\">\n       <li>Item 1</li>\n       <li>Item 2</li>\n       <li>Item 3</li>\n   </ul>\n   ```\n\n2. **jQuery Initialization:** Use jQuery's `jCarouselLite()` method to initialize the carousel.  The selector (`#mycarousel`) targets the `ul` element created in step 1.\n\n   ```javascript\n   $(function() {\n       $(\"#mycarousel\").jCarouselLite();\n   });\n   ```\n\nThis minimal setup will create a functional, though basic, carousel.  You'll likely want to add more configuration options to customize its appearance and behavior (see \"Basic Configuration Options\" below).\n\n\n### Adding Images or Content\n\nThe content within each `<li>` element determines what the carousel displays. You can add images, text blocks, or any other HTML content you need.  Remember to ensure your images have appropriate `alt` attributes for accessibility.\n\n**Example with Images:**\n\n```html\n<ul id=\"mycarousel\">\n    <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n    <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n    <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n</ul>\n```\n\n**Example with Text and Images:**\n\n```html\n<ul id=\"mycarousel\">\n    <li><img src=\"image1.jpg\" alt=\"Image 1\"><h3>Title 1</h3><p>Some text here.</p></li>\n    <li><img src=\"image2.jpg\" alt=\"Image 2\"><h3>Title 2</h3><p>More text here.</p></li>\n    <li><img src=\"image3.jpg\" alt=\"Image 3\"><h3>Title 3</h3><p>Even more text.</p></li>\n</ul>\n```\n\nRemember to adjust the CSS to properly style your carousel items to fit your design.\n\n\n### Basic Configuration Options\n\nJCarousel Lite offers several options to customize the carousel's behavior.  These options are passed as a JavaScript object to the `jCarouselLite()` method.\n\n* **`auto`:**  (Boolean)  If `true`, the carousel will automatically scroll. Defaults to `false`.\n* **`speed`:** (Integer)  The speed of the animation (in milliseconds). Defaults to `1000` (1 second).\n* **`btnNext`:** (String)  The selector for the \"Next\" button. This button advances to the next item. Defaults to `null` (no button).\n* **`btnPrev`:** (String)  The selector for the \"Previous\" button. This button goes back to the previous item. Defaults to `null` (no button).\n* **`visible`:** (Integer) The number of items visible at any given time. Defaults to `1`.\n* **`circular`:** (Boolean)  If `true`, the carousel will loop continuously. Defaults to `false`.\n\n**Example with Configuration:**\n\n```javascript\n$(function() {\n    $(\"#mycarousel\").jCarouselLite({\n        auto: true,\n        speed: 800,\n        visible: 3,\n        circular: true,\n        btnNext: \"#next\", //Assumes you have an element with id=\"next\" as your next button\n        btnPrev: \"#prev\"  //Assumes you have an element with id=\"prev\" as your previous button\n    });\n});\n```\n\nThis example creates an auto-scrolling carousel with 3 visible items, looping continuously.  It also utilizes custom \"Next\" and \"Previous\" buttons.  Remember to create the elements with the IDs `#next` and `#prev` in your HTML for this example to work.  Consult the full documentation for a complete list of options.\n\n\n## Configuration Options\n\n### `auto`: Automatic Scrolling\n\nThis option controls whether the carousel automatically scrolls through its items.\n\n* **Type:** Boolean\n* **Default:** `false`\n* **Values:** `true` (auto-scroll enabled), `false` (auto-scroll disabled)\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ auto: true }); // Enables auto-scrolling\n```\n\nWhen set to `true`, the carousel will automatically advance to the next item after a delay determined by the `speed` option.\n\n\n### `speed`: Animation Speed\n\nThis option specifies the duration of the animation (in milliseconds).\n\n* **Type:** Integer\n* **Default:** `1000` (1 second)\n* **Values:**  Any positive integer representing milliseconds.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ speed: 500 }); // Sets animation speed to 0.5 seconds\n```\n\nA lower value will result in faster transitions, while a higher value will create slower transitions.\n\n\n### `btnPrev`: Previous Button\n\nThis option specifies the selector for the \"Previous\" button. Clicking this button moves the carousel to the previous item.\n\n* **Type:** String (jQuery selector)\n* **Default:** `null` (no previous button)\n* **Values:** A valid jQuery selector string targeting the button element (e.g., `\"#prevBtn\"`).\n* **Example:**\n\n```html\n<button id=\"prevBtn\">Previous</button>\n```\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ btnPrev: \"#prevBtn\" });\n```\n\n\n### `btnNext`: Next Button\n\nThis option specifies the selector for the \"Next\" button.  Clicking this button moves the carousel to the next item.\n\n* **Type:** String (jQuery selector)\n* **Default:** `null` (no next button)\n* **Values:** A valid jQuery selector string targeting the button element (e.g., `\"#nextBtn\"`).\n* **Example:**\n\n```html\n<button id=\"nextBtn\">Next</button>\n```\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ btnNext: \"#nextBtn\" });\n```\n\n\n### `circular`: Circular Carousel\n\nThis option determines if the carousel should loop continuously.\n\n* **Type:** Boolean\n* **Default:** `false`\n* **Values:** `true` (circular, loops continuously), `false` (linear, stops at the beginning/end)\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ circular: true }); // Enables circular scrolling\n```\n\nWhen set to `true`, reaching the last item will seamlessly loop back to the first item, and vice-versa.\n\n\n### `vertical`: Vertical Carousel\n\nThis option enables vertical scrolling instead of the default horizontal scrolling.\n\n* **Type:** Boolean\n* **Default:** `false` (horizontal scrolling)\n* **Values:** `true` (vertical scrolling), `false` (horizontal scrolling)\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ vertical: true }); // Enables vertical scrolling\n```\n\n\n### `visible`: Number of Visible Items\n\nThis option determines how many items are visible at a time.\n\n* **Type:** Integer\n* **Default:** `1`\n* **Values:** Any positive integer.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ visible: 3 }); // Shows 3 items at a time\n```\n\n\n### `scroll`: Number of Items to Scroll\n\nThis option specifies how many items should scroll with each click of the previous/next buttons or with each auto-scroll iteration.\n\n* **Type:** Integer\n* **Default:** `1`\n* **Values:** Any positive integer.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ scroll: 2 }); // Scrolls 2 items at a time\n```\n\n\n### `start`: Starting Position\n\nThis option sets the initial position of the carousel.\n\n* **Type:** Integer\n* **Default:** `0` (the first item)\n* **Values:** Any integer representing the index of the starting item (0-based index).\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ start: 2 }); // Starts at the third item (index 2)\n```\n\n\n### `easing`: Animation Easing\n\nThis option specifies the easing function for the animation.  This requires familiarity with jQuery easing functions.\n\n* **Type:** String\n* **Default:** `'linear'`\n* **Values:**  A valid jQuery easing function name (e.g., 'swing', 'easeOutBounce', etc.). Requires including an easing plugin if using functions beyond the built-in 'linear' and 'swing'.\n* **Example:** (Assuming you have included a suitable easing plugin)\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ easing: 'easeOutBounce' });\n```\n\n\n### `beforeStart`: Callback Function before Carousel Starts\n\nThis option accepts a callback function that is executed before the carousel starts animating.\n\n* **Type:** Function\n* **Default:** `null`\n* **Values:** A function to be executed.  This function receives the carousel element as an argument.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({\n    beforeStart: function(carousel) {\n        console.log(\"Carousel is about to start!\", carousel);\n    }\n});\n```\n\n\n### `afterEnd`: Callback Function after Carousel Ends\n\nThis option accepts a callback function that is executed after the carousel finishes animating.\n\n* **Type:** Function\n* **Default:** `null`\n* **Values:** A function to be executed. This function receives the carousel element as an argument.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({\n    afterEnd: function(carousel) {\n        console.log(\"Carousel animation finished!\", carousel);\n    }\n});\n```\n\nRemember that  `beforeStart` and `afterEnd` callbacks provide opportunities to perform actions like updating UI elements or logging events related to the carousel's operation.\n\n\n## Advanced Usage\n\n### Adding Custom Buttons and Controls\n\nWhile JCarousel Lite provides options for basic \"Next\" and \"Previous\" buttons, you can easily integrate custom buttons and controls to enhance the user experience.  This involves creating your own buttons in your HTML and then binding them to JCarousel Lite's internal methods using jQuery.\n\n**Example:**\n\n1. **Create custom buttons in your HTML:**\n\n   ```html\n   <button id=\"myPrev\">Previous</button>\n   <button id=\"myNext\">Next</button>\n   ```\n\n2. **Use jQuery to bind the buttons to JCarousel Lite's methods:**\n\n   ```javascript\n   $(function() {\n       $(\"#mycarousel\").jCarouselLite({\n           // ... other options ...\n       });\n\n       $(\"#myPrev\").click(function() {\n           $(\"#mycarousel\").jCarouselLite('previous');\n       });\n\n       $(\"#myNext\").click(function() {\n           $(\"#mycarousel\").jCarouselLite('next');\n       });\n   });\n   ```\n\nThis code uses jQuery's `click()` method to bind the custom buttons to the `previous()` and `next()` methods of JCarousel Lite.  This allows you to trigger carousel navigation from any custom button elements on your page.\n\n\n### Integrating with Other JavaScript Libraries\n\nJCarousel Lite's lightweight nature makes it relatively easy to integrate with other JavaScript libraries.  However, potential conflicts can arise if other libraries manipulate the same DOM elements or use conflicting event handlers.  Carefully consider the potential for conflicts and ensure proper sequencing of your JavaScript includes.\n\nFor example, if you use a library that also modifies the carousel container's CSS, ensure JCarousel Lite's initialization happens *after* that library has finished its modifications.\n\n\n### Handling Events and Callbacks\n\nJCarousel Lite's `beforeStart` and `afterEnd` options allow you to run custom code before and after the carousel animation.  For more fine-grained control, you can utilize jQuery's event handling capabilities directly on the carousel container.  You might listen for events such as `jCarouselLite.beforeStart`, `jCarouselLite.afterEnd`, etc., though these specific events might not be directly exposed by JCarousel Lite itself. Instead, consider monitoring changes to the carousel's visibility or position using other jQuery methods.\n\n\n### Creating Responsive Carousels\n\nTo make your carousel responsive, you should use CSS media queries to adjust the carousel's appearance and settings based on the screen size.  You can manipulate the `visible` and `scroll` options dynamically using JavaScript based on the window's width or other factors.  You may also need to adjust CSS properties like `width`, `height`, and margins to ensure appropriate display across various screen sizes.\n\n**Example (Conceptual):**\n\n```javascript\n$(window).resize(function() {\n    var windowWidth = $(window).width();\n    var visibleItems;\n\n    if (windowWidth > 768) {\n        visibleItems = 3;\n    } else if (windowWidth > 480) {\n        visibleItems = 2;\n    } else {\n        visibleItems = 1;\n    }\n\n    $(\"#mycarousel\").jCarouselLite({ visible: visibleItems });\n});\n```\n\nThis code snippet adjusts the `visible` option based on window width.\n\n\n### Troubleshooting Common Issues\n\n* **Carousel not working:** Double-check that jQuery and JCarousel Lite are properly included in your HTML, and the carousel's HTML structure is correct.  Inspect the browser's console for JavaScript errors.\n* **Animation issues:** Verify that the `speed` option is set appropriately.  Incorrect CSS styles affecting the carousel elements can also cause animation problems.\n* **Button issues:** Ensure that the selectors for `btnPrev` and `btnNext` correctly target your button elements.  Confirm that the jQuery event handlers are correctly bound.\n* **Layout problems:** Inspect your CSS to ensure proper styling of the carousel container and its items for different screen sizes.\n\n\nRemember to consult the JCarousel Lite documentation and examples for more detailed guidance and to explore advanced functionalities.  Thorough testing across different browsers and devices is crucial for a robust and user-friendly carousel.\n\n\n## Examples\n\n### Simple Image Carousel\n\nThis example demonstrates a basic image carousel with automatic scrolling.\n\n**HTML:**\n\n```html\n<ul id=\"imageCarousel\">\n  <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n  <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n  <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n  <li><img src=\"image4.jpg\" alt=\"Image 4\"></li>\n</ul>\n```\n\n**JavaScript:**\n\n```javascript\n$(function() {\n  $(\"#imageCarousel\").jCarouselLite({\n    auto: true,\n    speed: 1000\n  });\n});\n```\n\nThis code creates a carousel that automatically scrolls through the images every second.  Remember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, etc., with the actual paths to your images.  You'll likely want to add CSS to style the carousel and images appropriately.\n\n\n### Carousel with Custom Navigation\n\nThis example showcases a carousel with custom \"Previous\" and \"Next\" buttons.\n\n**HTML:**\n\n```html\n<ul id=\"customNavCarousel\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n<button id=\"prevBtn\">Previous</button>\n<button id=\"nextBtn\">Next</button>\n```\n\n**JavaScript:**\n\n```javascript\n$(function() {\n  $(\"#customNavCarousel\").jCarouselLite({\n    btnNext: \"#nextBtn\",\n    btnPrev: \"#prevBtn\"\n  });\n});\n```\n\nThis code uses the `btnNext` and `btnPrev` options to connect the custom buttons to the carousel's navigation functionality.  The buttons will now control the carousel's movement.\n\n\n### Vertical Carousel\n\nThis example demonstrates a vertical carousel.\n\n**HTML:**\n\n```html\n<ul id=\"verticalCarousel\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n```\n\n**JavaScript:**\n\n```javascript\n$(function() {\n  $(\"#verticalCarousel\").jCarouselLite({\n    vertical: true,\n    auto: true,\n    speed: 1500\n  });\n});\n```\n\nSetting `vertical` to `true` enables vertical scrolling.  Appropriate CSS will be needed to style the carousel for vertical orientation.\n\n\n### Responsive Carousel Example\n\nThis example provides a basic framework for a responsive carousel.  You'll need to adjust the breakpoints and CSS to suit your specific design.\n\n**HTML:** (Same as Simple Image Carousel or similar)\n\n```html\n<ul id=\"responsiveCarousel\">\n  <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n  <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n  <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n  <li><img src=\"image4.jpg\" alt=\"Image 4\"></li>\n</ul>\n```\n\n**JavaScript:**\n\n```javascript\n$(function() {\n  function adjustCarousel() {\n    var visibleItems;\n    if ($(window).width() > 768) {\n      visibleItems = 3;\n    } else {\n      visibleItems = 1;\n    }\n    $(\"#responsiveCarousel\").jCarouselLite({ visible: visibleItems });\n  }\n\n  adjustCarousel(); //Initial setup\n  $(window).resize(adjustCarousel); // Adjust on resize\n});\n\n```\n\n**CSS (example):**\n\n```css\n#responsiveCarousel li img {\n    max-width: 100%;\n    height: auto;\n}\n\n@media (min-width: 769px) {\n  #responsiveCarousel {\n    width: 768px; /* Adjust as needed */\n  }\n}\n\n```\n\nThis example uses a media query to adjust the number of visible items based on screen size.  You will need to refine this and add more CSS to create a fully responsive layout. Remember to add appropriate styling to ensure the carousel looks good at various screen sizes.  This is a simplified example and you might need more sophisticated responsive design techniques depending on your layout requirements.\n\n\n## API Reference\n\n### `jCarouselLite()`\n\nThe core function for initializing and configuring a JCarousel Lite instance.  It's called as a jQuery method on the carousel's container element (typically a `<ul>`).\n\n**Syntax:**\n\n```javascript\n$(selector).jCarouselLite(options);\n```\n\n* **`selector`:** A jQuery selector targeting the `<ul>` element that contains the carousel items.\n* **`options`:** (Optional) A JavaScript object containing configuration options (see \"Configuration Options\" section for details).  If omitted, default settings are used.\n\n**Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ auto: true, speed: 1000 });\n```\n\nThis initializes a carousel with automatic scrolling and a speed of 1000 milliseconds (1 second).\n\n\n### Methods and Properties\n\nJCarousel Lite doesn't directly expose many public properties.  Its primary interaction is through methods called on the initialized carousel element using jQuery's chained method calls.  The available methods are:\n\n* **`.jCarouselLite('next')`:** Advances the carousel to the next item.\n* **`.jCarouselLite('prev')`:** Moves the carousel to the previous item.\n* **`.jCarouselLite('goto', index)`:**  Moves the carousel to a specific item, where `index` is the zero-based index of the desired item.  For example, `$(\"#mycarousel\").jCarouselLite('goto', 2)` goes to the third item.\n\n\n**Important Considerations:**\n\n* **Chaining:** JCarousel Lite methods can be chained with other jQuery methods.\n* **Return Value:**  The methods typically don't return a specific value.  They directly modify the carousel's state.\n* **Event Handling:** While there aren't explicit events like `beforeStart` and `afterEnd` directly exposed as methods,  you can leverage jQuery's event system (like `.on()`) to observe changes in the carousel's DOM elements if you need to perform actions based on carousel state changes (e.g., after a scroll completes).  Directly accessing or modifying internal JCarousel Lite properties is generally discouraged, as these are not guaranteed to remain consistent across different versions of the plugin.  The best approach is to use the provided methods (`next`, `prev`, `goto`) and jQuery's DOM manipulation capabilities.\n\n**Example using methods:**\n\n```javascript\n$(function() {\n  $(\"#mycarousel\").jCarouselLite(); // Initialize\n\n  $(\"#nextButton\").click(function() {\n    $(\"#mycarousel\").jCarouselLite('next');\n  });\n\n  $(\"#prevButton\").click(function() {\n    $(\"#mycarousel\").jCarouselLite('prev');\n  });\n});\n```\n\nThis example shows how to use the `next` and `prev` methods to control the carousel via button clicks. Remember to create the buttons (`#nextButton`, `#prevButton`) in your HTML.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is JCarousel Lite?\n\nJCarousel Lite is a small, lightweight, and highly customizable jQuery plugin designed to create attractive and functional carousels.  Unlike some larger carousel plugins, JCarousel Lite prioritizes simplicity and ease of use without sacrificing functionality. It's ideal for projects where you need a clean, efficient, and easily integrated carousel solution without the overhead of a large library. It's perfect for showcasing images, product listings, testimonials, or any other content that benefits from a horizontal scrolling presentation.\n\n\n### Key Features and Benefits\n\n* **Lightweight and Fast:** JCarousel Lite boasts a small file size, leading to faster page load times and improved performance.\n* **Easy Customization:**  Extensive options allow you to finely tune the carousel's appearance and behavior to match your design.  You can adjust the scroll speed, animation, visible items, and more through simple configuration.\n* **Simple Implementation:** Integrating JCarousel Lite into your project is straightforward, requiring minimal code. The plugin's API is designed for intuitive use.\n* **Cross-Browser Compatibility:** JCarousel Lite is built to work consistently across a wide range of modern browsers.\n* **jQuery Dependency:**  Requires jQuery, a widely used JavaScript library, ensuring compatibility with a vast number of existing projects.\n* **No external dependencies beyond jQuery:** Keeps the plugin slim and avoids potential conflicts with other libraries.\n\n\n### Getting Started: Installation and Setup\n\n1. **Include jQuery:** Ensure you have jQuery included in your HTML file.  You can download it from the jQuery website ([https://jquery.com/](https://jquery.com/)) or use a CDN like Google Hosted Libraries.  Place the `<script>` tag in the `<head>` section of your HTML:\n\n   ```html\n   <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n   ```\n\n2. **Download JCarousel Lite:** Download the JCarousel Lite JavaScript file (`jcarousellite.js`) from the project's source.\n\n3. **Include JCarousel Lite:** Include the JCarousel Lite JavaScript file in your HTML, after the jQuery inclusion:\n\n   ```html\n   <script src=\"jcarousellite.js\"></script>\n   ```\n\n4. **Create your Carousel HTML:** Create a container `<ul>` element for your carousel items. Each item should be wrapped in a `<li>` element:\n\n   ```html\n   <ul id=\"mycarousel\">\n       <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n       <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n       <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n   </ul>\n   ```\n\n5. **Initialize the Carousel:**  Use jQuery to initialize JCarousel Lite on your container. You can customize various options (refer to the options documentation for a complete list).  A basic example:\n\n   ```javascript\n   $(function() {\n       $(\"#mycarousel\").jCarouselLite({\n           auto: true, // Auto-scroll\n           speed: 1000 // Scroll speed in milliseconds\n       });\n   });\n   ```\n\nThis will create a basic auto-scrolling carousel.  Remember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, etc. with the actual paths to your images.  Consult the options documentation for further customization possibilities.\n\n\n## Basic Usage\n\n### Creating a Carousel\n\nThe fundamental structure of a JCarousel Lite carousel involves a container element (`<ul>`) that holds list items (`<li>`) representing each carousel item.  These list items will contain the content you wish to display (images, text, etc.).\n\n1. **HTML Structure:** Create an unordered list (`<ul>`) with the `id` attribute set to a unique identifier (e.g., `mycarousel`). This `id` will be used to target the carousel with jQuery.  Each list item (`<li>`) within this `ul` represents a single item in the carousel.\n\n   ```html\n   <ul id=\"mycarousel\">\n       <li>Item 1</li>\n       <li>Item 2</li>\n       <li>Item 3</li>\n   </ul>\n   ```\n\n2. **jQuery Initialization:** Use jQuery's `jCarouselLite()` method to initialize the carousel.  The selector (`#mycarousel`) targets the `ul` element created in step 1.\n\n   ```javascript\n   $(function() {\n       $(\"#mycarousel\").jCarouselLite();\n   });\n   ```\n\nThis minimal setup will create a functional, though basic, carousel.  You'll likely want to add more configuration options to customize its appearance and behavior (see \"Basic Configuration Options\" below).\n\n\n### Adding Images or Content\n\nThe content within each `<li>` element determines what the carousel displays. You can add images, text blocks, or any other HTML content you need.  Remember to ensure your images have appropriate `alt` attributes for accessibility.\n\n**Example with Images:**\n\n```html\n<ul id=\"mycarousel\">\n    <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n    <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n    <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n</ul>\n```\n\n**Example with Text and Images:**\n\n```html\n<ul id=\"mycarousel\">\n    <li><img src=\"image1.jpg\" alt=\"Image 1\"><h3>Title 1</h3><p>Some text here.</p></li>\n    <li><img src=\"image2.jpg\" alt=\"Image 2\"><h3>Title 2</h3><p>More text here.</p></li>\n    <li><img src=\"image3.jpg\" alt=\"Image 3\"><h3>Title 3</h3><p>Even more text.</p></li>\n</ul>\n```\n\nRemember to adjust the CSS to properly style your carousel items to fit your design.\n\n\n### Basic Configuration Options\n\nJCarousel Lite offers several options to customize the carousel's behavior.  These options are passed as a JavaScript object to the `jCarouselLite()` method.\n\n* **`auto`:**  (Boolean)  If `true`, the carousel will automatically scroll. Defaults to `false`.\n* **`speed`:** (Integer)  The speed of the animation (in milliseconds). Defaults to `1000` (1 second).\n* **`btnNext`:** (String)  The selector for the \"Next\" button. This button advances to the next item. Defaults to `null` (no button).\n* **`btnPrev`:** (String)  The selector for the \"Previous\" button. This button goes back to the previous item. Defaults to `null` (no button).\n* **`visible`:** (Integer) The number of items visible at any given time. Defaults to `1`.\n* **`circular`:** (Boolean)  If `true`, the carousel will loop continuously. Defaults to `false`.\n\n**Example with Configuration:**\n\n```javascript\n$(function() {\n    $(\"#mycarousel\").jCarouselLite({\n        auto: true,\n        speed: 800,\n        visible: 3,\n        circular: true,\n        btnNext: \"#next\", //Assumes you have an element with id=\"next\" as your next button\n        btnPrev: \"#prev\"  //Assumes you have an element with id=\"prev\" as your previous button\n    });\n});\n```\n\nThis example creates an auto-scrolling carousel with 3 visible items, looping continuously.  It also utilizes custom \"Next\" and \"Previous\" buttons.  Remember to create the elements with the IDs `#next` and `#prev` in your HTML for this example to work.  Consult the full documentation for a complete list of options.\n\n\n## Configuration Options\n\n### `auto`: Automatic Scrolling\n\nThis option controls whether the carousel automatically scrolls through its items.\n\n* **Type:** Boolean\n* **Default:** `false`\n* **Values:** `true` (auto-scroll enabled), `false` (auto-scroll disabled)\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ auto: true }); // Enables auto-scrolling\n```\n\nWhen set to `true`, the carousel will automatically advance to the next item after a delay determined by the `speed` option.\n\n\n### `speed`: Animation Speed\n\nThis option specifies the duration of the animation (in milliseconds).\n\n* **Type:** Integer\n* **Default:** `1000` (1 second)\n* **Values:**  Any positive integer representing milliseconds.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ speed: 500 }); // Sets animation speed to 0.5 seconds\n```\n\nA lower value will result in faster transitions, while a higher value will create slower transitions.\n\n\n### `btnPrev`: Previous Button\n\nThis option specifies the selector for the \"Previous\" button. Clicking this button moves the carousel to the previous item.\n\n* **Type:** String (jQuery selector)\n* **Default:** `null` (no previous button)\n* **Values:** A valid jQuery selector string targeting the button element (e.g., `\"#prevBtn\"`).\n* **Example:**\n\n```html\n<button id=\"prevBtn\">Previous</button>\n```\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ btnPrev: \"#prevBtn\" });\n```\n\n\n### `btnNext`: Next Button\n\nThis option specifies the selector for the \"Next\" button.  Clicking this button moves the carousel to the next item.\n\n* **Type:** String (jQuery selector)\n* **Default:** `null` (no next button)\n* **Values:** A valid jQuery selector string targeting the button element (e.g., `\"#nextBtn\"`).\n* **Example:**\n\n```html\n<button id=\"nextBtn\">Next</button>\n```\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ btnNext: \"#nextBtn\" });\n```\n\n\n### `circular`: Circular Carousel\n\nThis option determines if the carousel should loop continuously.\n\n* **Type:** Boolean\n* **Default:** `false`\n* **Values:** `true` (circular, loops continuously), `false` (linear, stops at the beginning/end)\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ circular: true }); // Enables circular scrolling\n```\n\nWhen set to `true`, reaching the last item will seamlessly loop back to the first item, and vice-versa.\n\n\n### `vertical`: Vertical Carousel\n\nThis option enables vertical scrolling instead of the default horizontal scrolling.\n\n* **Type:** Boolean\n* **Default:** `false` (horizontal scrolling)\n* **Values:** `true` (vertical scrolling), `false` (horizontal scrolling)\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ vertical: true }); // Enables vertical scrolling\n```\n\n\n### `visible`: Number of Visible Items\n\nThis option determines how many items are visible at a time.\n\n* **Type:** Integer\n* **Default:** `1`\n* **Values:** Any positive integer.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ visible: 3 }); // Shows 3 items at a time\n```\n\n\n### `scroll`: Number of Items to Scroll\n\nThis option specifies how many items should scroll with each click of the previous/next buttons or with each auto-scroll iteration.\n\n* **Type:** Integer\n* **Default:** `1`\n* **Values:** Any positive integer.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ scroll: 2 }); // Scrolls 2 items at a time\n```\n\n\n### `start`: Starting Position\n\nThis option sets the initial position of the carousel.\n\n* **Type:** Integer\n* **Default:** `0` (the first item)\n* **Values:** Any integer representing the index of the starting item (0-based index).\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ start: 2 }); // Starts at the third item (index 2)\n```\n\n\n### `easing`: Animation Easing\n\nThis option specifies the easing function for the animation.  This requires familiarity with jQuery easing functions.\n\n* **Type:** String\n* **Default:** `'linear'`\n* **Values:**  A valid jQuery easing function name (e.g., 'swing', 'easeOutBounce', etc.). Requires including an easing plugin if using functions beyond the built-in 'linear' and 'swing'.\n* **Example:** (Assuming you have included a suitable easing plugin)\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ easing: 'easeOutBounce' });\n```\n\n\n### `beforeStart`: Callback Function before Carousel Starts\n\nThis option accepts a callback function that is executed before the carousel starts animating.\n\n* **Type:** Function\n* **Default:** `null`\n* **Values:** A function to be executed.  This function receives the carousel element as an argument.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({\n    beforeStart: function(carousel) {\n        console.log(\"Carousel is about to start!\", carousel);\n    }\n});\n```\n\n\n### `afterEnd`: Callback Function after Carousel Ends\n\nThis option accepts a callback function that is executed after the carousel finishes animating.\n\n* **Type:** Function\n* **Default:** `null`\n* **Values:** A function to be executed. This function receives the carousel element as an argument.\n* **Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({\n    afterEnd: function(carousel) {\n        console.log(\"Carousel animation finished!\", carousel);\n    }\n});\n```\n\nRemember that  `beforeStart` and `afterEnd` callbacks provide opportunities to perform actions like updating UI elements or logging events related to the carousel's operation.\n\n\n## Advanced Usage\n\n### Adding Custom Buttons and Controls\n\nWhile JCarousel Lite provides options for basic \"Next\" and \"Previous\" buttons, you can easily integrate custom buttons and controls to enhance the user experience.  This involves creating your own buttons in your HTML and then binding them to JCarousel Lite's internal methods using jQuery.\n\n**Example:**\n\n1. **Create custom buttons in your HTML:**\n\n   ```html\n   <button id=\"myPrev\">Previous</button>\n   <button id=\"myNext\">Next</button>\n   ```\n\n2. **Use jQuery to bind the buttons to JCarousel Lite's methods:**\n\n   ```javascript\n   $(function() {\n       $(\"#mycarousel\").jCarouselLite({\n           // ... other options ...\n       });\n\n       $(\"#myPrev\").click(function() {\n           $(\"#mycarousel\").jCarouselLite('previous');\n       });\n\n       $(\"#myNext\").click(function() {\n           $(\"#mycarousel\").jCarouselLite('next');\n       });\n   });\n   ```\n\nThis code uses jQuery's `click()` method to bind the custom buttons to the `previous()` and `next()` methods of JCarousel Lite.  This allows you to trigger carousel navigation from any custom button elements on your page.\n\n\n### Integrating with Other JavaScript Libraries\n\nJCarousel Lite's lightweight nature makes it relatively easy to integrate with other JavaScript libraries.  However, potential conflicts can arise if other libraries manipulate the same DOM elements or use conflicting event handlers.  Carefully consider the potential for conflicts and ensure proper sequencing of your JavaScript includes.\n\nFor example, if you use a library that also modifies the carousel container's CSS, ensure JCarousel Lite's initialization happens *after* that library has finished its modifications.\n\n\n### Handling Events and Callbacks\n\nJCarousel Lite's `beforeStart` and `afterEnd` options allow you to run custom code before and after the carousel animation.  For more fine-grained control, you can utilize jQuery's event handling capabilities directly on the carousel container.  You might listen for events such as `jCarouselLite.beforeStart`, `jCarouselLite.afterEnd`, etc., though these specific events might not be directly exposed by JCarousel Lite itself. Instead, consider monitoring changes to the carousel's visibility or position using other jQuery methods.\n\n\n### Creating Responsive Carousels\n\nTo make your carousel responsive, you should use CSS media queries to adjust the carousel's appearance and settings based on the screen size.  You can manipulate the `visible` and `scroll` options dynamically using JavaScript based on the window's width or other factors.  You may also need to adjust CSS properties like `width`, `height`, and margins to ensure appropriate display across various screen sizes.\n\n**Example (Conceptual):**\n\n```javascript\n$(window).resize(function() {\n    var windowWidth = $(window).width();\n    var visibleItems;\n\n    if (windowWidth > 768) {\n        visibleItems = 3;\n    } else if (windowWidth > 480) {\n        visibleItems = 2;\n    } else {\n        visibleItems = 1;\n    }\n\n    $(\"#mycarousel\").jCarouselLite({ visible: visibleItems });\n});\n```\n\nThis code snippet adjusts the `visible` option based on window width.\n\n\n### Troubleshooting Common Issues\n\n* **Carousel not working:** Double-check that jQuery and JCarousel Lite are properly included in your HTML, and the carousel's HTML structure is correct.  Inspect the browser's console for JavaScript errors.\n* **Animation issues:** Verify that the `speed` option is set appropriately.  Incorrect CSS styles affecting the carousel elements can also cause animation problems.\n* **Button issues:** Ensure that the selectors for `btnPrev` and `btnNext` correctly target your button elements.  Confirm that the jQuery event handlers are correctly bound.\n* **Layout problems:** Inspect your CSS to ensure proper styling of the carousel container and its items for different screen sizes.\n\n\nRemember to consult the JCarousel Lite documentation and examples for more detailed guidance and to explore advanced functionalities.  Thorough testing across different browsers and devices is crucial for a robust and user-friendly carousel.\n\n\n## Examples\n\n### Simple Image Carousel\n\nThis example demonstrates a basic image carousel with automatic scrolling.\n\n**HTML:**\n\n```html\n<ul id=\"imageCarousel\">\n  <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n  <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n  <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n  <li><img src=\"image4.jpg\" alt=\"Image 4\"></li>\n</ul>\n```\n\n**JavaScript:**\n\n```javascript\n$(function() {\n  $(\"#imageCarousel\").jCarouselLite({\n    auto: true,\n    speed: 1000\n  });\n});\n```\n\nThis code creates a carousel that automatically scrolls through the images every second.  Remember to replace `\"image1.jpg\"`, `\"image2.jpg\"`, etc., with the actual paths to your images.  You'll likely want to add CSS to style the carousel and images appropriately.\n\n\n### Carousel with Custom Navigation\n\nThis example showcases a carousel with custom \"Previous\" and \"Next\" buttons.\n\n**HTML:**\n\n```html\n<ul id=\"customNavCarousel\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n<button id=\"prevBtn\">Previous</button>\n<button id=\"nextBtn\">Next</button>\n```\n\n**JavaScript:**\n\n```javascript\n$(function() {\n  $(\"#customNavCarousel\").jCarouselLite({\n    btnNext: \"#nextBtn\",\n    btnPrev: \"#prevBtn\"\n  });\n});\n```\n\nThis code uses the `btnNext` and `btnPrev` options to connect the custom buttons to the carousel's navigation functionality.  The buttons will now control the carousel's movement.\n\n\n### Vertical Carousel\n\nThis example demonstrates a vertical carousel.\n\n**HTML:**\n\n```html\n<ul id=\"verticalCarousel\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>\n```\n\n**JavaScript:**\n\n```javascript\n$(function() {\n  $(\"#verticalCarousel\").jCarouselLite({\n    vertical: true,\n    auto: true,\n    speed: 1500\n  });\n});\n```\n\nSetting `vertical` to `true` enables vertical scrolling.  Appropriate CSS will be needed to style the carousel for vertical orientation.\n\n\n### Responsive Carousel Example\n\nThis example provides a basic framework for a responsive carousel.  You'll need to adjust the breakpoints and CSS to suit your specific design.\n\n**HTML:** (Same as Simple Image Carousel or similar)\n\n```html\n<ul id=\"responsiveCarousel\">\n  <li><img src=\"image1.jpg\" alt=\"Image 1\"></li>\n  <li><img src=\"image2.jpg\" alt=\"Image 2\"></li>\n  <li><img src=\"image3.jpg\" alt=\"Image 3\"></li>\n  <li><img src=\"image4.jpg\" alt=\"Image 4\"></li>\n</ul>\n```\n\n**JavaScript:**\n\n```javascript\n$(function() {\n  function adjustCarousel() {\n    var visibleItems;\n    if ($(window).width() > 768) {\n      visibleItems = 3;\n    } else {\n      visibleItems = 1;\n    }\n    $(\"#responsiveCarousel\").jCarouselLite({ visible: visibleItems });\n  }\n\n  adjustCarousel(); //Initial setup\n  $(window).resize(adjustCarousel); // Adjust on resize\n});\n\n```\n\n**CSS (example):**\n\n```css\n#responsiveCarousel li img {\n    max-width: 100%;\n    height: auto;\n}\n\n@media (min-width: 769px) {\n  #responsiveCarousel {\n    width: 768px; /* Adjust as needed */\n  }\n}\n\n```\n\nThis example uses a media query to adjust the number of visible items based on screen size.  You will need to refine this and add more CSS to create a fully responsive layout. Remember to add appropriate styling to ensure the carousel looks good at various screen sizes.  This is a simplified example and you might need more sophisticated responsive design techniques depending on your layout requirements.\n\n\n## API Reference\n\n### `jCarouselLite()`\n\nThe core function for initializing and configuring a JCarousel Lite instance.  It's called as a jQuery method on the carousel's container element (typically a `<ul>`).\n\n**Syntax:**\n\n```javascript\n$(selector).jCarouselLite(options);\n```\n\n* **`selector`:** A jQuery selector targeting the `<ul>` element that contains the carousel items.\n* **`options`:** (Optional) A JavaScript object containing configuration options (see \"Configuration Options\" section for details).  If omitted, default settings are used.\n\n**Example:**\n\n```javascript\n$(\"#mycarousel\").jCarouselLite({ auto: true, speed: 1000 });\n```\n\nThis initializes a carousel with automatic scrolling and a speed of 1000 milliseconds (1 second).\n\n\n### Methods and Properties\n\nJCarousel Lite doesn't directly expose many public properties.  Its primary interaction is through methods called on the initialized carousel element using jQuery's chained method calls.  The available methods are:\n\n* **`.jCarouselLite('next')`:** Advances the carousel to the next item.\n* **`.jCarouselLite('prev')`:** Moves the carousel to the previous item.\n* **`.jCarouselLite('goto', index)`:**  Moves the carousel to a specific item, where `index` is the zero-based index of the desired item.  For example, `$(\"#mycarousel\").jCarouselLite('goto', 2)` goes to the third item.\n\n\n**Important Considerations:**\n\n* **Chaining:** JCarousel Lite methods can be chained with other jQuery methods.\n* **Return Value:**  The methods typically don't return a specific value.  They directly modify the carousel's state.\n* **Event Handling:** While there aren't explicit events like `beforeStart` and `afterEnd` directly exposed as methods,  you can leverage jQuery's event system (like `.on()`) to observe changes in the carousel's DOM elements if you need to perform actions based on carousel state changes (e.g., after a scroll completes).  Directly accessing or modifying internal JCarousel Lite properties is generally discouraged, as these are not guaranteed to remain consistent across different versions of the plugin.  The best approach is to use the provided methods (`next`, `prev`, `goto`) and jQuery's DOM manipulation capabilities.\n\n**Example using methods:**\n\n```javascript\n$(function() {\n  $(\"#mycarousel\").jCarouselLite(); // Initialize\n\n  $(\"#nextButton\").click(function() {\n    $(\"#mycarousel\").jCarouselLite('next');\n  });\n\n  $(\"#prevButton\").click(function() {\n    $(\"#mycarousel\").jCarouselLite('prev');\n  });\n});\n```\n\nThis example shows how to use the `next` and `prev` methods to control the carousel via button clicks. Remember to create the buttons (`#nextButton`, `#prevButton`) in your HTML.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"jcarousel-lite.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"JCarousel Lite - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}