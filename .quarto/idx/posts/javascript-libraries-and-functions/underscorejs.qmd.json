{"title":"Underscore.js - Documentation","markdown":{"yaml":{"title":"Underscore.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Underscore.js?","containsRefs":false,"markdown":"\n\n\n\nUnderscore.js is a JavaScript library that provides a whole mess of helpful utility functions.  It's a foundational library that offers a consistent and robust set of tools for working with collections (arrays, objects), iterating, and performing common data manipulations.  While it doesn't directly interact with the DOM (unlike jQuery), it excels at providing the functional programming building blocks that make JavaScript development more efficient and readable.  Think of it as a Swiss Army knife for your JavaScript toolkit.\n\n### Why Use Underscore.js?\n\nUnderscore.js offers several compelling reasons for inclusion in your projects:\n\n* **Improved Code Readability:** Underscore's functions provide concise and expressive ways to perform common tasks, making your code easier to understand and maintain.  Instead of writing verbose loops and conditional statements, you can leverage Underscore's higher-order functions for a more declarative style.\n\n* **Functional Programming Paradigm:** Underscore promotes a functional programming approach, encouraging immutability and avoiding side effects. This leads to more predictable and testable code.\n\n* **Cross-Browser Compatibility:** Underscore handles cross-browser inconsistencies, ensuring your code works reliably across different browsers and environments.\n\n* **Enhanced Productivity:** Underscore's extensive collection of functions saves you time and effort by providing pre-built solutions for common programming problems.  This allows developers to focus on the unique logic of their application instead of reinventing the wheel.\n\n* **Lightweight:**  Underscore.js has a small footprint, minimizing the impact on your application's performance.\n\n\n### Setting up Underscore.js\n\nThere are several ways to incorporate Underscore.js into your project:\n\n* **Download and Include:** Download the Underscore.js library from the official website (typically a minified version, `underscore-min.js`), and include it in your HTML file using a `<script>` tag:\n\n```html\n<script src=\"underscore-min.js\"></script>\n```\n\n* **Using a CDN:** Include Underscore.js via a Content Delivery Network (CDN) like jsDelivr or cdnjs.  This avoids the need to download and manage the library yourself.  For example, using jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/underscore@1.13.1/underscore-min.js\"></script>\n```\n\n* **Using a Package Manager (npm or yarn):** If you're using a module bundler like Webpack or Parcel, or a package manager like npm or yarn, you can install Underscore.js as a dependency:\n\n```bash\nnpm install underscore\n# or\nyarn add underscore\n```\n\nThen, import it into your JavaScript modules as needed (the specific import syntax depends on your module bundler).  For example, with ES6 modules:\n\n```javascript\nimport _ from 'underscore';\n```\n\n\n### Core Concepts and Terminology\n\nUnderstanding these core concepts is crucial for effectively using Underscore.js:\n\n* **Collections:** Underscore primarily works with collections, which are arrays and objects. Many functions operate on these collections to perform transformations, filtering, and other operations.\n\n* **Iterators:**  Functions like `each`, `map`, `reduce`, `filter`, and `find` are iterators that traverse collections and apply a given function to each element. These are fundamental to functional programming with Underscore.\n\n* **Chaining:** Underscore allows method chaining, enabling you to string together multiple operations on a collection in a fluent and readable manner. This significantly improves code clarity.\n\n* **Higher-Order Functions:**  Underscore heavily utilizes higher-order functions. These are functions that take other functions as arguments (e.g., callbacks passed to iterators) or return functions as results.  This enables powerful abstraction and code reusability.\n\n* **Predicates:**  A predicate is a function that returns a boolean value (true or false).  Many Underscore functions use predicates to filter or test elements within a collection (e.g., `filter`, `every`, `some`).\n\n* **Memoization:** Some Underscore functions utilize memoization to improve performance by caching the results of expensive computations.\n\n\nBy understanding these concepts and the functions detailed in the following sections of this manual, you will be well-equipped to harness the power of Underscore.js for your JavaScript projects.\n\n\n\n\n## Collections\n\nUnderscore.js provides a rich set of functions for working with collections (arrays and objects).  These functions often utilize iterators and higher-order functions to perform efficient and expressive data manipulation.\n\n### `each` (alias: `forEach`)\n\nIterates over a list of elements, executing a provided function for each element.  This function doesn't return a value; it's primarily used for side effects (e.g., modifying elements, logging output).\n\n**Signature:**\n\n```javascript\n_.each(list, iteratee, [context])\n```\n\n* `list`: The array or object to iterate over.\n* `iteratee`: The function invoked per iteration.  It receives the element value, index (or key for objects), and the list as arguments.\n* `context`:  Optional.  The context (`this`) within which `iteratee` is executed.\n\n\n**Example:**\n\n```javascript\n_.each([1, 2, 3], function(num) { console.log(num); }); // Logs 1, 2, 3 to the console.\n_.each({a: 1, b: 2}, function(value, key) { console.log(key + ': ' + value); }); // Logs a: 1, b: 2\n```\n\n### `map` (alias: `collect`)\n\nProduces a new array of values by mapping each element in the input list through a transformation function.\n\n**Signature:**\n\n```javascript\n_.map(list, iteratee, [context])\n```\n\n* `list`: The array or object to iterate over.\n* `iteratee`: The function applied to each element.  It receives the element value, index (or key for objects), and the list as arguments.  It should return the transformed value.\n* `context`: Optional.  The context (`this`) within which `iteratee` is executed.\n\n**Example:**\n\n```javascript\nvar doubled = _.map([1, 2, 3], function(num){ return num * 2; }); // doubled will be [2, 4, 6]\n```\n\n### `reduce` (alias: `foldl`, `inject`)\n\nBoils down a list of values into a single value.  It iteratively applies a function to each element and accumulates the result.\n\n**Signature:**\n\n```javascript\n_.reduce(list, iteratee, memo, [context])\n```\n\n* `list`: The array or object to reduce.\n* `iteratee`: The function applied to each element.  It receives the accumulated value (`memo`), the current element, its index (or key for objects), and the list as arguments. It should return the updated accumulated value.\n* `memo`: The initial value of the accumulator.\n* `context`: Optional.  The context (`this`) within which `iteratee` is executed.\n\n**Example:**\n\n```javascript\nvar sum = _.reduce([1, 2, 3], function(memo, num){ return memo + num; }, 0); // sum will be 6\n```\n\n### `filter` (alias: `select`)\n\nLooks through each value in the list, returning an array of all the values that pass a truth test (predicate).\n\n**Signature:**\n\n```javascript\n_.filter(list, predicate, [context])\n```\n\n* `list`: The array or object to filter.\n* `predicate`: The function that determines whether an element is included. It receives the element value, index (or key for objects), and the list as arguments.  It should return `true` if the element should be included, `false` otherwise.\n* `context`: Optional. The context (`this`) within which `predicate` is executed.\n\n**Example:**\n\n```javascript\nvar evens = _.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; }); // evens will be [2, 4, 6]\n```\n\n### `reject`\n\nThe opposite of `filter`; returns the values that *do not* pass the truth test.\n\n**Signature:**  Similar to `filter`.\n\n**Example:**\n\n```javascript\nvar odds = _.reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; }); // odds will be [1, 3, 5]\n```\n\n### `every` (alias: `all`)\n\nChecks if all elements in the list satisfy the given predicate.  Returns `true` if all do, `false` otherwise.\n\n**Signature:** Similar to `filter`.\n\n### `some` (alias: `any`)\n\nChecks if at least one element in the list satisfies the given predicate. Returns `true` if at least one does, `false` otherwise.\n\n**Signature:** Similar to `filter`.\n\n\n### `contains` (alias: `include`)\n\nChecks if the list contains the given value.\n\n**Signature:**\n\n```javascript\n_.contains(list, value, [fromIndex])\n```\n\n* `list`: The array or object to search.\n* `value`: The value to search for.\n* `fromIndex`: Optional. The index to start searching from.\n\n### `invoke`\n\nCalls a method on each value in the list.  Useful for invoking methods on objects within an array.\n\n**Signature:**\n\n```javascript\n_.invoke(list, methodName, *args)\n```\n\n* `list`: The list of objects.\n* `methodName`: The name of the method to invoke.\n* `*args`:  Optional arguments to pass to the method.\n\n### `pluck`\n\nExtracts a list of property values from a list of objects.\n\n**Signature:**\n\n```javascript\n_.pluck(list, propertyName)\n```\n\n* `list`: The list of objects.\n* `propertyName`: The name of the property to extract.\n\n### `max`\n\nReturns the maximum value in the list.\n\n**Signature:**\n\n```javascript\n_.max(list, [iteratee])\n```\n\n* `list`: The list of values.\n* `iteratee`: Optional.  A function that returns the value to compare for determining the maximum.\n\n### `min`\n\nReturns the minimum value in the list.\n\n**Signature:** Similar to `max`.\n\n### `sortBy`\n\nSorts a list of values by a given property or function.\n\n**Signature:**\n\n```javascript\n_.sortBy(list, iteratee, [context])\n```\n\n* `list`: The list to sort.\n* `iteratee`: The property name or function to sort by.\n* `context`: Optional. The context (`this`) for the iteratee function.\n\n### `groupBy`\n\nGroups a list of values into an object based on the result of a given function.\n\n**Signature:**\n\n```javascript\n_.groupBy(list, iteratee, [context])\n```\n\n* `list`: The list to group.\n* `iteratee`: The property name or function to group by.\n* `context`: Optional. The context (`this`) for the iteratee function.\n\n### `indexBy`\n\nSimilar to `groupBy`, but creates an object where the keys are the results of the iteratee and the values are the original elements.\n\n**Signature:** Similar to `groupBy`.\n\n### `countBy`\n\nCounts the number of occurrences of each unique result of an iteratee function.\n\n**Signature:** Similar to `groupBy`.\n\n\n### `shuffle`\n\nRandomly shuffles the elements in the list.\n\n**Signature:**\n\n```javascript\n_.shuffle(list)\n```\n\n### `sample`\n\nReturns a random element from the list.  If a number is provided, returns an array of that many random elements.\n\n**Signature:**\n\n```javascript\n_.sample(list, [n])\n```\n\n* `list`: The list to sample from.\n* `n`: Optional. The number of random elements to return.\n\n### `toArray`\n\nConverts an object into an array of its values.\n\n**Signature:**\n\n```javascript\n_.toArray(obj)\n```\n\n### `size`\n\nReturns the number of elements in a collection.\n\n**Signature:**\n\n```javascript\n_.size(obj)\n```\n\nThis section provides a concise overview of Underscore.js's collection functions.  Refer to the Underscore.js documentation for complete details and advanced usage examples.\n\n\n\n\n## Arrays\n\nUnderscore.js extends JavaScript's built-in array functionality with several powerful utility functions.  These functions simplify common array manipulations and improve code readability.\n\n### `first`\n\nReturns the first element of an array.  If a number `n` is provided, returns the first `n` elements as a new array.\n\n**Signature:**\n\n```javascript\n_.first(array, [n])\n```\n\n* `array`: The input array.\n* `n`: Optional. The number of elements to return.\n\n**Example:**\n\n```javascript\n_.first([1, 2, 3]); // => 1\n_.first([1, 2, 3], 2); // => [1, 2]\n```\n\n### `initial`\n\nReturns all elements of an array except the last one.  If a number `n` is provided, returns all but the last `n` elements.\n\n**Signature:**\n\n```javascript\n_.initial(array, [n])\n```\n\n* `array`: The input array.\n* `n`: Optional. The number of elements to exclude from the end.\n\n**Example:**\n\n```javascript\n_.initial([1, 2, 3]); // => [1, 2]\n_.initial([1, 2, 3, 4], 2); // => [1, 2]\n```\n\n### `rest` (alias: `tail`)\n\nReturns all elements of an array except the first one.  If a number `n` is provided, returns all but the first `n` elements.\n\n**Signature:**\n\n```javascript\n_.rest(array, [n])\n```\n\n* `array`: The input array.\n* `n`: Optional. The number of elements to exclude from the beginning.\n\n**Example:**\n\n```javascript\n_.rest([1, 2, 3]); // => [2, 3]\n_.rest([1, 2, 3, 4], 2); // => [3, 4]\n```\n\n### `last`\n\nReturns the last element of an array.  If a number `n` is provided, returns the last `n` elements as a new array.\n\n**Signature:**\n\n```javascript\n_.last(array, [n])\n```\n\n* `array`: The input array.\n* `n`: Optional. The number of elements to return.\n\n**Example:**\n\n```javascript\n_.last([1, 2, 3]); // => 3\n_.last([1, 2, 3], 2); // => [2, 3]\n```\n\n### `compact`\n\nCreates a new array with all falsey values removed.  Falsey values are `false`, `null`, `0`, `\"\"`, `undefined`, and `NaN`.\n\n**Signature:**\n\n```javascript\n_.compact(array)\n```\n\n* `array`: The input array.\n\n**Example:**\n\n```javascript\n_.compact([0, 1, false, 2, '', 3]); // => [1, 2, 3]\n```\n\n### `flatten`\n\nFlattens a nested array (array of arrays) into a single level.  Can handle multiple levels of nesting.\n\n**Signature:**\n\n```javascript\n_.flatten(array, [shallow])\n```\n\n* `array`: The input array.\n* `shallow`: Optional.  If true, only flattens one level.\n\n**Example:**\n\n```javascript\n_.flatten([1, [2, [3, 4], 5]]); // => [1, 2, 3, 4, 5]\n_.flatten([1, [2, [3, 4], 5]], true); // => [1, 2, [3, 4], 5]\n```\n\n### `without`\n\nReturns a new array without the given values.\n\n**Signature:**\n\n```javascript\n_.without(array, *values)\n```\n\n* `array`: The input array.\n* `*values`: The values to exclude.\n\n**Example:**\n\n```javascript\n_.without([1, 2, 1, 0, 3, 1, 4], 0, 1); // => [2, 3, 4]\n```\n\n### `uniq` (alias: `unique`)\n\nProduces a duplicate-free version of the array, using a simple === comparison for equality.  Uses a Set internally for efficiency.\n\n**Signature:**\n\n```javascript\n_.uniq(array, [isSorted], [iteratee])\n```\n\n* `array`: The input array.\n* `isSorted`: Optional.  If true, the input array is assumed to be sorted.  This can improve performance.\n* `iteratee`: Optional. A function to extract a value from each element for comparison.\n\n### `union`\n\nProduces the union of multiple arrays.  Returns a new array that contains unique values from all input arrays.\n\n**Signature:**\n\n```javascript\n_.union(*arrays)\n```\n\n* `*arrays`: Two or more arrays.\n\n### `intersection`\n\nReturns the intersection of multiple arrays; i.e., the elements that appear in *all* input arrays.\n\n**Signature:**\n\n```javascript\n_.intersection(*arrays)\n```\n\n* `*arrays`: Two or more arrays.\n\n\n### `difference`\n\nReturns the values from array that are not present in the other arrays.\n\n**Signature:**\n\n```javascript\n_.difference(array, *others)\n```\n\n* `array`: The input array.\n* `*others`: One or more arrays to compare against.\n\n\n### `zip`\n\nMerges together the values of several arrays, returning an array of arrays where each sub-array contains corresponding values from the input arrays.\n\n**Signature:**\n\n```javascript\n_.zip(*arrays)\n```\n\n* `*arrays`: Two or more arrays.\n\n**Example:**\n\n```javascript\n_.zip(['a', 'b'], [1, 2], [true, false]); // => [['a', 1, true], ['b', 2, false]]\n```\n\n### `unzip`\n\nThe inverse of `zip`.  Takes an array of arrays and groups the elements based on their position.\n\n**Signature:**\n\n```javascript\n_.unzip(array)\n```\n\n* `array`: An array of arrays.\n\n\n### `range`\n\nGenerates an array of numbers within a given range.\n\n**Signature:**\n\n```javascript\n_.range([start], stop, [step])\n```\n\n* `start`: Optional. The starting number (default: 0).\n* `stop`: The ending number (exclusive).\n* `step`: Optional. The increment (default: 1).\n\n\n### `bindAll`\n\nBinds a number of methods to an object's scope. Useful for creating functions that maintain context when called later.\n\n**Signature:**\n\n```javascript\n_.bindAll(object, *methodNames)\n```\n\n* `object`: The object whose methods should be bound.\n* `*methodNames`:  The names of the methods to bind.\n\n\nThis section provides a concise overview.  Consult the Underscore.js documentation for detailed examples and edge cases.\n\n\n\n\n## Functions\n\nUnderscore.js offers a suite of functions for working with and manipulating JavaScript functions themselves.  These functions provide powerful tools for controlling function execution, managing context, and optimizing performance.\n\n### `bind`\n\nCreates a function that, when called, has its `this` keyword set to a provided value, with a given sequence of arguments prepended to those provided during the actual call.\n\n**Signature:**\n\n```javascript\n_.bind(func, context, *args)\n```\n\n* `func`: The function to bind.\n* `context`: The value to be assigned to `this` when the bound function is called.\n* `*args`:  Optional arguments to be prepended to those passed when the bound function is invoked.\n\n**Example:**\n\n```javascript\nfunction greet(greeting) { console.log(greeting + \", \" + this.name); }\nvar person = {name: \"Alice\"};\nvar boundGreet = _.bind(greet, person, \"Hello\");\nboundGreet(); // Logs \"Hello, Alice\"\n```\n\n### `partial`\n\nPartially applies a function by filling in given arguments, and returning a new version of the function that accepts the remaining arguments.\n\n**Signature:**\n\n```javascript\n_.partial(func, *args)\n```\n\n* `func`: The function to partially apply.\n* `*args`: Arguments to pre-fill.\n\n**Example:**\n\n```javascript\nfunction add(a, b, c) { return a + b + c; }\nvar add5 = _.partial(add, 5); // Partially apply the first argument as 5.\nadd5(2, 3); // Returns 10.\n```\n\n### `memoize`\n\nCreates a version of a function that will only call the original function once for any given set of arguments. Subsequent calls with the same arguments will return the cached result.  Useful for expensive function calls.\n\n**Signature:**\n\n```javascript\n_.memoize(func, [hashFunction])\n```\n\n* `func`: The function to memoize.\n* `hashFunction`: Optional. A function used to generate a unique key for the cache based on the arguments.\n\n**Example:**\n\n```javascript\nvar expensiveFunction = _.memoize(function(n){ /* ...some expensive computation... */ return n*2; });\nexpensiveFunction(5); // Computes and caches the result.\nexpensiveFunction(5); // Returns cached result.\n```\n\n\n### `delay`\n\nSchedules a function to be called after a given delay in milliseconds.\n\n**Signature:**\n\n```javascript\n_.delay(func, wait, *args)\n```\n\n* `func`: The function to delay.\n* `wait`: The delay in milliseconds.\n* `*args`:  Arguments to pass to the function.\n\n### `defer`\n\nSchedules a function to be called as soon as possible after the current call stack is cleared.  Essentially a delay of 0ms.\n\n**Signature:**\n\n```javascript\n_.defer(func, *args)\n```\n\n* `func`: The function to defer.\n* `*args`: Arguments to pass to the function.\n\n### `throttle`\n\nCreates a throttled version of a function that only executes the function at most once every wait milliseconds.  Useful for rate-limiting functions that are called frequently.\n\n**Signature:**\n\n```javascript\n_.throttle(func, wait, [options])\n```\n\n* `func`: The function to throttle.\n* `wait`: The minimum time between function executions.\n* `options`: Optional object with `leading` and `trailing` properties (boolean, default true).  Controls whether the function should be executed on the leading edge and/or trailing edge of the wait period.\n\n\n### `debounce`\n\nCreates a debounced version of a function.  It will only execute the function after a specified delay, ignoring calls within that delay.  Useful for handling events like window resizing or input changes.\n\n**Signature:**\n\n```javascript\n_.debounce(func, wait, [immediate])\n```\n\n* `func`: The function to debounce.\n* `wait`: The delay in milliseconds.\n* `immediate`: Optional boolean. If true, executes the function on the leading edge instead of the trailing edge of the delay.\n\n### `once`\n\nCreates a version of a function that can only be called once.  Subsequent calls will return the result of the first call.\n\n**Signature:**\n\n```javascript\n_.once(func)\n```\n\n* `func`: The function to make callable only once.\n\n\n### `after`\n\nCreates a function that will only be executed after being called `n` times.\n\n**Signature:**\n\n```javascript\n_.after(times, func)\n```\n\n* `times`: The number of times the function must be called before it executes.\n* `func`: The function to execute.\n\n\n### `compose`\n\nCreates a function that is the composition of a list of functions.  Each function consumes the return value of the function that follows.\n\n**Signature:**\n\n```javascript\n_.compose(*functions)\n```\n\n* `*functions`:  A list of functions to compose.\n\n\n### `wrap`\n\nWraps the first function with another function, passing it as the first argument.  Useful for adding pre- or post-processing to a function.\n\n**Signature:**\n\n```javascript\n_.wrap(func, wrapper)\n```\n\n* `func`: The function to wrap.\n* `wrapper`: The function that will wrap `func`.  The `wrapper` should accept `func` as its first argument, and return a function that takes any other arguments passed to the wrapped function.\n\n\nThis section provides a concise overview of Underscore.js's function manipulation utilities.  Consult the Underscore.js documentation for detailed examples and nuanced usage considerations.\n\n\n\n\n## Objects\n\nUnderscore.js provides a comprehensive set of functions for working with plain JavaScript objects.  These functions simplify common object manipulations and enhance code readability and maintainability.\n\n\n### `keys`\n\nRetrieve all the names of the object's own enumerable properties.\n\n**Signature:**\n\n```javascript\n_.keys(object)\n```\n\n* `object`: The object whose keys are to be retrieved.\n\n**Example:**\n\n```javascript\n_.keys({one: 1, two: 2, three: 3}); // => [\"one\", \"two\", \"three\"]\n```\n\n\n### `values`\n\nRetrieve all the values of the object's own enumerable properties.\n\n**Signature:**\n\n```javascript\n_.values(object)\n```\n\n* `object`: The object whose values are to be retrieved.\n\n**Example:**\n\n```javascript\n_.values({one: 1, two: 2, three: 3}); // => [1, 2, 3]\n```\n\n\n### `pairs`\n\nConvert an object into a list of [key, value] pairs.\n\n**Signature:**\n\n```javascript\n_.pairs(object)\n```\n\n* `object`: The object to convert.\n\n**Example:**\n\n```javascript\n_.pairs({one: 1, two: 2}); // => [[\"one\", 1], [\"two\", 2]]\n```\n\n\n### `invert`\n\nReturns a copy of the object where the keys and values are swapped.\n\n**Signature:**\n\n```javascript\n_.invert(object)\n```\n\n* `object`: The object to invert.\n\n**Example:**\n\n```javascript\n_.invert({a: 1, b: 2, c: 1}); // => {1: \"c\", 2: \"b\"}  (Note: last key wins in case of duplicates)\n```\n\n\n### `functions` (alias: `methods`)\n\nRetrieve the names of all the object's own enumerable function properties.\n\n**Signature:**\n\n```javascript\n_.functions(object)\n```\n\n* `object`: The object to inspect.\n\n**Example:**\n\n```javascript\n_.functions({a: function() {}, b: \"value\"}); // => [\"a\"]\n```\n\n\n### `extend` (alias: `assign`)\n\nCopy all of the properties in the source objects over to the destination object.\n\n**Signature:**\n\n```javascript\n_.extend(destination, *sources)\n```\n\n* `destination`: The object to extend.\n* `*sources`: One or more source objects.\n\n**Example:**\n\n```javascript\nvar dest = {a: 1};\n_.extend(dest, {b: 2}, {c: 3}); // dest now equals {a: 1, b: 2, c: 3}\n```\n\n\n### `pick`\n\nCopy only the specified properties from the source object into a new object.\n\n**Signature:**\n\n```javascript\n_.pick(object, *keys)\n```\n\n* `object`: The source object.\n* `*keys`: The keys to pick.\n\n**Example:**\n\n```javascript\n_.pick({a: 1, b: 2, c: 3}, 'a', 'c'); // => {a: 1, c: 3}\n```\n\n\n### `omit`\n\nCreate a new object omitting the specified properties from the source object.\n\n**Signature:**\n\n```javascript\n_.omit(object, *keys)\n```\n\n* `object`: The source object.\n* `*keys`: The keys to omit.\n\n\n**Example:**\n\n```javascript\n_.omit({a: 1, b: 2, c: 3}, 'a', 'c'); // => {b: 2}\n```\n\n\n### `defaults`\n\nFill in undefined properties in object with values from the defaults objects, recursively.\n\n**Signature:**\n\n```javascript\n_.defaults(object, *defaults)\n```\n\n* `object`: The target object.\n* `*defaults`: One or more default objects.\n\n**Example:**\n\n```javascript\n_.defaults({a: 1}, {a: 2, b: 3}); // => {a: 1, b: 3}\n```\n\n\n### `clone`\n\nCreate a shallow-copied clone of the object.\n\n**Signature:**\n\n```javascript\n_.clone(object)\n```\n\n* `object`: The object to clone.\n\n\n### `isEqual`\n\nPerform a deep comparison between two objects or values.\n\n**Signature:**\n\n```javascript\n_.isEqual(object, other)\n```\n\n* `object`: The first object or value.\n* `other`: The second object or value.\n\n\n### `isEmpty`\n\nCheck if an object (or array) is empty.\n\n**Signature:**\n\n```javascript\n_.isEmpty(object)\n```\n\n* `object`: The object or array to check.\n\n\n### `isElement`\n\nCheck if an object is a DOM element.\n\n**Signature:**\n\n```javascript\n_.isElement(object)\n```\n\n* `object`: The object to check.\n\n\n### `isArray`, `isObject`, `isArguments`, `isFunction`, `isString`, `isNumber`, `isDate`, `isBoolean`, `isUndefined`, `isNull`\n\nThese functions are type-checking predicates, returning `true` if the object is of the specified type, and `false` otherwise.  Their signatures are all:\n\n```javascript\n_.isArray(object) // etc.\n```\n\n* `object`: The object to check.\n\n\n### `has`\n\nCheck if an object has a given key.\n\n**Signature:**\n\n```javascript\n_.has(object, key)\n```\n\n* `object`: The object to check.\n* `key`: The key to check for.\n\n\nThis section provides a concise overview.  Refer to the Underscore.js documentation for complete details and examples.  Note that many of these functions operate on arrays as well as objects, leveraging Underscore's flexible handling of collections.\n\n\n\n\n## Utility Functions\n\nUnderscore.js includes a set of general-purpose utility functions that don't neatly fit into the other categories (Collections, Arrays, Objects, Functions). These functions are invaluable for various tasks throughout your JavaScript code.\n\n### `identity`\n\nA function that returns its first argument.  Useful as a default iteratee or when you need a no-op function.\n\n**Signature:**\n\n```javascript\n_.identity(value)\n```\n\n* `value`: The value to return.\n\n**Example:**\n\n```javascript\n_.map([1, 2, 3], _.identity); // => [1, 2, 3]\n```\n\n### `constant`\n\nCreates a function that returns a particular value.  Useful for creating functions that always return the same result, regardless of input.\n\n**Signature:**\n\n```javascript\n_.constant(value)\n```\n\n* `value`: The value to return.\n\n**Example:**\n\n```javascript\nvar five = _.constant(5);\nfive(); // => 5\nfive(10); // => 5\n```\n\n### `uniqueId`\n\nGenerates a unique ID.  The ID is a string, and subsequent calls generate incrementing IDs.  Optionally, you can provide a prefix.\n\n**Signature:**\n\n```javascript\n_.uniqueId([prefix])\n```\n\n* `prefix`: Optional string prefix for the ID.\n\n**Example:**\n\n```javascript\n_.uniqueId(); // => \"id1\"\n_.uniqueId('prefix-'); // => \"prefix-id2\"\n```\n\n### `escape`\n\nEscapes a string for insertion into HTML.  Escapes `<`, `>`, `\"`, `'`, and `&`.\n\n**Signature:**\n\n```javascript\n_.escape(string)\n```\n\n* `string`: The string to escape.\n\n**Example:**\n\n```javascript\n_.escape(\"<h1>Hello</h1>\"); // => \"&lt;h1&gt;Hello&lt;/h1&gt;\"\n```\n\n### `unescape`\n\nThe inverse of `escape`.  Unescapes escaped HTML entities.\n\n**Signature:**\n\n```javascript\n_.unescape(string)\n```\n\n* `string`: The string to unescape.\n\n\n### `result`\n\nCall a method on a given object with some arguments, and return the result.  If the method is not found, returns the property directly.\n\n**Signature:**\n\n```javascript\n_.result(object, property, *args)\n```\n\n* `object`: The object to call the method on.\n* `property`: The name of the property (or method) to access.\n* `*args`: Optional arguments to pass to the method.\n\n\n**Example:**\n\n```javascript\nvar obj = {\n  name: 'moe',\n  greet: function(name){ return 'hi: ' + name; }\n};\n_.result(obj, 'name');      // => 'moe'\n_.result(obj, 'greet', 'curly'); // => 'hi: curly'\n```\n\n\n### `template`\n\nCompiles a template string into a function that can be used to generate HTML.  Uses a simple templating syntax (similar to ERB).\n\n**Signature:**\n\n```javascript\n_.template(templateString, [data], [settings])\n```\n\n* `templateString`: The template string.\n* `data`: Optional data object to populate the template.\n* `settings`: Optional settings object (e.g., for escaping).\n\n**Example:**\n\n```javascript\nvar compiled = _.template(\"Hello, <%= name %>!\");\ncompiled({name: \"World\"}); // => \"Hello, World!\"\n```\n\n### `mixin`\n\nAdds functions to the Underscore object, or an arbitrary object.  Allows you to extend Underscore's functionality or create your own utility libraries.\n\n**Signature:**\n\n```javascript\n_.mixin(object)\n```\n\n* `object`: An object containing functions to add to Underscore.\n\n\nThis section provides a concise overview.  Consult the Underscore.js documentation for comprehensive details and examples of these versatile utility functions.  Remember that `template` requires careful consideration of security if user-supplied data is involved, to avoid potential XSS vulnerabilities.\n\n\n\n\n## Chaining\n\nUnderscore.js supports method chaining, allowing you to string together multiple operations on a collection in a fluent and readable manner. This significantly improves code clarity and reduces the need for intermediate variables.\n\n### Chain Methods\n\nMost Underscore.js collection methods (those that operate on arrays or objects) return a wrapped version of the collection. This wrapped object has its own methods, allowing you to chain additional operations.  The methods available on the wrapped object are the same as those on the `_` object itself, but they operate on the wrapped collection and return new wrapped objects, enabling further chaining.  The chain is broken when you call a method that doesn't return a wrapped object (e.g., `_.value()`).\n\n### `_.chain()`\n\nInitiates a chain sequence. It takes a collection (array or object) as input and returns a wrapped object. This object has all the Underscore.js collection methods available for chaining.\n\n**Signature:**\n\n```javascript\n_.chain(obj)\n```\n\n* `obj`: The array or object to start the chain with.\n\n**Example:**\n\n```javascript\nvar result = _( [1, 2, 3, 4, 5, 6] )\n  .chain()\n  .filter( function(num){ return num % 2 === 0; } )\n  .map( function(num){ return num * 2; } )\n  .value(); //Remember to call value() to get the final result\n\nconsole.log(result); // => [4, 8, 12]\n```\n\nIn this example, `_.chain()` creates a wrapped object. The `.filter()` and `.map()` methods operate on the wrapped object and return new wrapped objects, allowing the chain to continue.  Finally, `.value()` unwraps the final result, returning a regular array.\n\n\n### `_.value()`\n\nTerminates a chain sequence and returns the unwrapped result.  It's crucial to call `_.value()` at the end of a chain to obtain the final result of the chained operations.  Without it, you'd only have a wrapped object, not the actual processed data.\n\n**Signature:**\n\n```javascript\n_.value() // Called on the wrapped object\n```\n\n**Example:** (same as the previous example, but highlighting `.value()`)\n\n```javascript\nvar result = _( [1, 2, 3, 4, 5, 6] )\n  .chain()\n  .filter( function(num){ return num % 2 === 0; } )\n  .map( function(num){ return num * 2; } )\n  .value(); // <---  Here's the crucial _.value() call\n\nconsole.log(result); // => [4, 8, 12]\n```\n\nWithout the `.value()` call, `result` would be a wrapped Underscore object, not the array `[4, 8, 12]`.  This is a common mistake when working with Underscore's chaining functionality.  Always remember to unwrap the result using `.value()`.\n\n\nThis section explains the fundamentals of chaining in Underscore.js.  Efficient use of chaining can significantly improve the elegance and readability of your code when performing multiple operations on collections. Remember that only methods that return wrapped objects can be chained.\n\n\n\n\n## Advanced Techniques and Best Practices\n\nThis section delves into more advanced aspects of using Underscore.js effectively, focusing on best practices and techniques to maximize its benefits.\n\n### Error Handling\n\nUnderscore.js itself doesn't offer specific error-handling mechanisms beyond the standard JavaScript exceptions.  However, you should incorporate robust error handling within your code *when using* Underscore.js functions.  This is especially crucial when working with iterators and functions that might encounter unexpected input:\n\n* **Validate Input:** Before passing data to Underscore functions, check for null, undefined, or unexpected types.  This prevents unexpected behavior or crashes.\n\n* **Handle Callback Errors:** If you use custom callback functions within Underscore's iterators (`each`, `map`, `reduce`, etc.), implement `try...catch` blocks inside those callbacks to handle potential errors gracefully.  Consider returning a special value or logging the error to help with debugging.\n\n* **Check Return Values:**  Be aware of what the Underscore functions return. Some return new collections, while others return single values or modify collections in place. Understanding these return values allows you to anticipate and handle potential issues more effectively.\n\n* **Test Thoroughly:** Write comprehensive unit tests to ensure your code using Underscore.js handles various scenarios, including edge cases and error conditions.\n\n\n### Performance Optimization\n\nWhile Underscore.js is generally efficient, you can further optimize performance in your applications:\n\n* **Memoization:** Utilize `_.memoize()` for computationally expensive functions that are called repeatedly with the same arguments. This can drastically reduce processing time.\n\n* **Avoid Unnecessary Operations:**  Chain methods judiciously.  Avoid unnecessary operations within iterators or other functions, as these can impact performance, especially on large datasets.\n\n* **Use Optimized Functions:**  Underscore.js often provides optimized versions of common tasks (like `_.uniq()`).  Leverage these whenever possible instead of writing your own custom implementations.\n\n* **Iterate Efficiently:** Choose the appropriate iterator for the job. `_.each` is for side effects, while `_.map` transforms data.  `_.reduce` is powerful but requires understanding.  Select the most efficient iterator for your specific needs.\n\n* **Profile Your Code:** Use browser developer tools (or Node.js profilers) to identify performance bottlenecks.  This allows you to target optimization efforts effectively.\n\n\n### Integration with other libraries\n\nUnderscore.js works well with other JavaScript libraries.  There's no inherent conflict.  However, be mindful of potential naming collisions.  If another library uses the same names as Underscore functions, you might need to adjust your code (e.g., using aliases or a different naming scheme).  Also, be aware that Underscore.js does *not* directly manipulate the DOM.  If DOM manipulation is needed, you'll typically use a library like jQuery in conjunction with Underscore.\n\n\n### Common Use Cases and Examples\n\nUnderscore.js shines in several common development scenarios:\n\n* **Data Transformation:**  Use `_.map`, `_.filter`, `_.reduce`, and other collection methods to manipulate and transform data efficiently.\n\n* **Data Validation:**  Leverage `_.isArray`, `_.isObject`, and other type-checking functions to ensure your data meets expectations.\n\n* **Asynchronous Operations:**  Combine Underscore.js with Promises or async/await to handle asynchronous operations while maintaining clean and readable code.\n\n* **Event Handling (Indirectly):**  While Underscore doesn't directly handle DOM events, you can use it to process data from events after they are handled by a DOM library like jQuery.\n\n* **Creating Reusable Utility Functions:** Use Underscore.js functions as building blocks for your own custom utility functions, increasing code reusability.\n\n**Example:**  Transforming an array of objects:\n\n```javascript\nvar users = [\n  {id: 1, name: \"Alice\", active: true},\n  {id: 2, name: \"Bob\", active: false},\n  {id: 3, name: \"Charlie\", active: true}\n];\n\nvar activeUsers = _.chain(users)\n  .filter(user => user.active)\n  .map(user => user.name)\n  .value();\n\nconsole.log(activeUsers); // => [\"Alice\", \"Charlie\"]\n```\n\n\nThis section provides guidance on leveraging Underscore.js effectively. By incorporating these best practices, you can build robust, maintainable, and efficient JavaScript applications. Remember to always consult the official Underscore.js documentation for the most up-to-date information.\n\n\n\n\n## Appendix\n\nThis appendix provides supplementary information to aid your understanding and use of Underscore.js.\n\n### Glossary of Terms\n\n* **Collection:** In Underscore.js, a collection refers to either an array or an object.  Many Underscore functions operate on both types interchangeably.\n\n* **Iteratee:** A function passed as an argument to another function (often an Underscore function) that is executed for each item in a collection.  It typically receives the element value, index (or key for objects), and the collection itself as arguments.\n\n* **Predicate:** A function that returns a boolean value (`true` or `false`).  Underscore often uses predicates to filter collections based on a condition.\n\n* **Higher-Order Function:** A function that takes one or more functions as arguments or returns a function as its result. Underscore is heavily reliant on higher-order functions.\n\n* **Memoization:** An optimization technique used to speed up computations by caching the results of expensive function calls. Underscore's `_.memoize()` function facilitates this.\n\n* **Chaining:** The ability to call multiple Underscore methods sequentially on a collection, improving code readability and reducing temporary variables.\n\n* **Wrapped Object:**  The object returned by `_.chain()`. It has methods that allow you to continue chaining Underscore operations.\n\n\n### Frequently Asked Questions (FAQ)\n\n* **Should I still use Underscore.js in 2024?**  While many of Underscore's functions are now natively available in modern JavaScript (via array methods and other features), Underscore still offers benefits:  consistency across older browsers, a familiar API, and some functions (like `_.memoize()` or `_.template()`) that may not have direct equivalents with the same ease of use.  The decision depends on your project's requirements and target browsers.\n\n* **What's the difference between `_.each` and `_.map`?** `_.each` is primarily for side effects (e.g., logging, modifying in place).  It doesn't return a value. `_.map` transforms each element in the collection and returns a new array with the transformed elements.\n\n* **How do I handle errors in my Underscore code?**  Underscore itself doesn't handle errors directly.  Implement robust error handling within your callback functions using `try...catch` blocks and validate your input data before passing it to Underscore methods.\n\n* **Why is my chain not working?** Make sure that you are calling `.value()` at the end of your chain to retrieve the final result. Also ensure that you're chaining methods that return wrapped objects.\n\n* **How do I integrate Underscore with other libraries?**  Generally, there are no inherent conflicts.  Be cautious of potential naming collisions; use aliases if necessary.  For DOM manipulation, use a library like jQuery alongside Underscore.\n\n\n### Further Resources and Learning\n\n* **Official Underscore.js Documentation:** The most authoritative source for information.  Check the official website for the latest API documentation and release notes.\n\n* **Underscore.js Source Code:** Studying the source code itself can be beneficial for a deeper understanding of how Underscore functions work.\n\n* **Online Tutorials and Articles:** Numerous tutorials and articles on Underscore.js are available online. Search for \"Underscore.js tutorial\" or similar terms.\n\n* **Books on Functional Programming:** Underscore promotes functional programming principles.  Learning more about functional programming can significantly improve your ability to leverage Underscore effectively.\n\n\nThis appendix provides supplemental material to enhance your Underscore.js experience.  Remember to always refer to the official documentation for the most accurate and up-to-date information.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Underscore.js?\n\nUnderscore.js is a JavaScript library that provides a whole mess of helpful utility functions.  It's a foundational library that offers a consistent and robust set of tools for working with collections (arrays, objects), iterating, and performing common data manipulations.  While it doesn't directly interact with the DOM (unlike jQuery), it excels at providing the functional programming building blocks that make JavaScript development more efficient and readable.  Think of it as a Swiss Army knife for your JavaScript toolkit.\n\n### Why Use Underscore.js?\n\nUnderscore.js offers several compelling reasons for inclusion in your projects:\n\n* **Improved Code Readability:** Underscore's functions provide concise and expressive ways to perform common tasks, making your code easier to understand and maintain.  Instead of writing verbose loops and conditional statements, you can leverage Underscore's higher-order functions for a more declarative style.\n\n* **Functional Programming Paradigm:** Underscore promotes a functional programming approach, encouraging immutability and avoiding side effects. This leads to more predictable and testable code.\n\n* **Cross-Browser Compatibility:** Underscore handles cross-browser inconsistencies, ensuring your code works reliably across different browsers and environments.\n\n* **Enhanced Productivity:** Underscore's extensive collection of functions saves you time and effort by providing pre-built solutions for common programming problems.  This allows developers to focus on the unique logic of their application instead of reinventing the wheel.\n\n* **Lightweight:**  Underscore.js has a small footprint, minimizing the impact on your application's performance.\n\n\n### Setting up Underscore.js\n\nThere are several ways to incorporate Underscore.js into your project:\n\n* **Download and Include:** Download the Underscore.js library from the official website (typically a minified version, `underscore-min.js`), and include it in your HTML file using a `<script>` tag:\n\n```html\n<script src=\"underscore-min.js\"></script>\n```\n\n* **Using a CDN:** Include Underscore.js via a Content Delivery Network (CDN) like jsDelivr or cdnjs.  This avoids the need to download and manage the library yourself.  For example, using jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/underscore@1.13.1/underscore-min.js\"></script>\n```\n\n* **Using a Package Manager (npm or yarn):** If you're using a module bundler like Webpack or Parcel, or a package manager like npm or yarn, you can install Underscore.js as a dependency:\n\n```bash\nnpm install underscore\n# or\nyarn add underscore\n```\n\nThen, import it into your JavaScript modules as needed (the specific import syntax depends on your module bundler).  For example, with ES6 modules:\n\n```javascript\nimport _ from 'underscore';\n```\n\n\n### Core Concepts and Terminology\n\nUnderstanding these core concepts is crucial for effectively using Underscore.js:\n\n* **Collections:** Underscore primarily works with collections, which are arrays and objects. Many functions operate on these collections to perform transformations, filtering, and other operations.\n\n* **Iterators:**  Functions like `each`, `map`, `reduce`, `filter`, and `find` are iterators that traverse collections and apply a given function to each element. These are fundamental to functional programming with Underscore.\n\n* **Chaining:** Underscore allows method chaining, enabling you to string together multiple operations on a collection in a fluent and readable manner. This significantly improves code clarity.\n\n* **Higher-Order Functions:**  Underscore heavily utilizes higher-order functions. These are functions that take other functions as arguments (e.g., callbacks passed to iterators) or return functions as results.  This enables powerful abstraction and code reusability.\n\n* **Predicates:**  A predicate is a function that returns a boolean value (true or false).  Many Underscore functions use predicates to filter or test elements within a collection (e.g., `filter`, `every`, `some`).\n\n* **Memoization:** Some Underscore functions utilize memoization to improve performance by caching the results of expensive computations.\n\n\nBy understanding these concepts and the functions detailed in the following sections of this manual, you will be well-equipped to harness the power of Underscore.js for your JavaScript projects.\n\n\n\n\n## Collections\n\nUnderscore.js provides a rich set of functions for working with collections (arrays and objects).  These functions often utilize iterators and higher-order functions to perform efficient and expressive data manipulation.\n\n### `each` (alias: `forEach`)\n\nIterates over a list of elements, executing a provided function for each element.  This function doesn't return a value; it's primarily used for side effects (e.g., modifying elements, logging output).\n\n**Signature:**\n\n```javascript\n_.each(list, iteratee, [context])\n```\n\n* `list`: The array or object to iterate over.\n* `iteratee`: The function invoked per iteration.  It receives the element value, index (or key for objects), and the list as arguments.\n* `context`:  Optional.  The context (`this`) within which `iteratee` is executed.\n\n\n**Example:**\n\n```javascript\n_.each([1, 2, 3], function(num) { console.log(num); }); // Logs 1, 2, 3 to the console.\n_.each({a: 1, b: 2}, function(value, key) { console.log(key + ': ' + value); }); // Logs a: 1, b: 2\n```\n\n### `map` (alias: `collect`)\n\nProduces a new array of values by mapping each element in the input list through a transformation function.\n\n**Signature:**\n\n```javascript\n_.map(list, iteratee, [context])\n```\n\n* `list`: The array or object to iterate over.\n* `iteratee`: The function applied to each element.  It receives the element value, index (or key for objects), and the list as arguments.  It should return the transformed value.\n* `context`: Optional.  The context (`this`) within which `iteratee` is executed.\n\n**Example:**\n\n```javascript\nvar doubled = _.map([1, 2, 3], function(num){ return num * 2; }); // doubled will be [2, 4, 6]\n```\n\n### `reduce` (alias: `foldl`, `inject`)\n\nBoils down a list of values into a single value.  It iteratively applies a function to each element and accumulates the result.\n\n**Signature:**\n\n```javascript\n_.reduce(list, iteratee, memo, [context])\n```\n\n* `list`: The array or object to reduce.\n* `iteratee`: The function applied to each element.  It receives the accumulated value (`memo`), the current element, its index (or key for objects), and the list as arguments. It should return the updated accumulated value.\n* `memo`: The initial value of the accumulator.\n* `context`: Optional.  The context (`this`) within which `iteratee` is executed.\n\n**Example:**\n\n```javascript\nvar sum = _.reduce([1, 2, 3], function(memo, num){ return memo + num; }, 0); // sum will be 6\n```\n\n### `filter` (alias: `select`)\n\nLooks through each value in the list, returning an array of all the values that pass a truth test (predicate).\n\n**Signature:**\n\n```javascript\n_.filter(list, predicate, [context])\n```\n\n* `list`: The array or object to filter.\n* `predicate`: The function that determines whether an element is included. It receives the element value, index (or key for objects), and the list as arguments.  It should return `true` if the element should be included, `false` otherwise.\n* `context`: Optional. The context (`this`) within which `predicate` is executed.\n\n**Example:**\n\n```javascript\nvar evens = _.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; }); // evens will be [2, 4, 6]\n```\n\n### `reject`\n\nThe opposite of `filter`; returns the values that *do not* pass the truth test.\n\n**Signature:**  Similar to `filter`.\n\n**Example:**\n\n```javascript\nvar odds = _.reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; }); // odds will be [1, 3, 5]\n```\n\n### `every` (alias: `all`)\n\nChecks if all elements in the list satisfy the given predicate.  Returns `true` if all do, `false` otherwise.\n\n**Signature:** Similar to `filter`.\n\n### `some` (alias: `any`)\n\nChecks if at least one element in the list satisfies the given predicate. Returns `true` if at least one does, `false` otherwise.\n\n**Signature:** Similar to `filter`.\n\n\n### `contains` (alias: `include`)\n\nChecks if the list contains the given value.\n\n**Signature:**\n\n```javascript\n_.contains(list, value, [fromIndex])\n```\n\n* `list`: The array or object to search.\n* `value`: The value to search for.\n* `fromIndex`: Optional. The index to start searching from.\n\n### `invoke`\n\nCalls a method on each value in the list.  Useful for invoking methods on objects within an array.\n\n**Signature:**\n\n```javascript\n_.invoke(list, methodName, *args)\n```\n\n* `list`: The list of objects.\n* `methodName`: The name of the method to invoke.\n* `*args`:  Optional arguments to pass to the method.\n\n### `pluck`\n\nExtracts a list of property values from a list of objects.\n\n**Signature:**\n\n```javascript\n_.pluck(list, propertyName)\n```\n\n* `list`: The list of objects.\n* `propertyName`: The name of the property to extract.\n\n### `max`\n\nReturns the maximum value in the list.\n\n**Signature:**\n\n```javascript\n_.max(list, [iteratee])\n```\n\n* `list`: The list of values.\n* `iteratee`: Optional.  A function that returns the value to compare for determining the maximum.\n\n### `min`\n\nReturns the minimum value in the list.\n\n**Signature:** Similar to `max`.\n\n### `sortBy`\n\nSorts a list of values by a given property or function.\n\n**Signature:**\n\n```javascript\n_.sortBy(list, iteratee, [context])\n```\n\n* `list`: The list to sort.\n* `iteratee`: The property name or function to sort by.\n* `context`: Optional. The context (`this`) for the iteratee function.\n\n### `groupBy`\n\nGroups a list of values into an object based on the result of a given function.\n\n**Signature:**\n\n```javascript\n_.groupBy(list, iteratee, [context])\n```\n\n* `list`: The list to group.\n* `iteratee`: The property name or function to group by.\n* `context`: Optional. The context (`this`) for the iteratee function.\n\n### `indexBy`\n\nSimilar to `groupBy`, but creates an object where the keys are the results of the iteratee and the values are the original elements.\n\n**Signature:** Similar to `groupBy`.\n\n### `countBy`\n\nCounts the number of occurrences of each unique result of an iteratee function.\n\n**Signature:** Similar to `groupBy`.\n\n\n### `shuffle`\n\nRandomly shuffles the elements in the list.\n\n**Signature:**\n\n```javascript\n_.shuffle(list)\n```\n\n### `sample`\n\nReturns a random element from the list.  If a number is provided, returns an array of that many random elements.\n\n**Signature:**\n\n```javascript\n_.sample(list, [n])\n```\n\n* `list`: The list to sample from.\n* `n`: Optional. The number of random elements to return.\n\n### `toArray`\n\nConverts an object into an array of its values.\n\n**Signature:**\n\n```javascript\n_.toArray(obj)\n```\n\n### `size`\n\nReturns the number of elements in a collection.\n\n**Signature:**\n\n```javascript\n_.size(obj)\n```\n\nThis section provides a concise overview of Underscore.js's collection functions.  Refer to the Underscore.js documentation for complete details and advanced usage examples.\n\n\n\n\n## Arrays\n\nUnderscore.js extends JavaScript's built-in array functionality with several powerful utility functions.  These functions simplify common array manipulations and improve code readability.\n\n### `first`\n\nReturns the first element of an array.  If a number `n` is provided, returns the first `n` elements as a new array.\n\n**Signature:**\n\n```javascript\n_.first(array, [n])\n```\n\n* `array`: The input array.\n* `n`: Optional. The number of elements to return.\n\n**Example:**\n\n```javascript\n_.first([1, 2, 3]); // => 1\n_.first([1, 2, 3], 2); // => [1, 2]\n```\n\n### `initial`\n\nReturns all elements of an array except the last one.  If a number `n` is provided, returns all but the last `n` elements.\n\n**Signature:**\n\n```javascript\n_.initial(array, [n])\n```\n\n* `array`: The input array.\n* `n`: Optional. The number of elements to exclude from the end.\n\n**Example:**\n\n```javascript\n_.initial([1, 2, 3]); // => [1, 2]\n_.initial([1, 2, 3, 4], 2); // => [1, 2]\n```\n\n### `rest` (alias: `tail`)\n\nReturns all elements of an array except the first one.  If a number `n` is provided, returns all but the first `n` elements.\n\n**Signature:**\n\n```javascript\n_.rest(array, [n])\n```\n\n* `array`: The input array.\n* `n`: Optional. The number of elements to exclude from the beginning.\n\n**Example:**\n\n```javascript\n_.rest([1, 2, 3]); // => [2, 3]\n_.rest([1, 2, 3, 4], 2); // => [3, 4]\n```\n\n### `last`\n\nReturns the last element of an array.  If a number `n` is provided, returns the last `n` elements as a new array.\n\n**Signature:**\n\n```javascript\n_.last(array, [n])\n```\n\n* `array`: The input array.\n* `n`: Optional. The number of elements to return.\n\n**Example:**\n\n```javascript\n_.last([1, 2, 3]); // => 3\n_.last([1, 2, 3], 2); // => [2, 3]\n```\n\n### `compact`\n\nCreates a new array with all falsey values removed.  Falsey values are `false`, `null`, `0`, `\"\"`, `undefined`, and `NaN`.\n\n**Signature:**\n\n```javascript\n_.compact(array)\n```\n\n* `array`: The input array.\n\n**Example:**\n\n```javascript\n_.compact([0, 1, false, 2, '', 3]); // => [1, 2, 3]\n```\n\n### `flatten`\n\nFlattens a nested array (array of arrays) into a single level.  Can handle multiple levels of nesting.\n\n**Signature:**\n\n```javascript\n_.flatten(array, [shallow])\n```\n\n* `array`: The input array.\n* `shallow`: Optional.  If true, only flattens one level.\n\n**Example:**\n\n```javascript\n_.flatten([1, [2, [3, 4], 5]]); // => [1, 2, 3, 4, 5]\n_.flatten([1, [2, [3, 4], 5]], true); // => [1, 2, [3, 4], 5]\n```\n\n### `without`\n\nReturns a new array without the given values.\n\n**Signature:**\n\n```javascript\n_.without(array, *values)\n```\n\n* `array`: The input array.\n* `*values`: The values to exclude.\n\n**Example:**\n\n```javascript\n_.without([1, 2, 1, 0, 3, 1, 4], 0, 1); // => [2, 3, 4]\n```\n\n### `uniq` (alias: `unique`)\n\nProduces a duplicate-free version of the array, using a simple === comparison for equality.  Uses a Set internally for efficiency.\n\n**Signature:**\n\n```javascript\n_.uniq(array, [isSorted], [iteratee])\n```\n\n* `array`: The input array.\n* `isSorted`: Optional.  If true, the input array is assumed to be sorted.  This can improve performance.\n* `iteratee`: Optional. A function to extract a value from each element for comparison.\n\n### `union`\n\nProduces the union of multiple arrays.  Returns a new array that contains unique values from all input arrays.\n\n**Signature:**\n\n```javascript\n_.union(*arrays)\n```\n\n* `*arrays`: Two or more arrays.\n\n### `intersection`\n\nReturns the intersection of multiple arrays; i.e., the elements that appear in *all* input arrays.\n\n**Signature:**\n\n```javascript\n_.intersection(*arrays)\n```\n\n* `*arrays`: Two or more arrays.\n\n\n### `difference`\n\nReturns the values from array that are not present in the other arrays.\n\n**Signature:**\n\n```javascript\n_.difference(array, *others)\n```\n\n* `array`: The input array.\n* `*others`: One or more arrays to compare against.\n\n\n### `zip`\n\nMerges together the values of several arrays, returning an array of arrays where each sub-array contains corresponding values from the input arrays.\n\n**Signature:**\n\n```javascript\n_.zip(*arrays)\n```\n\n* `*arrays`: Two or more arrays.\n\n**Example:**\n\n```javascript\n_.zip(['a', 'b'], [1, 2], [true, false]); // => [['a', 1, true], ['b', 2, false]]\n```\n\n### `unzip`\n\nThe inverse of `zip`.  Takes an array of arrays and groups the elements based on their position.\n\n**Signature:**\n\n```javascript\n_.unzip(array)\n```\n\n* `array`: An array of arrays.\n\n\n### `range`\n\nGenerates an array of numbers within a given range.\n\n**Signature:**\n\n```javascript\n_.range([start], stop, [step])\n```\n\n* `start`: Optional. The starting number (default: 0).\n* `stop`: The ending number (exclusive).\n* `step`: Optional. The increment (default: 1).\n\n\n### `bindAll`\n\nBinds a number of methods to an object's scope. Useful for creating functions that maintain context when called later.\n\n**Signature:**\n\n```javascript\n_.bindAll(object, *methodNames)\n```\n\n* `object`: The object whose methods should be bound.\n* `*methodNames`:  The names of the methods to bind.\n\n\nThis section provides a concise overview.  Consult the Underscore.js documentation for detailed examples and edge cases.\n\n\n\n\n## Functions\n\nUnderscore.js offers a suite of functions for working with and manipulating JavaScript functions themselves.  These functions provide powerful tools for controlling function execution, managing context, and optimizing performance.\n\n### `bind`\n\nCreates a function that, when called, has its `this` keyword set to a provided value, with a given sequence of arguments prepended to those provided during the actual call.\n\n**Signature:**\n\n```javascript\n_.bind(func, context, *args)\n```\n\n* `func`: The function to bind.\n* `context`: The value to be assigned to `this` when the bound function is called.\n* `*args`:  Optional arguments to be prepended to those passed when the bound function is invoked.\n\n**Example:**\n\n```javascript\nfunction greet(greeting) { console.log(greeting + \", \" + this.name); }\nvar person = {name: \"Alice\"};\nvar boundGreet = _.bind(greet, person, \"Hello\");\nboundGreet(); // Logs \"Hello, Alice\"\n```\n\n### `partial`\n\nPartially applies a function by filling in given arguments, and returning a new version of the function that accepts the remaining arguments.\n\n**Signature:**\n\n```javascript\n_.partial(func, *args)\n```\n\n* `func`: The function to partially apply.\n* `*args`: Arguments to pre-fill.\n\n**Example:**\n\n```javascript\nfunction add(a, b, c) { return a + b + c; }\nvar add5 = _.partial(add, 5); // Partially apply the first argument as 5.\nadd5(2, 3); // Returns 10.\n```\n\n### `memoize`\n\nCreates a version of a function that will only call the original function once for any given set of arguments. Subsequent calls with the same arguments will return the cached result.  Useful for expensive function calls.\n\n**Signature:**\n\n```javascript\n_.memoize(func, [hashFunction])\n```\n\n* `func`: The function to memoize.\n* `hashFunction`: Optional. A function used to generate a unique key for the cache based on the arguments.\n\n**Example:**\n\n```javascript\nvar expensiveFunction = _.memoize(function(n){ /* ...some expensive computation... */ return n*2; });\nexpensiveFunction(5); // Computes and caches the result.\nexpensiveFunction(5); // Returns cached result.\n```\n\n\n### `delay`\n\nSchedules a function to be called after a given delay in milliseconds.\n\n**Signature:**\n\n```javascript\n_.delay(func, wait, *args)\n```\n\n* `func`: The function to delay.\n* `wait`: The delay in milliseconds.\n* `*args`:  Arguments to pass to the function.\n\n### `defer`\n\nSchedules a function to be called as soon as possible after the current call stack is cleared.  Essentially a delay of 0ms.\n\n**Signature:**\n\n```javascript\n_.defer(func, *args)\n```\n\n* `func`: The function to defer.\n* `*args`: Arguments to pass to the function.\n\n### `throttle`\n\nCreates a throttled version of a function that only executes the function at most once every wait milliseconds.  Useful for rate-limiting functions that are called frequently.\n\n**Signature:**\n\n```javascript\n_.throttle(func, wait, [options])\n```\n\n* `func`: The function to throttle.\n* `wait`: The minimum time between function executions.\n* `options`: Optional object with `leading` and `trailing` properties (boolean, default true).  Controls whether the function should be executed on the leading edge and/or trailing edge of the wait period.\n\n\n### `debounce`\n\nCreates a debounced version of a function.  It will only execute the function after a specified delay, ignoring calls within that delay.  Useful for handling events like window resizing or input changes.\n\n**Signature:**\n\n```javascript\n_.debounce(func, wait, [immediate])\n```\n\n* `func`: The function to debounce.\n* `wait`: The delay in milliseconds.\n* `immediate`: Optional boolean. If true, executes the function on the leading edge instead of the trailing edge of the delay.\n\n### `once`\n\nCreates a version of a function that can only be called once.  Subsequent calls will return the result of the first call.\n\n**Signature:**\n\n```javascript\n_.once(func)\n```\n\n* `func`: The function to make callable only once.\n\n\n### `after`\n\nCreates a function that will only be executed after being called `n` times.\n\n**Signature:**\n\n```javascript\n_.after(times, func)\n```\n\n* `times`: The number of times the function must be called before it executes.\n* `func`: The function to execute.\n\n\n### `compose`\n\nCreates a function that is the composition of a list of functions.  Each function consumes the return value of the function that follows.\n\n**Signature:**\n\n```javascript\n_.compose(*functions)\n```\n\n* `*functions`:  A list of functions to compose.\n\n\n### `wrap`\n\nWraps the first function with another function, passing it as the first argument.  Useful for adding pre- or post-processing to a function.\n\n**Signature:**\n\n```javascript\n_.wrap(func, wrapper)\n```\n\n* `func`: The function to wrap.\n* `wrapper`: The function that will wrap `func`.  The `wrapper` should accept `func` as its first argument, and return a function that takes any other arguments passed to the wrapped function.\n\n\nThis section provides a concise overview of Underscore.js's function manipulation utilities.  Consult the Underscore.js documentation for detailed examples and nuanced usage considerations.\n\n\n\n\n## Objects\n\nUnderscore.js provides a comprehensive set of functions for working with plain JavaScript objects.  These functions simplify common object manipulations and enhance code readability and maintainability.\n\n\n### `keys`\n\nRetrieve all the names of the object's own enumerable properties.\n\n**Signature:**\n\n```javascript\n_.keys(object)\n```\n\n* `object`: The object whose keys are to be retrieved.\n\n**Example:**\n\n```javascript\n_.keys({one: 1, two: 2, three: 3}); // => [\"one\", \"two\", \"three\"]\n```\n\n\n### `values`\n\nRetrieve all the values of the object's own enumerable properties.\n\n**Signature:**\n\n```javascript\n_.values(object)\n```\n\n* `object`: The object whose values are to be retrieved.\n\n**Example:**\n\n```javascript\n_.values({one: 1, two: 2, three: 3}); // => [1, 2, 3]\n```\n\n\n### `pairs`\n\nConvert an object into a list of [key, value] pairs.\n\n**Signature:**\n\n```javascript\n_.pairs(object)\n```\n\n* `object`: The object to convert.\n\n**Example:**\n\n```javascript\n_.pairs({one: 1, two: 2}); // => [[\"one\", 1], [\"two\", 2]]\n```\n\n\n### `invert`\n\nReturns a copy of the object where the keys and values are swapped.\n\n**Signature:**\n\n```javascript\n_.invert(object)\n```\n\n* `object`: The object to invert.\n\n**Example:**\n\n```javascript\n_.invert({a: 1, b: 2, c: 1}); // => {1: \"c\", 2: \"b\"}  (Note: last key wins in case of duplicates)\n```\n\n\n### `functions` (alias: `methods`)\n\nRetrieve the names of all the object's own enumerable function properties.\n\n**Signature:**\n\n```javascript\n_.functions(object)\n```\n\n* `object`: The object to inspect.\n\n**Example:**\n\n```javascript\n_.functions({a: function() {}, b: \"value\"}); // => [\"a\"]\n```\n\n\n### `extend` (alias: `assign`)\n\nCopy all of the properties in the source objects over to the destination object.\n\n**Signature:**\n\n```javascript\n_.extend(destination, *sources)\n```\n\n* `destination`: The object to extend.\n* `*sources`: One or more source objects.\n\n**Example:**\n\n```javascript\nvar dest = {a: 1};\n_.extend(dest, {b: 2}, {c: 3}); // dest now equals {a: 1, b: 2, c: 3}\n```\n\n\n### `pick`\n\nCopy only the specified properties from the source object into a new object.\n\n**Signature:**\n\n```javascript\n_.pick(object, *keys)\n```\n\n* `object`: The source object.\n* `*keys`: The keys to pick.\n\n**Example:**\n\n```javascript\n_.pick({a: 1, b: 2, c: 3}, 'a', 'c'); // => {a: 1, c: 3}\n```\n\n\n### `omit`\n\nCreate a new object omitting the specified properties from the source object.\n\n**Signature:**\n\n```javascript\n_.omit(object, *keys)\n```\n\n* `object`: The source object.\n* `*keys`: The keys to omit.\n\n\n**Example:**\n\n```javascript\n_.omit({a: 1, b: 2, c: 3}, 'a', 'c'); // => {b: 2}\n```\n\n\n### `defaults`\n\nFill in undefined properties in object with values from the defaults objects, recursively.\n\n**Signature:**\n\n```javascript\n_.defaults(object, *defaults)\n```\n\n* `object`: The target object.\n* `*defaults`: One or more default objects.\n\n**Example:**\n\n```javascript\n_.defaults({a: 1}, {a: 2, b: 3}); // => {a: 1, b: 3}\n```\n\n\n### `clone`\n\nCreate a shallow-copied clone of the object.\n\n**Signature:**\n\n```javascript\n_.clone(object)\n```\n\n* `object`: The object to clone.\n\n\n### `isEqual`\n\nPerform a deep comparison between two objects or values.\n\n**Signature:**\n\n```javascript\n_.isEqual(object, other)\n```\n\n* `object`: The first object or value.\n* `other`: The second object or value.\n\n\n### `isEmpty`\n\nCheck if an object (or array) is empty.\n\n**Signature:**\n\n```javascript\n_.isEmpty(object)\n```\n\n* `object`: The object or array to check.\n\n\n### `isElement`\n\nCheck if an object is a DOM element.\n\n**Signature:**\n\n```javascript\n_.isElement(object)\n```\n\n* `object`: The object to check.\n\n\n### `isArray`, `isObject`, `isArguments`, `isFunction`, `isString`, `isNumber`, `isDate`, `isBoolean`, `isUndefined`, `isNull`\n\nThese functions are type-checking predicates, returning `true` if the object is of the specified type, and `false` otherwise.  Their signatures are all:\n\n```javascript\n_.isArray(object) // etc.\n```\n\n* `object`: The object to check.\n\n\n### `has`\n\nCheck if an object has a given key.\n\n**Signature:**\n\n```javascript\n_.has(object, key)\n```\n\n* `object`: The object to check.\n* `key`: The key to check for.\n\n\nThis section provides a concise overview.  Refer to the Underscore.js documentation for complete details and examples.  Note that many of these functions operate on arrays as well as objects, leveraging Underscore's flexible handling of collections.\n\n\n\n\n## Utility Functions\n\nUnderscore.js includes a set of general-purpose utility functions that don't neatly fit into the other categories (Collections, Arrays, Objects, Functions). These functions are invaluable for various tasks throughout your JavaScript code.\n\n### `identity`\n\nA function that returns its first argument.  Useful as a default iteratee or when you need a no-op function.\n\n**Signature:**\n\n```javascript\n_.identity(value)\n```\n\n* `value`: The value to return.\n\n**Example:**\n\n```javascript\n_.map([1, 2, 3], _.identity); // => [1, 2, 3]\n```\n\n### `constant`\n\nCreates a function that returns a particular value.  Useful for creating functions that always return the same result, regardless of input.\n\n**Signature:**\n\n```javascript\n_.constant(value)\n```\n\n* `value`: The value to return.\n\n**Example:**\n\n```javascript\nvar five = _.constant(5);\nfive(); // => 5\nfive(10); // => 5\n```\n\n### `uniqueId`\n\nGenerates a unique ID.  The ID is a string, and subsequent calls generate incrementing IDs.  Optionally, you can provide a prefix.\n\n**Signature:**\n\n```javascript\n_.uniqueId([prefix])\n```\n\n* `prefix`: Optional string prefix for the ID.\n\n**Example:**\n\n```javascript\n_.uniqueId(); // => \"id1\"\n_.uniqueId('prefix-'); // => \"prefix-id2\"\n```\n\n### `escape`\n\nEscapes a string for insertion into HTML.  Escapes `<`, `>`, `\"`, `'`, and `&`.\n\n**Signature:**\n\n```javascript\n_.escape(string)\n```\n\n* `string`: The string to escape.\n\n**Example:**\n\n```javascript\n_.escape(\"<h1>Hello</h1>\"); // => \"&lt;h1&gt;Hello&lt;/h1&gt;\"\n```\n\n### `unescape`\n\nThe inverse of `escape`.  Unescapes escaped HTML entities.\n\n**Signature:**\n\n```javascript\n_.unescape(string)\n```\n\n* `string`: The string to unescape.\n\n\n### `result`\n\nCall a method on a given object with some arguments, and return the result.  If the method is not found, returns the property directly.\n\n**Signature:**\n\n```javascript\n_.result(object, property, *args)\n```\n\n* `object`: The object to call the method on.\n* `property`: The name of the property (or method) to access.\n* `*args`: Optional arguments to pass to the method.\n\n\n**Example:**\n\n```javascript\nvar obj = {\n  name: 'moe',\n  greet: function(name){ return 'hi: ' + name; }\n};\n_.result(obj, 'name');      // => 'moe'\n_.result(obj, 'greet', 'curly'); // => 'hi: curly'\n```\n\n\n### `template`\n\nCompiles a template string into a function that can be used to generate HTML.  Uses a simple templating syntax (similar to ERB).\n\n**Signature:**\n\n```javascript\n_.template(templateString, [data], [settings])\n```\n\n* `templateString`: The template string.\n* `data`: Optional data object to populate the template.\n* `settings`: Optional settings object (e.g., for escaping).\n\n**Example:**\n\n```javascript\nvar compiled = _.template(\"Hello, <%= name %>!\");\ncompiled({name: \"World\"}); // => \"Hello, World!\"\n```\n\n### `mixin`\n\nAdds functions to the Underscore object, or an arbitrary object.  Allows you to extend Underscore's functionality or create your own utility libraries.\n\n**Signature:**\n\n```javascript\n_.mixin(object)\n```\n\n* `object`: An object containing functions to add to Underscore.\n\n\nThis section provides a concise overview.  Consult the Underscore.js documentation for comprehensive details and examples of these versatile utility functions.  Remember that `template` requires careful consideration of security if user-supplied data is involved, to avoid potential XSS vulnerabilities.\n\n\n\n\n## Chaining\n\nUnderscore.js supports method chaining, allowing you to string together multiple operations on a collection in a fluent and readable manner. This significantly improves code clarity and reduces the need for intermediate variables.\n\n### Chain Methods\n\nMost Underscore.js collection methods (those that operate on arrays or objects) return a wrapped version of the collection. This wrapped object has its own methods, allowing you to chain additional operations.  The methods available on the wrapped object are the same as those on the `_` object itself, but they operate on the wrapped collection and return new wrapped objects, enabling further chaining.  The chain is broken when you call a method that doesn't return a wrapped object (e.g., `_.value()`).\n\n### `_.chain()`\n\nInitiates a chain sequence. It takes a collection (array or object) as input and returns a wrapped object. This object has all the Underscore.js collection methods available for chaining.\n\n**Signature:**\n\n```javascript\n_.chain(obj)\n```\n\n* `obj`: The array or object to start the chain with.\n\n**Example:**\n\n```javascript\nvar result = _( [1, 2, 3, 4, 5, 6] )\n  .chain()\n  .filter( function(num){ return num % 2 === 0; } )\n  .map( function(num){ return num * 2; } )\n  .value(); //Remember to call value() to get the final result\n\nconsole.log(result); // => [4, 8, 12]\n```\n\nIn this example, `_.chain()` creates a wrapped object. The `.filter()` and `.map()` methods operate on the wrapped object and return new wrapped objects, allowing the chain to continue.  Finally, `.value()` unwraps the final result, returning a regular array.\n\n\n### `_.value()`\n\nTerminates a chain sequence and returns the unwrapped result.  It's crucial to call `_.value()` at the end of a chain to obtain the final result of the chained operations.  Without it, you'd only have a wrapped object, not the actual processed data.\n\n**Signature:**\n\n```javascript\n_.value() // Called on the wrapped object\n```\n\n**Example:** (same as the previous example, but highlighting `.value()`)\n\n```javascript\nvar result = _( [1, 2, 3, 4, 5, 6] )\n  .chain()\n  .filter( function(num){ return num % 2 === 0; } )\n  .map( function(num){ return num * 2; } )\n  .value(); // <---  Here's the crucial _.value() call\n\nconsole.log(result); // => [4, 8, 12]\n```\n\nWithout the `.value()` call, `result` would be a wrapped Underscore object, not the array `[4, 8, 12]`.  This is a common mistake when working with Underscore's chaining functionality.  Always remember to unwrap the result using `.value()`.\n\n\nThis section explains the fundamentals of chaining in Underscore.js.  Efficient use of chaining can significantly improve the elegance and readability of your code when performing multiple operations on collections. Remember that only methods that return wrapped objects can be chained.\n\n\n\n\n## Advanced Techniques and Best Practices\n\nThis section delves into more advanced aspects of using Underscore.js effectively, focusing on best practices and techniques to maximize its benefits.\n\n### Error Handling\n\nUnderscore.js itself doesn't offer specific error-handling mechanisms beyond the standard JavaScript exceptions.  However, you should incorporate robust error handling within your code *when using* Underscore.js functions.  This is especially crucial when working with iterators and functions that might encounter unexpected input:\n\n* **Validate Input:** Before passing data to Underscore functions, check for null, undefined, or unexpected types.  This prevents unexpected behavior or crashes.\n\n* **Handle Callback Errors:** If you use custom callback functions within Underscore's iterators (`each`, `map`, `reduce`, etc.), implement `try...catch` blocks inside those callbacks to handle potential errors gracefully.  Consider returning a special value or logging the error to help with debugging.\n\n* **Check Return Values:**  Be aware of what the Underscore functions return. Some return new collections, while others return single values or modify collections in place. Understanding these return values allows you to anticipate and handle potential issues more effectively.\n\n* **Test Thoroughly:** Write comprehensive unit tests to ensure your code using Underscore.js handles various scenarios, including edge cases and error conditions.\n\n\n### Performance Optimization\n\nWhile Underscore.js is generally efficient, you can further optimize performance in your applications:\n\n* **Memoization:** Utilize `_.memoize()` for computationally expensive functions that are called repeatedly with the same arguments. This can drastically reduce processing time.\n\n* **Avoid Unnecessary Operations:**  Chain methods judiciously.  Avoid unnecessary operations within iterators or other functions, as these can impact performance, especially on large datasets.\n\n* **Use Optimized Functions:**  Underscore.js often provides optimized versions of common tasks (like `_.uniq()`).  Leverage these whenever possible instead of writing your own custom implementations.\n\n* **Iterate Efficiently:** Choose the appropriate iterator for the job. `_.each` is for side effects, while `_.map` transforms data.  `_.reduce` is powerful but requires understanding.  Select the most efficient iterator for your specific needs.\n\n* **Profile Your Code:** Use browser developer tools (or Node.js profilers) to identify performance bottlenecks.  This allows you to target optimization efforts effectively.\n\n\n### Integration with other libraries\n\nUnderscore.js works well with other JavaScript libraries.  There's no inherent conflict.  However, be mindful of potential naming collisions.  If another library uses the same names as Underscore functions, you might need to adjust your code (e.g., using aliases or a different naming scheme).  Also, be aware that Underscore.js does *not* directly manipulate the DOM.  If DOM manipulation is needed, you'll typically use a library like jQuery in conjunction with Underscore.\n\n\n### Common Use Cases and Examples\n\nUnderscore.js shines in several common development scenarios:\n\n* **Data Transformation:**  Use `_.map`, `_.filter`, `_.reduce`, and other collection methods to manipulate and transform data efficiently.\n\n* **Data Validation:**  Leverage `_.isArray`, `_.isObject`, and other type-checking functions to ensure your data meets expectations.\n\n* **Asynchronous Operations:**  Combine Underscore.js with Promises or async/await to handle asynchronous operations while maintaining clean and readable code.\n\n* **Event Handling (Indirectly):**  While Underscore doesn't directly handle DOM events, you can use it to process data from events after they are handled by a DOM library like jQuery.\n\n* **Creating Reusable Utility Functions:** Use Underscore.js functions as building blocks for your own custom utility functions, increasing code reusability.\n\n**Example:**  Transforming an array of objects:\n\n```javascript\nvar users = [\n  {id: 1, name: \"Alice\", active: true},\n  {id: 2, name: \"Bob\", active: false},\n  {id: 3, name: \"Charlie\", active: true}\n];\n\nvar activeUsers = _.chain(users)\n  .filter(user => user.active)\n  .map(user => user.name)\n  .value();\n\nconsole.log(activeUsers); // => [\"Alice\", \"Charlie\"]\n```\n\n\nThis section provides guidance on leveraging Underscore.js effectively. By incorporating these best practices, you can build robust, maintainable, and efficient JavaScript applications. Remember to always consult the official Underscore.js documentation for the most up-to-date information.\n\n\n\n\n## Appendix\n\nThis appendix provides supplementary information to aid your understanding and use of Underscore.js.\n\n### Glossary of Terms\n\n* **Collection:** In Underscore.js, a collection refers to either an array or an object.  Many Underscore functions operate on both types interchangeably.\n\n* **Iteratee:** A function passed as an argument to another function (often an Underscore function) that is executed for each item in a collection.  It typically receives the element value, index (or key for objects), and the collection itself as arguments.\n\n* **Predicate:** A function that returns a boolean value (`true` or `false`).  Underscore often uses predicates to filter collections based on a condition.\n\n* **Higher-Order Function:** A function that takes one or more functions as arguments or returns a function as its result. Underscore is heavily reliant on higher-order functions.\n\n* **Memoization:** An optimization technique used to speed up computations by caching the results of expensive function calls. Underscore's `_.memoize()` function facilitates this.\n\n* **Chaining:** The ability to call multiple Underscore methods sequentially on a collection, improving code readability and reducing temporary variables.\n\n* **Wrapped Object:**  The object returned by `_.chain()`. It has methods that allow you to continue chaining Underscore operations.\n\n\n### Frequently Asked Questions (FAQ)\n\n* **Should I still use Underscore.js in 2024?**  While many of Underscore's functions are now natively available in modern JavaScript (via array methods and other features), Underscore still offers benefits:  consistency across older browsers, a familiar API, and some functions (like `_.memoize()` or `_.template()`) that may not have direct equivalents with the same ease of use.  The decision depends on your project's requirements and target browsers.\n\n* **What's the difference between `_.each` and `_.map`?** `_.each` is primarily for side effects (e.g., logging, modifying in place).  It doesn't return a value. `_.map` transforms each element in the collection and returns a new array with the transformed elements.\n\n* **How do I handle errors in my Underscore code?**  Underscore itself doesn't handle errors directly.  Implement robust error handling within your callback functions using `try...catch` blocks and validate your input data before passing it to Underscore methods.\n\n* **Why is my chain not working?** Make sure that you are calling `.value()` at the end of your chain to retrieve the final result. Also ensure that you're chaining methods that return wrapped objects.\n\n* **How do I integrate Underscore with other libraries?**  Generally, there are no inherent conflicts.  Be cautious of potential naming collisions; use aliases if necessary.  For DOM manipulation, use a library like jQuery alongside Underscore.\n\n\n### Further Resources and Learning\n\n* **Official Underscore.js Documentation:** The most authoritative source for information.  Check the official website for the latest API documentation and release notes.\n\n* **Underscore.js Source Code:** Studying the source code itself can be beneficial for a deeper understanding of how Underscore functions work.\n\n* **Online Tutorials and Articles:** Numerous tutorials and articles on Underscore.js are available online. Search for \"Underscore.js tutorial\" or similar terms.\n\n* **Books on Functional Programming:** Underscore promotes functional programming principles.  Learning more about functional programming can significantly improve your ability to leverage Underscore effectively.\n\n\nThis appendix provides supplemental material to enhance your Underscore.js experience.  Remember to always refer to the official documentation for the most accurate and up-to-date information.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"underscorejs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Underscore.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}