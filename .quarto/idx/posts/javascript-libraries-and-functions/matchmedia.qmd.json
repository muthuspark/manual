{"title":"matchMedia - A Developer's Handbook","markdown":{"yaml":{"title":"matchMedia - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction to matchMedia","containsRefs":false,"markdown":"\n\n\n\n#### What is matchMedia?\n\n`matchMedia` is a powerful JavaScript API that allows developers to detect changes in the size and characteristics of a user's viewport (browser window).  It provides a way to listen for media queries, allowing you to dynamically adjust the content and styling of your website based on screen size, resolution, orientation, and other media features.  Instead of relying on hardcoded breakpoints or separate CSS stylesheets for different devices, `matchMedia` enables responsive design by offering a programmatic approach to detect and react to media query matches.  This enables creating truly adaptive user experiences that seamlessly adapt to various display contexts.\n\n#### Why use matchMedia?\n\nUsing `matchMedia` offers several significant advantages for building responsive web applications:\n\n* **Dynamic Content Adjustments:**  Modify content, layout, or functionality based on screen size, orientation, or other media features without requiring page reloads. This results in a smoother and more interactive user experience.\n\n* **Improved Performance:**  Avoid unnecessary CSS switching or JavaScript-based solutions that might be less efficient.  `matchMedia` allows targeted updates, preventing unnecessary rendering overhead.\n\n* **Maintainability:** Centralize your responsive logic within JavaScript, making your code cleaner, more organized, and easier to maintain than managing multiple CSS stylesheets or complex conditional statements.\n\n* **Feature Detection:**  Beyond screen size, you can use `matchMedia` to detect other features like preferred color schemes (\"prefers-color-scheme\"), pointer types (\"pointer: coarse\"), and more, making your application more accessible and adaptable.\n\n* **Testability:**  The programmatic nature of `matchMedia` makes testing your responsive logic much easier compared to CSS-only approaches.\n\n#### Browser Compatibility\n\n`matchMedia` enjoys widespread support across modern browsers. However, older browsers might require a polyfill (a JavaScript library that provides functionality for unsupported browsers).  \n\n| Browser          | Support Status        | Notes                                          |\n|-----------------|-----------------------|-------------------------------------------------|\n| Chrome           | Excellent             | Native support in all recent versions.          |\n| Firefox          | Excellent             | Native support in all recent versions.          |\n| Safari           | Excellent             | Native support in all recent versions.          |\n| Edge             | Excellent             | Native support in all recent versions.          |\n| Internet Explorer | Limited/No Support   |  Requires a polyfill for any meaningful usage.  |\n| Opera            | Excellent             | Native support in all recent versions.          |\n\n\nFor older browsers lacking native `matchMedia` support, consider using a reliable polyfill like `matchMedia.js` or a similar library readily available via a package manager like npm or yarn.  Remember to check the polyfill's license and compatibility before integrating it into your project.  Modern JavaScript bundlers (like Webpack, Parcel, Rollup) can often handle polyfill inclusion automatically if configured correctly with appropriate browserlist settings.\n\n\n\n\n## Basic Usage of matchMedia\n\nThis section details the fundamental usage of the `matchMedia` API.\n\n### Creating a MediaQueryList\n\nThe core of using `matchMedia` involves creating a `MediaQueryList` object. This object represents a specific media query and provides information about whether that query currently matches the user's environment.  You create a `MediaQueryList` using the `window.matchMedia()` method, passing the media query string as an argument.\n\n\n```javascript\n// Create a MediaQueryList for screens wider than 768px\nconst mq = window.matchMedia('(min-width: 768px)');\n\n// Create a MediaQueryList for prefers-color-scheme: dark\nconst darkModeMq = window.matchMedia('(prefers-color-scheme: dark)');\n\n// Create a MediaQueryList for prefers-reduced-motion: reduce\nconst reduceMotionMq = window.matchMedia('(prefers-reduced-motion: reduce)');\n\n\n```\n\nThe returned `mq` object is a `MediaQueryList`.  You can then use its properties and methods to check the current state and respond to changes.\n\n\n### The `matches` Property\n\nThe `matches` property of the `MediaQueryList` object is a boolean value indicating whether the media query currently matches the user's environment.  It's `true` if the query matches and `false` otherwise.\n\n```javascript\nconsole.log(mq.matches); // true if screen width is >= 768px, false otherwise\nconsole.log(darkModeMq.matches); // true if the user prefers dark mode\nconsole.log(reduceMotionMq.matches); // true if the user prefers reduced motion\n```\n\nThis property is useful for immediately determining if a certain style or behavior should be applied.\n\n\n### The `media` Property\n\nThe `media` property is a read-only string containing the original media query that was passed to `window.matchMedia()`.  This is useful for debugging or logging purposes, ensuring you're working with the expected query.\n\n\n```javascript\nconsole.log(mq.media); // Output: \"(min-width: 768px)\"\n```\n\n\n\n### Adding and Removing Listeners with `addListener` and `removeListener`\n\nThe most powerful aspect of `matchMedia` is its ability to listen for changes to the media query's matching state.  This allows your application to react dynamically to changes in the user's environment (e.g., resizing the browser window, changing device orientation, toggling dark mode).\n\n\nThe `addListener` method adds an event listener that is called whenever the `matches` property changes.  The `removeListener` method removes an event listener that was previously added.  The listener function receives a `MediaQueryList` object as an argument; you can access the `matches` property within this function to determine the new state.\n\n\n```javascript\nfunction handleMediaQueryChange(e) {\n  if (e.matches) {\n    // Media query now matches\n    console.log('Media query matches!');\n    // Apply styles or change behavior\n    document.body.classList.add('large-screen');\n  } else {\n    // Media query no longer matches\n    console.log('Media query does not match!');\n    // Apply styles or change behavior\n    document.body.classList.remove('large-screen');\n  }\n}\n\n// Add listener\nmq.addListener(handleMediaQueryChange);\n\n// ... later, to remove the listener:\n// mq.removeListener(handleMediaQueryChange);\n\n\n//Example using prefers-color-scheme\nfunction handleDarkModeChange(e){\n    if(e.matches){\n        document.body.classList.add('dark-mode');\n    } else {\n        document.body.classList.remove('dark-mode');\n    }\n}\n\ndarkModeMq.addListener(handleDarkModeChange);\n\n```\n\nRemember to remove listeners when they are no longer needed to prevent memory leaks, especially in components that might be unmounted or reused.  Consider adding the `removeListener` call within a cleanup function or event handler.\n\n\n\n\n## Advanced Techniques\n\nThis section explores more advanced usage patterns and best practices for working with `matchMedia`.\n\n\n### Using `onchange` event (Deprecated)\n\nWhile `addListener` and `removeListener` are the recommended approach for handling media query changes,  the `onchange` event is deprecated but might still be encountered in older code.  It's generally less flexible and less efficient than the `addListener`/`removeListener` methods.  **It's strongly recommended to use `addListener` and `removeListener` in new code.**\n\nThe `onchange` event handler is assigned directly to the `MediaQueryList` object. This handler is invoked whenever the `matches` property changes.\n\n```javascript\n// Deprecated - use addListener/removeListener instead\nmq.onchange = function() {\n  if (this.matches) {\n    // ...\n  } else {\n    // ...\n  }\n};\n```\n\n\n### Handling Multiple Media Queries\n\nYou can efficiently manage multiple media queries by creating separate `MediaQueryList` objects for each query and attaching appropriate listeners.  However, for a more organized approach, consider using a single function to handle changes from different queries, perhaps using a data structure to track them.\n\n```javascript\nconst mq1 = window.matchMedia('(min-width: 768px)');\nconst mq2 = window.matchMedia('(orientation: landscape)');\n\nfunction handleMultipleQueries(e) {\n  console.log(`Query '${e.matches ? e.media : \"N/A\"}' changed to ${e.matches}`);\n  // Apply logic based on which query changed and its new state\n    if(e.media === '(min-width: 768px)') {\n        //handle mq1 changes\n    } else if (e.media === '(orientation: landscape)') {\n        //handle mq2 changes\n    }\n}\n\nmq1.addListener(handleMultipleQueries);\nmq2.addListener(handleMultipleQueries);\n```\n\nThis approach avoids code duplication and provides better organization when dealing with numerous media queries.\n\n\n### Best Practices for Performance\n\n* **Avoid unnecessary listeners:** Only add listeners when necessary and remove them when the component or functionality is no longer active.  Unnecessary listeners consume resources and can impact performance.\n\n* **Efficient event handling:** Keep your event handlers concise and performant. Avoid expensive operations (e.g., DOM manipulations) within the handler unless absolutely necessary.  Consider debouncing or throttling event handlers if they're called frequently due to rapid changes in the media query state.\n\n* **Minimize DOM manipulation:**  Instead of constantly updating the DOM within event handlers, consider caching DOM elements and manipulating their properties directly when the media query changes.\n\n* **Use CSS where possible:** For simple visual adjustments based on screen size, CSS media queries are often more efficient than using `matchMedia` in JavaScript. Reserve `matchMedia` for more complex or dynamic adaptations requiring JavaScript control.\n\n\n\n### Working with different media types (screen, print, etc.)\n\n\n`matchMedia` supports different media types in your queries.  You can target specific output media like `screen`, `print`, or others using media type descriptors in your query string.\n\n```javascript\nconst screenMq = window.matchMedia('screen and (min-width: 600px)'); //For screen devices wider than 600px\nconst printMq = window.matchMedia('print and (color)'); //For color printers\n\nscreenMq.addListener(function(e){\n    if(e.matches){\n        //Apply styles for screen\n    } else {\n        //Remove styles\n    }\n})\n\nprintMq.addListener(function(e){\n    if(e.matches){\n        //Apply styles for color printers\n    } else {\n        //Remove styles\n    }\n})\n```\n\nThis allows you to create styles and behaviors specifically tailored for print previews or other output media in addition to screen-based displays. Remember that `print` media queries only apply when the print dialog is open.  Be mindful of this when testing.\n\n\n\n\n## Examples and Use Cases\n\nThis section provides practical examples demonstrating `matchMedia` in various scenarios.\n\n\n### Responsive Design Implementation\n\nA fundamental use case for `matchMedia` is creating responsive designs. Instead of relying solely on CSS media queries, `matchMedia` allows for dynamic JavaScript-driven adaptations based on screen size.\n\n```javascript\nconst mq = window.matchMedia('(min-width: 768px)');\n\nfunction handleResize(e) {\n  if (e.matches) {\n    // Larger screens (tablets and desktops)\n    document.getElementById('main-content').classList.add('desktop-layout');\n    document.getElementById('sidebar').style.display = 'block';\n  } else {\n    // Smaller screens (mobiles)\n    document.getElementById('main-content').classList.remove('desktop-layout');\n    document.getElementById('sidebar').style.display = 'none';\n  }\n}\n\nmq.addListener(handleResize);\nhandleResize(mq); // Initial check on page load\n```\n\nThis example switches between different layouts based on screen width, potentially hiding a sidebar on smaller screens. Note the initial call to `handleResize(mq)` to apply the initial layout based on the page load screen size.\n\n### Adaptive Images\n\nUse `matchMedia` to dynamically load different images based on screen resolution or device pixel ratio. This helps optimize image loading and reduce bandwidth usage.\n\n```javascript\nconst mq = window.matchMedia('(min-resolution: 2dppx)'); // Check for high-resolution screens\n\nfunction handleImageChange(e) {\n    const img = document.getElementById('myImage');\n    img.src = e.matches ? 'high-resolution.jpg' : 'low-resolution.jpg';\n}\n\nmq.addListener(handleImageChange);\nhandleImageChange(mq);\n```\n\nThis loads a high-resolution image only when the device supports it; otherwise, a lower-resolution image is loaded.\n\n\n### Dynamic Styling with CSS Variables\n\n`matchMedia` can be used to control CSS custom properties (variables), providing a more elegant way to manage styles based on media conditions.\n\n```javascript\nconst mq = window.matchMedia('(prefers-color-scheme: dark)');\n\nfunction handleDarkMode(e) {\n  document.documentElement.style.setProperty('--bg-color', e.matches ? '#333' : '#fff');\n  document.documentElement.style.setProperty('--text-color', e.matches ? '#fff' : '#333');\n}\n\nmq.addListener(handleDarkMode);\nhandleDarkMode(mq);\n```\n\nThis example sets different background and text colors based on the user's preferred color scheme (dark mode or light mode). This keeps styling centralized in CSS but enables dynamic switching based on user preferences or device capabilities.\n\n\n### Feature Detection and Conditional Rendering\n\nBeyond screen size, `matchMedia` can detect various device capabilities and features, enabling conditional rendering of content or components.\n\n```javascript\nconst touchMq = window.matchMedia('(pointer: coarse)'); // Check for touch devices\n\nfunction handleTouchDevice(e) {\n  if (e.matches) {\n    // Show touch-friendly interface elements\n    document.getElementById('touch-controls').style.display = 'block';\n  } else {\n    // Show alternative interface elements for mouse/keyboard\n    document.getElementById('mouse-controls').style.display = 'block';\n  }\n}\n\ntouchMq.addListener(handleTouchDevice);\nhandleTouchDevice(touchMq);\n```\n\nThis example displays different interface controls based on whether the device primarily uses touch input (like a mobile phone) or mouse/keyboard input.  This approach makes your application more accessible and usable across different input methods.  Remember to always provide alternative ways for users to interact with your application if a feature is not available on their device.\n\n\n\n\n## Troubleshooting and Common Issues\n\nThis section addresses common problems encountered when working with `matchMedia`.\n\n\n### Debugging Media Query Issues\n\nIncorrectly written media queries are a frequent source of problems.  Double-check your syntax carefully.  Common mistakes include:\n\n* **Typos:**  Ensure that media feature names (e.g., `min-width`, `orientation`) and values are spelled correctly.  Case sensitivity matters.\n\n* **Incorrect Units:**  Use the appropriate units for values (e.g., `px`, `em`, `rem` for lengths, `dpi` for resolution).  Omitting units can lead to unexpected results.\n\n* **Logical Errors:** Review your media query logic, including the use of `and`, `or`, and `not` operators. Make sure your conditions accurately reflect the intended behavior.\n\n* **Conflicting Queries:** Ensure that your media queries don't inadvertently conflict with each other. Prioritize media queries appropriately and avoid overlapping conditions that might produce unpredictable results.\n\n**Debugging Techniques:**\n\n* **Console Logging:**  Use `console.log(mq.media)` to verify that the media query string passed to `matchMedia()` is what you expect.  Log the `mq.matches` value to see if the query matches or not under various conditions.\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessible by pressing F12) to inspect the CSS styles applied to your elements. Check the computed styles to make sure the media queries are being applied as expected.\n\n* **Simplify:** If you have complex media queries, try simplifying them to isolate the problem.  Test individual parts of the query separately to pinpoint the source of the error.\n\n\n### Handling Browser Inconsistencies\n\nWhile `matchMedia` has broad browser support, minor inconsistencies may exist.  To ensure reliable cross-browser functionality:\n\n* **Polyfills:** For older browsers lacking native `matchMedia` support, use a robust polyfill.  This ensures consistent behavior across a wider range of browsers.  Thoroughly test your application after adding a polyfill.\n\n* **Feature Detection:**  Use feature detection rather than relying on browser sniffing.  This involves checking whether a specific feature (like `matchMedia`) is available instead of making assumptions about the browser itself.  This approach produces cleaner and more maintainable code that adapts more readily to future browser updates.\n\n* **Testing:**  Test your code across different browsers and devices to ensure consistent behavior.  Automated browser testing tools can be very helpful in this process.\n\n* **Graceful Degradation:**  Design your application to gracefully degrade in cases where `matchMedia` is unavailable or behaves unexpectedly.  This might involve providing fallback mechanisms or alternative UI elements.\n\n\n### Troubleshooting Listener Issues\n\nProblems with listeners can manifest as unexpected behavior or missing updates when media query conditions change.\n\n* **Listener Scope:** Double-check the scope of your listener function, especially if using `this` within the function.  Ensure that `this` refers to the expected object.  Using arrow functions (`() => {}`) can help manage the scope correctly.\n\n* **Multiple Listeners:**  Avoid adding the same listener multiple times to the same `MediaQueryList` object.  This can lead to the function being called repeatedly.\n\n* **Removing Listeners:**  Always remove event listeners when they're no longer needed (e.g., when a component unmounts).  Failing to remove listeners can cause memory leaks and unpredictable behavior.\n\n* **Event Order:** Be aware that the order in which listeners are added doesn’t guarantee the order of execution.\n\n\n**Debugging Listener Issues:**\n\n* **Logging:**  Add console logs inside your listener function to confirm that it's being called when the media query changes.\n\n* **Breakpoints:** Use breakpoints in your debugger to step through the listener function and inspect the state of variables and objects.\n\n* **Temporary Removal:** Temporarily remove some listeners to see if one listener is interfering with another.  This can help isolate the source of the problem.\n\n\nBy systematically investigating these areas, you can resolve most `matchMedia` related issues efficiently. Remember to utilize your browser's developer tools extensively to assist your debugging workflow.\n\n\n\n\n## Alternatives to matchMedia\n\nWhile `matchMedia` is a powerful tool, certain scenarios might benefit from alternative approaches.\n\n\n### Using CSS media queries directly\n\nFor simple responsive design adjustments, relying solely on CSS media queries can be sufficient and often more efficient than using `matchMedia`.  CSS media queries are directly handled by the browser, avoiding the overhead of JavaScript execution.\n\n**Advantages:**\n\n* **Simplicity:** Easier to implement for basic responsive adjustments.\n* **Performance:** Generally more performant for simple styling changes.\n* **No JavaScript required:**  Reduces the amount of JavaScript needed in your project.\n\n**Disadvantages:**\n\n* **Limited Dynamic Control:**  Less control over dynamic content changes based on media queries.  You cannot directly use JavaScript to react to the changes.\n* **Difficult for Complex Logic:**  Managing complex responsive logic entirely in CSS can become cumbersome and difficult to maintain.\n\n\n**Example:**  A simple responsive layout change can be entirely handled in CSS:\n\n```css\n/* Styles for screens smaller than 768px */\n@media (max-width: 767px) {\n  #sidebar {\n    display: none;\n  }\n  #main-content {\n    width: 100%;\n  }\n}\n\n/* Styles for screens larger than or equal to 768px */\n@media (min-width: 768px) {\n  #sidebar {\n    display: block;\n    width: 20%;\n  }\n  #main-content {\n    width: 80%;\n  }\n}\n```\n\nThis avoids JavaScript altogether.  However, more complex logic requiring dynamic content adjustments or conditional rendering would be challenging to implement purely in CSS.\n\n\n### Alternative libraries and frameworks\n\nSeveral JavaScript libraries and frameworks provide features that overlap with or extend the functionality of `matchMedia`.  These might offer additional benefits depending on your project's needs.  However, it's important to carefully weigh the trade-offs:  Adding external libraries increases your project's size and dependencies.\n\n\n* **Frameworks (React, Vue, Angular, etc.):**  Modern JavaScript frameworks usually have built-in mechanisms or readily available libraries for handling responsive design and media query changes.  They often abstract away the details of `matchMedia`, providing higher-level abstractions and convenient APIs.\n\n* **CSS-in-JS Libraries:**  Libraries like styled-components or emotion allow you to write CSS directly within JavaScript components.  They may include features that handle media queries within the styling definition, simplifying the management of responsive styling.\n\n* **Other Libraries:** Some dedicated libraries focus on responsive image handling or other specific aspects of adaptive design.  Research libraries to find the appropriate tools.\n\n\n**Considerations when choosing alternatives:**\n\n* **Project Complexity:** For simple projects, CSS media queries might suffice.  For complex applications with dynamic updates, a framework's built-in features or `matchMedia` might be more suitable.\n\n* **Project Size and Dependencies:**  Adding external libraries increases the project size and introduces dependencies.  Evaluate if the benefits of an alternative library outweigh the potential overhead.\n\n* **Maintainability:** Consider the long-term maintainability of the solution.  A well-structured approach using `matchMedia` or a framework's features can improve maintainability compared to complex CSS-only solutions.\n\n\nThe best approach depends on your specific project requirements and context.  Consider the factors mentioned above to make an informed choice.\n\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Media Query:** A CSS rule that allows you to apply styles based on characteristics of the device displaying the content. These characteristics include screen size, resolution, orientation, and other media features.\n\n* **Media Query List (`MediaQueryList`):**  An object returned by `window.matchMedia()`. It represents a specific media query and provides information about whether that query currently matches the user's environment and allows adding listeners for changes.\n\n* **`matches` Property:** A boolean property of a `MediaQueryList` object that indicates whether the associated media query currently matches the user's environment (`true` if it matches, `false` otherwise).\n\n* **`media` Property:** A read-only string property of a `MediaQueryList` object that contains the original media query string.\n\n* **`addListener` Method:** A method of a `MediaQueryList` object used to add an event listener that is triggered whenever the `matches` property changes.\n\n* **`removeListener` Method:** A method of a `MediaQueryList` object used to remove an event listener that was previously added using `addListener`.\n\n* **Media Feature:** A characteristic of the rendering device or environment that can be tested in a media query (e.g., `width`, `height`, `orientation`, `resolution`, `pointer`, `prefers-color-scheme`).\n\n* **Viewport:** The visible area of the browser window.\n\n* **Device Pixel Ratio (DPR):** The ratio of pixels on the physical screen to pixels in the viewport.  A higher DPR indicates a higher screen resolution.\n\n* **Polyfill:** A piece of JavaScript code that provides functionality for older browsers that don't support a particular feature natively.\n\n\n### Further Resources and Links\n\n* **MDN Web Docs - `matchMedia()`:** [https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)  (The official Mozilla Developer Network documentation for `matchMedia()`)\n\n* **Can I Use... `matchMedia` Support:** [https://caniuse.com/?search=matchMedia](https://caniuse.com/?search=matchMedia) (Check browser compatibility across different versions)\n\n* **Examples and Tutorials (search online):** Numerous blog posts and tutorials demonstrate various ways to use `matchMedia`. Search for \"matchMedia examples\" or \"matchMedia responsive design\" to find relevant resources.\n\n\nThis appendix provides a starting point for deeper exploration and serves as a reference for key terms and resources related to `matchMedia`.  Remember that the web is constantly evolving, so always refer to up-to-date documentation for the most accurate and complete information.\n\n","srcMarkdownNoYaml":"\n\n\n### Introduction to matchMedia\n\n#### What is matchMedia?\n\n`matchMedia` is a powerful JavaScript API that allows developers to detect changes in the size and characteristics of a user's viewport (browser window).  It provides a way to listen for media queries, allowing you to dynamically adjust the content and styling of your website based on screen size, resolution, orientation, and other media features.  Instead of relying on hardcoded breakpoints or separate CSS stylesheets for different devices, `matchMedia` enables responsive design by offering a programmatic approach to detect and react to media query matches.  This enables creating truly adaptive user experiences that seamlessly adapt to various display contexts.\n\n#### Why use matchMedia?\n\nUsing `matchMedia` offers several significant advantages for building responsive web applications:\n\n* **Dynamic Content Adjustments:**  Modify content, layout, or functionality based on screen size, orientation, or other media features without requiring page reloads. This results in a smoother and more interactive user experience.\n\n* **Improved Performance:**  Avoid unnecessary CSS switching or JavaScript-based solutions that might be less efficient.  `matchMedia` allows targeted updates, preventing unnecessary rendering overhead.\n\n* **Maintainability:** Centralize your responsive logic within JavaScript, making your code cleaner, more organized, and easier to maintain than managing multiple CSS stylesheets or complex conditional statements.\n\n* **Feature Detection:**  Beyond screen size, you can use `matchMedia` to detect other features like preferred color schemes (\"prefers-color-scheme\"), pointer types (\"pointer: coarse\"), and more, making your application more accessible and adaptable.\n\n* **Testability:**  The programmatic nature of `matchMedia` makes testing your responsive logic much easier compared to CSS-only approaches.\n\n#### Browser Compatibility\n\n`matchMedia` enjoys widespread support across modern browsers. However, older browsers might require a polyfill (a JavaScript library that provides functionality for unsupported browsers).  \n\n| Browser          | Support Status        | Notes                                          |\n|-----------------|-----------------------|-------------------------------------------------|\n| Chrome           | Excellent             | Native support in all recent versions.          |\n| Firefox          | Excellent             | Native support in all recent versions.          |\n| Safari           | Excellent             | Native support in all recent versions.          |\n| Edge             | Excellent             | Native support in all recent versions.          |\n| Internet Explorer | Limited/No Support   |  Requires a polyfill for any meaningful usage.  |\n| Opera            | Excellent             | Native support in all recent versions.          |\n\n\nFor older browsers lacking native `matchMedia` support, consider using a reliable polyfill like `matchMedia.js` or a similar library readily available via a package manager like npm or yarn.  Remember to check the polyfill's license and compatibility before integrating it into your project.  Modern JavaScript bundlers (like Webpack, Parcel, Rollup) can often handle polyfill inclusion automatically if configured correctly with appropriate browserlist settings.\n\n\n\n\n## Basic Usage of matchMedia\n\nThis section details the fundamental usage of the `matchMedia` API.\n\n### Creating a MediaQueryList\n\nThe core of using `matchMedia` involves creating a `MediaQueryList` object. This object represents a specific media query and provides information about whether that query currently matches the user's environment.  You create a `MediaQueryList` using the `window.matchMedia()` method, passing the media query string as an argument.\n\n\n```javascript\n// Create a MediaQueryList for screens wider than 768px\nconst mq = window.matchMedia('(min-width: 768px)');\n\n// Create a MediaQueryList for prefers-color-scheme: dark\nconst darkModeMq = window.matchMedia('(prefers-color-scheme: dark)');\n\n// Create a MediaQueryList for prefers-reduced-motion: reduce\nconst reduceMotionMq = window.matchMedia('(prefers-reduced-motion: reduce)');\n\n\n```\n\nThe returned `mq` object is a `MediaQueryList`.  You can then use its properties and methods to check the current state and respond to changes.\n\n\n### The `matches` Property\n\nThe `matches` property of the `MediaQueryList` object is a boolean value indicating whether the media query currently matches the user's environment.  It's `true` if the query matches and `false` otherwise.\n\n```javascript\nconsole.log(mq.matches); // true if screen width is >= 768px, false otherwise\nconsole.log(darkModeMq.matches); // true if the user prefers dark mode\nconsole.log(reduceMotionMq.matches); // true if the user prefers reduced motion\n```\n\nThis property is useful for immediately determining if a certain style or behavior should be applied.\n\n\n### The `media` Property\n\nThe `media` property is a read-only string containing the original media query that was passed to `window.matchMedia()`.  This is useful for debugging or logging purposes, ensuring you're working with the expected query.\n\n\n```javascript\nconsole.log(mq.media); // Output: \"(min-width: 768px)\"\n```\n\n\n\n### Adding and Removing Listeners with `addListener` and `removeListener`\n\nThe most powerful aspect of `matchMedia` is its ability to listen for changes to the media query's matching state.  This allows your application to react dynamically to changes in the user's environment (e.g., resizing the browser window, changing device orientation, toggling dark mode).\n\n\nThe `addListener` method adds an event listener that is called whenever the `matches` property changes.  The `removeListener` method removes an event listener that was previously added.  The listener function receives a `MediaQueryList` object as an argument; you can access the `matches` property within this function to determine the new state.\n\n\n```javascript\nfunction handleMediaQueryChange(e) {\n  if (e.matches) {\n    // Media query now matches\n    console.log('Media query matches!');\n    // Apply styles or change behavior\n    document.body.classList.add('large-screen');\n  } else {\n    // Media query no longer matches\n    console.log('Media query does not match!');\n    // Apply styles or change behavior\n    document.body.classList.remove('large-screen');\n  }\n}\n\n// Add listener\nmq.addListener(handleMediaQueryChange);\n\n// ... later, to remove the listener:\n// mq.removeListener(handleMediaQueryChange);\n\n\n//Example using prefers-color-scheme\nfunction handleDarkModeChange(e){\n    if(e.matches){\n        document.body.classList.add('dark-mode');\n    } else {\n        document.body.classList.remove('dark-mode');\n    }\n}\n\ndarkModeMq.addListener(handleDarkModeChange);\n\n```\n\nRemember to remove listeners when they are no longer needed to prevent memory leaks, especially in components that might be unmounted or reused.  Consider adding the `removeListener` call within a cleanup function or event handler.\n\n\n\n\n## Advanced Techniques\n\nThis section explores more advanced usage patterns and best practices for working with `matchMedia`.\n\n\n### Using `onchange` event (Deprecated)\n\nWhile `addListener` and `removeListener` are the recommended approach for handling media query changes,  the `onchange` event is deprecated but might still be encountered in older code.  It's generally less flexible and less efficient than the `addListener`/`removeListener` methods.  **It's strongly recommended to use `addListener` and `removeListener` in new code.**\n\nThe `onchange` event handler is assigned directly to the `MediaQueryList` object. This handler is invoked whenever the `matches` property changes.\n\n```javascript\n// Deprecated - use addListener/removeListener instead\nmq.onchange = function() {\n  if (this.matches) {\n    // ...\n  } else {\n    // ...\n  }\n};\n```\n\n\n### Handling Multiple Media Queries\n\nYou can efficiently manage multiple media queries by creating separate `MediaQueryList` objects for each query and attaching appropriate listeners.  However, for a more organized approach, consider using a single function to handle changes from different queries, perhaps using a data structure to track them.\n\n```javascript\nconst mq1 = window.matchMedia('(min-width: 768px)');\nconst mq2 = window.matchMedia('(orientation: landscape)');\n\nfunction handleMultipleQueries(e) {\n  console.log(`Query '${e.matches ? e.media : \"N/A\"}' changed to ${e.matches}`);\n  // Apply logic based on which query changed and its new state\n    if(e.media === '(min-width: 768px)') {\n        //handle mq1 changes\n    } else if (e.media === '(orientation: landscape)') {\n        //handle mq2 changes\n    }\n}\n\nmq1.addListener(handleMultipleQueries);\nmq2.addListener(handleMultipleQueries);\n```\n\nThis approach avoids code duplication and provides better organization when dealing with numerous media queries.\n\n\n### Best Practices for Performance\n\n* **Avoid unnecessary listeners:** Only add listeners when necessary and remove them when the component or functionality is no longer active.  Unnecessary listeners consume resources and can impact performance.\n\n* **Efficient event handling:** Keep your event handlers concise and performant. Avoid expensive operations (e.g., DOM manipulations) within the handler unless absolutely necessary.  Consider debouncing or throttling event handlers if they're called frequently due to rapid changes in the media query state.\n\n* **Minimize DOM manipulation:**  Instead of constantly updating the DOM within event handlers, consider caching DOM elements and manipulating their properties directly when the media query changes.\n\n* **Use CSS where possible:** For simple visual adjustments based on screen size, CSS media queries are often more efficient than using `matchMedia` in JavaScript. Reserve `matchMedia` for more complex or dynamic adaptations requiring JavaScript control.\n\n\n\n### Working with different media types (screen, print, etc.)\n\n\n`matchMedia` supports different media types in your queries.  You can target specific output media like `screen`, `print`, or others using media type descriptors in your query string.\n\n```javascript\nconst screenMq = window.matchMedia('screen and (min-width: 600px)'); //For screen devices wider than 600px\nconst printMq = window.matchMedia('print and (color)'); //For color printers\n\nscreenMq.addListener(function(e){\n    if(e.matches){\n        //Apply styles for screen\n    } else {\n        //Remove styles\n    }\n})\n\nprintMq.addListener(function(e){\n    if(e.matches){\n        //Apply styles for color printers\n    } else {\n        //Remove styles\n    }\n})\n```\n\nThis allows you to create styles and behaviors specifically tailored for print previews or other output media in addition to screen-based displays. Remember that `print` media queries only apply when the print dialog is open.  Be mindful of this when testing.\n\n\n\n\n## Examples and Use Cases\n\nThis section provides practical examples demonstrating `matchMedia` in various scenarios.\n\n\n### Responsive Design Implementation\n\nA fundamental use case for `matchMedia` is creating responsive designs. Instead of relying solely on CSS media queries, `matchMedia` allows for dynamic JavaScript-driven adaptations based on screen size.\n\n```javascript\nconst mq = window.matchMedia('(min-width: 768px)');\n\nfunction handleResize(e) {\n  if (e.matches) {\n    // Larger screens (tablets and desktops)\n    document.getElementById('main-content').classList.add('desktop-layout');\n    document.getElementById('sidebar').style.display = 'block';\n  } else {\n    // Smaller screens (mobiles)\n    document.getElementById('main-content').classList.remove('desktop-layout');\n    document.getElementById('sidebar').style.display = 'none';\n  }\n}\n\nmq.addListener(handleResize);\nhandleResize(mq); // Initial check on page load\n```\n\nThis example switches between different layouts based on screen width, potentially hiding a sidebar on smaller screens. Note the initial call to `handleResize(mq)` to apply the initial layout based on the page load screen size.\n\n### Adaptive Images\n\nUse `matchMedia` to dynamically load different images based on screen resolution or device pixel ratio. This helps optimize image loading and reduce bandwidth usage.\n\n```javascript\nconst mq = window.matchMedia('(min-resolution: 2dppx)'); // Check for high-resolution screens\n\nfunction handleImageChange(e) {\n    const img = document.getElementById('myImage');\n    img.src = e.matches ? 'high-resolution.jpg' : 'low-resolution.jpg';\n}\n\nmq.addListener(handleImageChange);\nhandleImageChange(mq);\n```\n\nThis loads a high-resolution image only when the device supports it; otherwise, a lower-resolution image is loaded.\n\n\n### Dynamic Styling with CSS Variables\n\n`matchMedia` can be used to control CSS custom properties (variables), providing a more elegant way to manage styles based on media conditions.\n\n```javascript\nconst mq = window.matchMedia('(prefers-color-scheme: dark)');\n\nfunction handleDarkMode(e) {\n  document.documentElement.style.setProperty('--bg-color', e.matches ? '#333' : '#fff');\n  document.documentElement.style.setProperty('--text-color', e.matches ? '#fff' : '#333');\n}\n\nmq.addListener(handleDarkMode);\nhandleDarkMode(mq);\n```\n\nThis example sets different background and text colors based on the user's preferred color scheme (dark mode or light mode). This keeps styling centralized in CSS but enables dynamic switching based on user preferences or device capabilities.\n\n\n### Feature Detection and Conditional Rendering\n\nBeyond screen size, `matchMedia` can detect various device capabilities and features, enabling conditional rendering of content or components.\n\n```javascript\nconst touchMq = window.matchMedia('(pointer: coarse)'); // Check for touch devices\n\nfunction handleTouchDevice(e) {\n  if (e.matches) {\n    // Show touch-friendly interface elements\n    document.getElementById('touch-controls').style.display = 'block';\n  } else {\n    // Show alternative interface elements for mouse/keyboard\n    document.getElementById('mouse-controls').style.display = 'block';\n  }\n}\n\ntouchMq.addListener(handleTouchDevice);\nhandleTouchDevice(touchMq);\n```\n\nThis example displays different interface controls based on whether the device primarily uses touch input (like a mobile phone) or mouse/keyboard input.  This approach makes your application more accessible and usable across different input methods.  Remember to always provide alternative ways for users to interact with your application if a feature is not available on their device.\n\n\n\n\n## Troubleshooting and Common Issues\n\nThis section addresses common problems encountered when working with `matchMedia`.\n\n\n### Debugging Media Query Issues\n\nIncorrectly written media queries are a frequent source of problems.  Double-check your syntax carefully.  Common mistakes include:\n\n* **Typos:**  Ensure that media feature names (e.g., `min-width`, `orientation`) and values are spelled correctly.  Case sensitivity matters.\n\n* **Incorrect Units:**  Use the appropriate units for values (e.g., `px`, `em`, `rem` for lengths, `dpi` for resolution).  Omitting units can lead to unexpected results.\n\n* **Logical Errors:** Review your media query logic, including the use of `and`, `or`, and `not` operators. Make sure your conditions accurately reflect the intended behavior.\n\n* **Conflicting Queries:** Ensure that your media queries don't inadvertently conflict with each other. Prioritize media queries appropriately and avoid overlapping conditions that might produce unpredictable results.\n\n**Debugging Techniques:**\n\n* **Console Logging:**  Use `console.log(mq.media)` to verify that the media query string passed to `matchMedia()` is what you expect.  Log the `mq.matches` value to see if the query matches or not under various conditions.\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessible by pressing F12) to inspect the CSS styles applied to your elements. Check the computed styles to make sure the media queries are being applied as expected.\n\n* **Simplify:** If you have complex media queries, try simplifying them to isolate the problem.  Test individual parts of the query separately to pinpoint the source of the error.\n\n\n### Handling Browser Inconsistencies\n\nWhile `matchMedia` has broad browser support, minor inconsistencies may exist.  To ensure reliable cross-browser functionality:\n\n* **Polyfills:** For older browsers lacking native `matchMedia` support, use a robust polyfill.  This ensures consistent behavior across a wider range of browsers.  Thoroughly test your application after adding a polyfill.\n\n* **Feature Detection:**  Use feature detection rather than relying on browser sniffing.  This involves checking whether a specific feature (like `matchMedia`) is available instead of making assumptions about the browser itself.  This approach produces cleaner and more maintainable code that adapts more readily to future browser updates.\n\n* **Testing:**  Test your code across different browsers and devices to ensure consistent behavior.  Automated browser testing tools can be very helpful in this process.\n\n* **Graceful Degradation:**  Design your application to gracefully degrade in cases where `matchMedia` is unavailable or behaves unexpectedly.  This might involve providing fallback mechanisms or alternative UI elements.\n\n\n### Troubleshooting Listener Issues\n\nProblems with listeners can manifest as unexpected behavior or missing updates when media query conditions change.\n\n* **Listener Scope:** Double-check the scope of your listener function, especially if using `this` within the function.  Ensure that `this` refers to the expected object.  Using arrow functions (`() => {}`) can help manage the scope correctly.\n\n* **Multiple Listeners:**  Avoid adding the same listener multiple times to the same `MediaQueryList` object.  This can lead to the function being called repeatedly.\n\n* **Removing Listeners:**  Always remove event listeners when they're no longer needed (e.g., when a component unmounts).  Failing to remove listeners can cause memory leaks and unpredictable behavior.\n\n* **Event Order:** Be aware that the order in which listeners are added doesn’t guarantee the order of execution.\n\n\n**Debugging Listener Issues:**\n\n* **Logging:**  Add console logs inside your listener function to confirm that it's being called when the media query changes.\n\n* **Breakpoints:** Use breakpoints in your debugger to step through the listener function and inspect the state of variables and objects.\n\n* **Temporary Removal:** Temporarily remove some listeners to see if one listener is interfering with another.  This can help isolate the source of the problem.\n\n\nBy systematically investigating these areas, you can resolve most `matchMedia` related issues efficiently. Remember to utilize your browser's developer tools extensively to assist your debugging workflow.\n\n\n\n\n## Alternatives to matchMedia\n\nWhile `matchMedia` is a powerful tool, certain scenarios might benefit from alternative approaches.\n\n\n### Using CSS media queries directly\n\nFor simple responsive design adjustments, relying solely on CSS media queries can be sufficient and often more efficient than using `matchMedia`.  CSS media queries are directly handled by the browser, avoiding the overhead of JavaScript execution.\n\n**Advantages:**\n\n* **Simplicity:** Easier to implement for basic responsive adjustments.\n* **Performance:** Generally more performant for simple styling changes.\n* **No JavaScript required:**  Reduces the amount of JavaScript needed in your project.\n\n**Disadvantages:**\n\n* **Limited Dynamic Control:**  Less control over dynamic content changes based on media queries.  You cannot directly use JavaScript to react to the changes.\n* **Difficult for Complex Logic:**  Managing complex responsive logic entirely in CSS can become cumbersome and difficult to maintain.\n\n\n**Example:**  A simple responsive layout change can be entirely handled in CSS:\n\n```css\n/* Styles for screens smaller than 768px */\n@media (max-width: 767px) {\n  #sidebar {\n    display: none;\n  }\n  #main-content {\n    width: 100%;\n  }\n}\n\n/* Styles for screens larger than or equal to 768px */\n@media (min-width: 768px) {\n  #sidebar {\n    display: block;\n    width: 20%;\n  }\n  #main-content {\n    width: 80%;\n  }\n}\n```\n\nThis avoids JavaScript altogether.  However, more complex logic requiring dynamic content adjustments or conditional rendering would be challenging to implement purely in CSS.\n\n\n### Alternative libraries and frameworks\n\nSeveral JavaScript libraries and frameworks provide features that overlap with or extend the functionality of `matchMedia`.  These might offer additional benefits depending on your project's needs.  However, it's important to carefully weigh the trade-offs:  Adding external libraries increases your project's size and dependencies.\n\n\n* **Frameworks (React, Vue, Angular, etc.):**  Modern JavaScript frameworks usually have built-in mechanisms or readily available libraries for handling responsive design and media query changes.  They often abstract away the details of `matchMedia`, providing higher-level abstractions and convenient APIs.\n\n* **CSS-in-JS Libraries:**  Libraries like styled-components or emotion allow you to write CSS directly within JavaScript components.  They may include features that handle media queries within the styling definition, simplifying the management of responsive styling.\n\n* **Other Libraries:** Some dedicated libraries focus on responsive image handling or other specific aspects of adaptive design.  Research libraries to find the appropriate tools.\n\n\n**Considerations when choosing alternatives:**\n\n* **Project Complexity:** For simple projects, CSS media queries might suffice.  For complex applications with dynamic updates, a framework's built-in features or `matchMedia` might be more suitable.\n\n* **Project Size and Dependencies:**  Adding external libraries increases the project size and introduces dependencies.  Evaluate if the benefits of an alternative library outweigh the potential overhead.\n\n* **Maintainability:** Consider the long-term maintainability of the solution.  A well-structured approach using `matchMedia` or a framework's features can improve maintainability compared to complex CSS-only solutions.\n\n\nThe best approach depends on your specific project requirements and context.  Consider the factors mentioned above to make an informed choice.\n\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Media Query:** A CSS rule that allows you to apply styles based on characteristics of the device displaying the content. These characteristics include screen size, resolution, orientation, and other media features.\n\n* **Media Query List (`MediaQueryList`):**  An object returned by `window.matchMedia()`. It represents a specific media query and provides information about whether that query currently matches the user's environment and allows adding listeners for changes.\n\n* **`matches` Property:** A boolean property of a `MediaQueryList` object that indicates whether the associated media query currently matches the user's environment (`true` if it matches, `false` otherwise).\n\n* **`media` Property:** A read-only string property of a `MediaQueryList` object that contains the original media query string.\n\n* **`addListener` Method:** A method of a `MediaQueryList` object used to add an event listener that is triggered whenever the `matches` property changes.\n\n* **`removeListener` Method:** A method of a `MediaQueryList` object used to remove an event listener that was previously added using `addListener`.\n\n* **Media Feature:** A characteristic of the rendering device or environment that can be tested in a media query (e.g., `width`, `height`, `orientation`, `resolution`, `pointer`, `prefers-color-scheme`).\n\n* **Viewport:** The visible area of the browser window.\n\n* **Device Pixel Ratio (DPR):** The ratio of pixels on the physical screen to pixels in the viewport.  A higher DPR indicates a higher screen resolution.\n\n* **Polyfill:** A piece of JavaScript code that provides functionality for older browsers that don't support a particular feature natively.\n\n\n### Further Resources and Links\n\n* **MDN Web Docs - `matchMedia()`:** [https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)  (The official Mozilla Developer Network documentation for `matchMedia()`)\n\n* **Can I Use... `matchMedia` Support:** [https://caniuse.com/?search=matchMedia](https://caniuse.com/?search=matchMedia) (Check browser compatibility across different versions)\n\n* **Examples and Tutorials (search online):** Numerous blog posts and tutorials demonstrate various ways to use `matchMedia`. Search for \"matchMedia examples\" or \"matchMedia responsive design\" to find relevant resources.\n\n\nThis appendix provides a starting point for deeper exploration and serves as a reference for key terms and resources related to `matchMedia`.  Remember that the web is constantly evolving, so always refer to up-to-date documentation for the most accurate and complete information.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"matchmedia.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"matchMedia - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}