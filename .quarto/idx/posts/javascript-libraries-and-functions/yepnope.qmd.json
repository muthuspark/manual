{"title":"yepnope - Documentation","markdown":{"yaml":{"title":"yepnope - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is yepnope?","containsRefs":false,"markdown":"\n\n\n\nYepnope is a small, fast, and versatile JavaScript library designed to load other JavaScript files and CSS files asynchronously.  It offers a simple and efficient way to include resources only when needed, improving the performance of your web application by avoiding unnecessary downloads and execution. Yepnope cleverly handles both success and failure callbacks, allowing for robust error handling and graceful degradation.  It's particularly useful for handling conditional loading of scripts based on browser capabilities or user preferences.\n\n### Why use yepnope?\n\nUsing yepnope offers several advantages:\n\n* **Asynchronous Loading:**  Resources are loaded asynchronously, meaning the page doesn't block while waiting for them to download. This significantly improves the perceived performance and responsiveness of your website, especially on slower connections.\n\n* **Conditional Loading:**  You can load scripts only when certain conditions are met (e.g., feature detection, user interaction). This avoids loading unnecessary code, reducing bandwidth usage and improving load times.\n\n* **Error Handling:** Yepnope includes built-in error handling, allowing you to gracefully handle situations where a resource fails to load.\n\n* **Simplicity and Ease of Use:** Yepnope has a concise and easy-to-understand API, making it simple to integrate into your projects.\n\n* **Lightweight:** The library itself is very small, adding minimal overhead to your application.\n\n\n### Basic usage example\n\nThe core of yepnope's functionality revolves around a single function call: `yepnope()`.  It accepts an array of objects, each specifying a resource to load.  Each object can include `url` (required), `success`, `error`, and `complete` callbacks.\n\n```javascript\nyepnope([\n  {\n    url: \"my-script.js\",\n    success: function() {\n      console.log(\"my-script.js loaded successfully!\");\n    },\n    error: function() {\n      console.error(\"Failed to load my-script.js\");\n    }\n  },\n  {\n    url: \"my-stylesheet.css\",\n    type: \"css\" //Specify type for CSS\n  }\n]);\n```\n\nThis example loads `my-script.js` and `my-stylesheet.css`.  The `success` callback for the JavaScript file will execute once the script loads and executes successfully, while the `error` callback will execute if the load fails. The `type: \"css\"` property tells yepnope that it's loading a stylesheet.\n\n### Comparison with other loaders\n\nYepnope, while powerful and versatile for its size, is a simpler loader compared to more complex solutions like RequireJS or Webpack.  While those tools offer sophisticated dependency management and module systems, yepnope focuses on straightforward asynchronous loading of individual scripts and stylesheets.  This makes it a great choice for projects where the overhead of a full module loader is unnecessary.  If you need advanced features like dependency management and AMD/CommonJS module support, RequireJS or Webpack are better suited.  However, for simple asynchronous loading, yepnope offers a lightweight and efficient alternative.\n\n\n## Core Functionality\n\n### Loading JavaScript files\n\nLoading JavaScript files with yepnope is straightforward.  You provide the URL of the JavaScript file within an object in the array passed to the `yepnope()` function.  Yepnope automatically detects that it's a JavaScript file and handles the loading process.\n\n```javascript\nyepnope([\n  { url: \"my-script.js\" }\n]);\n```\n\nThis will load `my-script.js` asynchronously.  Note that the script will execute automatically upon successful loading.\n\n### Loading CSS files\n\nTo load CSS files, specify the `url` and explicitly set the `type` property to `\"css\"`.\n\n```javascript\nyepnope([\n  { url: \"my-styles.css\", type: \"css\" }\n]);\n```\n\nThis will load `my-styles.css` asynchronously.  Yepnope handles the appropriate methods for loading and applying stylesheets.\n\n### Conditional loading\n\nYou can use JavaScript expressions to conditionally load resources.  The URL can be a function that returns the URL of the resource based on the current environment or conditions.\n\n```javascript\nyepnope([\n  {\n    url: function() {\n      if (supportsTouch) {\n        return \"touch-events.js\";\n      } else {\n        return \"mouse-events.js\";\n      }\n    }\n  }\n]);\n```\n\nThis example loads either `touch-events.js` or `mouse-events.js` based on the value of the `supportsTouch` variable. Remember to define `supportsTouch` appropriately before calling `yepnope()`.\n\n### Handling errors\n\nYepnope provides `error` and `complete` callback functions to handle successful and failed loads.  The `error` callback function is executed if the resource fails to load for any reason (e.g., 404 error, network issues).  The `complete` callback executes regardless of success or failure.\n\n```javascript\nyepnope([\n  {\n    url: \"my-script.js\",\n    error: function() {\n      console.error(\"Failed to load my-script.js\");\n      // Implement fallback mechanism\n    },\n    complete: function() {\n      console.log(\"Loading of my-script.js is complete.\");\n    }\n  }\n]);\n\n```\n\n### Callback functions\n\nThe `success`, `error`, and `complete` callback functions are optional but highly recommended for robust error handling and progress tracking. The `success` callback executes only when a resource loads and executes successfully.  Its signature is `function() {}`.  The `error` and `complete` callbacks also have the signature `function() {}`.\n\n\n### Asynchronous loading\n\nYepnope's primary feature is asynchronous loading.  This means that the loading of resources happens in the background without blocking the execution of the rest of the page.  This is crucial for improving the perceived performance of your web application, especially when loading multiple resources.  The browser can continue rendering and processing user interactions while yepnope loads the requested files.  The callback functions are executed only after the respective resources have finished loading and (in the case of `success`) have been successfully parsed and executed (for JavaScript) or applied (for CSS).\n\n\n## Advanced Usage\n\n### Using yepnope with different build systems\n\nYepnope's simplicity makes it easy to integrate into various build systems.  Since it's a small, self-contained library, you can directly include it in your project and use it without requiring significant changes to your build process.  You can include it in your HTML directly via a `<script>` tag or manage it as part of your asset pipeline within tools like Grunt, Gulp, or Webpack.  No specific plugins or configurations are generally needed beyond standard asset management procedures.\n\n### Implementing custom test conditions\n\nYou can enhance conditional loading by creating your own custom test conditions.  Instead of relying on built-in browser detection or feature checks, you can implement functions that perform more specific or complex checks.\n\n```javascript\nfunction isHighResolution() {\n  return window.devicePixelRatio > 2;\n}\n\nyepnope([\n  {\n    url: function() {\n      return isHighResolution() ? \"high-res-images.js\" : \"low-res-images.js\";\n    }\n  }\n]);\n```\n\nThis example demonstrates a custom `isHighResolution` function determining which script to load based on screen resolution.\n\n### Preloading resources\n\nWhile yepnope primarily handles on-demand loading, you can use it to preload resources that might be needed later, improving responsiveness when the resources are actually requested.  Simply include them in your `yepnope()` call, even if you don't immediately use them. The browser will start downloading them in the background.\n\n```javascript\nyepnope([\n  { url: \"expensive-calculation.js\" }, // Preload, but don't necessarily use immediately.\n  { url: \"my-script.js\", success: function(){/* Use expensive-calculation.js here */} }\n]);\n\n```\n\n### Optimizing for performance\n\n* **Minimize HTTP requests:** Combine multiple small scripts or CSS files into fewer, larger files to reduce the number of HTTP requests.\n* **Use a CDN:**  Host your resources on a Content Delivery Network (CDN) to improve download speeds for users in different geographic locations.\n* **Cache busting:**  Use query parameters or version numbers in your URLs to ensure the browser doesn't use outdated cached versions of your resources.\n* **Minification:**  Minimize and compress your scripts and CSS files to reduce their size.\n\n### Debugging and troubleshooting\n\nIf you encounter problems, check your console for error messages.  Ensure your URLs are correct and that the resources exist at the specified locations.  Use your browser's developer tools to inspect network activity and confirm that resources are loading successfully.  The `error` and `complete` callbacks in yepnope can help pinpoint issues.  If using conditional loading, carefully verify the truthiness of your conditions. If problems persist, try temporarily removing conditional loading to isolate potential issues with your conditional logic. Carefully check for any syntax errors in your callback functions or in the conditional logic.\n\n\n## API Reference\n\n### yepnope() function parameters\n\nThe core of yepnope is its single function, `yepnope()`.  It accepts a single argument: an array of objects. Each object represents a resource to be loaded and can have the following properties:\n\n* **`url` (required):** A string specifying the URL of the resource (JavaScript file or CSS stylesheet).  This can also be a function that returns a string URL based on some condition.\n\n* **`type` (optional):** A string specifying the type of resource.  `\"js\"` (default) for JavaScript files and `\"css\"` for CSS files.\n\n* **`success` (optional):** A callback function executed after the resource loads successfully.  It takes no arguments.\n\n* **`error` (optional):** A callback function executed if the resource fails to load.  It takes no arguments.\n\n* **`complete` (optional):** A callback function executed regardless of success or failure. It takes no arguments.\n\n\nExample:\n\n```javascript\nyepnope([\n  { url: \"script1.js\", success: function() { console.log(\"script1 loaded\"); } },\n  { url: \"styles.css\", type: \"css\" },\n  { url: function(){ return (isMobile) ? \"mobile.js\" : \"desktop.js\"; } }\n]);\n```\n\n### Test functions\n\nYepnope doesn't directly include built-in test functions beyond basic type detection (\"js\" or \"css\"). Conditional loading is typically implemented by creating custom test functions that evaluate browser capabilities or other conditions, as shown in the examples above.  You'll define these functions yourself based on your application's needs.  They should return a boolean value representing whether or not the condition is met.\n\n\n### Event handling\n\nYepnope uses the `success`, `error`, and `complete` callbacks within each resource object to handle events.  These callbacks provide a mechanism to respond to successful loading, failed loading, and the completion of the loading process (regardless of success or failure).  There aren't any additional dedicated event listeners or event handling mechanisms exposed by the yepnope API itself.\n\n\n### Available plugins and extensions\n\nYepnope itself is a relatively small and self-contained library. It does not have a formal plugin architecture or a set of officially supported extensions. Its simplicity is its strength.  If you need more advanced features like dependency management, you should consider using a more full-featured module loader like RequireJS or Webpack instead.  While community-created extensions or modifications might exist, they are not officially supported by the yepnope project.\n\n\n## Examples\n\n### Simple script loading\n\nThis example demonstrates loading a single JavaScript file:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Yepnope Example</title>\n</head>\n<body>\n\n<script src=\"yepnope.1.5.4.js\"></script>\n<script>\n  yepnope({\n    url: 'my-script.js',\n    success: function() {\n      console.log('my-script.js loaded successfully!');\n    },\n    error: function() {\n      console.error('Failed to load my-script.js!');\n    }\n  });\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `'yepnope.1.5.4.js'` with the actual path to the yepnope library and `'my-script.js'` with the path to your script.\n\n### Conditional script loading based on browser capabilities\n\nThis example loads different scripts based on whether the browser supports touch events:\n\n```javascript\nfunction supportsTouch() {\n  return ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch;\n}\n\nyepnope([\n  {\n    url: function() {\n      return supportsTouch() ? 'touch-script.js' : 'mouse-script.js';\n    }\n  }\n]);\n```\n\nThis will load `touch-script.js` if the browser supports touch events and `mouse-script.js` otherwise.\n\n### Loading multiple resources\n\nThis example loads multiple JavaScript and CSS files:\n\n```javascript\nyepnope([\n  { url: 'script1.js' },\n  { url: 'script2.js' },\n  { url: 'styles.css', type: 'css' },\n  { url: 'another-script.js', success: function() { alert(\"Another script loaded!\"); } }\n]);\n```\n\nYepnope will load these resources asynchronously.  Note that the order of execution is not guaranteed.\n\n### Integrating with other libraries\n\nIntegrating yepnope with other libraries is generally straightforward.  You load other libraries using yepnope, ensuring that any dependencies are resolved before using the library.  This might involve using conditional loading or callbacks to ensure proper sequencing.  For example, to load jQuery and then use it:\n\n```javascript\nyepnope([\n    {url: 'jquery.js',\n     success: function() {\n         // jQuery is now loaded, use it here\n         $(document).ready(function(){\n            //Your jQuery code here\n         });\n     }\n    }\n]);\n```\n\n### Handling asynchronous dependencies\n\nYepnope doesn't have built-in dependency management. For complex dependencies, you'll need to manage the order manually using callbacks.  For instance, if `script2.js` depends on `script1.js`, ensure `script2.js` is loaded only after `script1.js` is successfully loaded:\n\n```javascript\nyepnope([\n  {\n    url: 'script1.js',\n    success: function() {\n      yepnope({ url: 'script2.js' });\n    },\n    error: function() {\n      console.error('Failed to load script1.js');\n    }\n  }\n]);\n```\n\nThis approach ensures that `script2.js` won't attempt to use functionality from `script1.js` before `script1.js` has finished loading and execution.  For more complex dependency scenarios, consider a more full-featured module loader.\n\n\n## Troubleshooting and FAQs\n\n### Common errors and solutions\n\n* **`404 Not Found` error:** This indicates that yepnope cannot find the resource at the specified URL. Double-check the URL for typos and ensure the resource exists at the correct location.  Use your browser's developer tools to inspect network requests and confirm the resource is accessible.\n\n* **JavaScript errors after loading:** If you encounter JavaScript errors after a script loads, the problem likely lies within the loaded script itself, not with yepnope. Use your browser's developer tools to debug the script.\n\n* **CSS not applying:** If stylesheets are not being applied, check the URLs, ensure the CSS is valid, and verify that there are no conflicting styles overriding your rules.  Use your browser's developer tools to inspect the applied styles and identify any issues.\n\n* **Conditional loading not working:** If your conditional loading logic isn't working as expected, carefully review the conditions themselves for correctness. Make sure the variables or functions used in the conditional statements are properly defined and hold the expected values.  Use console logging to debug the conditional logic and check the values involved.\n\n* **Resource loading order issues:** Yepnope loads resources asynchronously; the order of loading isn't guaranteed. If you have dependencies between resources, you'll need to handle the order manually using callbacks (as described in the \"Handling asynchronous dependencies\" example).\n\n\n### Frequently asked questions\n\n* **Is yepnope compatible with all browsers?** Yepnope generally works across a wide range of modern browsers but might require polyfills for very old browsers.\n\n* **Can I use yepnope to load resources from different domains?** Yes, yepnope supports loading resources from different domains, provided the necessary CORS (Cross-Origin Resource Sharing) headers are configured on the servers serving those resources.\n\n* **What is the best way to handle errors gracefully?** Utilize the `error` callback function to handle loading failures. Implement fallback mechanisms within the `error` callback to provide alternative content or functionality when a resource fails to load.\n\n* **How does yepnope compare to other loaders like RequireJS or Webpack?** Yepnope is a simpler, lightweight solution suitable for straightforward asynchronous loading.  RequireJS and Webpack are more powerful but more complex, offering dependency management and module systems. Choose the tool that best fits your project's needs.\n\n\n### Community support and resources\n\nBecause yepnope is a relatively simple and mature library, dedicated community support forums or extensive documentation beyond the original project documentation may be limited.  Your best resources are usually the original project's source code (if available), related blog posts, or Stack Overflow for troubleshooting specific issues using the `yepnope` tag.  If you encounter problems that cannot be solved through these resources, you may need to consider alternative loading mechanisms or more robust module loaders.\n\n","srcMarkdownNoYaml":"\n\n\n### What is yepnope?\n\nYepnope is a small, fast, and versatile JavaScript library designed to load other JavaScript files and CSS files asynchronously.  It offers a simple and efficient way to include resources only when needed, improving the performance of your web application by avoiding unnecessary downloads and execution. Yepnope cleverly handles both success and failure callbacks, allowing for robust error handling and graceful degradation.  It's particularly useful for handling conditional loading of scripts based on browser capabilities or user preferences.\n\n### Why use yepnope?\n\nUsing yepnope offers several advantages:\n\n* **Asynchronous Loading:**  Resources are loaded asynchronously, meaning the page doesn't block while waiting for them to download. This significantly improves the perceived performance and responsiveness of your website, especially on slower connections.\n\n* **Conditional Loading:**  You can load scripts only when certain conditions are met (e.g., feature detection, user interaction). This avoids loading unnecessary code, reducing bandwidth usage and improving load times.\n\n* **Error Handling:** Yepnope includes built-in error handling, allowing you to gracefully handle situations where a resource fails to load.\n\n* **Simplicity and Ease of Use:** Yepnope has a concise and easy-to-understand API, making it simple to integrate into your projects.\n\n* **Lightweight:** The library itself is very small, adding minimal overhead to your application.\n\n\n### Basic usage example\n\nThe core of yepnope's functionality revolves around a single function call: `yepnope()`.  It accepts an array of objects, each specifying a resource to load.  Each object can include `url` (required), `success`, `error`, and `complete` callbacks.\n\n```javascript\nyepnope([\n  {\n    url: \"my-script.js\",\n    success: function() {\n      console.log(\"my-script.js loaded successfully!\");\n    },\n    error: function() {\n      console.error(\"Failed to load my-script.js\");\n    }\n  },\n  {\n    url: \"my-stylesheet.css\",\n    type: \"css\" //Specify type for CSS\n  }\n]);\n```\n\nThis example loads `my-script.js` and `my-stylesheet.css`.  The `success` callback for the JavaScript file will execute once the script loads and executes successfully, while the `error` callback will execute if the load fails. The `type: \"css\"` property tells yepnope that it's loading a stylesheet.\n\n### Comparison with other loaders\n\nYepnope, while powerful and versatile for its size, is a simpler loader compared to more complex solutions like RequireJS or Webpack.  While those tools offer sophisticated dependency management and module systems, yepnope focuses on straightforward asynchronous loading of individual scripts and stylesheets.  This makes it a great choice for projects where the overhead of a full module loader is unnecessary.  If you need advanced features like dependency management and AMD/CommonJS module support, RequireJS or Webpack are better suited.  However, for simple asynchronous loading, yepnope offers a lightweight and efficient alternative.\n\n\n## Core Functionality\n\n### Loading JavaScript files\n\nLoading JavaScript files with yepnope is straightforward.  You provide the URL of the JavaScript file within an object in the array passed to the `yepnope()` function.  Yepnope automatically detects that it's a JavaScript file and handles the loading process.\n\n```javascript\nyepnope([\n  { url: \"my-script.js\" }\n]);\n```\n\nThis will load `my-script.js` asynchronously.  Note that the script will execute automatically upon successful loading.\n\n### Loading CSS files\n\nTo load CSS files, specify the `url` and explicitly set the `type` property to `\"css\"`.\n\n```javascript\nyepnope([\n  { url: \"my-styles.css\", type: \"css\" }\n]);\n```\n\nThis will load `my-styles.css` asynchronously.  Yepnope handles the appropriate methods for loading and applying stylesheets.\n\n### Conditional loading\n\nYou can use JavaScript expressions to conditionally load resources.  The URL can be a function that returns the URL of the resource based on the current environment or conditions.\n\n```javascript\nyepnope([\n  {\n    url: function() {\n      if (supportsTouch) {\n        return \"touch-events.js\";\n      } else {\n        return \"mouse-events.js\";\n      }\n    }\n  }\n]);\n```\n\nThis example loads either `touch-events.js` or `mouse-events.js` based on the value of the `supportsTouch` variable. Remember to define `supportsTouch` appropriately before calling `yepnope()`.\n\n### Handling errors\n\nYepnope provides `error` and `complete` callback functions to handle successful and failed loads.  The `error` callback function is executed if the resource fails to load for any reason (e.g., 404 error, network issues).  The `complete` callback executes regardless of success or failure.\n\n```javascript\nyepnope([\n  {\n    url: \"my-script.js\",\n    error: function() {\n      console.error(\"Failed to load my-script.js\");\n      // Implement fallback mechanism\n    },\n    complete: function() {\n      console.log(\"Loading of my-script.js is complete.\");\n    }\n  }\n]);\n\n```\n\n### Callback functions\n\nThe `success`, `error`, and `complete` callback functions are optional but highly recommended for robust error handling and progress tracking. The `success` callback executes only when a resource loads and executes successfully.  Its signature is `function() {}`.  The `error` and `complete` callbacks also have the signature `function() {}`.\n\n\n### Asynchronous loading\n\nYepnope's primary feature is asynchronous loading.  This means that the loading of resources happens in the background without blocking the execution of the rest of the page.  This is crucial for improving the perceived performance of your web application, especially when loading multiple resources.  The browser can continue rendering and processing user interactions while yepnope loads the requested files.  The callback functions are executed only after the respective resources have finished loading and (in the case of `success`) have been successfully parsed and executed (for JavaScript) or applied (for CSS).\n\n\n## Advanced Usage\n\n### Using yepnope with different build systems\n\nYepnope's simplicity makes it easy to integrate into various build systems.  Since it's a small, self-contained library, you can directly include it in your project and use it without requiring significant changes to your build process.  You can include it in your HTML directly via a `<script>` tag or manage it as part of your asset pipeline within tools like Grunt, Gulp, or Webpack.  No specific plugins or configurations are generally needed beyond standard asset management procedures.\n\n### Implementing custom test conditions\n\nYou can enhance conditional loading by creating your own custom test conditions.  Instead of relying on built-in browser detection or feature checks, you can implement functions that perform more specific or complex checks.\n\n```javascript\nfunction isHighResolution() {\n  return window.devicePixelRatio > 2;\n}\n\nyepnope([\n  {\n    url: function() {\n      return isHighResolution() ? \"high-res-images.js\" : \"low-res-images.js\";\n    }\n  }\n]);\n```\n\nThis example demonstrates a custom `isHighResolution` function determining which script to load based on screen resolution.\n\n### Preloading resources\n\nWhile yepnope primarily handles on-demand loading, you can use it to preload resources that might be needed later, improving responsiveness when the resources are actually requested.  Simply include them in your `yepnope()` call, even if you don't immediately use them. The browser will start downloading them in the background.\n\n```javascript\nyepnope([\n  { url: \"expensive-calculation.js\" }, // Preload, but don't necessarily use immediately.\n  { url: \"my-script.js\", success: function(){/* Use expensive-calculation.js here */} }\n]);\n\n```\n\n### Optimizing for performance\n\n* **Minimize HTTP requests:** Combine multiple small scripts or CSS files into fewer, larger files to reduce the number of HTTP requests.\n* **Use a CDN:**  Host your resources on a Content Delivery Network (CDN) to improve download speeds for users in different geographic locations.\n* **Cache busting:**  Use query parameters or version numbers in your URLs to ensure the browser doesn't use outdated cached versions of your resources.\n* **Minification:**  Minimize and compress your scripts and CSS files to reduce their size.\n\n### Debugging and troubleshooting\n\nIf you encounter problems, check your console for error messages.  Ensure your URLs are correct and that the resources exist at the specified locations.  Use your browser's developer tools to inspect network activity and confirm that resources are loading successfully.  The `error` and `complete` callbacks in yepnope can help pinpoint issues.  If using conditional loading, carefully verify the truthiness of your conditions. If problems persist, try temporarily removing conditional loading to isolate potential issues with your conditional logic. Carefully check for any syntax errors in your callback functions or in the conditional logic.\n\n\n## API Reference\n\n### yepnope() function parameters\n\nThe core of yepnope is its single function, `yepnope()`.  It accepts a single argument: an array of objects. Each object represents a resource to be loaded and can have the following properties:\n\n* **`url` (required):** A string specifying the URL of the resource (JavaScript file or CSS stylesheet).  This can also be a function that returns a string URL based on some condition.\n\n* **`type` (optional):** A string specifying the type of resource.  `\"js\"` (default) for JavaScript files and `\"css\"` for CSS files.\n\n* **`success` (optional):** A callback function executed after the resource loads successfully.  It takes no arguments.\n\n* **`error` (optional):** A callback function executed if the resource fails to load.  It takes no arguments.\n\n* **`complete` (optional):** A callback function executed regardless of success or failure. It takes no arguments.\n\n\nExample:\n\n```javascript\nyepnope([\n  { url: \"script1.js\", success: function() { console.log(\"script1 loaded\"); } },\n  { url: \"styles.css\", type: \"css\" },\n  { url: function(){ return (isMobile) ? \"mobile.js\" : \"desktop.js\"; } }\n]);\n```\n\n### Test functions\n\nYepnope doesn't directly include built-in test functions beyond basic type detection (\"js\" or \"css\"). Conditional loading is typically implemented by creating custom test functions that evaluate browser capabilities or other conditions, as shown in the examples above.  You'll define these functions yourself based on your application's needs.  They should return a boolean value representing whether or not the condition is met.\n\n\n### Event handling\n\nYepnope uses the `success`, `error`, and `complete` callbacks within each resource object to handle events.  These callbacks provide a mechanism to respond to successful loading, failed loading, and the completion of the loading process (regardless of success or failure).  There aren't any additional dedicated event listeners or event handling mechanisms exposed by the yepnope API itself.\n\n\n### Available plugins and extensions\n\nYepnope itself is a relatively small and self-contained library. It does not have a formal plugin architecture or a set of officially supported extensions. Its simplicity is its strength.  If you need more advanced features like dependency management, you should consider using a more full-featured module loader like RequireJS or Webpack instead.  While community-created extensions or modifications might exist, they are not officially supported by the yepnope project.\n\n\n## Examples\n\n### Simple script loading\n\nThis example demonstrates loading a single JavaScript file:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Yepnope Example</title>\n</head>\n<body>\n\n<script src=\"yepnope.1.5.4.js\"></script>\n<script>\n  yepnope({\n    url: 'my-script.js',\n    success: function() {\n      console.log('my-script.js loaded successfully!');\n    },\n    error: function() {\n      console.error('Failed to load my-script.js!');\n    }\n  });\n</script>\n\n</body>\n</html>\n```\n\nRemember to replace `'yepnope.1.5.4.js'` with the actual path to the yepnope library and `'my-script.js'` with the path to your script.\n\n### Conditional script loading based on browser capabilities\n\nThis example loads different scripts based on whether the browser supports touch events:\n\n```javascript\nfunction supportsTouch() {\n  return ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch;\n}\n\nyepnope([\n  {\n    url: function() {\n      return supportsTouch() ? 'touch-script.js' : 'mouse-script.js';\n    }\n  }\n]);\n```\n\nThis will load `touch-script.js` if the browser supports touch events and `mouse-script.js` otherwise.\n\n### Loading multiple resources\n\nThis example loads multiple JavaScript and CSS files:\n\n```javascript\nyepnope([\n  { url: 'script1.js' },\n  { url: 'script2.js' },\n  { url: 'styles.css', type: 'css' },\n  { url: 'another-script.js', success: function() { alert(\"Another script loaded!\"); } }\n]);\n```\n\nYepnope will load these resources asynchronously.  Note that the order of execution is not guaranteed.\n\n### Integrating with other libraries\n\nIntegrating yepnope with other libraries is generally straightforward.  You load other libraries using yepnope, ensuring that any dependencies are resolved before using the library.  This might involve using conditional loading or callbacks to ensure proper sequencing.  For example, to load jQuery and then use it:\n\n```javascript\nyepnope([\n    {url: 'jquery.js',\n     success: function() {\n         // jQuery is now loaded, use it here\n         $(document).ready(function(){\n            //Your jQuery code here\n         });\n     }\n    }\n]);\n```\n\n### Handling asynchronous dependencies\n\nYepnope doesn't have built-in dependency management. For complex dependencies, you'll need to manage the order manually using callbacks.  For instance, if `script2.js` depends on `script1.js`, ensure `script2.js` is loaded only after `script1.js` is successfully loaded:\n\n```javascript\nyepnope([\n  {\n    url: 'script1.js',\n    success: function() {\n      yepnope({ url: 'script2.js' });\n    },\n    error: function() {\n      console.error('Failed to load script1.js');\n    }\n  }\n]);\n```\n\nThis approach ensures that `script2.js` won't attempt to use functionality from `script1.js` before `script1.js` has finished loading and execution.  For more complex dependency scenarios, consider a more full-featured module loader.\n\n\n## Troubleshooting and FAQs\n\n### Common errors and solutions\n\n* **`404 Not Found` error:** This indicates that yepnope cannot find the resource at the specified URL. Double-check the URL for typos and ensure the resource exists at the correct location.  Use your browser's developer tools to inspect network requests and confirm the resource is accessible.\n\n* **JavaScript errors after loading:** If you encounter JavaScript errors after a script loads, the problem likely lies within the loaded script itself, not with yepnope. Use your browser's developer tools to debug the script.\n\n* **CSS not applying:** If stylesheets are not being applied, check the URLs, ensure the CSS is valid, and verify that there are no conflicting styles overriding your rules.  Use your browser's developer tools to inspect the applied styles and identify any issues.\n\n* **Conditional loading not working:** If your conditional loading logic isn't working as expected, carefully review the conditions themselves for correctness. Make sure the variables or functions used in the conditional statements are properly defined and hold the expected values.  Use console logging to debug the conditional logic and check the values involved.\n\n* **Resource loading order issues:** Yepnope loads resources asynchronously; the order of loading isn't guaranteed. If you have dependencies between resources, you'll need to handle the order manually using callbacks (as described in the \"Handling asynchronous dependencies\" example).\n\n\n### Frequently asked questions\n\n* **Is yepnope compatible with all browsers?** Yepnope generally works across a wide range of modern browsers but might require polyfills for very old browsers.\n\n* **Can I use yepnope to load resources from different domains?** Yes, yepnope supports loading resources from different domains, provided the necessary CORS (Cross-Origin Resource Sharing) headers are configured on the servers serving those resources.\n\n* **What is the best way to handle errors gracefully?** Utilize the `error` callback function to handle loading failures. Implement fallback mechanisms within the `error` callback to provide alternative content or functionality when a resource fails to load.\n\n* **How does yepnope compare to other loaders like RequireJS or Webpack?** Yepnope is a simpler, lightweight solution suitable for straightforward asynchronous loading.  RequireJS and Webpack are more powerful but more complex, offering dependency management and module systems. Choose the tool that best fits your project's needs.\n\n\n### Community support and resources\n\nBecause yepnope is a relatively simple and mature library, dedicated community support forums or extensive documentation beyond the original project documentation may be limited.  Your best resources are usually the original project's source code (if available), related blog posts, or Stack Overflow for troubleshooting specific issues using the `yepnope` tag.  If you encounter problems that cannot be solved through these resources, you may need to consider alternative loading mechanisms or more robust module loaders.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"yepnope.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"yepnope - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}