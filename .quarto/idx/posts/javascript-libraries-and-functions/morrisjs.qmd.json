{"title":"morris.js - Documentation","markdown":{"yaml":{"title":"morris.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Morris.js?","containsRefs":false,"markdown":"\n\n\n\nMorris.js is a relatively lightweight JavaScript library that produces statistical graphs directly in the browser using the HTML5 `<canvas>` element.  It's built on top of Raphael.js, leveraging its capabilities for vector graphics rendering.  Morris.js excels at creating clean, simple charts suitable for quickly visualizing data within web applications.  It supports several chart types, including line charts, bar charts, area charts, and donut charts. While no longer actively maintained, it remains a viable option for projects where its features are sufficient and its simplicity is beneficial.\n\n\n### Why Use Morris.js?\n\nMorris.js offers several advantages:\n\n* **Simplicity:** Its API is straightforward and easy to learn, making it quick to integrate into existing projects.\n* **Clean Aesthetics:**  Morris.js produces visually appealing charts with a consistent style.\n* **Lightweight:**  It has a relatively small footprint, minimizing the impact on page load times.\n* **Client-side Rendering:** Charts are rendered directly in the browser, eliminating the need for server-side chart generation.\n* **Ease of Data Handling:** It accepts data in a simple JSON format, making integration with various data sources relatively straightforward.\n\n\n### Setting up Morris.js\n\nTo use Morris.js, you'll need to include the necessary JavaScript and CSS files in your HTML document.  You can download these files from the original repository (though note that it is no longer actively maintained) or use a CDN.  Typically, this involves adding the following lines within the `<head>` section of your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js\"></script>\n```\n\nRemember to replace the URLs with the correct paths if you download the files locally.\n\n\n### Basic Example\n\nThis example creates a simple line chart showing some sample data:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js\"></script>\n</head>\n<body>\n<div id=\"myChart\"></div>\n\n<script>\n  Morris.Line({\n    element: 'myChart',\n    data: [\n      { year: '2008', value: 20 },\n      { year: '2009', value: 10 },\n      { year: '2010', value: 5 },\n      { year: '2011', value: 15 },\n      { year: '2012', value: 25 }\n    ],\n    xkey: 'year',\n    ykeys: ['value'],\n    labels: ['Value']\n  });\n</script>\n</body>\n</html>\n```\n\nThis code creates a line chart with the 'year' as the x-axis and 'value' as the y-axis.  Remember that you'll need a `<div>` element with the ID \"myChart\" to hold the chart.  This example demonstrates the basic structure of a Morris.js chart configuration.  Refer to the documentation for more advanced options and chart types.\n\n\n## Chart Types\n\n### Line Charts\n\nLine charts in Morris.js are used to display data points connected by straight lines. They are ideal for showing trends over time or other continuous variables.\n\n**Key Options:**\n\n* `element`:  The ID of the DOM element where the chart will be rendered (e.g., `'myLineChart'`).\n* `data`: An array of JSON objects. Each object represents a data point and should contain at least one x-axis value (`xkey`) and one or more y-axis values (`ykeys`).\n* `xkey`: The name of the property in your data objects that represents the x-axis value.\n* `ykeys`: An array of property names representing the y-axis values.  You can have multiple y-axis lines on a single chart.\n* `labels`: An array of labels corresponding to the `ykeys`.\n\n\n**Example:**\n\n```javascript\nMorris.Line({\n  element: 'myLineChart',\n  data: [\n    { year: '2018', value: 20 },\n    { year: '2019', value: 15 },\n    { year: '2020', value: 25 }\n  ],\n  xkey: 'year',\n  ykeys: ['value'],\n  labels: ['Value']\n});\n```\n\n\n### Bar Charts\n\nBar charts in Morris.js display data as horizontal or vertical bars, making it easy to compare values across different categories.\n\n**Key Options:**\n\nThe options are largely the same as for line charts, with the exception that the visual representation changes to bars.  The `barColors` option allows customization of the bar colors.\n\n**Example:**\n\n```javascript\nMorris.Bar({\n  element: 'myBarChart',\n  data: [\n    { month: 'Jan', sales: 20 },\n    { month: 'Feb', sales: 15 },\n    { month: 'Mar', sales: 25 }\n  ],\n  xkey: 'month',\n  ykeys: ['sales'],\n  labels: ['Sales']\n});\n```\n\n\n### Area Charts\n\nArea charts are similar to line charts, but the area between the line and the x-axis is filled, providing a visual representation of the cumulative value.\n\n**Key Options:**\n\nThe options are largely identical to line charts, with the visual representation changing to a filled area.  The `fillOpacity` option can control the opacity of the filled area.\n\n**Example:**\n\n```javascript\nMorris.Area({\n  element: 'myAreaChart',\n  data: [\n    { year: '2018', value: 20 },\n    { year: '2019', value: 15 },\n    { year: '2020', value: 25 }\n  ],\n  xkey: 'year',\n  ykeys: ['value'],\n  labels: ['Value']\n});\n```\n\n\n### Donut Charts\n\nDonut charts are used to display proportions or percentages of different categories within a whole.\n\n**Key Options:**\n\n* `element`: The ID of the DOM element.\n* `data`: An array of JSON objects, each with a `label` and a `value` property.\n* `labelKey`:  Specifies the property containing the label for each segment.  Defaults to `label`.\n* `valueKey`: Specifies the property containing the value for each segment. Defaults to `value`.\n\n\n**Example:**\n\n```javascript\nMorris.Donut({\n  element: 'myDonutChart',\n  data: [\n    {label: \"A\", value: 30},\n    {label: \"B\", value: 20},\n    {label: \"C\", value: 50}\n  ]\n});\n```\n\n\n### Stacked Bar Charts\n\nStacked bar charts display multiple datasets within the same bar, showing the contribution of each dataset to the total value.  This is achieved by using multiple `ykeys` and `labels` in the chart options.\n\n**Key Options:**\n\nUses the same core options as bar charts, but with multiple `ykeys` to represent the stacked data series.\n\n**Example:**\n\n```javascript\nMorris.Bar({\n  element: 'myStackedBarChart',\n  data: [\n    {x: '2018', a: 10, b: 20},\n    {x: '2019', a: 15, b: 15},\n    {x: '2020', a: 20, b: 10}\n  ],\n  xkey: 'x',\n  ykeys: ['a', 'b'],\n  labels: ['Series A', 'Series B'],\n  stacked: true // This option makes the chart stacked\n});\n```\nRemember that  `stacked: true` is crucial for creating a stacked bar chart.\n\n\n## Data Handling\n\n### Data Formats\n\nMorris.js expects data in a simple JSON format.  The structure depends on the chart type, but generally involves an array of objects. Each object represents a single data point.  The `xkey` option specifies the property used for the x-axis (often representing time or categories), and `ykeys` specifies one or more properties for the y-axis values.\n\n**Common Structure:**\n\n```javascript\n[\n  {x: '2023-01-01', y: 10},\n  {x: '2023-01-08', y: 15},\n  {x: '2023-01-15', y: 20}\n]\n```\n\nIn this example:\n\n* `x` is the `xkey`, representing the date.\n* `y` is a `ykey`, representing the value.\n\nFor charts with multiple y-axis lines, you'll need multiple `ykeys`, each representing a different dataset:\n\n\n```javascript\n[\n  {x: '2023-01-01', a: 10, b: 5},\n  {x: '2023-01-08', a: 15, b: 10},\n  {x: '2023-01-15', a: 20, b: 15}\n]\n```\n\nHere `a` and `b` are separate `ykeys`.  You must also specify the `labels` option to provide labels for each of these `ykeys`.\n\n\nDonut charts use a slightly different format where each object contains a `label` and a `value` property:\n\n```javascript\n[\n  {label: \"Category A\", value: 40},\n  {label: \"Category B\", value: 60}\n]\n```\n\n\n\n### Data Preprocessing\n\nWhile Morris.js handles data relatively well, preprocessing your data before passing it to the chart can significantly improve performance and code readability.  This is especially true for large datasets or data requiring transformations.\n\nCommon preprocessing tasks include:\n\n* **Data Cleaning:** Removing or handling missing or invalid data points.\n* **Data Transformation:**  Converting data types, calculating derived values (e.g., percentages, averages), or aggregating data.\n* **Data Formatting:** Ensuring your data is in the correct format expected by Morris.js (e.g., converting dates to the correct format).\n\n\n### Handling Large Datasets\n\nMorris.js is not optimized for extremely large datasets.  For very large datasets (thousands or more data points), consider these strategies:\n\n* **Data Aggregation:** Reduce the number of data points by aggregating or summarizing data. For example, instead of showing daily data, show weekly or monthly averages.\n* **Data Sampling:** Randomly sample a smaller representative subset of your data.\n* **Alternative Libraries:** For significantly large datasets, explore more powerful charting libraries designed for handling massive amounts of data efficiently, such as D3.js or similar tools.  Morris.js's performance may degrade noticeably with very large inputs.\n\n\n### Dynamic Data Updates\n\nMorris.js allows for dynamic updates of chart data.  Instead of recreating the chart each time the data changes, you can use the `setData` method to update the chart with new data:\n\n```javascript\nvar chart = Morris.Line({\n  // chart options...\n});\n\n//Later, to update the chart:\nvar newData = [ /* your new data */ ];\nchart.setData(newData);\n```\n\nThis approach is much more efficient than completely redrawing the chart, especially with frequent updates.  This method updates the chart's underlying data and redraws only the necessary parts.  The chart will be redrawn with the changes you give it.\n\n\n## Customization\n\n### Chart Titles and Labels\n\nMorris.js doesn't directly support adding chart titles in the same way some other charting libraries do.  However, you can achieve a similar effect by adding a separate heading or `<p>` element above or below the chart's container.  You can control axis labels using the `labels` option (for y-axis labels) and by careful selection of your `xkey` data which will form the x-axis labels.  For more sophisticated title placement, you would need to use CSS and potentially modify the surrounding HTML.\n\n\n### Axis Configuration\n\nYou have limited control over axis configuration in Morris.js.  The x-axis labels are primarily determined by your data's `xkey` values.  For the y-axis,  while you can't directly specify specific ranges or intervals, the library automatically scales the axis based on your data.  You don't have direct control over things like tick mark intervals or axis labels' formatting or rotation.\n\n\n### Grid Lines and Background\n\nMorris.js automatically includes grid lines, but you can customize their appearance (though options are limited).  You can't remove them entirely without modifying the source code directly.  The background color is determined by the CSS styles applied to the chart container.  You can customize this by setting the background color of the `div` element containing your chart, or using CSS to style the chart specifically.  You can only control the grid's visibility indirectly.\n\n\n### Colors and Themes\n\nYou can customize the colors of various chart elements, particularly bar and line charts, using the `barColors` (for bar charts) or by specifying individual colors for each line in a line chart by setting the `lineColors` array.  There's no built-in theming system; customization primarily involves adjusting these color options.  You can use any valid CSS color values (hex codes, named colors, RGB, etc.).\n\n\n### Tooltips and Hover Effects\n\nMorris.js provides built-in tooltips that appear when hovering over data points.  You have little direct control over their appearance or content.  They display the x-axis value and the corresponding y-axis value(s).  To change their appearance, you would generally need to modify the Morris.js source code itself or wrap it within a custom CSS style.\n\n\n### Customizing Legends\n\nLegends (if applicable to the chart type) are automatically generated by Morris.js, and there is very limited control over their appearance or positioning. You cannot easily customize their location, style, or content without making extensive modifications to the library's source code.  Consider adding separate legend elements next to the charts if you need more extensive customization.  You have no direct ability to modify what is contained in the legend itself, aside from the data you feed to the chart.\n\n\n## Advanced Techniques\n\n### Event Handling\n\nMorris.js offers limited built-in event handling.  While it doesn't provide extensive event APIs like some other libraries, you can indirectly interact with chart events through the underlying Raphael.js library.  This requires a deeper understanding of Raphael.js's event system and may involve manipulating the chart's elements directly using JavaScript. This approach is not officially supported and may break with library updates.\n\nThere are no documented public events directly exposed by Morris.js that you can hook into for actions like click or hover on chart elements.\n\n\n### Animations and Transitions\n\nMorris.js includes basic animations for chart rendering.  These animations are built-in and cannot be customized or disabled directly through the options. The animations are generally smooth transitions when the chart is initially drawn or data is updated using `setData`.  There are no options to configure animation speed or effects.  The default animation style is fairly standard and may not be configurable to a fine degree.\n\n\n### Integrating with Other Libraries\n\nIntegrating Morris.js with other JavaScript libraries is generally straightforward.  Since it renders within a standard `<div>` element, it can coexist with other UI elements. However, be mindful of potential conflicts if other libraries also modify the DOM where the chart is rendered.  Ensure proper sequencing of library inclusion in your HTML to avoid unexpected behavior.  If other libraries manipulate the DOM element holding the chart after Morris.js renders, this may cause the chart to be redrawn or malfunction.\n\nUsing Morris.js alongside libraries that handle data manipulation (like data tables or data grids) is common.  Simply prepare your data using these external tools, and then feed the appropriately formatted data to Morris.js.\n\n\n\n### Troubleshooting Common Issues\n\nSeveral common issues can arise when working with Morris.js:\n\n* **Incorrect Data Format:** Ensure your data is in the correct JSON format as described in the documentation. Pay close attention to `xkey`, `ykeys`, and `labels`.\n* **Missing Dependencies:** Verify that you've correctly included both Raphael.js and Morris.js in your HTML, ensuring the correct paths to the files.  The order of inclusion may matter.\n* **Conflicting CSS:** Check for CSS conflicts that may affect the chart's rendering.  Ensure your CSS doesn't inadvertently override the styles applied by Morris.js.\n* **DOM Element Issues:** Ensure that the `<div>` element where the chart will be rendered exists in the DOM and has the correct ID.  Errors related to the DOM (such as the div not existing) are common sources of problems.\n* **Browser Compatibility:**  Although Morris.js generally supports modern browsers, very old or outdated browsers might lack sufficient HTML5 canvas support causing the charts to not render properly or at all.\n* **Large Datasets:**  As previously mentioned, Morris.js isn't designed for extremely large datasets.  If performance issues arise with large datasets, consider using data aggregation or sampling techniques, or consider upgrading to a more powerful charting library better suited for handling vast quantities of data.\n\n\nRemember that Morris.js is no longer actively maintained, so finding solutions for complex problems or obtaining support may be difficult.  Using a more actively developed charting library might be a better choice for new projects.\n\n\n## Best Practices\n\n### Performance Optimization\n\nMorris.js, while generally efficient for moderately sized datasets, can become slow with very large amounts of data. To optimize performance:\n\n* **Data Aggregation:**  Reduce the number of data points by aggregating your data before passing it to Morris.js.  For example, instead of plotting daily data, consider weekly or monthly averages.\n* **Data Sampling:** If feasible, use a representative sample of your data rather than the entire dataset.\n* **Avoid Frequent Updates:**  Minimize frequent updates to the chart data using the `setData` method.  If updates are necessary frequently, explore alternative approaches or consider using a more performance-optimized library.\n* **Efficient Data Structures:** Ensure your data is structured efficiently in a way conducive to quick processing by Morris.js. This often entails using simpler JSON structures instead of complex nested data objects.\n* **Minification and Compression:** Before deployment, minify and compress your JavaScript and CSS files to reduce file sizes and improve load times.\n\n\n### Accessibility Considerations\n\nMorris.js doesn't have built-in accessibility features. To improve accessibility:\n\n* **Alternative Text:** If your charts are purely visual, providing alternative text descriptions (using ARIA attributes or surrounding text) is essential for screen readers and users with visual impairments.  Clearly describe the data that the chart is presenting.\n* **Keyboard Navigation:**  Morris.js doesn't natively support keyboard navigation.  If keyboard navigation is important, consider adding custom JavaScript functionality to make the chart elements focusable and navigable by keyboard.\n* **Color Contrast:** Use sufficient color contrast between chart elements and the background to ensure readability for users with visual impairments.\n* **Sufficient Size:** Ensure your charts are large enough to be easily viewed and understood.  Avoid using very small fonts or overly dense data visualizations.\n* **Clear Labels:** Use clear and concise labels for axes and data points. This assists everyone, including visually impaired users.\n\nGiven the lack of direct accessibility support in Morris.js, you will be highly reliant on adding your own accommodations.\n\n\n### Maintaining Code Readability\n\nTo maintain code readability when using Morris.js:\n\n* **Clear Variable Names:** Use descriptive variable names for chart options and data variables.  This improves understanding of your code and its purpose.\n* **Modular Code:** Organize your Morris.js code into modular functions and components to enhance maintainability and reduce code duplication. This improves long-term comprehension of the code.\n* **Comments:** Add comments to explain complex parts of your code, especially when working with chart options or data transformations.\n* **Consistent Formatting:** Use a consistent coding style throughout your project.   This improves understanding of the code.\n* **Separate Data Handling:**  Keep the data handling logic separate from the chart rendering code. This separates concerns and aids in the maintenance of your codebase.\n\nFollowing these suggestions will dramatically improve long term maintainability of any code that uses Morris.js.\n\n\n## Examples and Case Studies\n\nNote:  Due to the age and lack of active maintenance of Morris.js, finding readily available, extensive, and up-to-date examples online can be challenging. The examples below use the basic structure and concepts.  You may need to adapt them based on any updates or changes in available versions of Morris.js or its dependencies.  Always consult the (potentially outdated) official documentation for the most accurate information regarding available options.\n\n\n### Simple Line Chart Example\n\nThis example demonstrates a basic line chart showing website visits over a week:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css\">\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js\"></script>\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js\"></script>\n</head>\n<body>\n<div id=\"line-chart\"></div>\n\n<script>\n  Morris.Line({\n    element: 'line-chart',\n    data: [\n      { day: 'Mon', visits: 10 },\n      { day: 'Tue', visits: 15 },\n      { day: 'Wed', visits: 20 },\n      { day: 'Thu', visits: 12 },\n      { day: 'Fri', visits: 25 },\n      { day: 'Sat', visits: 18 },\n      { day: 'Sun', visits: 22 }\n    ],\n    xkey: 'day',\n    ykeys: ['visits'],\n    labels: ['Visits']\n  });\n</script>\n</body>\n</html>\n```\n\n\n### Complex Bar Chart Example\n\nThis example shows a stacked bar chart comparing sales of different products across multiple regions:\n\n```javascript\nMorris.Bar({\n  element: 'bar-chart',\n  data: [\n    { region: 'North', productA: 30, productB: 20, productC: 15 },\n    { region: 'South', productA: 25, productB: 35, productC: 10 },\n    { region: 'East', productA: 18, productB: 22, productC: 28 },\n    { region: 'West', productA: 35, productB: 15, productC: 22 }\n  ],\n  xkey: 'region',\n  ykeys: ['productA', 'productB', 'productC'],\n  labels: ['Product A', 'Product B', 'Product C'],\n  stacked: true\n});\n```  Remember to include the necessary `<div>` with the ID `bar-chart`.\n\n\n### Interactive Donut Chart Example\n\nWhile Morris.js doesn't offer highly interactive features, you can create a basic donut chart that displays data:\n\n```javascript\nMorris.Donut({\n  element: 'donut-chart',\n  data: [\n    {label: \"Category A\", value: 40},\n    {label: \"Category B\", value: 60}\n  ]\n});\n```   Again, ensure you have a `<div>` with the ID `donut-chart`.\n\n\n### Real-World Application Example\n\nA real-world application might involve displaying website analytics.  Imagine a dashboard showing daily user engagement metrics.  You could use line charts for daily active users and unique visitors, bar charts to compare user demographics, and donut charts to show user acquisition sources.  The data would be fetched from a backend API (e.g., using AJAX) and dynamically updated using the `setData` method.  This would require integration with backend systems and potentially additional JavaScript frameworks for handling data fetching and updates.  The example provided earlier of dynamic data updates demonstrates the basic concept.  A full \"real-world\" example would require significant additional code beyond the scope of a simple example here.  Remember that the level of interactivity in such a system would be quite limited with Morris.js.\n\n\n## API Reference\n\n**Note:** The Morris.js API is relatively limited and the documentation is outdated.  The information below represents the general structure and common options available; however,  always check the (potentially outdated) original documentation for the most accurate and up-to-date details.  The lack of active maintenance means that some options might not behave as expected or might be entirely unavailable depending on the version you're using.\n\n\n### Chart Constructor Options\n\nThese options are passed to the chart constructor (e.g., `Morris.Line`, `Morris.Bar`, etc.) to configure the chart's overall appearance and behavior.  Many options are shared across different chart types, but some are specific to certain chart types.\n\n* **`element` (String):** The ID of the HTML element where the chart will be rendered.  **Required**.\n* **`data` (Array):** An array of JSON objects representing the chart data. **Required**.\n* **`xkey` (String):** The property name used for the x-axis values.  **Required for line, bar, and area charts**.\n* **`ykeys` (Array):** An array of property names used for the y-axis values. **Required for line, bar, and area charts**.\n* **`labels` (Array):** An array of labels corresponding to the `ykeys`. **Required for line, bar, and area charts**.\n* **`parseTime` (Boolean):**  Specifies whether the x-axis values should be parsed as dates.  Defaults to `true` for most charts.\n* **`xLabelFormat` (Function):**  A function to format x-axis labels (often used for date formatting).\n* **`yLabelFormat` (Function):** A function to format y-axis labels.\n* **`hideHover` (Boolean):**  Hides the hover tooltip.\n* **`hoverCallback` (Function):** A custom function to modify hover tooltip content.\n* **`resize` (Boolean):** Enables automatic resizing of the chart when the window is resized.\n\n\n### Data Options\n\nThese options directly relate to how the chart handles and displays the data:\n\n*   (Implicit through `data` array):  The data itself is the most important aspect.  It needs to be a properly formatted JSON array.  The format varies slightly based on the chart type (see the Data Handling section of this manual).\n\n\n### Element Options\n\nThese options control the styling and appearance of specific chart elements:\n\n* **`barColors` (Array):** An array of colors for bar charts.\n* **`lineColors` (Array):** An array of colors for line charts.\n* **`pointFillColors` (Array):**  Colors for filling points in line charts.\n* **`pointStrokeColors` (Array):**  Colors for outlining points in line charts.\n* **`gridTextColor` (String):** Color of the grid text.\n* **`gridTextSize` (Number):** Size of the grid text.\n* **`gridStrokeWidth` (Number):** Width of grid lines.\n* **`gridTextFamily` (String):** Font family used for grid text.\n* **`gridTextWeight` (String):** Font weight for grid text.\n* **`fillOpacity` (Number):** Opacity for filled areas in area charts.\n* **`behaveLikeLine` (boolean):**  This option affects how the chart behaves when it's very wide (default `false`).\n\n\n### Methods\n\nMorris.js charts expose only a limited number of methods:\n\n* **`setData(data)`:** Updates the chart with new data.\n* **`redraw()`:** Redraws the chart (useful if you've made changes to the chart's options).\n\n\nRemember that the options and their exact behaviors might vary slightly depending on the specific chart type and the version of Morris.js you are using.  Always refer to (the potentially outdated) official documentation and test extensively.  The API is not very rich in functionality.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Morris.js?\n\nMorris.js is a relatively lightweight JavaScript library that produces statistical graphs directly in the browser using the HTML5 `<canvas>` element.  It's built on top of Raphael.js, leveraging its capabilities for vector graphics rendering.  Morris.js excels at creating clean, simple charts suitable for quickly visualizing data within web applications.  It supports several chart types, including line charts, bar charts, area charts, and donut charts. While no longer actively maintained, it remains a viable option for projects where its features are sufficient and its simplicity is beneficial.\n\n\n### Why Use Morris.js?\n\nMorris.js offers several advantages:\n\n* **Simplicity:** Its API is straightforward and easy to learn, making it quick to integrate into existing projects.\n* **Clean Aesthetics:**  Morris.js produces visually appealing charts with a consistent style.\n* **Lightweight:**  It has a relatively small footprint, minimizing the impact on page load times.\n* **Client-side Rendering:** Charts are rendered directly in the browser, eliminating the need for server-side chart generation.\n* **Ease of Data Handling:** It accepts data in a simple JSON format, making integration with various data sources relatively straightforward.\n\n\n### Setting up Morris.js\n\nTo use Morris.js, you'll need to include the necessary JavaScript and CSS files in your HTML document.  You can download these files from the original repository (though note that it is no longer actively maintained) or use a CDN.  Typically, this involves adding the following lines within the `<head>` section of your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js\"></script>\n```\n\nRemember to replace the URLs with the correct paths if you download the files locally.\n\n\n### Basic Example\n\nThis example creates a simple line chart showing some sample data:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js\"></script>\n</head>\n<body>\n<div id=\"myChart\"></div>\n\n<script>\n  Morris.Line({\n    element: 'myChart',\n    data: [\n      { year: '2008', value: 20 },\n      { year: '2009', value: 10 },\n      { year: '2010', value: 5 },\n      { year: '2011', value: 15 },\n      { year: '2012', value: 25 }\n    ],\n    xkey: 'year',\n    ykeys: ['value'],\n    labels: ['Value']\n  });\n</script>\n</body>\n</html>\n```\n\nThis code creates a line chart with the 'year' as the x-axis and 'value' as the y-axis.  Remember that you'll need a `<div>` element with the ID \"myChart\" to hold the chart.  This example demonstrates the basic structure of a Morris.js chart configuration.  Refer to the documentation for more advanced options and chart types.\n\n\n## Chart Types\n\n### Line Charts\n\nLine charts in Morris.js are used to display data points connected by straight lines. They are ideal for showing trends over time or other continuous variables.\n\n**Key Options:**\n\n* `element`:  The ID of the DOM element where the chart will be rendered (e.g., `'myLineChart'`).\n* `data`: An array of JSON objects. Each object represents a data point and should contain at least one x-axis value (`xkey`) and one or more y-axis values (`ykeys`).\n* `xkey`: The name of the property in your data objects that represents the x-axis value.\n* `ykeys`: An array of property names representing the y-axis values.  You can have multiple y-axis lines on a single chart.\n* `labels`: An array of labels corresponding to the `ykeys`.\n\n\n**Example:**\n\n```javascript\nMorris.Line({\n  element: 'myLineChart',\n  data: [\n    { year: '2018', value: 20 },\n    { year: '2019', value: 15 },\n    { year: '2020', value: 25 }\n  ],\n  xkey: 'year',\n  ykeys: ['value'],\n  labels: ['Value']\n});\n```\n\n\n### Bar Charts\n\nBar charts in Morris.js display data as horizontal or vertical bars, making it easy to compare values across different categories.\n\n**Key Options:**\n\nThe options are largely the same as for line charts, with the exception that the visual representation changes to bars.  The `barColors` option allows customization of the bar colors.\n\n**Example:**\n\n```javascript\nMorris.Bar({\n  element: 'myBarChart',\n  data: [\n    { month: 'Jan', sales: 20 },\n    { month: 'Feb', sales: 15 },\n    { month: 'Mar', sales: 25 }\n  ],\n  xkey: 'month',\n  ykeys: ['sales'],\n  labels: ['Sales']\n});\n```\n\n\n### Area Charts\n\nArea charts are similar to line charts, but the area between the line and the x-axis is filled, providing a visual representation of the cumulative value.\n\n**Key Options:**\n\nThe options are largely identical to line charts, with the visual representation changing to a filled area.  The `fillOpacity` option can control the opacity of the filled area.\n\n**Example:**\n\n```javascript\nMorris.Area({\n  element: 'myAreaChart',\n  data: [\n    { year: '2018', value: 20 },\n    { year: '2019', value: 15 },\n    { year: '2020', value: 25 }\n  ],\n  xkey: 'year',\n  ykeys: ['value'],\n  labels: ['Value']\n});\n```\n\n\n### Donut Charts\n\nDonut charts are used to display proportions or percentages of different categories within a whole.\n\n**Key Options:**\n\n* `element`: The ID of the DOM element.\n* `data`: An array of JSON objects, each with a `label` and a `value` property.\n* `labelKey`:  Specifies the property containing the label for each segment.  Defaults to `label`.\n* `valueKey`: Specifies the property containing the value for each segment. Defaults to `value`.\n\n\n**Example:**\n\n```javascript\nMorris.Donut({\n  element: 'myDonutChart',\n  data: [\n    {label: \"A\", value: 30},\n    {label: \"B\", value: 20},\n    {label: \"C\", value: 50}\n  ]\n});\n```\n\n\n### Stacked Bar Charts\n\nStacked bar charts display multiple datasets within the same bar, showing the contribution of each dataset to the total value.  This is achieved by using multiple `ykeys` and `labels` in the chart options.\n\n**Key Options:**\n\nUses the same core options as bar charts, but with multiple `ykeys` to represent the stacked data series.\n\n**Example:**\n\n```javascript\nMorris.Bar({\n  element: 'myStackedBarChart',\n  data: [\n    {x: '2018', a: 10, b: 20},\n    {x: '2019', a: 15, b: 15},\n    {x: '2020', a: 20, b: 10}\n  ],\n  xkey: 'x',\n  ykeys: ['a', 'b'],\n  labels: ['Series A', 'Series B'],\n  stacked: true // This option makes the chart stacked\n});\n```\nRemember that  `stacked: true` is crucial for creating a stacked bar chart.\n\n\n## Data Handling\n\n### Data Formats\n\nMorris.js expects data in a simple JSON format.  The structure depends on the chart type, but generally involves an array of objects. Each object represents a single data point.  The `xkey` option specifies the property used for the x-axis (often representing time or categories), and `ykeys` specifies one or more properties for the y-axis values.\n\n**Common Structure:**\n\n```javascript\n[\n  {x: '2023-01-01', y: 10},\n  {x: '2023-01-08', y: 15},\n  {x: '2023-01-15', y: 20}\n]\n```\n\nIn this example:\n\n* `x` is the `xkey`, representing the date.\n* `y` is a `ykey`, representing the value.\n\nFor charts with multiple y-axis lines, you'll need multiple `ykeys`, each representing a different dataset:\n\n\n```javascript\n[\n  {x: '2023-01-01', a: 10, b: 5},\n  {x: '2023-01-08', a: 15, b: 10},\n  {x: '2023-01-15', a: 20, b: 15}\n]\n```\n\nHere `a` and `b` are separate `ykeys`.  You must also specify the `labels` option to provide labels for each of these `ykeys`.\n\n\nDonut charts use a slightly different format where each object contains a `label` and a `value` property:\n\n```javascript\n[\n  {label: \"Category A\", value: 40},\n  {label: \"Category B\", value: 60}\n]\n```\n\n\n\n### Data Preprocessing\n\nWhile Morris.js handles data relatively well, preprocessing your data before passing it to the chart can significantly improve performance and code readability.  This is especially true for large datasets or data requiring transformations.\n\nCommon preprocessing tasks include:\n\n* **Data Cleaning:** Removing or handling missing or invalid data points.\n* **Data Transformation:**  Converting data types, calculating derived values (e.g., percentages, averages), or aggregating data.\n* **Data Formatting:** Ensuring your data is in the correct format expected by Morris.js (e.g., converting dates to the correct format).\n\n\n### Handling Large Datasets\n\nMorris.js is not optimized for extremely large datasets.  For very large datasets (thousands or more data points), consider these strategies:\n\n* **Data Aggregation:** Reduce the number of data points by aggregating or summarizing data. For example, instead of showing daily data, show weekly or monthly averages.\n* **Data Sampling:** Randomly sample a smaller representative subset of your data.\n* **Alternative Libraries:** For significantly large datasets, explore more powerful charting libraries designed for handling massive amounts of data efficiently, such as D3.js or similar tools.  Morris.js's performance may degrade noticeably with very large inputs.\n\n\n### Dynamic Data Updates\n\nMorris.js allows for dynamic updates of chart data.  Instead of recreating the chart each time the data changes, you can use the `setData` method to update the chart with new data:\n\n```javascript\nvar chart = Morris.Line({\n  // chart options...\n});\n\n//Later, to update the chart:\nvar newData = [ /* your new data */ ];\nchart.setData(newData);\n```\n\nThis approach is much more efficient than completely redrawing the chart, especially with frequent updates.  This method updates the chart's underlying data and redraws only the necessary parts.  The chart will be redrawn with the changes you give it.\n\n\n## Customization\n\n### Chart Titles and Labels\n\nMorris.js doesn't directly support adding chart titles in the same way some other charting libraries do.  However, you can achieve a similar effect by adding a separate heading or `<p>` element above or below the chart's container.  You can control axis labels using the `labels` option (for y-axis labels) and by careful selection of your `xkey` data which will form the x-axis labels.  For more sophisticated title placement, you would need to use CSS and potentially modify the surrounding HTML.\n\n\n### Axis Configuration\n\nYou have limited control over axis configuration in Morris.js.  The x-axis labels are primarily determined by your data's `xkey` values.  For the y-axis,  while you can't directly specify specific ranges or intervals, the library automatically scales the axis based on your data.  You don't have direct control over things like tick mark intervals or axis labels' formatting or rotation.\n\n\n### Grid Lines and Background\n\nMorris.js automatically includes grid lines, but you can customize their appearance (though options are limited).  You can't remove them entirely without modifying the source code directly.  The background color is determined by the CSS styles applied to the chart container.  You can customize this by setting the background color of the `div` element containing your chart, or using CSS to style the chart specifically.  You can only control the grid's visibility indirectly.\n\n\n### Colors and Themes\n\nYou can customize the colors of various chart elements, particularly bar and line charts, using the `barColors` (for bar charts) or by specifying individual colors for each line in a line chart by setting the `lineColors` array.  There's no built-in theming system; customization primarily involves adjusting these color options.  You can use any valid CSS color values (hex codes, named colors, RGB, etc.).\n\n\n### Tooltips and Hover Effects\n\nMorris.js provides built-in tooltips that appear when hovering over data points.  You have little direct control over their appearance or content.  They display the x-axis value and the corresponding y-axis value(s).  To change their appearance, you would generally need to modify the Morris.js source code itself or wrap it within a custom CSS style.\n\n\n### Customizing Legends\n\nLegends (if applicable to the chart type) are automatically generated by Morris.js, and there is very limited control over their appearance or positioning. You cannot easily customize their location, style, or content without making extensive modifications to the library's source code.  Consider adding separate legend elements next to the charts if you need more extensive customization.  You have no direct ability to modify what is contained in the legend itself, aside from the data you feed to the chart.\n\n\n## Advanced Techniques\n\n### Event Handling\n\nMorris.js offers limited built-in event handling.  While it doesn't provide extensive event APIs like some other libraries, you can indirectly interact with chart events through the underlying Raphael.js library.  This requires a deeper understanding of Raphael.js's event system and may involve manipulating the chart's elements directly using JavaScript. This approach is not officially supported and may break with library updates.\n\nThere are no documented public events directly exposed by Morris.js that you can hook into for actions like click or hover on chart elements.\n\n\n### Animations and Transitions\n\nMorris.js includes basic animations for chart rendering.  These animations are built-in and cannot be customized or disabled directly through the options. The animations are generally smooth transitions when the chart is initially drawn or data is updated using `setData`.  There are no options to configure animation speed or effects.  The default animation style is fairly standard and may not be configurable to a fine degree.\n\n\n### Integrating with Other Libraries\n\nIntegrating Morris.js with other JavaScript libraries is generally straightforward.  Since it renders within a standard `<div>` element, it can coexist with other UI elements. However, be mindful of potential conflicts if other libraries also modify the DOM where the chart is rendered.  Ensure proper sequencing of library inclusion in your HTML to avoid unexpected behavior.  If other libraries manipulate the DOM element holding the chart after Morris.js renders, this may cause the chart to be redrawn or malfunction.\n\nUsing Morris.js alongside libraries that handle data manipulation (like data tables or data grids) is common.  Simply prepare your data using these external tools, and then feed the appropriately formatted data to Morris.js.\n\n\n\n### Troubleshooting Common Issues\n\nSeveral common issues can arise when working with Morris.js:\n\n* **Incorrect Data Format:** Ensure your data is in the correct JSON format as described in the documentation. Pay close attention to `xkey`, `ykeys`, and `labels`.\n* **Missing Dependencies:** Verify that you've correctly included both Raphael.js and Morris.js in your HTML, ensuring the correct paths to the files.  The order of inclusion may matter.\n* **Conflicting CSS:** Check for CSS conflicts that may affect the chart's rendering.  Ensure your CSS doesn't inadvertently override the styles applied by Morris.js.\n* **DOM Element Issues:** Ensure that the `<div>` element where the chart will be rendered exists in the DOM and has the correct ID.  Errors related to the DOM (such as the div not existing) are common sources of problems.\n* **Browser Compatibility:**  Although Morris.js generally supports modern browsers, very old or outdated browsers might lack sufficient HTML5 canvas support causing the charts to not render properly or at all.\n* **Large Datasets:**  As previously mentioned, Morris.js isn't designed for extremely large datasets.  If performance issues arise with large datasets, consider using data aggregation or sampling techniques, or consider upgrading to a more powerful charting library better suited for handling vast quantities of data.\n\n\nRemember that Morris.js is no longer actively maintained, so finding solutions for complex problems or obtaining support may be difficult.  Using a more actively developed charting library might be a better choice for new projects.\n\n\n## Best Practices\n\n### Performance Optimization\n\nMorris.js, while generally efficient for moderately sized datasets, can become slow with very large amounts of data. To optimize performance:\n\n* **Data Aggregation:**  Reduce the number of data points by aggregating your data before passing it to Morris.js.  For example, instead of plotting daily data, consider weekly or monthly averages.\n* **Data Sampling:** If feasible, use a representative sample of your data rather than the entire dataset.\n* **Avoid Frequent Updates:**  Minimize frequent updates to the chart data using the `setData` method.  If updates are necessary frequently, explore alternative approaches or consider using a more performance-optimized library.\n* **Efficient Data Structures:** Ensure your data is structured efficiently in a way conducive to quick processing by Morris.js. This often entails using simpler JSON structures instead of complex nested data objects.\n* **Minification and Compression:** Before deployment, minify and compress your JavaScript and CSS files to reduce file sizes and improve load times.\n\n\n### Accessibility Considerations\n\nMorris.js doesn't have built-in accessibility features. To improve accessibility:\n\n* **Alternative Text:** If your charts are purely visual, providing alternative text descriptions (using ARIA attributes or surrounding text) is essential for screen readers and users with visual impairments.  Clearly describe the data that the chart is presenting.\n* **Keyboard Navigation:**  Morris.js doesn't natively support keyboard navigation.  If keyboard navigation is important, consider adding custom JavaScript functionality to make the chart elements focusable and navigable by keyboard.\n* **Color Contrast:** Use sufficient color contrast between chart elements and the background to ensure readability for users with visual impairments.\n* **Sufficient Size:** Ensure your charts are large enough to be easily viewed and understood.  Avoid using very small fonts or overly dense data visualizations.\n* **Clear Labels:** Use clear and concise labels for axes and data points. This assists everyone, including visually impaired users.\n\nGiven the lack of direct accessibility support in Morris.js, you will be highly reliant on adding your own accommodations.\n\n\n### Maintaining Code Readability\n\nTo maintain code readability when using Morris.js:\n\n* **Clear Variable Names:** Use descriptive variable names for chart options and data variables.  This improves understanding of your code and its purpose.\n* **Modular Code:** Organize your Morris.js code into modular functions and components to enhance maintainability and reduce code duplication. This improves long-term comprehension of the code.\n* **Comments:** Add comments to explain complex parts of your code, especially when working with chart options or data transformations.\n* **Consistent Formatting:** Use a consistent coding style throughout your project.   This improves understanding of the code.\n* **Separate Data Handling:**  Keep the data handling logic separate from the chart rendering code. This separates concerns and aids in the maintenance of your codebase.\n\nFollowing these suggestions will dramatically improve long term maintainability of any code that uses Morris.js.\n\n\n## Examples and Case Studies\n\nNote:  Due to the age and lack of active maintenance of Morris.js, finding readily available, extensive, and up-to-date examples online can be challenging. The examples below use the basic structure and concepts.  You may need to adapt them based on any updates or changes in available versions of Morris.js or its dependencies.  Always consult the (potentially outdated) official documentation for the most accurate information regarding available options.\n\n\n### Simple Line Chart Example\n\nThis example demonstrates a basic line chart showing website visits over a week:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css\">\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js\"></script>\n  <script src=\"//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js\"></script>\n</head>\n<body>\n<div id=\"line-chart\"></div>\n\n<script>\n  Morris.Line({\n    element: 'line-chart',\n    data: [\n      { day: 'Mon', visits: 10 },\n      { day: 'Tue', visits: 15 },\n      { day: 'Wed', visits: 20 },\n      { day: 'Thu', visits: 12 },\n      { day: 'Fri', visits: 25 },\n      { day: 'Sat', visits: 18 },\n      { day: 'Sun', visits: 22 }\n    ],\n    xkey: 'day',\n    ykeys: ['visits'],\n    labels: ['Visits']\n  });\n</script>\n</body>\n</html>\n```\n\n\n### Complex Bar Chart Example\n\nThis example shows a stacked bar chart comparing sales of different products across multiple regions:\n\n```javascript\nMorris.Bar({\n  element: 'bar-chart',\n  data: [\n    { region: 'North', productA: 30, productB: 20, productC: 15 },\n    { region: 'South', productA: 25, productB: 35, productC: 10 },\n    { region: 'East', productA: 18, productB: 22, productC: 28 },\n    { region: 'West', productA: 35, productB: 15, productC: 22 }\n  ],\n  xkey: 'region',\n  ykeys: ['productA', 'productB', 'productC'],\n  labels: ['Product A', 'Product B', 'Product C'],\n  stacked: true\n});\n```  Remember to include the necessary `<div>` with the ID `bar-chart`.\n\n\n### Interactive Donut Chart Example\n\nWhile Morris.js doesn't offer highly interactive features, you can create a basic donut chart that displays data:\n\n```javascript\nMorris.Donut({\n  element: 'donut-chart',\n  data: [\n    {label: \"Category A\", value: 40},\n    {label: \"Category B\", value: 60}\n  ]\n});\n```   Again, ensure you have a `<div>` with the ID `donut-chart`.\n\n\n### Real-World Application Example\n\nA real-world application might involve displaying website analytics.  Imagine a dashboard showing daily user engagement metrics.  You could use line charts for daily active users and unique visitors, bar charts to compare user demographics, and donut charts to show user acquisition sources.  The data would be fetched from a backend API (e.g., using AJAX) and dynamically updated using the `setData` method.  This would require integration with backend systems and potentially additional JavaScript frameworks for handling data fetching and updates.  The example provided earlier of dynamic data updates demonstrates the basic concept.  A full \"real-world\" example would require significant additional code beyond the scope of a simple example here.  Remember that the level of interactivity in such a system would be quite limited with Morris.js.\n\n\n## API Reference\n\n**Note:** The Morris.js API is relatively limited and the documentation is outdated.  The information below represents the general structure and common options available; however,  always check the (potentially outdated) original documentation for the most accurate and up-to-date details.  The lack of active maintenance means that some options might not behave as expected or might be entirely unavailable depending on the version you're using.\n\n\n### Chart Constructor Options\n\nThese options are passed to the chart constructor (e.g., `Morris.Line`, `Morris.Bar`, etc.) to configure the chart's overall appearance and behavior.  Many options are shared across different chart types, but some are specific to certain chart types.\n\n* **`element` (String):** The ID of the HTML element where the chart will be rendered.  **Required**.\n* **`data` (Array):** An array of JSON objects representing the chart data. **Required**.\n* **`xkey` (String):** The property name used for the x-axis values.  **Required for line, bar, and area charts**.\n* **`ykeys` (Array):** An array of property names used for the y-axis values. **Required for line, bar, and area charts**.\n* **`labels` (Array):** An array of labels corresponding to the `ykeys`. **Required for line, bar, and area charts**.\n* **`parseTime` (Boolean):**  Specifies whether the x-axis values should be parsed as dates.  Defaults to `true` for most charts.\n* **`xLabelFormat` (Function):**  A function to format x-axis labels (often used for date formatting).\n* **`yLabelFormat` (Function):** A function to format y-axis labels.\n* **`hideHover` (Boolean):**  Hides the hover tooltip.\n* **`hoverCallback` (Function):** A custom function to modify hover tooltip content.\n* **`resize` (Boolean):** Enables automatic resizing of the chart when the window is resized.\n\n\n### Data Options\n\nThese options directly relate to how the chart handles and displays the data:\n\n*   (Implicit through `data` array):  The data itself is the most important aspect.  It needs to be a properly formatted JSON array.  The format varies slightly based on the chart type (see the Data Handling section of this manual).\n\n\n### Element Options\n\nThese options control the styling and appearance of specific chart elements:\n\n* **`barColors` (Array):** An array of colors for bar charts.\n* **`lineColors` (Array):** An array of colors for line charts.\n* **`pointFillColors` (Array):**  Colors for filling points in line charts.\n* **`pointStrokeColors` (Array):**  Colors for outlining points in line charts.\n* **`gridTextColor` (String):** Color of the grid text.\n* **`gridTextSize` (Number):** Size of the grid text.\n* **`gridStrokeWidth` (Number):** Width of grid lines.\n* **`gridTextFamily` (String):** Font family used for grid text.\n* **`gridTextWeight` (String):** Font weight for grid text.\n* **`fillOpacity` (Number):** Opacity for filled areas in area charts.\n* **`behaveLikeLine` (boolean):**  This option affects how the chart behaves when it's very wide (default `false`).\n\n\n### Methods\n\nMorris.js charts expose only a limited number of methods:\n\n* **`setData(data)`:** Updates the chart with new data.\n* **`redraw()`:** Redraws the chart (useful if you've made changes to the chart's options).\n\n\nRemember that the options and their exact behaviors might vary slightly depending on the specific chart type and the version of Morris.js you are using.  Always refer to (the potentially outdated) official documentation and test extensively.  The API is not very rich in functionality.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"morrisjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"morris.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}