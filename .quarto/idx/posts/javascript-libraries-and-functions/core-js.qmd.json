{"title":"core-js - A Developer's Handbook","markdown":{"yaml":{"title":"core-js - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction to Core-JS","containsRefs":false,"markdown":"\n\n\n\n### What is Core-JS?\n\nCore-JS is a JavaScript library that provides polyfills for ECMAScript features that are not yet implemented or implemented inconsistently across different browsers.  It aims to provide a consistent and reliable way to use modern JavaScript features in older browsers without relying on transpilers like Babel. Core-JS focuses on providing only the polyfills themselves, leaving the actual usage and integration up to the developer.  This modular approach allows for only including the necessary polyfills, minimizing the overall bundle size.\n\n\n### Why use Core-JS?\n\nUsing Core-JS offers several advantages:\n\n* **Cross-browser compatibility:**  Write modern JavaScript code and have it run reliably on a wide range of browsers, including older ones that lack support for newer features.\n* **Reduced bundle size:** Its modular design allows you to include only the specific polyfills needed for your project, avoiding unnecessary code bloat.  This improves performance and load times.\n* **Maintainability:** As new ECMAScript features are standardized, Core-JS is updated to provide corresponding polyfills. This simplifies the process of keeping your code up-to-date with the latest standards.\n* **No transpilation:** Unlike transpilers, Core-JS directly polyfills the features at runtime, making your development workflow simpler and avoiding the complexities of transpilation.\n* **Community-driven and well-maintained:** Core-JS is a mature and actively maintained project with a strong community behind it, ensuring ongoing support and updates.\n\n### Core-JS vs. Polyfills\n\nWhile Core-JS *is* a collection of polyfills, it's crucial to understand the distinction.  A polyfill is a piece of code that provides functionality missing in a specific environment. Core-JS is a comprehensive library that provides a large *collection* of these polyfills, organized and maintained as a single unit.  You could create your own individual polyfills, but Core-JS offers a ready-made, tested, and well-maintained solution.  Using individual polyfills from various sources can lead to conflicts or inconsistencies.\n\n### Installation and Setup\n\nCore-JS can be installed using npm or yarn:\n\n```bash\nnpm install core-js\n# or\nyarn add core-js\n```\n\n**Using Core-JS 3 (recommended):**  Core-JS 3 uses a modular approach.  You should import only the specific modules you need. This is generally done using the `import` syntax.  For example, to use the `Promise` polyfill:\n\n```javascript\nimport 'core-js/modules/es.promise';\n\n// Now you can use Promises reliably, even in older browsers.\n```\n\nTo include multiple modules, import them individually:\n\n```javascript\nimport 'core-js/modules/es.array.includes';\nimport 'core-js/modules/es.object.assign';\n```\n\nA more convenient way to import modules, especially if you need many, is using `core-js/stable` which provides all commonly used stable polyfills. For production, this is a simpler option that has smaller overhead compared to importing each module individually.\n\n\n```javascript\nimport 'core-js/stable';\n```\n\n\n**Using Core-JS 2 (deprecated, but some projects still rely on it):** Core-JS 2 uses a different approach, often including the entire library. While it might seem simpler initially, it leads to larger bundles.  Its usage is discouraged in favor of Core-JS 3's modularity.\n\n\n```javascript\nrequire('core-js/fn/array/includes'); // Example using require for Core-JS 2\n```\n\n\n### Browsers Compatibility\n\nCore-JS aims for broad compatibility.  However, it's important to note that some very old or obscure browsers may still have limitations.  While Core-JS helps bridge these gaps, it's not a silver bullet for every browser compatibility issue.   Refer to the official Core-JS documentation and release notes for the most up-to-date information on supported browsers and any known limitations for specific polyfills.  Testing on your target browsers is essential.  Generally speaking, Core-JS provides good compatibility with modern browsers and most widely used older ones.\n\n\n\n\n## Working with Core-JS\n\n### Import Statements\n\nCore-JS 3 uses ES modules, so you import polyfills using standard JavaScript `import` statements.  This allows for optimal tree-shaking and reduces the final bundle size significantly.  Avoid using `require()` which is associated with older CommonJS modules and not ideal for modern builds.\n\n\n### Using Individual Modules\n\nThe recommended approach is to import only the specific polyfills your application requires. This granular control minimizes the amount of code included in your final bundle, leading to faster load times and a smaller application footprint. Each polyfill is organized within the `core-js/modules` directory, categorized by ECMAScript specification and feature.\n\nFor example, to add support for `Array.prototype.includes()`:\n\n```javascript\nimport 'core-js/modules/es.array.includes';\n\nconst array = [1, 2, 3];\nconsole.log(array.includes(2)); // true\n```\n\nTo include multiple modules, simply list them in separate import statements:\n\n\n```javascript\nimport 'core-js/modules/es.promise';\nimport 'core-js/modules/es.array.flat';\nimport 'core-js/modules/es.object.from-entries';\n```\n\nThis approach ensures that only the necessary polyfills are included in your build.\n\n### Using the Bundled Version (`core-js/stable`)\n\nFor convenience, Core-JS provides a bundled version (`core-js/stable`) containing a selection of commonly used polyfills. This is useful for rapid prototyping or when you need a broader set of features and don't want to meticulously select individual modules.  However, it will lead to a larger bundle size than importing individual modules.\n\n\n```javascript\nimport 'core-js/stable';\n```\n\nRemember that this imports a significant number of polyfills;  it's less efficient than the modular approach for production applications where bundle size is crucial.  Use it judiciously.  `core-js/stable` is suitable for development or smaller projects where the added bundle size isn't a significant concern.\n\n\n### Tree-shaking and Optimization\n\nModern bundlers (like Webpack, Rollup, Parcel, etc.) effectively support tree-shaking with Core-JS 3's modular approach.  This means that unused imported modules are automatically eliminated during the build process, resulting in a smaller final bundle size.  To ensure tree-shaking works correctly, make sure your bundler is configured to support ES modules and tree-shaking.\n\nUsing individual modules is key to maximizing tree-shaking benefits. Importing `core-js/stable` will likely prevent efficient tree-shaking since the entire bundle is imported.\n\n\n### Versioning and Updates\n\nCore-JS follows semantic versioning (SemVer).  Staying up-to-date is important for security patches and access to new polyfills for emerging JavaScript features.  Check the official Core-JS repository for release notes and upgrade instructions.  Regularly update your `package.json` and run `npm install` or `yarn install` to obtain the latest version.  Consider using a version manager like `nvm` or similar to ensure you're using a compatible Node.js version.  Always test thoroughly after upgrading to a new version of Core-JS.\n\n\n\n\n## Core-JS Modules by Category\n\nThis section provides a categorized overview of the polyfills available in Core-JS.  Remember to always consult the official Core-JS documentation for the most accurate and up-to-date information on available modules and their specific usage.  The import paths shown below assume you are using Core-JS 3's modular import system.\n\n\n### Array Methods\n\nCore-JS provides polyfills for numerous array methods, including those introduced in recent ECMAScript specifications.  Examples include:\n\n* **`es.array.includes`**:  The `includes()` method determines whether an array includes a certain value among its entries.  `import 'core-js/modules/es.array.includes';`\n* **`es.array.flat`**: The `flat()` method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. `import 'core-js/modules/es.array.flat';`\n* **`es.array.flatMap`**: The `flatMap()` method first maps each element using a mapping function, then flattens the result into a new array. `import 'core-js/modules/es.array.flat-map';`\n* **`es.array.from`**: Creates an array from an iterable object or array-like object. `import 'core-js/modules/es.array.from';`\n* **`es.array.sort`**:  (Enhanced) The `sort()` method sorts the elements of an array in place and returns the sorted array. `import 'core-js/modules/es.array.sort';`\n* **Many more:**  Consult the Core-JS documentation for a complete list.\n\n\n### Object Methods\n\nPolyfills for manipulating objects:\n\n* **`es.object.assign`**: Copies the values of all enumerable own properties from one or more source objects to a target object. `import 'core-js/modules/es.object.assign';`\n* **`es.object.entries`**: Returns an array of a given object's own enumerable string-keyed property [key, value] pairs. `import 'core-js/modules/es.object.entries';`\n* **`es.object.from-entries`**: Transforms a list of key-value pairs into an object. `import 'core-js/modules/es.object.from-entries';`\n* **`es.object.get-own-property-descriptor`**:  Returns a property descriptor for an own property (that is, one directly present on the object, not inherited) of a given object. `import 'core-js/modules/es.object.get-own-property-descriptor';`\n* **`es.object.get-own-property-names`**: Returns an array of a given object's own enumerable property names, iterated in the same order that a for...in loop would enumerate them.  `import 'core-js/modules/es.object.get-own-property-names';`\n* **Many more:** Including methods for defining getters and setters, freezing objects, and more.\n\n\n### String Methods\n\nPolyfills for string manipulation:\n\n* **`es.string.includes`**: Determines whether one string may be found within another string. `import 'core-js/modules/es.string.includes';`\n* **`es.string.starts-with`**: Determines whether a string begins with the characters of another string, returning true or false as appropriate. `import 'core-js/modules/es.string.starts-with';`\n* **`es.string.ends-with`**: Determines whether a string ends with the characters of another string, returning true or false as appropriate.  `import 'core-js/modules/es.string.ends-with';`\n* **`es.string.trim`**: Removes whitespace from both ends of a string.  `import 'core-js/modules/es.string.trim';`\n* **`es.string.trim-start`**: Removes whitespace from the beginning of a string. `import 'core-js/modules/es.string.trim-start';`\n* **`es.string.trim-end`**: Removes whitespace from the end of a string. `import 'core-js/modules/es.string.trim-end';`\n* **`es.string.pad-start`**: Pads the current string with another string (multiple times, if needed) until the resulting string reaches a given length. The padding is applied from the start (left) of the current string. `import 'core-js/modules/es.string.pad-start';`\n* **`es.string.pad-end`**: Pads the current string with another string (multiple times, if needed) until the resulting string reaches a given length. The padding is applied from the end (right) of the current string. `import 'core-js/modules/es.string.pad-end';`\n* **And many more:** Including methods for repeat, code point at, etc.\n\n\n### Number Methods\n\nPolyfills related to number objects:\n\n* **`es.number.is-finite`**: Determines whether a value is a finite number. `import 'core-js/modules/es.number.is-finite';`\n* **`es.number.is-integer`**: Determines whether a value is an integer. `import 'core-js/modules/es.number.is-integer';`\n* **`es.number.is-nan`**: Determines whether a value is `NaN` (Not a Number). `import 'core-js/modules/es.number.is-nan';`\n* **`es.number.is-safe-integer`**: Determines whether a numeric value is a safe integer. `import 'core-js/modules/es.number.is-safe-integer';`\n* **`es.number.parse-float`**: Parses a string argument and returns a floating point number. `import 'core-js/modules/es.number.parse-float';`\n* **`es.number.to-fixed`**: Returns a string representing the number to fixed decimal places. `import 'core-js/modules/es.number.to-fixed';`\n\n\n### Date Methods\n\nPolyfills for working with dates:\n\n* **`es.date.to-iso-string`**: Returns a string representing the date in ISO 8601 format.  `import 'core-js/modules/es.date.to-iso-string';`\n* **`es.date.to-json`**:  Returns a string representing the date in ISO 8601 format.  `import 'core-js/modules/es.date.to-json';`\n* **`es.date.to-string`**: Returns a string representing the date. `import 'core-js/modules/es.date.to-string';`\n\n\n### Symbol Methods\n\nPolyfills for the `Symbol` type:\n\n* **`es.symbol`**:  Provides polyfills for `Symbol` constructor and related methods.  `import 'core-js/modules/es.symbol';`\n\n\n### Map, Set, WeakMap, WeakSet\n\nPolyfills for collection types:\n\n* **`es.map`**:  Polyfill for the `Map` object.  `import 'core-js/modules/es.map';`\n* **`es.set`**:  Polyfill for the `Set` object.  `import 'core-js/modules/es.set';`\n* **`es.weak-map`**: Polyfill for the `WeakMap` object. `import 'core-js/modules/es.weak-map';`\n* **`es.weak-set`**: Polyfill for the `WeakSet` object. `import 'core-js/modules/es.weak-set';`\n\n\n### Promise Methods\n\nPolyfills for promises:\n\n* **`es.promise`**:  Provides the `Promise` object and its methods.  `import 'core-js/modules/es.promise';`\n\n\n### Reflect API\n\nPolyfills for the `Reflect` object:\n\n* **`es.reflect`**: Polyfills for `Reflect` API methods. `import 'core-js/modules/es.reflect';` (Often includes multiple submodules)\n\n\n### Global Methods\n\nPolyfills for global methods:\n\n* **`es.global-this`**: Provides the `globalThis` global object.  `import 'core-js/modules/es.global-this';`\n\n\n### Intl (Internationalization)\n\nPolyfills for internationalization:\n\n* **Various modules under `es.intl`**:  These modules provide polyfills for different aspects of the `Intl` API (e.g., `es.intl.locale`, `es.intl.numberformat`, `es.intl.datetimeformat`).  Consult Core-JS documentation for specifics.\n\n\n### Typed Arrays\n\nPolyfills for typed arrays:\n\n* **Modules under `es.typed-array`**: Provides various typed array polyfills (e.g., `Int8Array`, `Uint8Array`, etc.).\n\n\n### Other Utility Methods\n\nCore-JS includes several other utility polyfills that don't neatly fit into the above categories. Consult the Core-JS documentation for a complete list.  Examples may include polyfills for features related to iterators, generators, and more.  Always check the official documentation for the most current listing and details.\n\n\n\n\n## Advanced Usage and Configuration\n\n### Customizing the Build Process\n\nWhile Core-JS 3's modularity simplifies the import process, you might need to customize your build process for complex scenarios. This typically involves configuration within your bundler (Webpack, Rollup, Parcel, etc.).\n\n* **Webpack:**  Webpack's configuration allows fine-grained control over how Core-JS modules are handled.  You can adjust the `resolve` and `module` sections to optimize imports and tree-shaking.  Experiment with different loaders and plugins to improve your build process.\n\n* **Rollup:**  Rollup provides similar customization options. You can adjust plugin configurations to ensure correct handling of ES modules and tree-shaking.  Pay particular attention to plugins that handle ES modules and dead code elimination.\n\n* **Parcel:** Parcel generally handles ES module imports seamlessly.  However, for very large projects or specific optimization needs, you may need to explore its configuration options.\n\nIn all cases, ensure your bundler is configured to correctly handle ES modules and perform tree-shaking.  Incorrect configurations can lead to larger-than-necessary bundle sizes or runtime errors. Consult your bundler's documentation for detailed instructions.\n\n\n### Debugging and Troubleshooting\n\nDebugging issues related to Core-JS often involves checking for:\n\n* **Incorrect Imports:** Verify that you've imported the correct modules using the appropriate paths.  Typos in import statements are a common source of errors.\n\n* **Bundler Configuration:**  Ensure your bundler is correctly configured to handle ES modules and perform tree-shaking.  Incorrect configurations can lead to polyfills not being included or unexpected behavior.\n\n* **Browser Compatibility:** While Core-JS aims for broad compatibility, extremely outdated browsers may still have limitations. Test your application thoroughly on your target browsers.\n\n* **Conflicts with Other Libraries:**  Rarely, conflicts can arise between Core-JS and other libraries.  Try isolating the problem by temporarily removing other libraries to see if the issue persists.  Check for version compatibility between Core-JS and other dependencies.\n\n* **Console Errors:** Carefully examine any console errors that appear in your browser's developer tools. These errors often provide valuable clues about the source of the problem.\n\n* **Official Documentation:** Refer to the official Core-JS documentation and issue tracker for known bugs and solutions.\n\n\n### Integrating with other libraries\n\nGenerally, Core-JS integrates well with most other JavaScript libraries.  However, be mindful of potential conflicts:\n\n* **Polyfill Overlap:** Avoid including multiple libraries that provide polyfills for the same features. This can lead to conflicts and unexpected behavior.  If you're using a framework or library that already includes some polyfills (like React or Angular), carefully assess whether you need to include additional Core-JS modules.\n\n* **Version Compatibility:**  Check for compatibility between Core-JS and other libraries.  Using incompatible versions can cause unexpected issues.\n\n* **Testing:** Thoroughly test your application after integrating Core-JS with other libraries to ensure everything works as expected.\n\n\n### Performance Considerations\n\nWhile Core-JS improves compatibility, its use does have performance implications:\n\n* **Bundle Size:**  Minimize bundle size by importing only the necessary polyfills.  The modular approach of Core-JS 3 is crucial for this.  Avoid using `core-js/stable` unless absolutely necessary.\n\n* **Runtime Overhead:** Polyfills inherently add runtime overhead.  However, this overhead is generally minimal for modern browsers, where most features are already natively supported.  The performance impact is typically far outweighed by the benefits of consistent cross-browser functionality.\n\n* **Optimization:**  Use code splitting and other optimization techniques to further improve performance, especially in large applications.\n\n* **Profiling:**  For performance-critical applications, use profiling tools to identify any performance bottlenecks related to Core-JS.\n\n\n### Contributing to Core-JS\n\nCore-JS is an open-source project, and contributions are welcome!  Before contributing, review the project's contribution guidelines on its GitHub repository.  Contributions may include:\n\n* **Bug fixes:**  Report bugs and provide fixes for existing issues.\n\n* **New polyfills:**  Add polyfills for missing ECMAScript features or improve existing ones.\n\n* **Documentation improvements:**  Improve the documentation to make it clearer and more comprehensive.\n\n* **Testing:**  Write and maintain comprehensive tests to ensure the quality of the library.\n\nFollow the project's established workflow and coding style for your contributions to be considered.  Engage with the community to discuss your proposed changes before submitting pull requests.\n\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Polyfill:** A piece of code (usually JavaScript) that provides the functionality of a newer specification to older browsers or environments that don't natively support it.  It simulates the behavior of a missing feature.\n\n* **Transpiler:** A tool that converts source code written in one programming language into another programming language.  Often used to convert modern JavaScript code to code compatible with older browsers.\n\n* **Tree-shaking:** A build optimization technique that removes unused code from the final bundle.  This is especially important for minimizing the size of JavaScript applications.\n\n* **Bundle:** The combined and optimized JavaScript code produced by a bundler, ready for deployment to a web browser.\n\n* **ESM (ECMAScript Modules):** The standard module system for JavaScript.\n\n* **SemVer (Semantic Versioning):** A system for assigning version numbers to software that indicates the nature of changes between versions (major, minor, patch).\n\n* **API (Application Programming Interface):** A set of rules and specifications that software programs can follow to communicate with each other.\n\n\n### Browser Compatibility Table\n\n| Feature          | Chrome | Firefox | Safari | Edge | IE       |\n|-----------------|--------|---------|--------|------|----------|\n| `Array.includes` |  ✅     |    ✅    |   ✅    |  ✅   |  ❌      |\n| `Promise`        |  ✅     |    ✅    |   ✅    |  ✅   |  Partial |\n| `Object.assign`  |  ✅     |    ✅    |   ✅    |  ✅   |  Partial |\n| ...              | ...    | ...     | ...    | ...  | ...      |\n\n\n**Note:** This is a simplified example.  A complete table would list many more features and versions. Refer to the official Core-JS documentation for the most up-to-date and comprehensive browser compatibility information.  The symbols ✅ and ❌ represent support and lack of support, respectively. Partial support might indicate that only a subset of the feature is implemented natively.\n\n\n\n### Changelog\n\nRefer to the official Core-JS repository (usually on GitHub) for the complete changelog.  The changelog will detail all changes, bug fixes, new features, and other relevant information for each release.\n\n\n### License Information\n\nCore-JS is typically licensed under the MIT License.  Check the official repository's LICENSE file for the exact terms and conditions.  The MIT License generally grants broad permissions to use, modify, and distribute the software.\n\n\n### Community and Support Resources\n\n* **Official Website/Documentation:** The official website or documentation for Core-JS is the primary source for information.\n\n* **GitHub Repository:** The GitHub repository is the central location for the source code, issue tracker, and community discussion.\n\n* **Issue Tracker:** Use the issue tracker on the GitHub repository to report bugs, request features, and get help with problems.\n\n* **Community Forums (if applicable):** Check for official or community forums dedicated to Core-JS for discussions and support.  The official GitHub repository's issues section often acts as a de facto forum.\n\nRemember to always check the official Core-JS website and repository for the most up-to-date information on community resources and support.\n\n","srcMarkdownNoYaml":"\n\n\n## Introduction to Core-JS\n\n### What is Core-JS?\n\nCore-JS is a JavaScript library that provides polyfills for ECMAScript features that are not yet implemented or implemented inconsistently across different browsers.  It aims to provide a consistent and reliable way to use modern JavaScript features in older browsers without relying on transpilers like Babel. Core-JS focuses on providing only the polyfills themselves, leaving the actual usage and integration up to the developer.  This modular approach allows for only including the necessary polyfills, minimizing the overall bundle size.\n\n\n### Why use Core-JS?\n\nUsing Core-JS offers several advantages:\n\n* **Cross-browser compatibility:**  Write modern JavaScript code and have it run reliably on a wide range of browsers, including older ones that lack support for newer features.\n* **Reduced bundle size:** Its modular design allows you to include only the specific polyfills needed for your project, avoiding unnecessary code bloat.  This improves performance and load times.\n* **Maintainability:** As new ECMAScript features are standardized, Core-JS is updated to provide corresponding polyfills. This simplifies the process of keeping your code up-to-date with the latest standards.\n* **No transpilation:** Unlike transpilers, Core-JS directly polyfills the features at runtime, making your development workflow simpler and avoiding the complexities of transpilation.\n* **Community-driven and well-maintained:** Core-JS is a mature and actively maintained project with a strong community behind it, ensuring ongoing support and updates.\n\n### Core-JS vs. Polyfills\n\nWhile Core-JS *is* a collection of polyfills, it's crucial to understand the distinction.  A polyfill is a piece of code that provides functionality missing in a specific environment. Core-JS is a comprehensive library that provides a large *collection* of these polyfills, organized and maintained as a single unit.  You could create your own individual polyfills, but Core-JS offers a ready-made, tested, and well-maintained solution.  Using individual polyfills from various sources can lead to conflicts or inconsistencies.\n\n### Installation and Setup\n\nCore-JS can be installed using npm or yarn:\n\n```bash\nnpm install core-js\n# or\nyarn add core-js\n```\n\n**Using Core-JS 3 (recommended):**  Core-JS 3 uses a modular approach.  You should import only the specific modules you need. This is generally done using the `import` syntax.  For example, to use the `Promise` polyfill:\n\n```javascript\nimport 'core-js/modules/es.promise';\n\n// Now you can use Promises reliably, even in older browsers.\n```\n\nTo include multiple modules, import them individually:\n\n```javascript\nimport 'core-js/modules/es.array.includes';\nimport 'core-js/modules/es.object.assign';\n```\n\nA more convenient way to import modules, especially if you need many, is using `core-js/stable` which provides all commonly used stable polyfills. For production, this is a simpler option that has smaller overhead compared to importing each module individually.\n\n\n```javascript\nimport 'core-js/stable';\n```\n\n\n**Using Core-JS 2 (deprecated, but some projects still rely on it):** Core-JS 2 uses a different approach, often including the entire library. While it might seem simpler initially, it leads to larger bundles.  Its usage is discouraged in favor of Core-JS 3's modularity.\n\n\n```javascript\nrequire('core-js/fn/array/includes'); // Example using require for Core-JS 2\n```\n\n\n### Browsers Compatibility\n\nCore-JS aims for broad compatibility.  However, it's important to note that some very old or obscure browsers may still have limitations.  While Core-JS helps bridge these gaps, it's not a silver bullet for every browser compatibility issue.   Refer to the official Core-JS documentation and release notes for the most up-to-date information on supported browsers and any known limitations for specific polyfills.  Testing on your target browsers is essential.  Generally speaking, Core-JS provides good compatibility with modern browsers and most widely used older ones.\n\n\n\n\n## Working with Core-JS\n\n### Import Statements\n\nCore-JS 3 uses ES modules, so you import polyfills using standard JavaScript `import` statements.  This allows for optimal tree-shaking and reduces the final bundle size significantly.  Avoid using `require()` which is associated with older CommonJS modules and not ideal for modern builds.\n\n\n### Using Individual Modules\n\nThe recommended approach is to import only the specific polyfills your application requires. This granular control minimizes the amount of code included in your final bundle, leading to faster load times and a smaller application footprint. Each polyfill is organized within the `core-js/modules` directory, categorized by ECMAScript specification and feature.\n\nFor example, to add support for `Array.prototype.includes()`:\n\n```javascript\nimport 'core-js/modules/es.array.includes';\n\nconst array = [1, 2, 3];\nconsole.log(array.includes(2)); // true\n```\n\nTo include multiple modules, simply list them in separate import statements:\n\n\n```javascript\nimport 'core-js/modules/es.promise';\nimport 'core-js/modules/es.array.flat';\nimport 'core-js/modules/es.object.from-entries';\n```\n\nThis approach ensures that only the necessary polyfills are included in your build.\n\n### Using the Bundled Version (`core-js/stable`)\n\nFor convenience, Core-JS provides a bundled version (`core-js/stable`) containing a selection of commonly used polyfills. This is useful for rapid prototyping or when you need a broader set of features and don't want to meticulously select individual modules.  However, it will lead to a larger bundle size than importing individual modules.\n\n\n```javascript\nimport 'core-js/stable';\n```\n\nRemember that this imports a significant number of polyfills;  it's less efficient than the modular approach for production applications where bundle size is crucial.  Use it judiciously.  `core-js/stable` is suitable for development or smaller projects where the added bundle size isn't a significant concern.\n\n\n### Tree-shaking and Optimization\n\nModern bundlers (like Webpack, Rollup, Parcel, etc.) effectively support tree-shaking with Core-JS 3's modular approach.  This means that unused imported modules are automatically eliminated during the build process, resulting in a smaller final bundle size.  To ensure tree-shaking works correctly, make sure your bundler is configured to support ES modules and tree-shaking.\n\nUsing individual modules is key to maximizing tree-shaking benefits. Importing `core-js/stable` will likely prevent efficient tree-shaking since the entire bundle is imported.\n\n\n### Versioning and Updates\n\nCore-JS follows semantic versioning (SemVer).  Staying up-to-date is important for security patches and access to new polyfills for emerging JavaScript features.  Check the official Core-JS repository for release notes and upgrade instructions.  Regularly update your `package.json` and run `npm install` or `yarn install` to obtain the latest version.  Consider using a version manager like `nvm` or similar to ensure you're using a compatible Node.js version.  Always test thoroughly after upgrading to a new version of Core-JS.\n\n\n\n\n## Core-JS Modules by Category\n\nThis section provides a categorized overview of the polyfills available in Core-JS.  Remember to always consult the official Core-JS documentation for the most accurate and up-to-date information on available modules and their specific usage.  The import paths shown below assume you are using Core-JS 3's modular import system.\n\n\n### Array Methods\n\nCore-JS provides polyfills for numerous array methods, including those introduced in recent ECMAScript specifications.  Examples include:\n\n* **`es.array.includes`**:  The `includes()` method determines whether an array includes a certain value among its entries.  `import 'core-js/modules/es.array.includes';`\n* **`es.array.flat`**: The `flat()` method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. `import 'core-js/modules/es.array.flat';`\n* **`es.array.flatMap`**: The `flatMap()` method first maps each element using a mapping function, then flattens the result into a new array. `import 'core-js/modules/es.array.flat-map';`\n* **`es.array.from`**: Creates an array from an iterable object or array-like object. `import 'core-js/modules/es.array.from';`\n* **`es.array.sort`**:  (Enhanced) The `sort()` method sorts the elements of an array in place and returns the sorted array. `import 'core-js/modules/es.array.sort';`\n* **Many more:**  Consult the Core-JS documentation for a complete list.\n\n\n### Object Methods\n\nPolyfills for manipulating objects:\n\n* **`es.object.assign`**: Copies the values of all enumerable own properties from one or more source objects to a target object. `import 'core-js/modules/es.object.assign';`\n* **`es.object.entries`**: Returns an array of a given object's own enumerable string-keyed property [key, value] pairs. `import 'core-js/modules/es.object.entries';`\n* **`es.object.from-entries`**: Transforms a list of key-value pairs into an object. `import 'core-js/modules/es.object.from-entries';`\n* **`es.object.get-own-property-descriptor`**:  Returns a property descriptor for an own property (that is, one directly present on the object, not inherited) of a given object. `import 'core-js/modules/es.object.get-own-property-descriptor';`\n* **`es.object.get-own-property-names`**: Returns an array of a given object's own enumerable property names, iterated in the same order that a for...in loop would enumerate them.  `import 'core-js/modules/es.object.get-own-property-names';`\n* **Many more:** Including methods for defining getters and setters, freezing objects, and more.\n\n\n### String Methods\n\nPolyfills for string manipulation:\n\n* **`es.string.includes`**: Determines whether one string may be found within another string. `import 'core-js/modules/es.string.includes';`\n* **`es.string.starts-with`**: Determines whether a string begins with the characters of another string, returning true or false as appropriate. `import 'core-js/modules/es.string.starts-with';`\n* **`es.string.ends-with`**: Determines whether a string ends with the characters of another string, returning true or false as appropriate.  `import 'core-js/modules/es.string.ends-with';`\n* **`es.string.trim`**: Removes whitespace from both ends of a string.  `import 'core-js/modules/es.string.trim';`\n* **`es.string.trim-start`**: Removes whitespace from the beginning of a string. `import 'core-js/modules/es.string.trim-start';`\n* **`es.string.trim-end`**: Removes whitespace from the end of a string. `import 'core-js/modules/es.string.trim-end';`\n* **`es.string.pad-start`**: Pads the current string with another string (multiple times, if needed) until the resulting string reaches a given length. The padding is applied from the start (left) of the current string. `import 'core-js/modules/es.string.pad-start';`\n* **`es.string.pad-end`**: Pads the current string with another string (multiple times, if needed) until the resulting string reaches a given length. The padding is applied from the end (right) of the current string. `import 'core-js/modules/es.string.pad-end';`\n* **And many more:** Including methods for repeat, code point at, etc.\n\n\n### Number Methods\n\nPolyfills related to number objects:\n\n* **`es.number.is-finite`**: Determines whether a value is a finite number. `import 'core-js/modules/es.number.is-finite';`\n* **`es.number.is-integer`**: Determines whether a value is an integer. `import 'core-js/modules/es.number.is-integer';`\n* **`es.number.is-nan`**: Determines whether a value is `NaN` (Not a Number). `import 'core-js/modules/es.number.is-nan';`\n* **`es.number.is-safe-integer`**: Determines whether a numeric value is a safe integer. `import 'core-js/modules/es.number.is-safe-integer';`\n* **`es.number.parse-float`**: Parses a string argument and returns a floating point number. `import 'core-js/modules/es.number.parse-float';`\n* **`es.number.to-fixed`**: Returns a string representing the number to fixed decimal places. `import 'core-js/modules/es.number.to-fixed';`\n\n\n### Date Methods\n\nPolyfills for working with dates:\n\n* **`es.date.to-iso-string`**: Returns a string representing the date in ISO 8601 format.  `import 'core-js/modules/es.date.to-iso-string';`\n* **`es.date.to-json`**:  Returns a string representing the date in ISO 8601 format.  `import 'core-js/modules/es.date.to-json';`\n* **`es.date.to-string`**: Returns a string representing the date. `import 'core-js/modules/es.date.to-string';`\n\n\n### Symbol Methods\n\nPolyfills for the `Symbol` type:\n\n* **`es.symbol`**:  Provides polyfills for `Symbol` constructor and related methods.  `import 'core-js/modules/es.symbol';`\n\n\n### Map, Set, WeakMap, WeakSet\n\nPolyfills for collection types:\n\n* **`es.map`**:  Polyfill for the `Map` object.  `import 'core-js/modules/es.map';`\n* **`es.set`**:  Polyfill for the `Set` object.  `import 'core-js/modules/es.set';`\n* **`es.weak-map`**: Polyfill for the `WeakMap` object. `import 'core-js/modules/es.weak-map';`\n* **`es.weak-set`**: Polyfill for the `WeakSet` object. `import 'core-js/modules/es.weak-set';`\n\n\n### Promise Methods\n\nPolyfills for promises:\n\n* **`es.promise`**:  Provides the `Promise` object and its methods.  `import 'core-js/modules/es.promise';`\n\n\n### Reflect API\n\nPolyfills for the `Reflect` object:\n\n* **`es.reflect`**: Polyfills for `Reflect` API methods. `import 'core-js/modules/es.reflect';` (Often includes multiple submodules)\n\n\n### Global Methods\n\nPolyfills for global methods:\n\n* **`es.global-this`**: Provides the `globalThis` global object.  `import 'core-js/modules/es.global-this';`\n\n\n### Intl (Internationalization)\n\nPolyfills for internationalization:\n\n* **Various modules under `es.intl`**:  These modules provide polyfills for different aspects of the `Intl` API (e.g., `es.intl.locale`, `es.intl.numberformat`, `es.intl.datetimeformat`).  Consult Core-JS documentation for specifics.\n\n\n### Typed Arrays\n\nPolyfills for typed arrays:\n\n* **Modules under `es.typed-array`**: Provides various typed array polyfills (e.g., `Int8Array`, `Uint8Array`, etc.).\n\n\n### Other Utility Methods\n\nCore-JS includes several other utility polyfills that don't neatly fit into the above categories. Consult the Core-JS documentation for a complete list.  Examples may include polyfills for features related to iterators, generators, and more.  Always check the official documentation for the most current listing and details.\n\n\n\n\n## Advanced Usage and Configuration\n\n### Customizing the Build Process\n\nWhile Core-JS 3's modularity simplifies the import process, you might need to customize your build process for complex scenarios. This typically involves configuration within your bundler (Webpack, Rollup, Parcel, etc.).\n\n* **Webpack:**  Webpack's configuration allows fine-grained control over how Core-JS modules are handled.  You can adjust the `resolve` and `module` sections to optimize imports and tree-shaking.  Experiment with different loaders and plugins to improve your build process.\n\n* **Rollup:**  Rollup provides similar customization options. You can adjust plugin configurations to ensure correct handling of ES modules and tree-shaking.  Pay particular attention to plugins that handle ES modules and dead code elimination.\n\n* **Parcel:** Parcel generally handles ES module imports seamlessly.  However, for very large projects or specific optimization needs, you may need to explore its configuration options.\n\nIn all cases, ensure your bundler is configured to correctly handle ES modules and perform tree-shaking.  Incorrect configurations can lead to larger-than-necessary bundle sizes or runtime errors. Consult your bundler's documentation for detailed instructions.\n\n\n### Debugging and Troubleshooting\n\nDebugging issues related to Core-JS often involves checking for:\n\n* **Incorrect Imports:** Verify that you've imported the correct modules using the appropriate paths.  Typos in import statements are a common source of errors.\n\n* **Bundler Configuration:**  Ensure your bundler is correctly configured to handle ES modules and perform tree-shaking.  Incorrect configurations can lead to polyfills not being included or unexpected behavior.\n\n* **Browser Compatibility:** While Core-JS aims for broad compatibility, extremely outdated browsers may still have limitations. Test your application thoroughly on your target browsers.\n\n* **Conflicts with Other Libraries:**  Rarely, conflicts can arise between Core-JS and other libraries.  Try isolating the problem by temporarily removing other libraries to see if the issue persists.  Check for version compatibility between Core-JS and other dependencies.\n\n* **Console Errors:** Carefully examine any console errors that appear in your browser's developer tools. These errors often provide valuable clues about the source of the problem.\n\n* **Official Documentation:** Refer to the official Core-JS documentation and issue tracker for known bugs and solutions.\n\n\n### Integrating with other libraries\n\nGenerally, Core-JS integrates well with most other JavaScript libraries.  However, be mindful of potential conflicts:\n\n* **Polyfill Overlap:** Avoid including multiple libraries that provide polyfills for the same features. This can lead to conflicts and unexpected behavior.  If you're using a framework or library that already includes some polyfills (like React or Angular), carefully assess whether you need to include additional Core-JS modules.\n\n* **Version Compatibility:**  Check for compatibility between Core-JS and other libraries.  Using incompatible versions can cause unexpected issues.\n\n* **Testing:** Thoroughly test your application after integrating Core-JS with other libraries to ensure everything works as expected.\n\n\n### Performance Considerations\n\nWhile Core-JS improves compatibility, its use does have performance implications:\n\n* **Bundle Size:**  Minimize bundle size by importing only the necessary polyfills.  The modular approach of Core-JS 3 is crucial for this.  Avoid using `core-js/stable` unless absolutely necessary.\n\n* **Runtime Overhead:** Polyfills inherently add runtime overhead.  However, this overhead is generally minimal for modern browsers, where most features are already natively supported.  The performance impact is typically far outweighed by the benefits of consistent cross-browser functionality.\n\n* **Optimization:**  Use code splitting and other optimization techniques to further improve performance, especially in large applications.\n\n* **Profiling:**  For performance-critical applications, use profiling tools to identify any performance bottlenecks related to Core-JS.\n\n\n### Contributing to Core-JS\n\nCore-JS is an open-source project, and contributions are welcome!  Before contributing, review the project's contribution guidelines on its GitHub repository.  Contributions may include:\n\n* **Bug fixes:**  Report bugs and provide fixes for existing issues.\n\n* **New polyfills:**  Add polyfills for missing ECMAScript features or improve existing ones.\n\n* **Documentation improvements:**  Improve the documentation to make it clearer and more comprehensive.\n\n* **Testing:**  Write and maintain comprehensive tests to ensure the quality of the library.\n\nFollow the project's established workflow and coding style for your contributions to be considered.  Engage with the community to discuss your proposed changes before submitting pull requests.\n\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Polyfill:** A piece of code (usually JavaScript) that provides the functionality of a newer specification to older browsers or environments that don't natively support it.  It simulates the behavior of a missing feature.\n\n* **Transpiler:** A tool that converts source code written in one programming language into another programming language.  Often used to convert modern JavaScript code to code compatible with older browsers.\n\n* **Tree-shaking:** A build optimization technique that removes unused code from the final bundle.  This is especially important for minimizing the size of JavaScript applications.\n\n* **Bundle:** The combined and optimized JavaScript code produced by a bundler, ready for deployment to a web browser.\n\n* **ESM (ECMAScript Modules):** The standard module system for JavaScript.\n\n* **SemVer (Semantic Versioning):** A system for assigning version numbers to software that indicates the nature of changes between versions (major, minor, patch).\n\n* **API (Application Programming Interface):** A set of rules and specifications that software programs can follow to communicate with each other.\n\n\n### Browser Compatibility Table\n\n| Feature          | Chrome | Firefox | Safari | Edge | IE       |\n|-----------------|--------|---------|--------|------|----------|\n| `Array.includes` |  ✅     |    ✅    |   ✅    |  ✅   |  ❌      |\n| `Promise`        |  ✅     |    ✅    |   ✅    |  ✅   |  Partial |\n| `Object.assign`  |  ✅     |    ✅    |   ✅    |  ✅   |  Partial |\n| ...              | ...    | ...     | ...    | ...  | ...      |\n\n\n**Note:** This is a simplified example.  A complete table would list many more features and versions. Refer to the official Core-JS documentation for the most up-to-date and comprehensive browser compatibility information.  The symbols ✅ and ❌ represent support and lack of support, respectively. Partial support might indicate that only a subset of the feature is implemented natively.\n\n\n\n### Changelog\n\nRefer to the official Core-JS repository (usually on GitHub) for the complete changelog.  The changelog will detail all changes, bug fixes, new features, and other relevant information for each release.\n\n\n### License Information\n\nCore-JS is typically licensed under the MIT License.  Check the official repository's LICENSE file for the exact terms and conditions.  The MIT License generally grants broad permissions to use, modify, and distribute the software.\n\n\n### Community and Support Resources\n\n* **Official Website/Documentation:** The official website or documentation for Core-JS is the primary source for information.\n\n* **GitHub Repository:** The GitHub repository is the central location for the source code, issue tracker, and community discussion.\n\n* **Issue Tracker:** Use the issue tracker on the GitHub repository to report bugs, request features, and get help with problems.\n\n* **Community Forums (if applicable):** Check for official or community forums dedicated to Core-JS for discussions and support.  The official GitHub repository's issues section often acts as a de facto forum.\n\nRemember to always check the official Core-JS website and repository for the most up-to-date information on community resources and support.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"core-js.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"core-js - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}