{"title":"Backbone.js - Documentation","markdown":{"yaml":{"title":"Backbone.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Backbone.js?","containsRefs":false,"markdown":"\n\n\n\nBackbone.js is a lightweight JavaScript framework that provides structure to web applications by giving them models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.  It's not a full-fledged MVC framework like Angular or React; instead, it offers a structured approach to building client-side applications, leaving many design decisions up to the developer.  It excels at organizing complex JavaScript applications and keeping them maintainable.\n\n### Why use Backbone.js?\n\nBackbone.js offers several advantages:\n\n* **Structure and Organization:**  It imposes a clear structure on your JavaScript code, making it easier to understand, maintain, and debug, especially in larger projects.\n* **Model-View Separation:** Promotes a clean separation of concerns between data (models), presentation (views), and user interaction. This leads to more modular and reusable code.\n* **Event-Driven Architecture:**  Uses an event-driven approach, simplifying the handling of user interactions and data changes.\n* **Easy Integration:**  Works well with other JavaScript libraries and can easily integrate with existing backend systems.\n* **Lightweight:**  Its small footprint ensures fast loading times and minimal overhead.\n* **Mature and Stable:**  Backbone.js is a well-established framework with a large and active community, ensuring readily available support and resources.\n\n\n### Key Concepts: Models, Views, Collections, Routers\n\n* **Models:**  Represent data.  They contain attributes (key-value pairs) and methods for interacting with that data.  Models often handle persistence by communicating with a server-side API.\n\n* **Views:**  Represent the user interface.  They render the data from models and handle user interactions. Views listen for changes in models and update the UI accordingly.\n\n* **Collections:**  Organize groups of models.  They provide methods for managing collections of models, such as adding, removing, and filtering.\n\n* **Routers:** Handle URL routing and navigation within the application. They map URLs to specific views and manage the application's state based on the URL.\n\n\n### Setting up a Backbone.js Project\n\nSetting up a Backbone.js project is straightforward. You need to include the Backbone.js library in your HTML file. This can be done by downloading the library and including it locally or by using a CDN (Content Delivery Network).  For example, using a CDN:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Backbone App</title>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.1/backbone-min.js\"></script> </head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"app.js\"></script> </body>\n</html>\n```\n\nThen, create a JavaScript file (e.g., `app.js`) where you'll define your models, views, collections, and routers.  You'll likely also use a build system like Webpack or Parcel for larger projects to manage dependencies and optimize the code for production.\n\n\n### Basic Example\n\nThis simple example demonstrates a basic Backbone.js application:\n\n```javascript\n// Model\nvar Task = Backbone.Model.extend({\n  defaults: {\n    title: '',\n    completed: false\n  }\n});\n\n// View\nvar TaskView = Backbone.View.extend({\n  tagName: 'li',\n  template: _.template('<input type=\"checkbox\" <%= completed ? \"checked\" : \"\" %> /> <%= title %>'), //Requires underscore.js\n\n  events: {\n    'change input': 'toggleCompleted'\n  },\n\n  initialize: function() {\n    this.listenTo(this.model, 'change', this.render);\n  },\n\n  render: function() {\n    this.$el.html(this.template(this.model.attributes));\n    return this;\n  },\n\n  toggleCompleted: function() {\n    this.model.save({completed: !this.model.get('completed')});\n  }\n});\n\n// Collection\nvar TaskList = Backbone.Collection.extend({\n  model: Task\n});\n\n//Data\nvar taskList = new TaskList([\n  {title: 'Task 1', completed: true},\n  {title: 'Task 2', completed: false}\n]);\n\n//Rendering\nvar taskListView = new Backbone.View({\n  el: '#app',\n  initialize: function(){\n    taskList.each(this.addTask, this);\n  },\n\n  addTask: function(task){\n    var taskView = new TaskView({model: task});\n    this.$el.append(taskView.render().el);\n  }\n});\n```\n\nRemember to include Underscore.js for templating in this example.  This example shows a simple task list; more complex applications would build upon these core concepts to create more sophisticated functionality.\n\n\n## Models\n\n### Creating Models\n\nBackbone models are created using the `Backbone.Model` constructor.  You typically extend this constructor to create your custom model classes.  The simplest way to create a new model instance is by passing a JavaScript object literal containing the model's attributes:\n\n```javascript\nvar Task = Backbone.Model.extend({}); //Extend Backbone.Model to create your model\n\nvar task = new Task({ title: 'Grocery Shopping', completed: false });\n\nconsole.log(task.get('title')); // Output: Grocery Shopping\n```\n\n\n### Model Attributes\n\nModel attributes are key-value pairs that represent the data associated with the model.  They are stored in the model's internal `attributes` property.  You can access and manipulate attributes using methods like `get()` and `set()`.\n\n### Setting and Getting Attributes\n\n* **`get(attribute)`:** Retrieves the value of a specific attribute.\n\n* **`set(attributes, options)`:** Sets the value of one or more attributes.  The `attributes` parameter can be a single key-value pair or an object containing multiple key-value pairs.  The `options` parameter allows for setting additional options such as `{silent: true}` (to prevent triggering events) or `{validate: true}` (to trigger model validation before setting attributes).\n\n```javascript\ntask.set('completed', true); // Set the 'completed' attribute to true\n\nconsole.log(task.get('completed')); // Output: true\n\ntask.set({title: 'Shopping', priority: 'high'}); //Set multiple attributes\n\nconsole.log(task.attributes); // Output: {title: \"Shopping\", completed: true, priority: \"high\"}\n```\n\n### Model Events\n\nBackbone models trigger events when their attributes change.  You can listen for these events using the `on()` method.  Common events include:\n\n* **`change`:** Triggered when any attribute changes.\n* **`change:attribute`:** Triggered when a specific attribute changes (e.g., `change:title`).\n* **`invalid`:** Triggered if model validation fails.\n\n```javascript\ntask.on('change', function() {\n  console.log('Model changed!');\n});\n\ntask.on('change:title', function(model, newValue) {\n  console.log('Title changed to:', newValue);\n});\n\ntask.set({title: 'New Title'}); //Triggers both events\n```\n\n### Validating Models\n\nYou can add a `validate()` method to your model to perform validation before attributes are changed.  The `validate()` method receives the new attributes as an argument and should return an error message (string) if validation fails.  If validation fails, the `invalid` event is triggered, and the `set()` operation is not performed.\n\n```javascript\nvar Task = Backbone.Model.extend({\n  validate: function(attrs) {\n    if (!attrs.title) {\n      return 'Title is required';\n    }\n  }\n});\n\nvar task = new Task();\ntask.on('invalid', function(model, error){\n    console.log('Error:', error);\n});\n\ntask.set({title: ''}); // Triggers the 'invalid' event.\n```\n\n### Default Values\n\nYou can specify default values for attributes using the `defaults` property in your model definition.  These default values are used if an attribute is not provided when creating a new model instance.\n\n```javascript\nvar Task = Backbone.Model.extend({\n  defaults: {\n    title: 'Untitled Task',\n    completed: false\n  }\n});\n\nvar task = new Task();\nconsole.log(task.get('title')); // Output: Untitled Task\n```\n\n### Model Persistence (Saving and Fetching)\n\nBackbone models can persist their data to a server using the `save()` and `fetch()` methods.  These methods typically interact with a RESTful API using methods like `$.ajax()` (if using jQuery).  You'll need to configure the `url` property of your model to point to the server endpoint.  The `idAttribute` property defines the attribute that represents the model's unique identifier on the server.  The default is 'id'.\n\n```javascript\nvar Task = Backbone.Model.extend({\n  urlRoot: '/tasks' // Server endpoint\n});\n\nvar task = new Task({ title: 'New Task' });\ntask.save().then(function(){\n    console.log(\"Task Saved\");\n}, function(error){\n    console.log(\"Error Saving:\", error);\n});\n\nvar task2 = new Task({id: 1}); //To fetch an existing task\ntask2.fetch().then(function(){\n    console.log(\"Task Fetched:\", task2.attributes);\n}, function(error){\n    console.log(\"Error Fetching:\", error);\n});\n```\n\n### Working with Local Storage\n\nWhile Backbone doesn't directly support local storage, you can easily integrate it using a library or by implementing custom methods to handle storage operations within your models.  This provides offline capability and persistence even without a server.\n\n\n### URL and ID\n\n* **`url()`:** Returns the URL for the model.  This is often constructed based on the model's ID and `urlRoot`.\n\n* **`urlRoot`:** A string that sets the base URL for the model, used by `save()` and `fetch()`.\n\n* **`idAttribute`:** Specifies the name of the attribute which holds the model's unique identifier.  Defaults to \"id\".  This is crucial for server interactions.  The ID is typically assigned by the server upon creation.\n\n\n## Collections\n\n### Creating Collections\n\nBackbone collections are created by extending the `Backbone.Collection` constructor.  They manage a set of models and provide methods for working with them as a group.  When creating a collection, you typically specify the `model` property, which defines the type of model the collection should hold.\n\n```javascript\nvar Task = Backbone.Model.extend({});\n\nvar TaskList = Backbone.Collection.extend({\n  model: Task\n});\n\nvar tasks = new TaskList();\n```\n\n### Adding and Removing Models\n\n* **`add(models, options)`:** Adds one or more models to the collection.  The `models` parameter can be a single model instance or an array of models. The `options` parameter allows for setting additional options.\n\n* **`remove(models, options)`:** Removes one or more models from the collection.  `models` can be a model instance, an array of models, or a function that returns `true` for models to be removed.\n\n* **`reset(models, options)`:** Replaces all existing models in the collection with the specified models.\n\n\n```javascript\nvar task1 = new Task({ title: 'Task 1' });\nvar task2 = new Task({ title: 'Task 2' });\n\ntasks.add(task1);\ntasks.add([task2, new Task({title: 'Task 3'})]); //Adding multiple models\n\nconsole.log(tasks.length); // Output: 3\n\ntasks.remove(task1); //Removing a model\n\nconsole.log(tasks.length); // Output: 2\n\ntasks.reset([{title: 'Task A'}, {title: 'Task B'}]); //Resetting the collection\n\nconsole.log(tasks.pluck('title')); //Output: ['Task A', 'Task B']\n\n```\n\n### Collection Events\n\nBackbone collections trigger events when models are added, removed, or changed.  Common events include:\n\n* **`add`:** Triggered when one or more models are added.\n* **`remove`:** Triggered when one or more models are removed.\n* **`reset`:** Triggered when the entire collection is reset.\n* **`change`:** Triggered when a model within the collection changes (only if the collection's `model` has `change` events triggered).\n* **`sort`:** Triggered when the collection is sorted.\n\n```javascript\ntasks.on('add', function(model) {\n  console.log('Model added:', model.get('title'));\n});\n\ntasks.on('remove', function(model) {\n  console.log('Model removed:', model.get('title'));\n});\n\ntasks.add(new Task({ title: 'Task 4' }));\n```\n\n\n### Fetching Collections from a Server\n\nSimilar to models, collections can fetch data from a server using the `fetch()` method.  This method typically interacts with a RESTful API to retrieve a list of models.  You need to specify the `url` property for your collection.  The server should return a JSON array of model data.\n\n```javascript\nvar TaskList = Backbone.Collection.extend({\n  model: Task,\n  url: '/tasks'\n});\n\nvar tasks = new TaskList();\ntasks.fetch().then(function() {\n  console.log('Tasks fetched:', tasks.toJSON());\n}, function(error){\n    console.log(\"Error fetching tasks:\", error);\n});\n```\n\n### Filtering and Sorting Collections\n\n* **`filter(iterator, context)`:** Returns a new array containing only the models that pass the provided `iterator` function.\n\n* **`where(attributes)`:** Returns an array of models that match the given attributes.\n\n* **`sort(comparator)`:** Sorts the models in the collection based on the `comparator` function.  The `comparator` function should return a negative number if the first model should come before the second, a positive number if it should come after, and zero if they are equal.\n\n```javascript\n//Filtering:\nvar completedTasks = tasks.filter(function(task) {\n  return task.get('completed');\n});\n\n//Where:\nvar highPriorityTasks = tasks.where({ priority: 'high' });\n\n//Sorting:\ntasks.comparator = function(task1, task2) {\n  return task1.get('title').localeCompare(task2.get('title')); //Sort by title alphabetically\n};\ntasks.sort();\n\n```\n\n### Searching Collections\n\nWhile Backbone doesn't have a dedicated search method, you can easily implement searching using the `filter()` method or by using a library that provides more advanced search capabilities.\n\n```javascript\n//Simple search:\nvar searchTerm = 'Shopping';\nvar searchResults = tasks.filter(function(task) {\n  return task.get('title').toLowerCase().includes(searchTerm.toLowerCase());\n});\n```\n\n\n## Views\n\n### Creating Views\n\nBackbone views are created by extending the `Backbone.View` constructor.  They are responsible for rendering models and collections to the DOM and handling user interactions.  When creating a view, you typically specify the `el` (element) property, which represents the HTML element the view will be attached to.  You can also specify the `template` property (often using a templating engine like Underscore.js) and define event handlers in the `events` property.\n\n\n```javascript\nvar TaskView = Backbone.View.extend({\n  tagName: 'li', //Specify tag name if not using an existing element.\n  className: 'task', // Add class names\n  template: _.template('<input type=\"checkbox\" <%= completed ? \"checked\" : \"\" %> /> <%= title %>'),\n  events: {\n    'click input': 'toggleCompleted'\n  },\n\n  initialize: function(options) {\n      this.model = options.model;\n      this.listenTo(this.model, 'change', this.render);\n  },\n\n  render: function() {\n    this.$el.html(this.template(this.model.attributes));\n    return this;\n  },\n\n  toggleCompleted: function() {\n    this.model.save({completed: !this.model.get('completed')});\n  }\n});\n\nvar task = new Task({title: \"Test Task\", completed: false});\nvar taskView = new TaskView({model: task, el: $('#task-list li:first')}); // Attach to existing element\nvar taskView2 = new TaskView({model: task}); //Create new element\n$('#task-list').append(taskView2.render().el) //Add created element to dom.\n```\n\n### Rendering Views\n\nRendering a view typically involves populating the view's element with HTML based on the associated model or collection data.  This is often done using a templating engine like Underscore.js.  The `render()` method is a common place to perform rendering. The `render` method should return `this` for chainability.\n\n\n### Event Handling in Views\n\nBackbone views use the `events` property to define event handlers.  The `events` property is a hash map where keys are event strings (e.g., 'click .button'), and values are function names or functions themselves.  These handlers are automatically bound to the view's element when the view is rendered.\n\n\n### Templating with Underscore.js\n\nUnderscore.js provides a simple templating engine that is commonly used with Backbone views.  Templates are written using embedded JavaScript code within HTML.  The `_.template()` function compiles a template into a function that can then be called with data to generate HTML.\n\n\n\n### Managing DOM Elements\n\nBackbone views provide convenient methods for interacting with the DOM:\n\n* **`$el`:** A jQuery wrapper around the view's element (`this.el`).  Use this to easily manipulate the DOM using jQuery methods.\n* **`el`:** The actual DOM element associated with the view.  Access this directly for low-level DOM manipulation without jQuery.\n\n\n### Delegating Events\n\nEvent delegation improves performance by attaching event handlers to a parent element instead of individual child elements.  Backbone views automatically support event delegation if you use CSS selectors in the `events` property (e.g., `'click .button'`).  This is more efficient than attaching events to each element individually, especially when dealing with many elements or frequently updating the DOM.\n\n\n### View Lifecycle\n\nBackbone views have a lifecycle that includes initialization, rendering, and disposal.\n\n* **`initialize()`:** Called when the view is created.  This is a good place to set up event listeners, fetch data, etc.\n* **`render()`:** Called to render the view.\n* **`remove()`:** Called to remove the view from the DOM and unbind events.  Remember to explicitly call `this.remove()` when you're done with a view to prevent memory leaks.\n\n\n### Subviews and Composition\n\nComplex views can be created by composing multiple smaller subviews.  This promotes modularity and reusability.  You can manage subviews within a parent view's `initialize()` method or `render()` method.  Remember to call `.remove()` on subviews to properly clean up.\n\n\n```javascript\nvar ParentView = Backbone.View.extend({\n    initialize: function() {\n        this.childView = new ChildView();\n        this.listenTo(this.childView, 'someEvent', this.handleChildEvent);\n    },\n    render: function() {\n        this.$el.append(this.childView.render().el);\n        return this;\n    },\n    remove: function(){\n        this.childView.remove();\n        Backbone.View.prototype.remove.call(this);\n    },\n    handleChildEvent: function(){\n        //Handle events from the childView.\n    }\n});\n\nvar ChildView = Backbone.View.extend({\n    //ChildView definition\n});\n\n```\n\n\n## Routers\n\n### Creating Routers\n\nBackbone routers are created by extending the `Backbone.Router` constructor.  They are responsible for managing the application's navigation and URL routing.  They connect URLs to specific views and actions.\n\n```javascript\nvar AppRouter = Backbone.Router.extend({\n  routes: {\n    '': 'home',\n    'tasks/:id': 'taskDetails'\n  }\n});\n\nvar appRouter = new AppRouter();\nBackbone.history.start(); //Starts listening to url changes.\n```\n\n### Defining Routes\n\nRoutes are defined in the `routes` property of the router.  They are key-value pairs where keys are URL patterns, and values are function names that handle those routes.  Backbone uses regular expressions to match routes.  The `:id` in the example above is a route parameter that captures a numerical ID from the URL.\n\n\n### Handling Route Navigation\n\nWhen a URL matches a route, the corresponding function is executed. This function typically creates or updates views and renders them.  The `this` context within these functions refers to the router instance.\n\n```javascript\nvar AppRouter = Backbone.Router.extend({\n  routes: {\n    '': 'home',\n    'tasks/:id': 'taskDetails'\n  },\n\n  home: function() {\n    console.log('Home route');\n    // Create and render home view\n  },\n\n  taskDetails: function(id) {\n    console.log('Task details route, id:', id);\n    // Create and render task details view using id.\n  }\n});\n```\n\n### Passing Data Through Routes\n\nYou can pass data through routes using query parameters or by encoding data within the URL itself (though this can become less readable). Query parameters are appended to the URL using a `?` followed by key-value pairs.\n\n```javascript\n// URL with query parameters:  /tasks/1?status=completed&priority=high\nappRouter.navigate('tasks/1?status=completed&priority=high', {trigger: true});\n\n//Access Query Parameters:\nvar AppRouter = Backbone.Router.extend({\n  routes: {\n    'tasks/:id': 'taskDetails'\n  },\n  taskDetails: function(id) {\n    var queryParams = Backbone.history.getFragment().split(\"?\")[1];\n    var parsedParams = {};\n    if(queryParams){\n        queryParams.split(\"&\").forEach(param => {\n            let [key, value] = param.split(\"=\");\n            parsedParams[key] = value;\n        });\n    }\n    console.log(\"Query Params:\", parsedParams);\n  }\n});\n```\n\n\n### URL Fragment Management\n\nBackbone routers use the browser's URL fragment (the part after the `#`) to manage routes. The `navigate()` method updates the URL fragment.  The `trigger: true` option in `navigate()` triggers the associated route handler function, if one exists.  Otherwise, only the URL is updated.\n\n```javascript\nappRouter.navigate('tasks/2', {trigger: true}); // Updates URL and triggers route handler.\nappRouter.navigate('tasks/3'); // Only updates URL, doesn't trigger the handler.\n```\n\n\n### History Management\n\nBackbone uses the HTML5 History API (if available) to manage routing without the `#` in the URL.  You can check if pushState is available using `Backbone.history.started`.  If the browser doesn't support the HTML5 History API, Backbone falls back to using the URL fragment.  Ensure you set the `root` of your application properly for correct history management.\n\n\n```javascript\nBackbone.history.start({ pushState: true, root: '/my-app/' }); //Use HTML5 History if possible and set root for the application\n```\n\nBy default, Backbone.history.start() will use hashbang URLs (`/#/myroute`).  Using pushState offers a cleaner URL experience, removing the need for hashbangs, but requires server configuration to handle the requested URLs gracefully.  Failure to properly configure your server will result in a 404 error.\n\n\n## Events\n\nBackbone.js provides a powerful event system that allows for communication between different parts of your application.  This system is based on the observer pattern, allowing objects to subscribe to and receive notifications about events triggered by other objects.  This promotes loose coupling and improves code maintainability.\n\n### Backbone Events\n\nBackbone's event system is built into its core classes (`Backbone.Model`, `Backbone.Collection`, `Backbone.View`, and `Backbone.Router`).  These classes inherit from `Backbone.Events`, which provides the fundamental event handling methods.\n\n### Custom Events\n\nYou can define and trigger any custom event names you want.  Event names are strings.\n\n```javascript\nvar myObject = {};\n_.extend(myObject, Backbone.Events);\n\nmyObject.on('myCustomEvent', function(data) {\n  console.log('My custom event triggered!', data);\n});\n\nmyObject.trigger('myCustomEvent', { message: 'Hello!' }); //Triggers the event.\n```\n\n### Event Propagation\n\nEvents triggered on a Backbone object can propagate up the inheritance chain. For example, events triggered on a model are also triggered on its collection if the collection is listening.\n\n```javascript\nvar Task = Backbone.Model.extend({});\nvar TaskList = Backbone.Collection.extend({ model: Task });\nvar taskList = new TaskList();\n\nvar task = new Task({ title: 'My Task' });\ntaskList.add(task);\n\ntaskList.on('change', function(model) {\n  console.log('Collection noticed a change');\n});\n\ntask.on('change', function(model) {\n  console.log('Model changed');\n});\n\ntask.set({ title: 'Updated Task' }); //Triggers 'change' on model AND collection\n```\n\n### Listening for Events\n\nUse the `on()` method (or its alias, `bind()`) to listen for events.  It takes the event name, a callback function, and an optional context (the `this` value within the callback) as arguments.\n\n```javascript\nmyObject.on('anotherCustomEvent', function() {\n  console.log('Another custom event triggered!');\n}, this); // 'this' will refer to the global scope in this example, unless specified otherwise.\n\nmyObject.trigger('anotherCustomEvent');\n\n//Using bind():\nmyObject.bind('yetAnotherEvent', ()=>{console.log('Yet another event!')});\nmyObject.trigger('yetAnotherEvent');\n```\n\nYou can listen for multiple events at once using a space-separated string:\n\n```javascript\nmyObject.on('event1 event2', function(eventName) {\n    console.log('Event triggered:', eventName)\n});\nmyObject.trigger('event1');\nmyObject.trigger('event2');\n```\n\n\n### Triggering Events\n\nUse the `trigger()` method to trigger an event.  You can pass additional arguments along with the event name, and these arguments will be passed to the event listeners.\n\n```javascript\nmyObject.trigger('myCustomEvent', 'Argument 1', 'Argument 2');\n```\n\n### `off` Method\n\nUse the `off()` method (or its alias, `unbind()`) to stop listening for events. You can remove all listeners for a specific event, all listeners for all events on an object, or a specific listener for a specific event.\n\n```javascript\n// Remove all listeners for 'myCustomEvent':\nmyObject.off('myCustomEvent');\n\n//Remove a specific listener:\nvar listener = function(){console.log(\"I'm a listener\")};\nmyObject.on('myEvent', listener);\nmyObject.off('myEvent', listener);\n\n// Remove all listeners for all events:\nmyObject.off();\n```\n\nRemember that `off()` without arguments removes *all* listeners, so use with caution.  Always prefer targeted removal of specific listeners whenever possible to prevent unexpected behavior.\n\n\n## Working with APIs\n\nBackbone.js provides a flexible mechanism for interacting with APIs through its built-in `Backbone.sync` method.  This method handles the communication between your Backbone models and collections and a remote server.\n\n### Making AJAX Requests with Backbone.sync\n\nBy default, `Backbone.sync` uses `$.ajax` (if jQuery is included) to make AJAX requests to a server.  `Backbone.sync` handles the different HTTP verbs (GET, POST, PUT, DELETE) based on the method being called on the model or collection (`fetch`, `save`, `create`, `destroy`).  The URL for the request is determined by the model's or collection's `url` property.\n\n```javascript\n//Model\nvar Task = Backbone.Model.extend({\n    urlRoot: '/tasks'\n});\n\nvar task = new Task({title: \"My Task\"});\ntask.save().then(function(response){\n    console.log(\"Task saved:\", response);\n}, function(error){\n    console.error(\"Error saving task:\", error);\n});\n\n//Collection\nvar TaskList = Backbone.Collection.extend({\n    model: Task,\n    url: '/tasks'\n});\n\nvar tasks = new TaskList();\ntasks.fetch().then(function(response){\n    console.log(\"Tasks fetched:\", response);\n}, function(error){\n    console.error(\"Error fetching tasks:\", error);\n});\n\n```\n\n### Customizing Backbone.sync\n\nYou can customize `Backbone.sync` to use different HTTP libraries or to add custom logic, such as authentication or error handling.  You can override `Backbone.sync` globally or on a per-model/collection basis.\n\n```javascript\n//Global override:\nBackbone.sync = function(method, model, options) {\n  // Custom logic for all sync calls\n  console.log('Custom sync function called');\n  //You can use fetch, save, etc. here with custom implementation.\n};\n\n//Per-model/Collection override\nvar MyModel = Backbone.Model.extend({\n    sync: function(method, model, options){\n        //Custom sync logic for MyModel\n    }\n});\n```\n\n\n### Using RESTful APIs\n\nBackbone.js naturally integrates with RESTful APIs.  The default behavior of `Backbone.sync` aligns well with standard REST conventions:\n\n* **`fetch()`:**  Uses a `GET` request to retrieve data from the server.\n* **`save()`:**  Uses a `POST` request for creating new models and a `PUT` request for updating existing models.\n* **`create()`:** Uses a `POST` request to create a new model on the server.\n* **`destroy()`:** Uses a `DELETE` request to remove a model from the server.\n\nEnsure your server-side API adheres to RESTful principles for seamless integration with Backbone.\n\n\n### Handling Errors\n\nErrors during AJAX requests can be handled using the `error` callback function within the `options` object passed to `Backbone.sync`.  You can inspect the error object to determine the cause and react accordingly.\n\n```javascript\ntask.save({}, {\n  error: function(model, response, options) {\n    console.error('Error saving task:', response.responseText);\n    //Display user-friendly error message\n  }\n});\n```\n\n### Authentication and Authorization\n\nAuthentication and authorization are usually handled by intercepting requests before they reach `Backbone.sync`.  You might implement this using middleware on your server or by creating a custom `Backbone.sync` function that adds authentication headers or tokens to every request.  Libraries such as `axios` offer features such as interceptors which makes this simpler.  Examples below use a hypothetical `authToken` variable:\n\n```javascript\n//Custom sync with authentication\nBackbone.sync = function(method, model, options) {\n    var authToken = localStorage.getItem('authToken');\n    var headers = {\n        'Authorization': 'Bearer ' + authToken\n    }\n    options.headers = headers;\n    return Backbone.ajax(method, model, options);\n};\n\n//Or using axios interceptors:\naxios.interceptors.request.use(config => {\n    config.headers.Authorization = `Bearer ${localStorage.getItem('authToken')}`;\n    return config;\n});\n```\n\nRemember to handle token expiration and refresh appropriately.  Consider using a library that simplifies authentication and authorization management.\n\n\n## Advanced Topics\n\n### Backbone.Marionette (optional)\n\nBackbone.Marionette is a popular extension to Backbone.js that provides additional structure and components for building more complex applications.  It offers features such as composite views, regions, and application organization patterns (like a controller), which can significantly improve the maintainability and scalability of your Backbone applications.  It simplifies structuring your application into reusable components and handling complex view hierarchies.  While not strictly required, Marionette is highly recommended for larger projects.\n\n\n### Backbone.Relational (optional)\n\nBackbone.Relational is another popular add-on that enhances Backbone.js by providing support for managing relationships between models.  It simplifies the creation and management of relationships such as one-to-one, one-to-many, and many-to-many, which are common in most data models. This improves data integrity and reduces the need for manual handling of these relationships in your code.  Again, this is optional but highly recommended for applications with complex data relationships.\n\n\n### Testing with Backbone\n\nTesting is crucial for building robust and maintainable Backbone.js applications.  Popular JavaScript testing frameworks like Jasmine, Mocha, and Jest are well-suited for testing Backbone code. You can test models, collections, views, and routers in isolation or as part of an integrated system.  Focus on unit testing individual components and integration tests to ensure the components work correctly together.  Consider using tools like Sinon.JS for mocking and spying on dependencies during testing.\n\n\n### Debugging Tips\n\nDebugging Backbone applications can be challenging. Here are some useful debugging tips:\n\n* **Use your browser's developer tools:** The console, debugger, and network tabs are invaluable for inspecting variables, setting breakpoints, and examining network requests.\n* **Log strategically:**  Use `console.log()` statements to track the flow of your application and inspect data values at critical points.\n* **Use a debugger:** Stepping through your code line by line helps identify the exact source of errors.\n* **Simplify your code:** Break down complex logic into smaller, more manageable functions to make debugging easier.\n* **Check for null or undefined values:** A frequent source of errors is using null or undefined values unexpectedly.\n* **Inspect event listeners:** Make sure you're not attaching unnecessary or duplicate listeners, which can cause unexpected behavior or memory leaks.\n* **Use a linter:**  A linter can help catch potential errors and enforce coding style consistency.\n\n\n### Best Practices\n\n* **Keep models lean:**  Models should primarily manage data and only include essential logic.\n* **Use meaningful event names:** Choose descriptive event names to improve code readability and maintainability.\n* **Favor composition over inheritance:**  Compose views and other components to create more flexible and reusable code rather than relying heavily on inheritance.\n* **Follow the DRY principle (Don't Repeat Yourself):**  Refactor repetitive code into reusable functions or modules.\n* **Write clean and well-documented code:**  Use comments and meaningful variable names to make your code easier to understand and maintain.\n* **Test your code thoroughly:**  Write unit tests for models, collections, and views to ensure their correctness and prevent regressions.\n\n\n### Performance Optimization\n\nFor large and complex Backbone applications, consider these optimization strategies:\n\n* **Use event delegation:**  Attach event listeners to parent elements instead of individual child elements.\n* **Throttle and debounce events:** Reduce the frequency of event handling for performance-sensitive events like resizing and scrolling.  Underscore.js provides helper functions (`_.throttle` and `_.debounce`).\n* **Use efficient DOM manipulation techniques:**  Minimize direct DOM manipulation.  Use jQuery's efficient methods where appropriate.\n* **Optimize rendering:** Avoid unnecessary re-renders by carefully managing when and how views are updated. Use techniques such as partial re-rendering or virtualization for large lists.\n* **Use a build system:**  Use a build system (Webpack, Parcel, Rollup) to optimize and minify your code for production.\n* **Lazy loading:** Avoid loading unnecessary resources until needed.\n* **Consider using a framework like Preact or React:**  For extremely demanding applications, explore migrating to a more performant framework. While Backbone offers a good balance of structure and lightweight nature, more modern frameworks are designed for optimal performance on very large scale projects.\n\n\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Model:**  A Backbone object that represents a single record in your application's data.  It contains attributes (data) and methods for manipulating that data.\n\n* **Collection:** A Backbone object that manages a set of models.  It provides methods for adding, removing, and manipulating models as a group.\n\n* **View:** A Backbone object that represents a portion of the user interface.  It renders data from models and collections and handles user interactions.\n\n* **Router:** A Backbone object that handles URL routing and navigation within the application.  It maps URLs to specific views and actions.\n\n* **Event:** A notification that is triggered by a Backbone object to signal a change in state or data.  Other objects can listen for these events and react accordingly.\n\n* **Event Listener:** A function that is registered to listen for a specific event.  When the event is triggered, the listener function is executed.\n\n* **Templating:** The process of generating HTML dynamically from data using a template engine (e.g., Underscore.js templates).\n\n* **RESTful API:** A web API that conforms to REST architectural constraints, using standard HTTP methods (GET, POST, PUT, DELETE) to interact with resources.\n\n* **AJAX (Asynchronous JavaScript and XML):** A technique for making asynchronous HTTP requests to a server without reloading the entire page.  Backbone uses AJAX extensively to communicate with APIs.\n\n* **Backbone.sync:**  Backbone's default method for making AJAX requests to a server.  It handles different HTTP methods based on model/collection operations.\n\n* **MVC (Model-View-Controller):** A software design pattern that separates concerns into three interconnected parts: Model (data), View (presentation), and Controller (logic). Backbone implements a variation of this pattern.\n\n\n### Useful Resources\n\n* **Backbone.js Official Website:** [https://backbonejs.org/](https://backbonejs.org/) - The official documentation and resources for Backbone.js.\n\n* **Backbone.js GitHub Repository:** [https://github.com/jashkenas/backbone](https://github.com/jashkenas/backbone) - The source code and issue tracker for Backbone.js.\n\n* **Stack Overflow:** Search Stack Overflow for answers to specific questions or problems related to Backbone.js.\n\n* **Underscore.js:** [https://underscorejs.org/](https://underscorejs.org/) – Documentation for Underscore.js, a utility library commonly used with Backbone.js.\n\n\n### Further Learning\n\nTo deepen your understanding of Backbone.js and its capabilities, consider the following:\n\n* **Working through tutorials:** Numerous online tutorials and screencasts cover various aspects of Backbone.js development.  Search for \"Backbone.js tutorial\" on YouTube or your favorite learning platform.\n\n* **Building a sample application:**  The best way to learn is by doing.  Start with a small project and gradually add complexity.\n\n* **Exploring advanced topics:** Once you're comfortable with the basics, delve into more advanced topics such as Backbone.Marionette, Backbone.Relational, and performance optimization techniques.\n\n* **Contributing to open-source projects:**  Contributing to open-source projects that use Backbone.js is a great way to gain experience and learn from other developers.\n\n* **Reading blog posts and articles:** Numerous blog posts and articles discuss best practices and advanced techniques for using Backbone.js.\n\n\nRemember that Backbone.js is a powerful but flexible framework.  The best approach to learning it involves hands-on experience and a willingness to explore its capabilities and associated tools.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Backbone.js?\n\nBackbone.js is a lightweight JavaScript framework that provides structure to web applications by giving them models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.  It's not a full-fledged MVC framework like Angular or React; instead, it offers a structured approach to building client-side applications, leaving many design decisions up to the developer.  It excels at organizing complex JavaScript applications and keeping them maintainable.\n\n### Why use Backbone.js?\n\nBackbone.js offers several advantages:\n\n* **Structure and Organization:**  It imposes a clear structure on your JavaScript code, making it easier to understand, maintain, and debug, especially in larger projects.\n* **Model-View Separation:** Promotes a clean separation of concerns between data (models), presentation (views), and user interaction. This leads to more modular and reusable code.\n* **Event-Driven Architecture:**  Uses an event-driven approach, simplifying the handling of user interactions and data changes.\n* **Easy Integration:**  Works well with other JavaScript libraries and can easily integrate with existing backend systems.\n* **Lightweight:**  Its small footprint ensures fast loading times and minimal overhead.\n* **Mature and Stable:**  Backbone.js is a well-established framework with a large and active community, ensuring readily available support and resources.\n\n\n### Key Concepts: Models, Views, Collections, Routers\n\n* **Models:**  Represent data.  They contain attributes (key-value pairs) and methods for interacting with that data.  Models often handle persistence by communicating with a server-side API.\n\n* **Views:**  Represent the user interface.  They render the data from models and handle user interactions. Views listen for changes in models and update the UI accordingly.\n\n* **Collections:**  Organize groups of models.  They provide methods for managing collections of models, such as adding, removing, and filtering.\n\n* **Routers:** Handle URL routing and navigation within the application. They map URLs to specific views and manage the application's state based on the URL.\n\n\n### Setting up a Backbone.js Project\n\nSetting up a Backbone.js project is straightforward. You need to include the Backbone.js library in your HTML file. This can be done by downloading the library and including it locally or by using a CDN (Content Delivery Network).  For example, using a CDN:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Backbone App</title>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.4.1/backbone-min.js\"></script> </head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"app.js\"></script> </body>\n</html>\n```\n\nThen, create a JavaScript file (e.g., `app.js`) where you'll define your models, views, collections, and routers.  You'll likely also use a build system like Webpack or Parcel for larger projects to manage dependencies and optimize the code for production.\n\n\n### Basic Example\n\nThis simple example demonstrates a basic Backbone.js application:\n\n```javascript\n// Model\nvar Task = Backbone.Model.extend({\n  defaults: {\n    title: '',\n    completed: false\n  }\n});\n\n// View\nvar TaskView = Backbone.View.extend({\n  tagName: 'li',\n  template: _.template('<input type=\"checkbox\" <%= completed ? \"checked\" : \"\" %> /> <%= title %>'), //Requires underscore.js\n\n  events: {\n    'change input': 'toggleCompleted'\n  },\n\n  initialize: function() {\n    this.listenTo(this.model, 'change', this.render);\n  },\n\n  render: function() {\n    this.$el.html(this.template(this.model.attributes));\n    return this;\n  },\n\n  toggleCompleted: function() {\n    this.model.save({completed: !this.model.get('completed')});\n  }\n});\n\n// Collection\nvar TaskList = Backbone.Collection.extend({\n  model: Task\n});\n\n//Data\nvar taskList = new TaskList([\n  {title: 'Task 1', completed: true},\n  {title: 'Task 2', completed: false}\n]);\n\n//Rendering\nvar taskListView = new Backbone.View({\n  el: '#app',\n  initialize: function(){\n    taskList.each(this.addTask, this);\n  },\n\n  addTask: function(task){\n    var taskView = new TaskView({model: task});\n    this.$el.append(taskView.render().el);\n  }\n});\n```\n\nRemember to include Underscore.js for templating in this example.  This example shows a simple task list; more complex applications would build upon these core concepts to create more sophisticated functionality.\n\n\n## Models\n\n### Creating Models\n\nBackbone models are created using the `Backbone.Model` constructor.  You typically extend this constructor to create your custom model classes.  The simplest way to create a new model instance is by passing a JavaScript object literal containing the model's attributes:\n\n```javascript\nvar Task = Backbone.Model.extend({}); //Extend Backbone.Model to create your model\n\nvar task = new Task({ title: 'Grocery Shopping', completed: false });\n\nconsole.log(task.get('title')); // Output: Grocery Shopping\n```\n\n\n### Model Attributes\n\nModel attributes are key-value pairs that represent the data associated with the model.  They are stored in the model's internal `attributes` property.  You can access and manipulate attributes using methods like `get()` and `set()`.\n\n### Setting and Getting Attributes\n\n* **`get(attribute)`:** Retrieves the value of a specific attribute.\n\n* **`set(attributes, options)`:** Sets the value of one or more attributes.  The `attributes` parameter can be a single key-value pair or an object containing multiple key-value pairs.  The `options` parameter allows for setting additional options such as `{silent: true}` (to prevent triggering events) or `{validate: true}` (to trigger model validation before setting attributes).\n\n```javascript\ntask.set('completed', true); // Set the 'completed' attribute to true\n\nconsole.log(task.get('completed')); // Output: true\n\ntask.set({title: 'Shopping', priority: 'high'}); //Set multiple attributes\n\nconsole.log(task.attributes); // Output: {title: \"Shopping\", completed: true, priority: \"high\"}\n```\n\n### Model Events\n\nBackbone models trigger events when their attributes change.  You can listen for these events using the `on()` method.  Common events include:\n\n* **`change`:** Triggered when any attribute changes.\n* **`change:attribute`:** Triggered when a specific attribute changes (e.g., `change:title`).\n* **`invalid`:** Triggered if model validation fails.\n\n```javascript\ntask.on('change', function() {\n  console.log('Model changed!');\n});\n\ntask.on('change:title', function(model, newValue) {\n  console.log('Title changed to:', newValue);\n});\n\ntask.set({title: 'New Title'}); //Triggers both events\n```\n\n### Validating Models\n\nYou can add a `validate()` method to your model to perform validation before attributes are changed.  The `validate()` method receives the new attributes as an argument and should return an error message (string) if validation fails.  If validation fails, the `invalid` event is triggered, and the `set()` operation is not performed.\n\n```javascript\nvar Task = Backbone.Model.extend({\n  validate: function(attrs) {\n    if (!attrs.title) {\n      return 'Title is required';\n    }\n  }\n});\n\nvar task = new Task();\ntask.on('invalid', function(model, error){\n    console.log('Error:', error);\n});\n\ntask.set({title: ''}); // Triggers the 'invalid' event.\n```\n\n### Default Values\n\nYou can specify default values for attributes using the `defaults` property in your model definition.  These default values are used if an attribute is not provided when creating a new model instance.\n\n```javascript\nvar Task = Backbone.Model.extend({\n  defaults: {\n    title: 'Untitled Task',\n    completed: false\n  }\n});\n\nvar task = new Task();\nconsole.log(task.get('title')); // Output: Untitled Task\n```\n\n### Model Persistence (Saving and Fetching)\n\nBackbone models can persist their data to a server using the `save()` and `fetch()` methods.  These methods typically interact with a RESTful API using methods like `$.ajax()` (if using jQuery).  You'll need to configure the `url` property of your model to point to the server endpoint.  The `idAttribute` property defines the attribute that represents the model's unique identifier on the server.  The default is 'id'.\n\n```javascript\nvar Task = Backbone.Model.extend({\n  urlRoot: '/tasks' // Server endpoint\n});\n\nvar task = new Task({ title: 'New Task' });\ntask.save().then(function(){\n    console.log(\"Task Saved\");\n}, function(error){\n    console.log(\"Error Saving:\", error);\n});\n\nvar task2 = new Task({id: 1}); //To fetch an existing task\ntask2.fetch().then(function(){\n    console.log(\"Task Fetched:\", task2.attributes);\n}, function(error){\n    console.log(\"Error Fetching:\", error);\n});\n```\n\n### Working with Local Storage\n\nWhile Backbone doesn't directly support local storage, you can easily integrate it using a library or by implementing custom methods to handle storage operations within your models.  This provides offline capability and persistence even without a server.\n\n\n### URL and ID\n\n* **`url()`:** Returns the URL for the model.  This is often constructed based on the model's ID and `urlRoot`.\n\n* **`urlRoot`:** A string that sets the base URL for the model, used by `save()` and `fetch()`.\n\n* **`idAttribute`:** Specifies the name of the attribute which holds the model's unique identifier.  Defaults to \"id\".  This is crucial for server interactions.  The ID is typically assigned by the server upon creation.\n\n\n## Collections\n\n### Creating Collections\n\nBackbone collections are created by extending the `Backbone.Collection` constructor.  They manage a set of models and provide methods for working with them as a group.  When creating a collection, you typically specify the `model` property, which defines the type of model the collection should hold.\n\n```javascript\nvar Task = Backbone.Model.extend({});\n\nvar TaskList = Backbone.Collection.extend({\n  model: Task\n});\n\nvar tasks = new TaskList();\n```\n\n### Adding and Removing Models\n\n* **`add(models, options)`:** Adds one or more models to the collection.  The `models` parameter can be a single model instance or an array of models. The `options` parameter allows for setting additional options.\n\n* **`remove(models, options)`:** Removes one or more models from the collection.  `models` can be a model instance, an array of models, or a function that returns `true` for models to be removed.\n\n* **`reset(models, options)`:** Replaces all existing models in the collection with the specified models.\n\n\n```javascript\nvar task1 = new Task({ title: 'Task 1' });\nvar task2 = new Task({ title: 'Task 2' });\n\ntasks.add(task1);\ntasks.add([task2, new Task({title: 'Task 3'})]); //Adding multiple models\n\nconsole.log(tasks.length); // Output: 3\n\ntasks.remove(task1); //Removing a model\n\nconsole.log(tasks.length); // Output: 2\n\ntasks.reset([{title: 'Task A'}, {title: 'Task B'}]); //Resetting the collection\n\nconsole.log(tasks.pluck('title')); //Output: ['Task A', 'Task B']\n\n```\n\n### Collection Events\n\nBackbone collections trigger events when models are added, removed, or changed.  Common events include:\n\n* **`add`:** Triggered when one or more models are added.\n* **`remove`:** Triggered when one or more models are removed.\n* **`reset`:** Triggered when the entire collection is reset.\n* **`change`:** Triggered when a model within the collection changes (only if the collection's `model` has `change` events triggered).\n* **`sort`:** Triggered when the collection is sorted.\n\n```javascript\ntasks.on('add', function(model) {\n  console.log('Model added:', model.get('title'));\n});\n\ntasks.on('remove', function(model) {\n  console.log('Model removed:', model.get('title'));\n});\n\ntasks.add(new Task({ title: 'Task 4' }));\n```\n\n\n### Fetching Collections from a Server\n\nSimilar to models, collections can fetch data from a server using the `fetch()` method.  This method typically interacts with a RESTful API to retrieve a list of models.  You need to specify the `url` property for your collection.  The server should return a JSON array of model data.\n\n```javascript\nvar TaskList = Backbone.Collection.extend({\n  model: Task,\n  url: '/tasks'\n});\n\nvar tasks = new TaskList();\ntasks.fetch().then(function() {\n  console.log('Tasks fetched:', tasks.toJSON());\n}, function(error){\n    console.log(\"Error fetching tasks:\", error);\n});\n```\n\n### Filtering and Sorting Collections\n\n* **`filter(iterator, context)`:** Returns a new array containing only the models that pass the provided `iterator` function.\n\n* **`where(attributes)`:** Returns an array of models that match the given attributes.\n\n* **`sort(comparator)`:** Sorts the models in the collection based on the `comparator` function.  The `comparator` function should return a negative number if the first model should come before the second, a positive number if it should come after, and zero if they are equal.\n\n```javascript\n//Filtering:\nvar completedTasks = tasks.filter(function(task) {\n  return task.get('completed');\n});\n\n//Where:\nvar highPriorityTasks = tasks.where({ priority: 'high' });\n\n//Sorting:\ntasks.comparator = function(task1, task2) {\n  return task1.get('title').localeCompare(task2.get('title')); //Sort by title alphabetically\n};\ntasks.sort();\n\n```\n\n### Searching Collections\n\nWhile Backbone doesn't have a dedicated search method, you can easily implement searching using the `filter()` method or by using a library that provides more advanced search capabilities.\n\n```javascript\n//Simple search:\nvar searchTerm = 'Shopping';\nvar searchResults = tasks.filter(function(task) {\n  return task.get('title').toLowerCase().includes(searchTerm.toLowerCase());\n});\n```\n\n\n## Views\n\n### Creating Views\n\nBackbone views are created by extending the `Backbone.View` constructor.  They are responsible for rendering models and collections to the DOM and handling user interactions.  When creating a view, you typically specify the `el` (element) property, which represents the HTML element the view will be attached to.  You can also specify the `template` property (often using a templating engine like Underscore.js) and define event handlers in the `events` property.\n\n\n```javascript\nvar TaskView = Backbone.View.extend({\n  tagName: 'li', //Specify tag name if not using an existing element.\n  className: 'task', // Add class names\n  template: _.template('<input type=\"checkbox\" <%= completed ? \"checked\" : \"\" %> /> <%= title %>'),\n  events: {\n    'click input': 'toggleCompleted'\n  },\n\n  initialize: function(options) {\n      this.model = options.model;\n      this.listenTo(this.model, 'change', this.render);\n  },\n\n  render: function() {\n    this.$el.html(this.template(this.model.attributes));\n    return this;\n  },\n\n  toggleCompleted: function() {\n    this.model.save({completed: !this.model.get('completed')});\n  }\n});\n\nvar task = new Task({title: \"Test Task\", completed: false});\nvar taskView = new TaskView({model: task, el: $('#task-list li:first')}); // Attach to existing element\nvar taskView2 = new TaskView({model: task}); //Create new element\n$('#task-list').append(taskView2.render().el) //Add created element to dom.\n```\n\n### Rendering Views\n\nRendering a view typically involves populating the view's element with HTML based on the associated model or collection data.  This is often done using a templating engine like Underscore.js.  The `render()` method is a common place to perform rendering. The `render` method should return `this` for chainability.\n\n\n### Event Handling in Views\n\nBackbone views use the `events` property to define event handlers.  The `events` property is a hash map where keys are event strings (e.g., 'click .button'), and values are function names or functions themselves.  These handlers are automatically bound to the view's element when the view is rendered.\n\n\n### Templating with Underscore.js\n\nUnderscore.js provides a simple templating engine that is commonly used with Backbone views.  Templates are written using embedded JavaScript code within HTML.  The `_.template()` function compiles a template into a function that can then be called with data to generate HTML.\n\n\n\n### Managing DOM Elements\n\nBackbone views provide convenient methods for interacting with the DOM:\n\n* **`$el`:** A jQuery wrapper around the view's element (`this.el`).  Use this to easily manipulate the DOM using jQuery methods.\n* **`el`:** The actual DOM element associated with the view.  Access this directly for low-level DOM manipulation without jQuery.\n\n\n### Delegating Events\n\nEvent delegation improves performance by attaching event handlers to a parent element instead of individual child elements.  Backbone views automatically support event delegation if you use CSS selectors in the `events` property (e.g., `'click .button'`).  This is more efficient than attaching events to each element individually, especially when dealing with many elements or frequently updating the DOM.\n\n\n### View Lifecycle\n\nBackbone views have a lifecycle that includes initialization, rendering, and disposal.\n\n* **`initialize()`:** Called when the view is created.  This is a good place to set up event listeners, fetch data, etc.\n* **`render()`:** Called to render the view.\n* **`remove()`:** Called to remove the view from the DOM and unbind events.  Remember to explicitly call `this.remove()` when you're done with a view to prevent memory leaks.\n\n\n### Subviews and Composition\n\nComplex views can be created by composing multiple smaller subviews.  This promotes modularity and reusability.  You can manage subviews within a parent view's `initialize()` method or `render()` method.  Remember to call `.remove()` on subviews to properly clean up.\n\n\n```javascript\nvar ParentView = Backbone.View.extend({\n    initialize: function() {\n        this.childView = new ChildView();\n        this.listenTo(this.childView, 'someEvent', this.handleChildEvent);\n    },\n    render: function() {\n        this.$el.append(this.childView.render().el);\n        return this;\n    },\n    remove: function(){\n        this.childView.remove();\n        Backbone.View.prototype.remove.call(this);\n    },\n    handleChildEvent: function(){\n        //Handle events from the childView.\n    }\n});\n\nvar ChildView = Backbone.View.extend({\n    //ChildView definition\n});\n\n```\n\n\n## Routers\n\n### Creating Routers\n\nBackbone routers are created by extending the `Backbone.Router` constructor.  They are responsible for managing the application's navigation and URL routing.  They connect URLs to specific views and actions.\n\n```javascript\nvar AppRouter = Backbone.Router.extend({\n  routes: {\n    '': 'home',\n    'tasks/:id': 'taskDetails'\n  }\n});\n\nvar appRouter = new AppRouter();\nBackbone.history.start(); //Starts listening to url changes.\n```\n\n### Defining Routes\n\nRoutes are defined in the `routes` property of the router.  They are key-value pairs where keys are URL patterns, and values are function names that handle those routes.  Backbone uses regular expressions to match routes.  The `:id` in the example above is a route parameter that captures a numerical ID from the URL.\n\n\n### Handling Route Navigation\n\nWhen a URL matches a route, the corresponding function is executed. This function typically creates or updates views and renders them.  The `this` context within these functions refers to the router instance.\n\n```javascript\nvar AppRouter = Backbone.Router.extend({\n  routes: {\n    '': 'home',\n    'tasks/:id': 'taskDetails'\n  },\n\n  home: function() {\n    console.log('Home route');\n    // Create and render home view\n  },\n\n  taskDetails: function(id) {\n    console.log('Task details route, id:', id);\n    // Create and render task details view using id.\n  }\n});\n```\n\n### Passing Data Through Routes\n\nYou can pass data through routes using query parameters or by encoding data within the URL itself (though this can become less readable). Query parameters are appended to the URL using a `?` followed by key-value pairs.\n\n```javascript\n// URL with query parameters:  /tasks/1?status=completed&priority=high\nappRouter.navigate('tasks/1?status=completed&priority=high', {trigger: true});\n\n//Access Query Parameters:\nvar AppRouter = Backbone.Router.extend({\n  routes: {\n    'tasks/:id': 'taskDetails'\n  },\n  taskDetails: function(id) {\n    var queryParams = Backbone.history.getFragment().split(\"?\")[1];\n    var parsedParams = {};\n    if(queryParams){\n        queryParams.split(\"&\").forEach(param => {\n            let [key, value] = param.split(\"=\");\n            parsedParams[key] = value;\n        });\n    }\n    console.log(\"Query Params:\", parsedParams);\n  }\n});\n```\n\n\n### URL Fragment Management\n\nBackbone routers use the browser's URL fragment (the part after the `#`) to manage routes. The `navigate()` method updates the URL fragment.  The `trigger: true` option in `navigate()` triggers the associated route handler function, if one exists.  Otherwise, only the URL is updated.\n\n```javascript\nappRouter.navigate('tasks/2', {trigger: true}); // Updates URL and triggers route handler.\nappRouter.navigate('tasks/3'); // Only updates URL, doesn't trigger the handler.\n```\n\n\n### History Management\n\nBackbone uses the HTML5 History API (if available) to manage routing without the `#` in the URL.  You can check if pushState is available using `Backbone.history.started`.  If the browser doesn't support the HTML5 History API, Backbone falls back to using the URL fragment.  Ensure you set the `root` of your application properly for correct history management.\n\n\n```javascript\nBackbone.history.start({ pushState: true, root: '/my-app/' }); //Use HTML5 History if possible and set root for the application\n```\n\nBy default, Backbone.history.start() will use hashbang URLs (`/#/myroute`).  Using pushState offers a cleaner URL experience, removing the need for hashbangs, but requires server configuration to handle the requested URLs gracefully.  Failure to properly configure your server will result in a 404 error.\n\n\n## Events\n\nBackbone.js provides a powerful event system that allows for communication between different parts of your application.  This system is based on the observer pattern, allowing objects to subscribe to and receive notifications about events triggered by other objects.  This promotes loose coupling and improves code maintainability.\n\n### Backbone Events\n\nBackbone's event system is built into its core classes (`Backbone.Model`, `Backbone.Collection`, `Backbone.View`, and `Backbone.Router`).  These classes inherit from `Backbone.Events`, which provides the fundamental event handling methods.\n\n### Custom Events\n\nYou can define and trigger any custom event names you want.  Event names are strings.\n\n```javascript\nvar myObject = {};\n_.extend(myObject, Backbone.Events);\n\nmyObject.on('myCustomEvent', function(data) {\n  console.log('My custom event triggered!', data);\n});\n\nmyObject.trigger('myCustomEvent', { message: 'Hello!' }); //Triggers the event.\n```\n\n### Event Propagation\n\nEvents triggered on a Backbone object can propagate up the inheritance chain. For example, events triggered on a model are also triggered on its collection if the collection is listening.\n\n```javascript\nvar Task = Backbone.Model.extend({});\nvar TaskList = Backbone.Collection.extend({ model: Task });\nvar taskList = new TaskList();\n\nvar task = new Task({ title: 'My Task' });\ntaskList.add(task);\n\ntaskList.on('change', function(model) {\n  console.log('Collection noticed a change');\n});\n\ntask.on('change', function(model) {\n  console.log('Model changed');\n});\n\ntask.set({ title: 'Updated Task' }); //Triggers 'change' on model AND collection\n```\n\n### Listening for Events\n\nUse the `on()` method (or its alias, `bind()`) to listen for events.  It takes the event name, a callback function, and an optional context (the `this` value within the callback) as arguments.\n\n```javascript\nmyObject.on('anotherCustomEvent', function() {\n  console.log('Another custom event triggered!');\n}, this); // 'this' will refer to the global scope in this example, unless specified otherwise.\n\nmyObject.trigger('anotherCustomEvent');\n\n//Using bind():\nmyObject.bind('yetAnotherEvent', ()=>{console.log('Yet another event!')});\nmyObject.trigger('yetAnotherEvent');\n```\n\nYou can listen for multiple events at once using a space-separated string:\n\n```javascript\nmyObject.on('event1 event2', function(eventName) {\n    console.log('Event triggered:', eventName)\n});\nmyObject.trigger('event1');\nmyObject.trigger('event2');\n```\n\n\n### Triggering Events\n\nUse the `trigger()` method to trigger an event.  You can pass additional arguments along with the event name, and these arguments will be passed to the event listeners.\n\n```javascript\nmyObject.trigger('myCustomEvent', 'Argument 1', 'Argument 2');\n```\n\n### `off` Method\n\nUse the `off()` method (or its alias, `unbind()`) to stop listening for events. You can remove all listeners for a specific event, all listeners for all events on an object, or a specific listener for a specific event.\n\n```javascript\n// Remove all listeners for 'myCustomEvent':\nmyObject.off('myCustomEvent');\n\n//Remove a specific listener:\nvar listener = function(){console.log(\"I'm a listener\")};\nmyObject.on('myEvent', listener);\nmyObject.off('myEvent', listener);\n\n// Remove all listeners for all events:\nmyObject.off();\n```\n\nRemember that `off()` without arguments removes *all* listeners, so use with caution.  Always prefer targeted removal of specific listeners whenever possible to prevent unexpected behavior.\n\n\n## Working with APIs\n\nBackbone.js provides a flexible mechanism for interacting with APIs through its built-in `Backbone.sync` method.  This method handles the communication between your Backbone models and collections and a remote server.\n\n### Making AJAX Requests with Backbone.sync\n\nBy default, `Backbone.sync` uses `$.ajax` (if jQuery is included) to make AJAX requests to a server.  `Backbone.sync` handles the different HTTP verbs (GET, POST, PUT, DELETE) based on the method being called on the model or collection (`fetch`, `save`, `create`, `destroy`).  The URL for the request is determined by the model's or collection's `url` property.\n\n```javascript\n//Model\nvar Task = Backbone.Model.extend({\n    urlRoot: '/tasks'\n});\n\nvar task = new Task({title: \"My Task\"});\ntask.save().then(function(response){\n    console.log(\"Task saved:\", response);\n}, function(error){\n    console.error(\"Error saving task:\", error);\n});\n\n//Collection\nvar TaskList = Backbone.Collection.extend({\n    model: Task,\n    url: '/tasks'\n});\n\nvar tasks = new TaskList();\ntasks.fetch().then(function(response){\n    console.log(\"Tasks fetched:\", response);\n}, function(error){\n    console.error(\"Error fetching tasks:\", error);\n});\n\n```\n\n### Customizing Backbone.sync\n\nYou can customize `Backbone.sync` to use different HTTP libraries or to add custom logic, such as authentication or error handling.  You can override `Backbone.sync` globally or on a per-model/collection basis.\n\n```javascript\n//Global override:\nBackbone.sync = function(method, model, options) {\n  // Custom logic for all sync calls\n  console.log('Custom sync function called');\n  //You can use fetch, save, etc. here with custom implementation.\n};\n\n//Per-model/Collection override\nvar MyModel = Backbone.Model.extend({\n    sync: function(method, model, options){\n        //Custom sync logic for MyModel\n    }\n});\n```\n\n\n### Using RESTful APIs\n\nBackbone.js naturally integrates with RESTful APIs.  The default behavior of `Backbone.sync` aligns well with standard REST conventions:\n\n* **`fetch()`:**  Uses a `GET` request to retrieve data from the server.\n* **`save()`:**  Uses a `POST` request for creating new models and a `PUT` request for updating existing models.\n* **`create()`:** Uses a `POST` request to create a new model on the server.\n* **`destroy()`:** Uses a `DELETE` request to remove a model from the server.\n\nEnsure your server-side API adheres to RESTful principles for seamless integration with Backbone.\n\n\n### Handling Errors\n\nErrors during AJAX requests can be handled using the `error` callback function within the `options` object passed to `Backbone.sync`.  You can inspect the error object to determine the cause and react accordingly.\n\n```javascript\ntask.save({}, {\n  error: function(model, response, options) {\n    console.error('Error saving task:', response.responseText);\n    //Display user-friendly error message\n  }\n});\n```\n\n### Authentication and Authorization\n\nAuthentication and authorization are usually handled by intercepting requests before they reach `Backbone.sync`.  You might implement this using middleware on your server or by creating a custom `Backbone.sync` function that adds authentication headers or tokens to every request.  Libraries such as `axios` offer features such as interceptors which makes this simpler.  Examples below use a hypothetical `authToken` variable:\n\n```javascript\n//Custom sync with authentication\nBackbone.sync = function(method, model, options) {\n    var authToken = localStorage.getItem('authToken');\n    var headers = {\n        'Authorization': 'Bearer ' + authToken\n    }\n    options.headers = headers;\n    return Backbone.ajax(method, model, options);\n};\n\n//Or using axios interceptors:\naxios.interceptors.request.use(config => {\n    config.headers.Authorization = `Bearer ${localStorage.getItem('authToken')}`;\n    return config;\n});\n```\n\nRemember to handle token expiration and refresh appropriately.  Consider using a library that simplifies authentication and authorization management.\n\n\n## Advanced Topics\n\n### Backbone.Marionette (optional)\n\nBackbone.Marionette is a popular extension to Backbone.js that provides additional structure and components for building more complex applications.  It offers features such as composite views, regions, and application organization patterns (like a controller), which can significantly improve the maintainability and scalability of your Backbone applications.  It simplifies structuring your application into reusable components and handling complex view hierarchies.  While not strictly required, Marionette is highly recommended for larger projects.\n\n\n### Backbone.Relational (optional)\n\nBackbone.Relational is another popular add-on that enhances Backbone.js by providing support for managing relationships between models.  It simplifies the creation and management of relationships such as one-to-one, one-to-many, and many-to-many, which are common in most data models. This improves data integrity and reduces the need for manual handling of these relationships in your code.  Again, this is optional but highly recommended for applications with complex data relationships.\n\n\n### Testing with Backbone\n\nTesting is crucial for building robust and maintainable Backbone.js applications.  Popular JavaScript testing frameworks like Jasmine, Mocha, and Jest are well-suited for testing Backbone code. You can test models, collections, views, and routers in isolation or as part of an integrated system.  Focus on unit testing individual components and integration tests to ensure the components work correctly together.  Consider using tools like Sinon.JS for mocking and spying on dependencies during testing.\n\n\n### Debugging Tips\n\nDebugging Backbone applications can be challenging. Here are some useful debugging tips:\n\n* **Use your browser's developer tools:** The console, debugger, and network tabs are invaluable for inspecting variables, setting breakpoints, and examining network requests.\n* **Log strategically:**  Use `console.log()` statements to track the flow of your application and inspect data values at critical points.\n* **Use a debugger:** Stepping through your code line by line helps identify the exact source of errors.\n* **Simplify your code:** Break down complex logic into smaller, more manageable functions to make debugging easier.\n* **Check for null or undefined values:** A frequent source of errors is using null or undefined values unexpectedly.\n* **Inspect event listeners:** Make sure you're not attaching unnecessary or duplicate listeners, which can cause unexpected behavior or memory leaks.\n* **Use a linter:**  A linter can help catch potential errors and enforce coding style consistency.\n\n\n### Best Practices\n\n* **Keep models lean:**  Models should primarily manage data and only include essential logic.\n* **Use meaningful event names:** Choose descriptive event names to improve code readability and maintainability.\n* **Favor composition over inheritance:**  Compose views and other components to create more flexible and reusable code rather than relying heavily on inheritance.\n* **Follow the DRY principle (Don't Repeat Yourself):**  Refactor repetitive code into reusable functions or modules.\n* **Write clean and well-documented code:**  Use comments and meaningful variable names to make your code easier to understand and maintain.\n* **Test your code thoroughly:**  Write unit tests for models, collections, and views to ensure their correctness and prevent regressions.\n\n\n### Performance Optimization\n\nFor large and complex Backbone applications, consider these optimization strategies:\n\n* **Use event delegation:**  Attach event listeners to parent elements instead of individual child elements.\n* **Throttle and debounce events:** Reduce the frequency of event handling for performance-sensitive events like resizing and scrolling.  Underscore.js provides helper functions (`_.throttle` and `_.debounce`).\n* **Use efficient DOM manipulation techniques:**  Minimize direct DOM manipulation.  Use jQuery's efficient methods where appropriate.\n* **Optimize rendering:** Avoid unnecessary re-renders by carefully managing when and how views are updated. Use techniques such as partial re-rendering or virtualization for large lists.\n* **Use a build system:**  Use a build system (Webpack, Parcel, Rollup) to optimize and minify your code for production.\n* **Lazy loading:** Avoid loading unnecessary resources until needed.\n* **Consider using a framework like Preact or React:**  For extremely demanding applications, explore migrating to a more performant framework. While Backbone offers a good balance of structure and lightweight nature, more modern frameworks are designed for optimal performance on very large scale projects.\n\n\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **Model:**  A Backbone object that represents a single record in your application's data.  It contains attributes (data) and methods for manipulating that data.\n\n* **Collection:** A Backbone object that manages a set of models.  It provides methods for adding, removing, and manipulating models as a group.\n\n* **View:** A Backbone object that represents a portion of the user interface.  It renders data from models and collections and handles user interactions.\n\n* **Router:** A Backbone object that handles URL routing and navigation within the application.  It maps URLs to specific views and actions.\n\n* **Event:** A notification that is triggered by a Backbone object to signal a change in state or data.  Other objects can listen for these events and react accordingly.\n\n* **Event Listener:** A function that is registered to listen for a specific event.  When the event is triggered, the listener function is executed.\n\n* **Templating:** The process of generating HTML dynamically from data using a template engine (e.g., Underscore.js templates).\n\n* **RESTful API:** A web API that conforms to REST architectural constraints, using standard HTTP methods (GET, POST, PUT, DELETE) to interact with resources.\n\n* **AJAX (Asynchronous JavaScript and XML):** A technique for making asynchronous HTTP requests to a server without reloading the entire page.  Backbone uses AJAX extensively to communicate with APIs.\n\n* **Backbone.sync:**  Backbone's default method for making AJAX requests to a server.  It handles different HTTP methods based on model/collection operations.\n\n* **MVC (Model-View-Controller):** A software design pattern that separates concerns into three interconnected parts: Model (data), View (presentation), and Controller (logic). Backbone implements a variation of this pattern.\n\n\n### Useful Resources\n\n* **Backbone.js Official Website:** [https://backbonejs.org/](https://backbonejs.org/) - The official documentation and resources for Backbone.js.\n\n* **Backbone.js GitHub Repository:** [https://github.com/jashkenas/backbone](https://github.com/jashkenas/backbone) - The source code and issue tracker for Backbone.js.\n\n* **Stack Overflow:** Search Stack Overflow for answers to specific questions or problems related to Backbone.js.\n\n* **Underscore.js:** [https://underscorejs.org/](https://underscorejs.org/) – Documentation for Underscore.js, a utility library commonly used with Backbone.js.\n\n\n### Further Learning\n\nTo deepen your understanding of Backbone.js and its capabilities, consider the following:\n\n* **Working through tutorials:** Numerous online tutorials and screencasts cover various aspects of Backbone.js development.  Search for \"Backbone.js tutorial\" on YouTube or your favorite learning platform.\n\n* **Building a sample application:**  The best way to learn is by doing.  Start with a small project and gradually add complexity.\n\n* **Exploring advanced topics:** Once you're comfortable with the basics, delve into more advanced topics such as Backbone.Marionette, Backbone.Relational, and performance optimization techniques.\n\n* **Contributing to open-source projects:**  Contributing to open-source projects that use Backbone.js is a great way to gain experience and learn from other developers.\n\n* **Reading blog posts and articles:** Numerous blog posts and articles discuss best practices and advanced techniques for using Backbone.js.\n\n\nRemember that Backbone.js is a powerful but flexible framework.  The best approach to learning it involves hands-on experience and a willingness to explore its capabilities and associated tools.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"backbonejs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Backbone.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}