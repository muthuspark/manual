{"title":"iCheck - Documentation","markdown":{"yaml":{"title":"iCheck - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is iCheck?","containsRefs":false,"markdown":"\n\n\n\niCheck is a highly customizable jQuery plugin that enhances the standard checkbox and radio inputs with visually appealing and user-friendly custom skins. It replaces the default browser renderings with modern, consistent, and interactive elements, improving the overall user experience and providing developers with extensive control over styling and behavior.  iCheck offers a variety of pre-built skins, allowing for easy integration with different design themes, and also allows for complete customization through CSS and options.\n\n### Why use iCheck?\n\n* **Enhanced User Experience:** iCheck provides visually appealing and intuitive checkbox and radio inputs, leading to a more enjoyable user experience.  The improved click areas make them easier to interact with, especially on touch devices.\n\n* **Cross-Browser Consistency:** iCheck ensures consistent rendering across different browsers, eliminating inconsistencies in appearance and behavior that can occur with default browser styles.\n\n* **Customization:** iCheck offers a wide range of pre-defined skins and allows for extensive customization using CSS and plugin options. This ensures seamless integration with any website design.\n\n* **Ease of Use:** The plugin is straightforward to implement and use, requiring minimal coding.  Its intuitive API makes adding custom functionality relatively simple.\n\n* **Accessibility:**  While proper ARIA attributes should always be considered separately, iCheck's consistent and clearly defined visual states contribute to a more accessible experience.\n\n\n### Browser Compatibility\n\niCheck supports all major modern browsers including:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n* Internet Explorer 10+ (with limitations; some advanced features might not be fully supported)\n\n\nNote:  For older browsers, ensure you include appropriate polyfills for necessary features.  While iCheck strives for broad compatibility, the appearance and functionality might vary slightly depending on the browser and its rendering engine.\n\n### Getting Started: Installation and Setup\n\n1. **Include jQuery:** iCheck requires jQuery. Make sure you've included the jQuery library in your HTML file before including iCheck.  You can download it from [https://jquery.com/](https://jquery.com/) or use a CDN.  For example:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n```\n\n2. **Include iCheck:** Download the iCheck files (usually `icheck.min.js` and `icheck.min.css`) and place them in your project's directory.  Then include them in your HTML, after jQuery:\n\n```html\n<link rel=\"stylesheet\" href=\"icheck.min.css\">\n<script src=\"icheck.min.js\"></script>\n```\n\n3. **Initialize iCheck:** Use the `icheck()` method to initialize iCheck on your checkboxes and radio buttons.  You can apply it to all elements with a specific class or to individual elements:\n\n```html\n// Initialize all checkboxes with the class 'icheckbox_square-blue'\n$('input[type=\"checkbox\"]').iCheck({\n    checkboxClass: 'icheckbox_square-blue',\n    radioClass: 'iradio_square-blue'\n});\n\n// Initialize a specific checkbox\n$('#myCheckbox').iCheck({\n  checkboxClass: 'icheckbox_flat-green'\n});\n```\n\nRemember to replace `icheckbox_square-blue` and `iradio_square-blue` with the desired skin class names from the iCheck documentation.  Consult the iCheck documentation for a complete list of available skin classes and options to further customize your checkboxes and radio buttons.\n\n\n## Basic Usage\n\n### Basic Checkbox Styling\n\nTo style checkboxes using iCheck, simply include the iCheck CSS file and then call the `iCheck()` method on your checkbox inputs.  iCheck provides several pre-defined skin classes that you can use to quickly style your checkboxes.  For example, to use the \"square-blue\" skin:\n\n1. **Include iCheck CSS:** Ensure you've included the iCheck CSS file in your HTML (as described in the \"Getting Started\" section).\n\n2. **Apply iCheck:**  Use the following jQuery code to apply the \"square-blue\" skin to all checkboxes on your page:\n\n```javascript\n$('input[type=\"checkbox\"]').iCheck({\n  checkboxClass: 'icheckbox_square-blue'\n});\n```\n\nThis will replace the default checkbox rendering with the \"square-blue\" styled version.  You can find other skin class names in the iCheck documentation or by inspecting the provided CSS file.\n\n\n### Basic Radio Button Styling\n\nStyling radio buttons is similar to styling checkboxes.  You use the `radioClass` option within the `iCheck()` method to specify the desired skin class. For instance, to use the \"flat-green\" skin for all radio buttons:\n\n```javascript\n$('input[type=\"radio\"]').iCheck({\n  radioClass: 'iradio_flat-green'\n});\n```\n\nThis will replace the default radio button appearance with the visually enhanced \"flat-green\" version.  Ensure that the corresponding CSS class exists in your included iCheck CSS file.\n\n\n### Customization Options\n\nThe `iCheck()` method accepts several options to further customize the appearance and behavior.  Some key options include:\n\n* `checkboxClass`:  Specifies the CSS class for checkboxes (e.g., `'icheckbox_square-red'`).\n* `radioClass`: Specifies the CSS class for radio buttons (e.g., `'iradio_flat-blue'`).\n* `increaseArea`:  Increases the clickable area around the checkbox/radio button, making them easier to interact with.  Accepts a numeric value (e.g., `increaseArea: '20%'`).\n* `handle`:  Allows specifying a custom handle class. This allows for separate control over styling of the handle (the check/radio mark).\n* `insert`:  Specifies the insertion method for iCheck elements, either 'prepend' or 'append' to the input element.\n* `inheritClass`: Inherits the class of the input element in the newly rendered checkbox/radio.\n\nRefer to the full iCheck documentation for a comprehensive list of options and their functionalities.\n\n\n### Styling with Custom Classes\n\nWhile iCheck provides many pre-defined skins, you can create your own custom styles.  Create custom CSS classes and assign them to the `checkboxClass` and `radioClass` options. For example:\n\n\n```css\n/* my-custom-checkbox.css */\n.my-custom-checkbox {\n  background-color: #f00; /*Example styling*/\n  border: 2px solid #000;\n}\n\n.my-custom-checkbox.checked {\n  background-color: #0f0; /*Example styling for checked state*/\n}\n```\n\n```javascript\n$('input[type=\"checkbox\"]').iCheck({\n  checkboxClass: 'my-custom-checkbox'\n});\n```\n\nThis allows for complete control over the visual presentation.  Remember that the structure of the generated HTML by iCheck needs to be considered when writing your custom styles. Inspect the rendered HTML elements to target the correct elements for styling.\n\n\n### Default Themes\n\niCheck ships with a collection of pre-defined themes offering various styles.  These are generally identified by their class names, such as:\n\n* `icheckbox_square-blue`, `iradio_square-blue`\n* `icheckbox_square-red`, `iradio_square-red`\n* `icheckbox_flat-green`, `iradio_flat-green`\n* `icheckbox_flat-blue`, `iradio_flat-blue`\n* and many more...\n\n\nThese themes provide a starting point for styling and can be further customized using your own CSS.  Refer to the iCheck documentation and the included CSS file for a complete list and examples.\n\n\n## Advanced Customization\n\n### Customizing Colors and Appearance\n\nBeyond using pre-defined skins, you can deeply customize iCheck's colors and appearance through CSS.  Inspect the generated HTML after applying iCheck to identify the specific elements (e.g., `.icheckbox_square`, `.icheckbox_square-checked`, etc.) and target them with your custom CSS rules.  For example, to change the background color of a checked \"square-blue\" checkbox:\n\n```css\n.icheckbox_square-blue.checked {\n  background-color: #FF0000; /* Red */\n}\n```\n\nYou can similarly adjust borders, text colors, and other visual aspects. Remember that the class names might vary slightly depending on the specific skin you are using.  Always inspect the rendered HTML to ensure you're targeting the correct elements.\n\n\n### Using Icons\n\niCheck doesn't directly support embedding arbitrary icons.  However, you can achieve icon-based checkboxes and radio buttons by combining iCheck with an icon library like Font Awesome or similar.  You would need to:\n\n1. **Include the icon library:** Add the necessary CSS and/or JavaScript files for your chosen icon library to your project.\n\n2. **Style with icons:**  Use CSS to position icons within the iCheck elements. This often involves using pseudo-elements (`:before` or `:after`) on the iCheck container elements.  For example:\n\n```css\n.icheckbox_square-icon.checked:after {\n    content: \"\\f00c\"; /* FontAwesome check icon */\n    font-family: FontAwesome;\n    position: absolute;\n    /* ... other positioning styles ... */\n}\n```\n\nThis approach requires careful adjustment of positioning and sizing to ensure proper alignment with the iCheck elements.\n\n\n### Creating Custom Skins\n\nTo create a completely custom skin, you'll need to understand the structure of iCheck's generated HTML and create your own CSS to style it. This involves creating new class names and defining all the necessary states (checked, unchecked, disabled, etc.) in your CSS file.  It's advisable to start by copying and modifying an existing iCheck skin as a template, making adjustments to suit your specific design needs. This avoids recreating all the necessary elements from scratch.\n\n\n### Advanced Styling with CSS\n\nAdvanced CSS techniques like pseudo-classes (`:hover`, `:focus`, `:disabled`) and pseudo-elements (`:before`, `:after`) can be used to add even more intricate styling. You can use these to enhance the visual feedback of user interactions, such as adding hover effects or visual indicators for disabled elements.  Remember to consider the specificity of your CSS selectors to ensure your rules override iCheck's default styles as intended.\n\n\n### Handling Different Input Types\n\nWhile iCheck primarily focuses on checkboxes and radio buttons,  you might need to adapt the approach for other input types.  The core functionality of iCheck is tied to those specific input types, so directly applying `iCheck()` to other input types won't work.  You could, however, create custom styling for other input types using CSS, potentially mimicking the visual style of iCheck checkboxes or radio buttons for consistency.  This would require manually creating the visual elements and handling the necessary JavaScript interactions.  You would not be leveraging the core functionality of the iCheck plugin itself for these elements.\n\n\n## Working with iCheck\n\n### Event Handling\n\niCheck triggers several events that you can use to respond to user interactions and changes in the checkbox or radio button state.  These events are triggered on the underlying input element, *not* the iCheck-generated elements.  To listen for these events, use jQuery's `.on()` method:\n\n* **`ifChecked`:** Triggered when a checkbox or radio button is checked.\n* **`ifUnchecked`:** Triggered when a checkbox or radio button is unchecked.\n* **`ifChanged`:** Triggered whenever the checked state changes (either checked or unchecked).\n\n\nExample:\n\n```javascript\n$('input[type=\"checkbox\"]').on('ifChecked', function(event){\n    console.log('Checkbox checked:', this.id);\n    // Perform actions when checkbox is checked\n});\n\n$('input[type=\"radio\"]').on('ifChanged', function(event){\n    console.log('Radio button changed:', this.value);\n    // Perform actions when radio button state changes\n});\n```\n\nNote that the `event` object provides access to information about the triggering element.  You should use `this` to reference the original input element within the event handler, not the iCheck-generated elements.\n\n\n### Programmatic Control\n\nYou can control the checked state of checkboxes and radio buttons programmatically using iCheck's methods:\n\n* **`iCheck('check')`:** Checks the checkbox or radio button.\n* **`iCheck('uncheck')`:** Unchecks the checkbox or radio button.\n* **`iCheck('toggle')`:** Toggles the checked state of the checkbox or radio button.\n* **`iCheck('state')`:**  Gets the current checked state (true or false).\n\n\nExample:\n\n```javascript\n$('#myCheckbox').iCheck('check'); // Checks the checkbox with ID 'myCheckbox'\n$('#myRadio').iCheck('uncheck'); // Unchecks the radio button\n\nlet isChecked = $('#anotherCheckbox').iCheck('state'); // Get the state\nconsole.log(\"Checkbox is checked:\", isChecked);\n```\n\n\n### Working with Forms\n\niCheck seamlessly integrates with HTML forms.  When a checkbox or radio button styled with iCheck is submitted as part of a form, the underlying input element's value is included in the form data. No special handling is needed from the iCheck plugin's perspective. You handle the form submission as you normally would.  The values are correctly submitted even though the visual representation has been altered.\n\n\n### Integration with JavaScript Frameworks\n\niCheck is designed to work with jQuery and can be easily integrated into projects using other JavaScript frameworks such as React, Angular, or Vue.js.  The basic approach is consistent:\n\n1. **Include iCheck:** Include the iCheck CSS and JavaScript files in your project.\n\n2. **Initialize iCheck:** Use jQuery to call the `iCheck()` method after the DOM is fully loaded.  This usually involves using appropriate lifecycle hooks provided by the framework.  For instance, in React, you might initialize iCheck within a `componentDidMount()` method.  The core interaction with iCheck remains the same; you utilize jQuery to apply iCheck to your input elements.\n\n3. **Manage state:** Handle the state of the checkboxes/radio buttons within your framework's state management system.   Update your framework's state when iCheck events are fired, and trigger iCheck's programmatic methods (check, uncheck, toggle) as needed to update the UI.\n\n\n### Accessibility Considerations\n\nWhile iCheck enhances the visual appearance, ensure you also address accessibility:\n\n* **ARIA attributes:**  Add appropriate ARIA attributes (like `aria-checked`, `aria-label`, `aria-labelledby`) to the underlying input elements to provide assistive technologies with semantic information.  iCheck does *not* automatically add these; you are responsible for adding them to your inputs.\n\n* **Keyboard navigation:** Verify that checkboxes and radio buttons are easily accessible and navigable using the keyboard.  iCheck typically doesn't interfere with default keyboard interactions, but confirm this during testing.\n\n* **Sufficient contrast:**  Ensure sufficient color contrast between the checkbox/radio button elements and their background to meet accessibility guidelines.\n\n* **Focus styling:**  Provide clear visual feedback when the checkbox or radio button receives focus.  You can do this using CSS to adjust the appearance when the element is `:focus`.  Remember that users relying on keyboard navigation need clear visual indicators of focus.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **iCheck not working:**  Double-check that you've included jQuery and iCheck's CSS and JavaScript files correctly, in the proper order (jQuery first, then iCheck), and that the paths are accurate.  Inspect your browser's developer console for any JavaScript errors.  Ensure the `iCheck()` method is called after the DOM is fully loaded.\n\n* **Incorrect styling:** Verify that you're using the correct skin class names in the `checkboxClass` and `radioClass` options of the `iCheck()` method. Inspect the generated HTML to ensure the classes are applied correctly to the iCheck elements.  Check for CSS conflicts (see below).\n\n* **Events not firing:** Confirm that you're attaching event listeners to the *underlying input elements*, not the iCheck-generated elements.  Use the `ifChecked`, `ifUnchecked`, or `ifChanged` events.  Examine the browser console for any errors that might prevent event handlers from executing.\n\n* **Programmatic control not working:**  Ensure that you're using the correct iCheck methods (`iCheck('check')`, `iCheck('uncheck')`, `iCheck('toggle')`) and that you're targeting the correct elements using the correct jQuery selectors.\n\n\n### Debugging Techniques\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML and CSS.  Check for any JavaScript errors in the console.  Inspect the network tab to ensure iCheck's files are loaded correctly.\n\n* **jQuery Console:** If you're using the jQuery console, you can use this to examine your selectors and verify that you're targeting the intended elements.\n\n* **Simplify:**  To isolate problems, create a minimal HTML page with only the necessary code to reproduce the issue. This helps in identifying potential conflicts or errors in your code.\n\n* **Comment out code:** Temporarily comment out sections of your CSS or JavaScript code to determine which parts are causing problems.\n\n\n### Troubleshooting CSS Conflicts\n\nCSS conflicts often arise when your custom styles or other CSS rules override iCheck's styles unintentionally.  To resolve this:\n\n* **Specificity:** Use more specific CSS selectors to target iCheck's elements accurately, ensuring your styles override the defaults correctly.  You might need to use ID selectors or more specific class names.\n\n* **!important:** Use the `!important` flag cautiously to force your styles to override others.  This is often a last resort, as it can lead to maintenance difficulties.  It's generally better to use more specific selectors.\n\n* **Inspect Element:** Use your browser's developer tools to inspect the applied CSS rules on the iCheck elements.  This will help identify which rules are taking precedence and how to adjust your styles accordingly.\n\n* **CSS order:** The order in which you include your CSS files matters.  Ensure that your custom stylesheets are included after iCheck's stylesheet to override them.\n\n\n### Compatibility Problems\n\n* **Older Browsers:** iCheck might have limitations in older browsers (like Internet Explorer versions prior to 10).  Consult the iCheck documentation for information on supported browsers.  Consider using a polyfill for missing features if necessary, though iCheck itself doesn't directly offer polyfills.\n\n* **jQuery version:** Make sure that you're using a compatible version of jQuery.  Refer to the iCheck documentation for compatibility information.\n\n* **Other libraries:** Conflicts can occur with other JavaScript libraries.  If you suspect a conflict, try disabling other libraries temporarily to determine if they are the source of the problem.  Pay close attention to any jQuery plugins that might interact with checkboxes or radio buttons.\n\n\n## API Reference\n\nThis section provides a detailed reference for iCheck's API, including methods, options, events, and properties.  Note that the exact availability and behavior of certain features might depend on the version of iCheck you are using.  Always consult the latest documentation for the most up-to-date information.\n\n### Methods\n\niCheck provides several methods to control and interact with the plugin:\n\n* **`.iCheck('check')`:** Checks the checkbox or radio button.\n* **`.iCheck('uncheck')`:** Unchecks the checkbox or radio button.\n* **`.iCheck('toggle')`:** Toggles the checked state (between checked and unchecked).\n* **`.iCheck('disable')`:** Disables the checkbox or radio button.\n* **`.iCheck('enable')`:** Enables the checkbox or radio button.\n* **`.iCheck('destroy')`:** Removes iCheck styling and functionality from the element, restoring the default browser rendering.\n* **`.iCheck('update')`:** Updates the visual state of the checkbox or radio button to reflect its current checked state.  Useful if the state has changed externally.\n* **`.iCheck('state')`:** Returns the current checked state of the checkbox or radio button as a boolean value (`true` for checked, `false` for unchecked).\n\n\nThese methods are called using jQuery's chaining syntax on the element(s) you wish to manipulate.  For example:  `$('#myCheckbox').iCheck('check');`\n\n\n### Options\n\nThese options are passed as a single object to the `iCheck()` method during initialization.\n\n* **`checkboxClass` (string):**  Specifies the CSS class name to use for checkboxes.  (e.g., `'icheckbox_square-blue'`).  Required unless using only `radioClass`.\n* **`radioClass` (string):**  Specifies the CSS class name to use for radio buttons.  (e.g., `'iradio_square-blue'`).  Required unless using only `checkboxClass`.\n* **`increaseArea` (string or number):** Increases the clickable area around the checkbox/radio button.  Can be a percentage string (e.g., `'20%'`) or a numeric value in pixels.\n* **`handle` (string):**  Specifies a custom CSS class for the handle (the checkmark or dot).\n* **`insert` (string):** Specifies where to insert the iCheck elements relative to the input element.  Either `'prepend'` or `'append'`.\n* **`inheritClass` (boolean):**  If `true`, the classes from the input element are inherited by the iCheck wrapper element. Defaults to `false`.\n* **`inheritID` (boolean):** If `true`, the ID from the input element is inherited by the iCheck wrapper element. Defaults to `false`.\n* **`label` (string or object):**  Allows you to specify a label element associated with the checkbox/radio. This can either be a selector string or an object containing `selector` and `insert` properties.\n\n\n### Events\n\niCheck triggers several events on the *underlying input element*:\n\n* **`ifChecked`:** Fired when the checkbox or radio button is checked.  The event handler receives an event object.\n* **`ifUnchecked`:** Fired when the checkbox or radio button is unchecked. The event handler receives an event object.\n* **`ifChanged`:** Fired whenever the checked state changes (either checked or unchecked). The event handler receives an event object.\n* **`ifCreated`:** Fired after the iCheck element is created.  This event can be used for further post-initialization actions. The event handler receives an event object.\n\n\nListen for these events using jQuery's `.on()` method.\n\n\n### Properties\n\niCheck doesn't expose public properties directly in the way that some other plugins might.  The `iCheck('state')` method provides access to the checked state, but there aren't other properties that can be accessed directly.  Instead, you can access relevant information through the underlying input element using jQuery. For example, to access the value of a radio button, you'd use `$('#myRadio').val()`.  The plugin itself is primarily focused on the visual modification and event handling, not on exposing specific internal properties for direct manipulation.\n\n","srcMarkdownNoYaml":"\n\n\n### What is iCheck?\n\niCheck is a highly customizable jQuery plugin that enhances the standard checkbox and radio inputs with visually appealing and user-friendly custom skins. It replaces the default browser renderings with modern, consistent, and interactive elements, improving the overall user experience and providing developers with extensive control over styling and behavior.  iCheck offers a variety of pre-built skins, allowing for easy integration with different design themes, and also allows for complete customization through CSS and options.\n\n### Why use iCheck?\n\n* **Enhanced User Experience:** iCheck provides visually appealing and intuitive checkbox and radio inputs, leading to a more enjoyable user experience.  The improved click areas make them easier to interact with, especially on touch devices.\n\n* **Cross-Browser Consistency:** iCheck ensures consistent rendering across different browsers, eliminating inconsistencies in appearance and behavior that can occur with default browser styles.\n\n* **Customization:** iCheck offers a wide range of pre-defined skins and allows for extensive customization using CSS and plugin options. This ensures seamless integration with any website design.\n\n* **Ease of Use:** The plugin is straightforward to implement and use, requiring minimal coding.  Its intuitive API makes adding custom functionality relatively simple.\n\n* **Accessibility:**  While proper ARIA attributes should always be considered separately, iCheck's consistent and clearly defined visual states contribute to a more accessible experience.\n\n\n### Browser Compatibility\n\niCheck supports all major modern browsers including:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n* Internet Explorer 10+ (with limitations; some advanced features might not be fully supported)\n\n\nNote:  For older browsers, ensure you include appropriate polyfills for necessary features.  While iCheck strives for broad compatibility, the appearance and functionality might vary slightly depending on the browser and its rendering engine.\n\n### Getting Started: Installation and Setup\n\n1. **Include jQuery:** iCheck requires jQuery. Make sure you've included the jQuery library in your HTML file before including iCheck.  You can download it from [https://jquery.com/](https://jquery.com/) or use a CDN.  For example:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n```\n\n2. **Include iCheck:** Download the iCheck files (usually `icheck.min.js` and `icheck.min.css`) and place them in your project's directory.  Then include them in your HTML, after jQuery:\n\n```html\n<link rel=\"stylesheet\" href=\"icheck.min.css\">\n<script src=\"icheck.min.js\"></script>\n```\n\n3. **Initialize iCheck:** Use the `icheck()` method to initialize iCheck on your checkboxes and radio buttons.  You can apply it to all elements with a specific class or to individual elements:\n\n```html\n// Initialize all checkboxes with the class 'icheckbox_square-blue'\n$('input[type=\"checkbox\"]').iCheck({\n    checkboxClass: 'icheckbox_square-blue',\n    radioClass: 'iradio_square-blue'\n});\n\n// Initialize a specific checkbox\n$('#myCheckbox').iCheck({\n  checkboxClass: 'icheckbox_flat-green'\n});\n```\n\nRemember to replace `icheckbox_square-blue` and `iradio_square-blue` with the desired skin class names from the iCheck documentation.  Consult the iCheck documentation for a complete list of available skin classes and options to further customize your checkboxes and radio buttons.\n\n\n## Basic Usage\n\n### Basic Checkbox Styling\n\nTo style checkboxes using iCheck, simply include the iCheck CSS file and then call the `iCheck()` method on your checkbox inputs.  iCheck provides several pre-defined skin classes that you can use to quickly style your checkboxes.  For example, to use the \"square-blue\" skin:\n\n1. **Include iCheck CSS:** Ensure you've included the iCheck CSS file in your HTML (as described in the \"Getting Started\" section).\n\n2. **Apply iCheck:**  Use the following jQuery code to apply the \"square-blue\" skin to all checkboxes on your page:\n\n```javascript\n$('input[type=\"checkbox\"]').iCheck({\n  checkboxClass: 'icheckbox_square-blue'\n});\n```\n\nThis will replace the default checkbox rendering with the \"square-blue\" styled version.  You can find other skin class names in the iCheck documentation or by inspecting the provided CSS file.\n\n\n### Basic Radio Button Styling\n\nStyling radio buttons is similar to styling checkboxes.  You use the `radioClass` option within the `iCheck()` method to specify the desired skin class. For instance, to use the \"flat-green\" skin for all radio buttons:\n\n```javascript\n$('input[type=\"radio\"]').iCheck({\n  radioClass: 'iradio_flat-green'\n});\n```\n\nThis will replace the default radio button appearance with the visually enhanced \"flat-green\" version.  Ensure that the corresponding CSS class exists in your included iCheck CSS file.\n\n\n### Customization Options\n\nThe `iCheck()` method accepts several options to further customize the appearance and behavior.  Some key options include:\n\n* `checkboxClass`:  Specifies the CSS class for checkboxes (e.g., `'icheckbox_square-red'`).\n* `radioClass`: Specifies the CSS class for radio buttons (e.g., `'iradio_flat-blue'`).\n* `increaseArea`:  Increases the clickable area around the checkbox/radio button, making them easier to interact with.  Accepts a numeric value (e.g., `increaseArea: '20%'`).\n* `handle`:  Allows specifying a custom handle class. This allows for separate control over styling of the handle (the check/radio mark).\n* `insert`:  Specifies the insertion method for iCheck elements, either 'prepend' or 'append' to the input element.\n* `inheritClass`: Inherits the class of the input element in the newly rendered checkbox/radio.\n\nRefer to the full iCheck documentation for a comprehensive list of options and their functionalities.\n\n\n### Styling with Custom Classes\n\nWhile iCheck provides many pre-defined skins, you can create your own custom styles.  Create custom CSS classes and assign them to the `checkboxClass` and `radioClass` options. For example:\n\n\n```css\n/* my-custom-checkbox.css */\n.my-custom-checkbox {\n  background-color: #f00; /*Example styling*/\n  border: 2px solid #000;\n}\n\n.my-custom-checkbox.checked {\n  background-color: #0f0; /*Example styling for checked state*/\n}\n```\n\n```javascript\n$('input[type=\"checkbox\"]').iCheck({\n  checkboxClass: 'my-custom-checkbox'\n});\n```\n\nThis allows for complete control over the visual presentation.  Remember that the structure of the generated HTML by iCheck needs to be considered when writing your custom styles. Inspect the rendered HTML elements to target the correct elements for styling.\n\n\n### Default Themes\n\niCheck ships with a collection of pre-defined themes offering various styles.  These are generally identified by their class names, such as:\n\n* `icheckbox_square-blue`, `iradio_square-blue`\n* `icheckbox_square-red`, `iradio_square-red`\n* `icheckbox_flat-green`, `iradio_flat-green`\n* `icheckbox_flat-blue`, `iradio_flat-blue`\n* and many more...\n\n\nThese themes provide a starting point for styling and can be further customized using your own CSS.  Refer to the iCheck documentation and the included CSS file for a complete list and examples.\n\n\n## Advanced Customization\n\n### Customizing Colors and Appearance\n\nBeyond using pre-defined skins, you can deeply customize iCheck's colors and appearance through CSS.  Inspect the generated HTML after applying iCheck to identify the specific elements (e.g., `.icheckbox_square`, `.icheckbox_square-checked`, etc.) and target them with your custom CSS rules.  For example, to change the background color of a checked \"square-blue\" checkbox:\n\n```css\n.icheckbox_square-blue.checked {\n  background-color: #FF0000; /* Red */\n}\n```\n\nYou can similarly adjust borders, text colors, and other visual aspects. Remember that the class names might vary slightly depending on the specific skin you are using.  Always inspect the rendered HTML to ensure you're targeting the correct elements.\n\n\n### Using Icons\n\niCheck doesn't directly support embedding arbitrary icons.  However, you can achieve icon-based checkboxes and radio buttons by combining iCheck with an icon library like Font Awesome or similar.  You would need to:\n\n1. **Include the icon library:** Add the necessary CSS and/or JavaScript files for your chosen icon library to your project.\n\n2. **Style with icons:**  Use CSS to position icons within the iCheck elements. This often involves using pseudo-elements (`:before` or `:after`) on the iCheck container elements.  For example:\n\n```css\n.icheckbox_square-icon.checked:after {\n    content: \"\\f00c\"; /* FontAwesome check icon */\n    font-family: FontAwesome;\n    position: absolute;\n    /* ... other positioning styles ... */\n}\n```\n\nThis approach requires careful adjustment of positioning and sizing to ensure proper alignment with the iCheck elements.\n\n\n### Creating Custom Skins\n\nTo create a completely custom skin, you'll need to understand the structure of iCheck's generated HTML and create your own CSS to style it. This involves creating new class names and defining all the necessary states (checked, unchecked, disabled, etc.) in your CSS file.  It's advisable to start by copying and modifying an existing iCheck skin as a template, making adjustments to suit your specific design needs. This avoids recreating all the necessary elements from scratch.\n\n\n### Advanced Styling with CSS\n\nAdvanced CSS techniques like pseudo-classes (`:hover`, `:focus`, `:disabled`) and pseudo-elements (`:before`, `:after`) can be used to add even more intricate styling. You can use these to enhance the visual feedback of user interactions, such as adding hover effects or visual indicators for disabled elements.  Remember to consider the specificity of your CSS selectors to ensure your rules override iCheck's default styles as intended.\n\n\n### Handling Different Input Types\n\nWhile iCheck primarily focuses on checkboxes and radio buttons,  you might need to adapt the approach for other input types.  The core functionality of iCheck is tied to those specific input types, so directly applying `iCheck()` to other input types won't work.  You could, however, create custom styling for other input types using CSS, potentially mimicking the visual style of iCheck checkboxes or radio buttons for consistency.  This would require manually creating the visual elements and handling the necessary JavaScript interactions.  You would not be leveraging the core functionality of the iCheck plugin itself for these elements.\n\n\n## Working with iCheck\n\n### Event Handling\n\niCheck triggers several events that you can use to respond to user interactions and changes in the checkbox or radio button state.  These events are triggered on the underlying input element, *not* the iCheck-generated elements.  To listen for these events, use jQuery's `.on()` method:\n\n* **`ifChecked`:** Triggered when a checkbox or radio button is checked.\n* **`ifUnchecked`:** Triggered when a checkbox or radio button is unchecked.\n* **`ifChanged`:** Triggered whenever the checked state changes (either checked or unchecked).\n\n\nExample:\n\n```javascript\n$('input[type=\"checkbox\"]').on('ifChecked', function(event){\n    console.log('Checkbox checked:', this.id);\n    // Perform actions when checkbox is checked\n});\n\n$('input[type=\"radio\"]').on('ifChanged', function(event){\n    console.log('Radio button changed:', this.value);\n    // Perform actions when radio button state changes\n});\n```\n\nNote that the `event` object provides access to information about the triggering element.  You should use `this` to reference the original input element within the event handler, not the iCheck-generated elements.\n\n\n### Programmatic Control\n\nYou can control the checked state of checkboxes and radio buttons programmatically using iCheck's methods:\n\n* **`iCheck('check')`:** Checks the checkbox or radio button.\n* **`iCheck('uncheck')`:** Unchecks the checkbox or radio button.\n* **`iCheck('toggle')`:** Toggles the checked state of the checkbox or radio button.\n* **`iCheck('state')`:**  Gets the current checked state (true or false).\n\n\nExample:\n\n```javascript\n$('#myCheckbox').iCheck('check'); // Checks the checkbox with ID 'myCheckbox'\n$('#myRadio').iCheck('uncheck'); // Unchecks the radio button\n\nlet isChecked = $('#anotherCheckbox').iCheck('state'); // Get the state\nconsole.log(\"Checkbox is checked:\", isChecked);\n```\n\n\n### Working with Forms\n\niCheck seamlessly integrates with HTML forms.  When a checkbox or radio button styled with iCheck is submitted as part of a form, the underlying input element's value is included in the form data. No special handling is needed from the iCheck plugin's perspective. You handle the form submission as you normally would.  The values are correctly submitted even though the visual representation has been altered.\n\n\n### Integration with JavaScript Frameworks\n\niCheck is designed to work with jQuery and can be easily integrated into projects using other JavaScript frameworks such as React, Angular, or Vue.js.  The basic approach is consistent:\n\n1. **Include iCheck:** Include the iCheck CSS and JavaScript files in your project.\n\n2. **Initialize iCheck:** Use jQuery to call the `iCheck()` method after the DOM is fully loaded.  This usually involves using appropriate lifecycle hooks provided by the framework.  For instance, in React, you might initialize iCheck within a `componentDidMount()` method.  The core interaction with iCheck remains the same; you utilize jQuery to apply iCheck to your input elements.\n\n3. **Manage state:** Handle the state of the checkboxes/radio buttons within your framework's state management system.   Update your framework's state when iCheck events are fired, and trigger iCheck's programmatic methods (check, uncheck, toggle) as needed to update the UI.\n\n\n### Accessibility Considerations\n\nWhile iCheck enhances the visual appearance, ensure you also address accessibility:\n\n* **ARIA attributes:**  Add appropriate ARIA attributes (like `aria-checked`, `aria-label`, `aria-labelledby`) to the underlying input elements to provide assistive technologies with semantic information.  iCheck does *not* automatically add these; you are responsible for adding them to your inputs.\n\n* **Keyboard navigation:** Verify that checkboxes and radio buttons are easily accessible and navigable using the keyboard.  iCheck typically doesn't interfere with default keyboard interactions, but confirm this during testing.\n\n* **Sufficient contrast:**  Ensure sufficient color contrast between the checkbox/radio button elements and their background to meet accessibility guidelines.\n\n* **Focus styling:**  Provide clear visual feedback when the checkbox or radio button receives focus.  You can do this using CSS to adjust the appearance when the element is `:focus`.  Remember that users relying on keyboard navigation need clear visual indicators of focus.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **iCheck not working:**  Double-check that you've included jQuery and iCheck's CSS and JavaScript files correctly, in the proper order (jQuery first, then iCheck), and that the paths are accurate.  Inspect your browser's developer console for any JavaScript errors.  Ensure the `iCheck()` method is called after the DOM is fully loaded.\n\n* **Incorrect styling:** Verify that you're using the correct skin class names in the `checkboxClass` and `radioClass` options of the `iCheck()` method. Inspect the generated HTML to ensure the classes are applied correctly to the iCheck elements.  Check for CSS conflicts (see below).\n\n* **Events not firing:** Confirm that you're attaching event listeners to the *underlying input elements*, not the iCheck-generated elements.  Use the `ifChecked`, `ifUnchecked`, or `ifChanged` events.  Examine the browser console for any errors that might prevent event handlers from executing.\n\n* **Programmatic control not working:**  Ensure that you're using the correct iCheck methods (`iCheck('check')`, `iCheck('uncheck')`, `iCheck('toggle')`) and that you're targeting the correct elements using the correct jQuery selectors.\n\n\n### Debugging Techniques\n\n* **Browser Developer Tools:** Use your browser's developer tools (usually accessed by pressing F12) to inspect the HTML and CSS.  Check for any JavaScript errors in the console.  Inspect the network tab to ensure iCheck's files are loaded correctly.\n\n* **jQuery Console:** If you're using the jQuery console, you can use this to examine your selectors and verify that you're targeting the intended elements.\n\n* **Simplify:**  To isolate problems, create a minimal HTML page with only the necessary code to reproduce the issue. This helps in identifying potential conflicts or errors in your code.\n\n* **Comment out code:** Temporarily comment out sections of your CSS or JavaScript code to determine which parts are causing problems.\n\n\n### Troubleshooting CSS Conflicts\n\nCSS conflicts often arise when your custom styles or other CSS rules override iCheck's styles unintentionally.  To resolve this:\n\n* **Specificity:** Use more specific CSS selectors to target iCheck's elements accurately, ensuring your styles override the defaults correctly.  You might need to use ID selectors or more specific class names.\n\n* **!important:** Use the `!important` flag cautiously to force your styles to override others.  This is often a last resort, as it can lead to maintenance difficulties.  It's generally better to use more specific selectors.\n\n* **Inspect Element:** Use your browser's developer tools to inspect the applied CSS rules on the iCheck elements.  This will help identify which rules are taking precedence and how to adjust your styles accordingly.\n\n* **CSS order:** The order in which you include your CSS files matters.  Ensure that your custom stylesheets are included after iCheck's stylesheet to override them.\n\n\n### Compatibility Problems\n\n* **Older Browsers:** iCheck might have limitations in older browsers (like Internet Explorer versions prior to 10).  Consult the iCheck documentation for information on supported browsers.  Consider using a polyfill for missing features if necessary, though iCheck itself doesn't directly offer polyfills.\n\n* **jQuery version:** Make sure that you're using a compatible version of jQuery.  Refer to the iCheck documentation for compatibility information.\n\n* **Other libraries:** Conflicts can occur with other JavaScript libraries.  If you suspect a conflict, try disabling other libraries temporarily to determine if they are the source of the problem.  Pay close attention to any jQuery plugins that might interact with checkboxes or radio buttons.\n\n\n## API Reference\n\nThis section provides a detailed reference for iCheck's API, including methods, options, events, and properties.  Note that the exact availability and behavior of certain features might depend on the version of iCheck you are using.  Always consult the latest documentation for the most up-to-date information.\n\n### Methods\n\niCheck provides several methods to control and interact with the plugin:\n\n* **`.iCheck('check')`:** Checks the checkbox or radio button.\n* **`.iCheck('uncheck')`:** Unchecks the checkbox or radio button.\n* **`.iCheck('toggle')`:** Toggles the checked state (between checked and unchecked).\n* **`.iCheck('disable')`:** Disables the checkbox or radio button.\n* **`.iCheck('enable')`:** Enables the checkbox or radio button.\n* **`.iCheck('destroy')`:** Removes iCheck styling and functionality from the element, restoring the default browser rendering.\n* **`.iCheck('update')`:** Updates the visual state of the checkbox or radio button to reflect its current checked state.  Useful if the state has changed externally.\n* **`.iCheck('state')`:** Returns the current checked state of the checkbox or radio button as a boolean value (`true` for checked, `false` for unchecked).\n\n\nThese methods are called using jQuery's chaining syntax on the element(s) you wish to manipulate.  For example:  `$('#myCheckbox').iCheck('check');`\n\n\n### Options\n\nThese options are passed as a single object to the `iCheck()` method during initialization.\n\n* **`checkboxClass` (string):**  Specifies the CSS class name to use for checkboxes.  (e.g., `'icheckbox_square-blue'`).  Required unless using only `radioClass`.\n* **`radioClass` (string):**  Specifies the CSS class name to use for radio buttons.  (e.g., `'iradio_square-blue'`).  Required unless using only `checkboxClass`.\n* **`increaseArea` (string or number):** Increases the clickable area around the checkbox/radio button.  Can be a percentage string (e.g., `'20%'`) or a numeric value in pixels.\n* **`handle` (string):**  Specifies a custom CSS class for the handle (the checkmark or dot).\n* **`insert` (string):** Specifies where to insert the iCheck elements relative to the input element.  Either `'prepend'` or `'append'`.\n* **`inheritClass` (boolean):**  If `true`, the classes from the input element are inherited by the iCheck wrapper element. Defaults to `false`.\n* **`inheritID` (boolean):** If `true`, the ID from the input element is inherited by the iCheck wrapper element. Defaults to `false`.\n* **`label` (string or object):**  Allows you to specify a label element associated with the checkbox/radio. This can either be a selector string or an object containing `selector` and `insert` properties.\n\n\n### Events\n\niCheck triggers several events on the *underlying input element*:\n\n* **`ifChecked`:** Fired when the checkbox or radio button is checked.  The event handler receives an event object.\n* **`ifUnchecked`:** Fired when the checkbox or radio button is unchecked. The event handler receives an event object.\n* **`ifChanged`:** Fired whenever the checked state changes (either checked or unchecked). The event handler receives an event object.\n* **`ifCreated`:** Fired after the iCheck element is created.  This event can be used for further post-initialization actions. The event handler receives an event object.\n\n\nListen for these events using jQuery's `.on()` method.\n\n\n### Properties\n\niCheck doesn't expose public properties directly in the way that some other plugins might.  The `iCheck('state')` method provides access to the checked state, but there aren't other properties that can be accessed directly.  Instead, you can access relevant information through the underlying input element using jQuery. For example, to access the value of a radio button, you'd use `$('#myRadio').val()`.  The plugin itself is primarily focused on the visual modification and event handling, not on exposing specific internal properties for direct manipulation.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"icheck.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"iCheck - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}