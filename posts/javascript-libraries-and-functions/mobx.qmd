---
title: "MobX - A Developer's Handbook"
categories: [ "JavaScript Libraries and Functions" ]
---
## Introduction to MobX

### What is MobX?

MobX is a battle-tested, transparent functional reactive programming (FRP) library for JavaScript.  It makes it easy to build scalable and performant applications by automatically updating the UI whenever underlying data changes.  Unlike other FRP libraries, MobX is incredibly simple to learn and use, focusing on making reactive programming intuitive and less prone to errors.  At its core, MobX observes changes to your data and automatically rerenders only the parts of your UI that depend on that data, resulting in highly efficient updates.  This eliminates the boilerplate often associated with manual state management and data synchronization.

### Why use MobX?

MobX offers several compelling advantages for building complex applications:

* **Simplicity:** MobX's API is remarkably clean and easy to grasp.  The learning curve is significantly shallower than many other state management solutions.
* **Performance:** MobX's clever use of efficient change detection mechanisms ensures minimal re-renders, leading to high performance, even with large datasets.  Only parts of your application that depend on changed data are updated.
* **Scalability:** MobX handles complex state management scenarios effortlessly, maintaining its simplicity and performance even as your application grows.
* **Testability:**  The clear separation of concerns promoted by MobX makes your code inherently more testable.
* **Debugging:** MobX's transparent nature makes debugging significantly easier.  You can easily trace data flows and identify the source of issues.
* **Flexibility:**  It integrates seamlessly with various frameworks like React, Vue, Svelte, and Preact, giving you flexibility in choosing your frontend technology.


### Core Concepts: Observables, Reactions, and Actions

MobX's power comes from the interplay of three core concepts:

* **Observables:**  These are the data that MobX tracks.  Any change to an observable automatically triggers reactions.  You can make data observable using decorators (`@observable`) or by using the `observable` function.  Observables can be simple values, arrays, or objects.

* **Reactions:** Reactions are functions that are automatically executed whenever one or more of the observables they depend on change.  These are typically used to update the UI or perform other side effects based on changes in your application's state. MobX provides several ways to define reactions, including `autorun`, `reaction`, `when`, and `computed`.

* **Actions:** Actions are functions that modify observables.  It's crucial to keep all modifications to observables within actions.  This ensures that MobX can track changes accurately and efficiently.  This structured approach keeps your code predictable and improves maintainability.  The `action` decorator or function helps to ensure only actions modify observables.


### Setting up a MobX Project

Setting up a MobX project is straightforward.  The core MobX library is installed via npm or yarn:

```bash
npm install mobx
```

or

```bash
yarn add mobx
```

For React integration, you'll also need:

```bash
npm install mobx-react-lite
```

or

```bash
yarn add mobx-react-lite
```

After installation, you can start using MobX's core features and decorators within your application.  Remember to import the necessary components from the `mobx` and `mobx-react-lite` libraries in your code.  The integration with other frameworks follows a similar pattern with respective adapter packages.  The MobX documentation offers detailed guidance on framework-specific setup and usage.


## Observable Data

### Defining Observables with `observable`

The foundation of MobX is the concept of observables â€“ data that MobX tracks for changes.  The simplest way to create an observable is using the `observable` function.  This can handle various data types:

```javascript
import { observable } from 'mobx';

let counter = observable(0); // Creates an observable number

let name = observable('John Doe'); // Creates an observable string

let active = observable(true); // Creates an observable boolean

counter = counter + 1; // Updating an observable triggers reactions

console.log(counter.get()); // Access the observable's value (optional, for clarity)
```

Note that when using observable, it's generally recommended to use the observable object's `get()` method and to avoid direct access of its value.

You can also create an observable object with an initial value:

```javascript
const myData = observable({ count: 0, name: "Alice" });
```

Directly mutating the `myData` object using `myData.count = 1` should generally be avoided and instead done using actions.


### Observable Objects

Observables can also be objects.  Changes to properties of an observable object are automatically tracked:


```javascript
import { observable } from "mobx";

const person = observable({
  firstName: "Alice",
  lastName: "Smith",
  age: 30,
});

person.firstName = "Bob"; // This change is tracked by MobX
```

Nested objects are also supported, but for nested structures beyond 1 or 2 levels, consider using a more structured approach with classes or stores, potentially for improved type safety and maintainability.


### Observable Arrays

MobX provides special handling for arrays to ensure efficient change tracking.  You can create an observable array using the `observable` function:


```javascript
import { observable } from "mobx";

const shoppingList = observable([
  "Milk",
  "Eggs",
  "Bread",
]);

shoppingList.push("Cheese"); // This change is tracked by MobX
shoppingList.splice(1,1);    // Removing an item is also tracked.
```

It is crucial to use array methods provided by JavaScript to modify observable arrays; directly manipulating the array (e.g., using `shoppingList[0] = 'Yogurt'`) might lead to unexpected behavior.

### Computed Values with `computed`

Computed values are derived values that automatically update whenever the observables they depend on change.  They are created using the `computed` function:


```javascript
import { observable, computed } from "mobx";

const person = observable({
  firstName: "Alice",
  lastName: "Smith",
});

const fullName = computed(() => `${person.firstName} ${person.lastName}`);

console.log(fullName.get()); // Access the computed value.
```

The `fullName` will automatically update whenever either `person.firstName` or `person.lastName` changes.  The `get()` method is used to access the computed value.


### Reactions with `reaction`

Reactions are functions that are automatically executed whenever the observables they depend on change.  The `reaction` function takes two arguments: a function that defines the dependencies and a function that performs the side effects:


```javascript
import { observable, reaction } from "mobx";

const counter = observable(0);

reaction(
  () => counter, // Dependency
  (value) => {
    console.log(`Counter value changed to: ${value}`);
    // Perform side effects here (e.g., update UI)
  }
);

counter = counter + 1;
```

Every time the value of `counter` changes, the second function within `reaction` will run.

### Autorun with `autorun`

`autorun` is a simpler way to create a reaction that automatically runs whenever any of the observables used inside its function change:


```javascript
import { observable, autorun } from "mobx";

const counter = observable(0);

autorun(() => {
  console.log(`Counter value is: ${counter}`);
});

counter = counter + 1;
```

`autorun` is less flexible than `reaction` but often more concise for simple reactions.  It's crucial to use `autorun` judiciously to prevent excessive re-executions.  Consider using `reaction` for more fine-grained control.

### When and Why to Use Observables

Use observables for any data that needs to trigger updates in your application based on changes.  This includes UI state, application state, and data fetched from external sources.  The core principle is to make *all* data that affects the UI or other parts of your application observable to benefit from MobX's reactivity system.  Avoid unnecessary use of observables, especially on data that doesn't trigger UI updates or other relevant side effects.  Focus on creating a clear separation of concerns and defining your observables strategically.


## Actions and Reactions

### Defining Actions with `action`

Actions are functions that modify observables.  It's crucial to wrap all modifications to observables within actions to ensure MobX can accurately track changes.  The `action` function or decorator helps enforce this and improves the predictability and maintainability of your code.

Using the `action` function:

```javascript
import { observable, action } from "mobx";

const counter = observable(0);

const incrementCounter = action("incrementCounter", () => {
  counter += 1;
});

incrementCounter(); // Correct way to modify the observable
```

Using the `action` decorator:

```javascript
import { observable, action } from "mobx";

class Counter {
  @observable count = 0;

  @action increment = () => {
    this.count += 1;
  };
}

const counter = new Counter();
counter.increment(); // Correct way to modify the observable
```

Attempting to modify observables directly outside of an action can lead to unexpected behavior and invalidate MobX's change tracking.


### Flow Control within Actions

Actions can contain any JavaScript code, including conditional statements and loops.  All observable modifications should remain within the action's scope.  Here is an example of flow control inside an action:

```javascript
import { observable, action } from "mobx";

const items = observable([]);

const addItem = action("addItem", (newItem) => {
  if (newItem.length > 0) {
    items.push(newItem);
  } else {
    console.warn("Item cannot be empty.");
  }
});

addItem("New Item");
```


### Asynchronous Actions

Actions can also handle asynchronous operations using promises or async/await. It's essential to ensure that the modification of observables occurs *after* the asynchronous operation completes:

```javascript
import { observable, action } from "mobx";

const data = observable(null);

const fetchData = action("fetchData", async () => {
  try {
    const response = await fetch("/api/data");
    const jsonData = await response.json();
    data = jsonData; // Modification happens after the await
  } catch (error) {
    console.error("Error fetching data:", error);
    // Handle error appropriately, possibly setting data to an error state
  }
});

fetchData();
```

The key here is awaiting the asynchronous operation before updating the observable (`data`).  This prevents MobX from incorrectly detecting changes.


### Best Practices for Actions

* **Keep actions concise and focused:**  Each action should ideally perform a single, well-defined task.  Large or complex actions should be broken down into smaller, more manageable units.

* **Use descriptive action names:**  Choose names that clearly indicate the action's purpose.  This improves code readability and maintainability.

* **Handle errors gracefully:**  Always include error handling within your actions to prevent unexpected behavior.

* **Prefer `action` decorator over `action` function for classes:** The `@action` decorator leads to more concise and readable code when working with classes.


### Using Reactions Effectively

Reactions automatically respond to changes in observables.  They're essential for updating the UI or performing other side effects based on state changes.  Avoid excessive or unnecessary reactions, as they can impact performance.  Use reactions only where necessary to keep your application responsive.


### Reaction Types: `autorun`, `reaction`, `when`

MobX provides various reaction types:

* **`autorun`:**  The simplest reaction type.  It executes whenever any of the observables it uses change.  It's often used for UI updates.  It lacks the fine-grained control offered by `reaction`.

* **`reaction`:** Provides more control over dependencies and side effects.  It takes two functions: one to define the dependencies (a function that returns a value based on observables) and another to perform the side effects.

* **`when`:** This reaction executes only once when a certain condition becomes true.  It is useful for setting up one-time side effects based on state changes.  It does not continuously track changes as the other types.

Choosing the appropriate reaction type depends on your specific needs.  `autorun` is ideal for simple cases, while `reaction` is suitable for more complex scenarios that require precise control over dependencies and side effects. `when` is perfect for one-time initialization or actions based on a single state change.


## Advanced MobX Concepts

### Transactions (`runInAction`)

Transactions, using `runInAction`, allow you to group multiple observable updates into a single batch.  This is crucial for performance optimization, particularly when dealing with multiple changes that should be treated as a single atomic operation.  Without transactions, each individual observable update would trigger reactions, potentially leading to redundant computations.


```javascript
import { observable, action, runInAction } from "mobx";

const user = observable({ name: "Alice", age: 30 });

const updateUser = action("updateUser", (newName, newAge) => {
  runInAction(() => { // Batch updates within a transaction
    user.name = newName;
    user.age = newAge;
  });
});

updateUser("Bob", 35); // Updates are batched, improving efficiency
```

This ensures that reactions only run once after all changes within `runInAction` are completed.  It improves performance and prevents unnecessary re-renders or side effects.

### Decorators (`@observable`, `@computed`, `@action`)

Decorators provide a concise and elegant way to define observables, computed values, and actions, especially useful within classes.  They improve code readability and maintainability compared to using the function equivalents.

*   `@observable`: Makes a class property or variable observable.

*   `@computed`: Defines a computed value that automatically updates based on changes to observables it depends on.

*   `@action`: Wraps a function to ensure that observable modifications within it are properly tracked by MobX.


```javascript
import { observable, computed, action } from "mobx";

class Counter {
  @observable count = 0;

  @computed get doubleCount() {
    return this.count * 2;
  }

  @action increment() {
    this.count++;
  }
}
```

Using decorators leads to cleaner and more declarative code, making it easier to understand the reactive nature of your application.

### MobX and React Integration

MobX integrates seamlessly with React via the `mobx-react-lite` package.  The `observer` higher-order component (HOC) is used to make React components reactive to changes in observables.


```javascript
import React from 'react';
import { observer } from 'mobx-react-lite';
import { observable } from 'mobx';

class Counter extends React.Component {
  @observable count = 0;
  increment = () => this.count++;

  render() {
    return (
      <div>
        <p>Count: {this.count}</p>
        <button onClick={this.increment}>Increment</button>
      </div>
    );
  }
}

export default observer(Counter);
```

Any changes to `this.count` will automatically cause the component to re-render.  `mobx-react-lite` offers a lightweight and efficient solution compared to other integration methods.


### MobX and other Frameworks/Libraries

While primarily designed for React, MobX's core principles apply to other frameworks and libraries.  Adapters exist for other JavaScript frameworks such as Vue and Svelte, simplifying integration.  The core concepts of observables, actions, and reactions remain consistent across different integrations.  The adaptation often involves wrapping your UI components to make them reactive to MobX changes.


### Working with MobX Devtools

The MobX Devtools browser extension provides valuable tools for debugging and inspecting your MobX applications. It allows you to:

*   View the state of your observables.
*   Inspect reactions and their dependencies.
*   Track changes in observables and their propagation through your application.
*   Pause and step through reactions.

Utilizing the Devtools greatly simplifies the debugging process, offering a visual representation of your application's reactive state and behavior.


### Testing MobX Applications

Testing MobX applications requires strategies to handle the asynchronous and reactive nature of the library.  Common approaches include:

*   Using mocking to isolate components and their dependencies during testing.
*   Employing testing frameworks like Jest and React Testing Library.
*   Utilizing the `waitFor` or equivalent functions within your testing framework to handle asynchronous operations triggered by reactions.
*   Testing actions in isolation to verify that they correctly modify observables.
*   Testing computed values to validate their correct calculation based on observables.

Proper testing is crucial to ensure the correctness and reliability of your MobX application, especially in complex projects.  Thorough testing ensures that reactive parts of your code behave as expected, handling various edge cases and asynchronous scenarios.


## Best Practices and Patterns

### Managing State Effectively

Effective state management is crucial for building robust and maintainable MobX applications.  Here are some key strategies:

* **Centralized Stores:** For larger applications, group related observables and actions into centralized stores or models. This improves organization and reduces complexity.

* **Clear Separation of Concerns:** Keep your actions focused on modifying state, and use reactions for side effects like UI updates.  Avoid mixing these responsibilities within the same function.

* **Immutability (when possible):** While not strictly enforced, favoring immutable data structures can simplify change tracking and debugging.  When updating objects or arrays, create new instances instead of directly modifying the existing ones.  This minimizes side effects and enhances predictability.

* **Appropriate Granularity:** Choose the level of granularity for observables based on the complexity of your application.  Avoid making too many extremely fine-grained observables or too few coarse-grained ones.  Strive for a balance that facilitates effective state management and performance.


### Structuring Your MobX Applications

Organizing your MobX application effectively improves maintainability and scalability.  Consider these patterns:

* **Store Pattern:**  Organize your state and related actions into self-contained stores. This promotes encapsulation and modularity.

* **Singleton Pattern (Use Sparingly):** In some cases, a singleton pattern can be appropriate for providing access to a global state, but overuse can lead to tightly coupled code.

* **Dependency Injection:**  Use dependency injection to pass stores or other dependencies to components, reducing coupling and improving testability.

* **Folder Structure:**  Structure your project's files logically, grouping related stores, components, and utilities.  A common approach is to have a separate `stores` or `models` folder for your MobX state management.


### Common Pitfalls and How to Avoid Them

Several common issues can arise when working with MobX:

* **Directly Modifying Observables Outside of Actions:** This invalidates MobX's change tracking, leading to unexpected behavior.  Always use actions to modify observables.

* **Excessive Reactions:**  Too many reactions or inefficiently defined reactions can significantly impact performance. Use reactions judiciously and optimize them for efficiency.

* **Unnecessary Observables:**  Making everything observable can lead to performance problems.  Only make data observable that affects your UI or other reactive parts of your application.

* **Forgotten `autorun` Cleanup:**  If you're using `autorun`, remember to dispose of it properly when the component unmounts or is no longer needed to prevent memory leaks.


### Optimizing Performance

Optimizing MobX applications focuses on minimizing re-renders and unnecessary computations.  Several strategies can help:

* **Batching Updates:** Use `runInAction` to group multiple observable updates into a single transaction, reducing the number of re-renders.

* **Efficient Computed Values:**  Keep computed values simple and avoid complex or computationally expensive computations within them.  Memoize expensive computations where possible.

* **Targeted Reactions:** Define reactions precisely to only respond to the specific observables they depend on.

* **Profiling:**  Use browser developer tools to profile your application and identify performance bottlenecks.



### Debugging Tips and Tricks

Debugging MobX applications may differ slightly from traditional debugging.  These tips can help:

* **MobX Devtools:** Utilize the MobX Devtools browser extension to visually inspect your application's state, reactions, and their dependencies.

* **Console Logging:**  Strategically log observables and computed values to track changes and identify potential issues.

* **Selective Logging:** Use conditional logging to prevent excessive output during debugging.

* **Simplify Your State:**  Temporarily simplify your state structure or reduce the number of reactions during the debugging process to isolate the problem.

* **Check for Circular Dependencies:**  Circular dependencies between observables or computed values can lead to infinite loops and performance issues.  Carefully examine your data model to identify and break these cycles.




## Appendix

### Glossary of Terms

* **Observable:** A piece of data that MobX tracks for changes.  Changes to an observable automatically trigger reactions.

* **Reaction:** A function that automatically runs whenever one or more observables it depends on change.  Reactions are typically used to update the UI or perform other side effects.

* **Action:** A function that modifies observables.  All modifications to observables should happen within actions to ensure MobX's change tracking mechanism works correctly.

* **Computed Value:** A derived value that is automatically updated whenever the observables it depends on change.  It's a read-only value calculated based on other observables.

* **Autorun:** A type of reaction that runs automatically whenever any of the observables used within it change.

* **Reaction (with `reaction`):** A more sophisticated reaction type offering fine-grained control over dependencies and cleanup.

* **Transaction (`runInAction`):** A mechanism to group multiple observable updates into a single batch, improving performance.

* **Decorator:** A concise syntax (using `@`) to define observables, computed values, and actions within classes.

* **Observer:** In the context of React integration, an observer is a higher-order component (HOC) that makes a React component reactive to MobX changes.


### API Reference

A comprehensive API reference is available on the official MobX documentation website (link to be inserted here if generating HTML; otherwise, refer users to search the official website).  This reference provides detailed information on all MobX functions, decorators, and classes, including their parameters, return values, and usage examples.


### Troubleshooting Common Issues

* **Unexpected Behavior:** Ensure all observable modifications happen within actions. Double-check for circular dependencies between computed values or observables. Use the MobX Devtools for visual debugging.

* **Performance Issues:** Identify performance bottlenecks using browser profiling tools.  Optimize computed values.  Batch updates using `runInAction`. Reduce the number of unnecessary reactions.

* **Incorrect Rendering:** Verify that React components are properly wrapped with `observer` (for React integration).  Ensure your reactions correctly respond to observable changes.

* **Memory Leaks:** Properly dispose of `autorun` disposers when they are no longer needed, particularly in components that unmount.

* **Unhandled Errors:**  Implement robust error handling within your actions to prevent unexpected behavior and crashes.


### Contributing to MobX

Contributions to the MobX project are welcome!  The contribution guidelines can be found on the official MobX GitHub repository (link to be inserted here if generating HTML; otherwise, refer users to search the official GitHub repository).  These guidelines detail the process for submitting bug reports, proposing new features, and contributing code.  Before contributing, please ensure you understand the project's coding style and testing conventions.  All contributions should adhere to the project's code of conduct.

