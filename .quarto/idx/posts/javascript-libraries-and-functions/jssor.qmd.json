{"title":"Jssor - Documentation","markdown":{"yaml":{"title":"Jssor - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nJssor offers several methods for installation, catering to different project setups.  The most common methods are via CDN inclusion or downloading the Jssor package directly.\n\n**CDN Inclusion:** The simplest approach involves including Jssor via a Content Delivery Network (CDN). This avoids the need to download and manage the files yourself.  You can include Jssor using a `<script>` tag in your HTML file, pointing to the appropriate CDN URL.  Check the Jssor website for the most up-to-date CDN links and ensure you're using a version compatible with your project.  For example:\n\n```html\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jssor-slider/1.1.0/jssor.slider.min.js\"></script> \n```\nReplace `1.1.0` with the desired version number.\n\n**Direct Download:** Alternatively, download the Jssor package from the official website. This gives you greater control over the files and allows for offline development.  Unzip the downloaded archive and place the necessary JavaScript and CSS files into your project's directory.  Reference these files in your HTML using `<script>` and `<link>` tags, adjusting paths as needed.\n\n\n### Basic Usage\n\nAfter installing Jssor, integrating it into your project involves several key steps.  First, you'll need to create a container element in your HTML to house the slider. This container will be referenced by the Jssor initialization script.  Next, you'll need to include the necessary Jssor CSS file(s) and the core Jssor JavaScript file using `<link>` and `<script>` tags respectively.  Finally, you'll use JavaScript to initialize the slider, configuring its settings within a specific Jssor options object.  This object allows customization of numerous aspects, from transition effects to autoplay behavior.  Consult the Jssor documentation for a complete list of options.\n\n\n### First Slider Example\n\nThis example demonstrates a basic slider setup. Remember to replace `\"path/to/your/jssor.slider.min.js\"` with the actual path to the Jssor script file.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Jssor Slider Example</title>\n    <link rel=\"stylesheet\" href=\"path/to/your/jssor.slider.css\" />\n    <script type=\"text/javascript\" src=\"path/to/your/jssor.slider.min.js\"></script>\n    <style>\n        /*Optional: Add some basic styling for the slider container*/\n        #slider1_container {\n            width: 600px;\n            height: 300px;\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"slider1_container\">\n        <!-- Slides will be added here -->\n    </div>\n\n    <script>\n        var jssor_1_options = {\n          // Basic options here - refer to Jssor documentation for more advanced options.\n            $AutoPlay: true,\n            $SlideshowOptions: { $PauseOnHover: true }\n        };\n        var jssor_1_slider = new $JssorSlider$( '#slider1_container', jssor_1_options );\n    </script>\n\n</body>\n</html>\n```\nYou'll need to populate the `#slider1_container` with your actual slide images and content.  Refer to the Jssor documentation for details on how to structure your slide content.\n\n\n### Including Jssor in your Project\n\nIncluding Jssor in your project depends on your chosen installation method (CDN or direct download).  Regardless of the method, ensure that both the necessary CSS files (for styling) and the core JavaScript file (for functionality) are correctly referenced within your HTML file's `<head>` section using `<link>` and `<script>` tags respectively,  pointing to the correct file paths. The order of inclusion generally matters; CSS should be included before JavaScript.  After inclusion, you can initialize the slider using the JavaScript code provided in the 'Basic Usage' and 'First Slider Example' sections.  Remember to adapt the file paths and options to suit your specific project setup and desired slider behavior.  If using a build system (like Webpack or Parcel), adjust the importing mechanism accordingly to match your build process.\n\n\n## Slider Structure and Markup\n\n### Understanding the Container\n\nThe foundation of any Jssor slider is its container element. This is a standard HTML element (typically a `<div>`) that serves as the parent for all slider components.  It's crucial to define the container's dimensions (width and height) using CSS, as this dictates the size and aspect ratio of the slider.  Jssor uses this container to position and manage the slides.  The ID of this container is essential; it's used in the JavaScript initialization code to specify which element the slider should be applied to.  Incorrectly specifying the container ID will prevent the slider from functioning.  Properly sizing and identifying this container is the first and most important step in creating a Jssor slider.\n\n### Image Slides\n\nThe simplest form of a Jssor slide consists of an image.  Each image slide is typically represented as an `<img>` tag within the slider container.  You can add multiple `<img>` tags to create a sequence of image slides.  While simple, these can be enhanced with captions or overlays using additional HTML elements nested within the same container as the image.  Jssor will automatically handle the display and transitions of these image slides based on the configuration settings.  Remember to provide appropriate alternative text (`alt` attribute) for accessibility.  For optimal performance, use optimized images (e.g., appropriately sized and compressed).\n\n### Content Slides\n\nJssor isn't limited to just images; it also supports content slides. These slides allow for more complex layouts and incorporate elements beyond just images.  You can include text, videos, or other HTML elements within a content slide.  The structure of a content slide is very flexible; you can use any HTML element you need, but it is usually contained within a `<div>` element acting as a slide.  The styling of content slides is entirely up to you and should be done using CSS, ensuring proper layout and responsiveness. You can use nested divs or other suitable HTML elements to structure the content within each slide.\n\n### Using Markers\n\nMarkers (or bullets) provide a visual indication of the current slide and the total number of slides. They act as a simple navigation mechanism, allowing users to jump to specific slides. Jssor automatically generates and manages markers based on the number of slides. The appearance of the markers (size, shape, color, etc.) is highly customizable through Jssor's options. Markers typically appear below or above the slider container, providing a compact navigation solution.  You don't need to manually add markers in your HTML; Jssor handles their creation and positioning automatically.\n\n### Navigation Arrows\n\nNavigation arrows offer another way for users to navigate through the slides. These are typically displayed on either side of the slider container, with one arrow moving to the previous slide and the other to the next. Similar to markers, Jssor manages the creation and behavior of these arrows. You can customize their appearance and behavior through various options.  Their inclusion is optional but greatly enhances user interaction and makes it easier to traverse the slides.\n\n### Thumbnail Navigator\n\nA thumbnail navigator provides a visual preview of all slides as small thumbnails.  Users can click on a thumbnail to jump directly to the corresponding slide.  The implementation of a thumbnail navigator requires you to create the thumbnails (either as images or using other means) and provide the necessary HTML structure to hold them. The Jssor configuration options then define how the thumbnail navigator connects with the main slider to provide this advanced navigation functionality. The location and visual style of the thumbnail navigator are also highly customizable through Jssorâ€™s options.\n\n\n## Configuration Options\n\nJssor offers a wide array of configuration options, allowing for extensive customization of your slider's behavior and appearance. These options are passed to the JssorSlider constructor as a JavaScript object.  This section provides an overview of the key option categories.  Refer to the complete Jssor documentation for detailed descriptions of each option and its possible values.\n\n### General Options\n\nGeneral options control fundamental aspects of the slider, such as its width, height, and overall behavior.  Key options in this category often include:\n\n*   `$FillMode`:  Determines how the slider fills its container (e.g., `$FillMode.fill`, `$FillMode.fit`, `$FillMode.actual`).\n*   `$AutoPlay`: Enables or disables automatic slideshow playback (boolean value).\n*   `$Idle`: Defines the idle time (in milliseconds) between transitions when autoplay is enabled.\n*   `$UISearchMode`: Specifies how the slider's user interface (UI) elements are searched (e.g.,  `$UISearchMode.PARENT`, `$UISearchMode.INNER`).\n*   `$DragOrientation`: Restricts the dragging direction to either horizontal or vertical.\n\n\n### Slideshow Options\n\nSlideshow options govern the behavior of the automatic slideshow functionality.  Important options in this category include:\n\n*   `$PauseOnHover`: Pauses the slideshow when the mouse hovers over the slider (boolean value).\n*   `$PlayOrientation`: Defines the direction of slideshow playback (e.g., forward, backward, or both).\n*   `$PlayDirection`: Specifies the playback direction of the slideshow (e.g., `$PlayDirection.LTR`, `$PlayDirection.RTL`).\n*   `$Interval`: Sets the time interval (in milliseconds) between slide transitions during autoplay.\n\n\n### Navigation Options\n\nNavigation options control the appearance and behavior of the slider's navigation elements, such as arrows and bullets. Key options in this category include:\n\n*   `$ArrowNavigatorOptions`:  Configures the appearance and behavior of the arrow navigator.  This is often a nested object containing options for arrow size, position, and appearance.\n*   `$BulletNavigatorOptions`: Configures the appearance and behavior of the bullet navigator.  This is also usually a nested object specifying bullet size, shape, position, and behavior.\n*   `$ThumbnailNavigatorOptions`:  Configures the appearance and behavior of the thumbnail navigator, including the number of visible thumbnails and their arrangement.\n\n\n### Autoplay Options\n\nAutoplay options are essential for configuring the automatic slide transitions.  Key options in this category include:\n\n*   `$AutoPlayInterval`: Sets the interval (in milliseconds) between automatic transitions.\n*   `$AutoPlaySteps`:  Determines the number of slides to advance or reverse during each autoplay step.\n*   `$AutoPlayLoops`: Specifies the number of times the slideshow loops before stopping. (Set to -1 for infinite loops).\n\n\n### Responsive Options\n\nResponsive options are crucial for adapting the slider's behavior to different screen sizes.  Key options in this category often include:\n\n*   `$Responsive`: Enables or disables responsive behavior (boolean value).\n*   `$MinDragOffsetToSlide`:  Defines the minimum drag offset required to trigger a slide transition. Useful for preventing accidental slide changes on touch devices.\n*   `$ScaleWidth`: Defines how the slider scales its width to fit different screen sizes.\n\n\n### Accessibility Options\n\nAccessibility options ensure the slider is usable by people with disabilities.  While specific options may vary depending on the Jssor version, ensure to check for options related to:\n\n*   Keyboard navigation: Options allowing control of the slider using keyboard shortcuts.\n*   Screen reader compatibility: Settings that improve compatibility with screen readers.\n*   Alternative text for images:  Proper configuration encourages the use of `alt` attributes on images for screen readers.\n\n\n### Advanced Options\n\nAdvanced options cater to more complex customizations and fine-grained control.  These options often relate to:\n\n*   Custom transitions: Allows for the definition of custom transition effects.\n*   Event handling: Options to handle specific slider events (e.g., slide change, start, stop).\n*   Deep linking:  Enables integration with deep links for direct navigation to specific slides.\n*   Performance optimization: options for enhancing slider performance, such as disabling certain features.\n\nRemember to consult the official Jssor documentation for the most up-to-date information on available options, their functionalities, and usage examples.  The specific options and their parameters might change slightly between versions.\n\n\n## Slider Types and Effects\n\nJssor offers a variety of slider types and transition effects, allowing for significant customization of your slider's presentation.  This section outlines some common slider types and effects.  The specific effects available might vary depending on the Jssor version. Consult the latest documentation for a complete list and details.\n\n### Carousel Slider\n\nA carousel slider displays slides sequentially, often with a smooth horizontal or vertical transition.  This is one of the most common slider types and is well-suited for displaying a series of images or content blocks. Jssor simplifies the creation of a carousel slider by providing options to control the transition speed, direction, and easing function. You can configure the number of slides visible at once (partially visible slides are also common in carousel sliders), creating a dynamic and visually appealing experience.\n\n### Banner Slider\n\nA banner slider is similar to a carousel but typically focuses on showcasing large, impactful images or banners.  It often uses minimal navigation and emphasizes visual appeal.  In Jssor, this type of slider is usually achieved by configuring the slider's dimensions to accommodate large images and choosing transition effects that emphasize visual impact, such as fade transitions or more subtle slide animations.\n\n### Thumbnail Slider\n\nA thumbnail slider combines a main slider with a thumbnail navigator.  This allows users to preview all slides as thumbnails and select the desired slide. Jssor provides options to customize the thumbnail navigator's appearance (size, layout, etc.) and its interaction with the main slider.  This type of slider is particularly useful when dealing with a large number of slides, enhancing user navigation and allowing quick access to specific content.\n\n\n### Fade Effects\n\nFade effects transition between slides by gradually fading out the current slide and fading in the next. Jssor allows you to adjust the fade duration and easing function, creating smooth and visually appealing transitions.  Simple fade effects are often best suited for clean, elegant designs where the focus is on content rather than elaborate animations.\n\n\n### Slide Effects\n\nSlide effects involve the horizontal or vertical movement of slides. Jssor offers various slide effects, including simple linear slides, accelerated slides, and more complex animated movements. You can control the speed, direction, and easing function of these slide effects to create a unique and engaging experience.  Slide effects are often visually more dynamic than fade effects, drawing more attention to the transition itself.\n\n### Zoom Effects\n\nZoom effects involve scaling the slides during the transition. Jssor can achieve zoom effects through configuration options. You can control the zoom intensity, duration, and direction, often combined with other transition types like slide or fade, to create more complex and striking visual effects.  Zoom effects are particularly effective for showcasing high-resolution images or emphasizing specific details.\n\n\n### Customizing Transition Effects\n\nWhile Jssor offers a variety of built-in transition effects, it also allows for more advanced customization.  For highly specialized requirements, you might need to create custom transition effects using Jssor's API or by extending its functionalities.  This typically involves more complex JavaScript coding and a deep understanding of the Jssor framework.  Consult the advanced sections of the Jssor documentation for information on creating and implementing custom transitions. The level of customization depends greatly on your programming skills and the complexity of the desired effect.\n\n\n## Responsive Design and Adaptation\n\nCreating responsive sliders with Jssor involves configuring settings to ensure the slider adapts gracefully to different screen sizes and devices. This section explores techniques for achieving responsive behavior.\n\n### Responsive Settings\n\nJssor's responsive settings are crucial for adapting the slider to various screen sizes. The primary setting is usually a boolean option (often `$Responsive`) that enables or disables responsive behavior.  When enabled, the slider automatically adjusts its dimensions and behavior based on the available screen width.  Many other configuration options interact with the responsive settings, impacting aspects like scaling, slide dimensions, and navigation element positioning.  Carefully reviewing and configuring these options ensures your slider functions correctly across different devices.\n\n\n### Scaling and Resizing\n\nScaling and resizing are essential aspects of responsive design.  Jssor allows you to control how the slider scales its width and height when the screen size changes.  Options often include controlling the aspect ratio, maintaining proportions, or allowing independent scaling of width and height.  You might choose to scale the slider proportionally to maintain its original aspect ratio or allow it to fill the available width and adjust its height accordingly. The choice depends on your design and how you want the slider to adapt.\n\n### Device Detection\n\nWhile Jssor doesn't explicitly provide device detection features, you can leverage browser capabilities to detect device characteristics (e.g., screen size, touch support) and adjust slider settings accordingly. You could use JavaScript to check for touch support and enable touch-friendly navigation options or adjust the slider's animation speed based on the device's processing power.  This approach enhances the user experience by tailoring the slider to the capabilities of the device.\n\n\n### Fluid Width and Height\n\nFluid width and height allow the slider to dynamically adjust its size based on the available space.  Jssor often supports this through CSS and configuration options.  By specifying percentage-based dimensions for the slider container, the slider adapts to the available space within its parent container.  Combining this with responsive settings ensures that the slider scales gracefully across different screen sizes and resolutions.\n\n### Optimizing for Mobile Devices\n\nOptimizing Jssor sliders for mobile devices involves several considerations.  First, ensuring responsiveness is crucialâ€”the slider should adapt seamlessly to smaller screens.  Next, consider performance optimization; minimize the number of high-resolution images or use responsive images to load appropriately sized images based on the device's screen resolution.  Finally, enhance usability by implementing touch-friendly navigation and avoiding overly complex animations which could negatively impact performance on lower-powered devices.  Proper touch event handling is also key to making the slider intuitive and easy to use on touchscreens.\n\n\n## Advanced Techniques\n\nThis section covers advanced techniques for customizing and extending Jssor's functionality beyond basic configuration.\n\n### Customizing Styles\n\nJssor allows extensive style customization using CSS. While Jssor provides default styles, you can override these or create entirely new styles to match your website's design.  Target specific Jssor elements using their class names or IDs. For instance, you can change the color, size, and shape of navigation arrows, bullets, or even the slides themselves by writing CSS rules that target the relevant CSS classes provided by Jssor.  Be sure to include your custom CSS after including the Jssor CSS file to ensure your styles override the defaults.  Using a CSS preprocessor (like Sass or Less) can further simplify styling complex sliders.\n\n\n### Using CSS\n\nCSS plays a vital role in styling Jssor sliders.  Jssor relies on specific CSS classes to style its elements.  You should not modify the Jssor CSS file directly; instead, create a separate CSS file to add custom styles and overrides.  Use the developer tools of your browser to inspect the CSS classes used by Jssor and target them in your custom stylesheet.  This approach ensures that updates to Jssor's CSS won't affect your custom styles.  Remember to maintain CSS specificity when writing your custom styles to avoid unintended conflicts.\n\n\n### Adding Custom Animations\n\nWhile Jssor offers several built-in transition effects, you might need to create custom animations. This typically requires a deeper understanding of JavaScript and Jssor's API. You might use Jssor's event handling capabilities to trigger custom animation functions at specific points during the slide transitions. Libraries like GSAP (GreenSock Animation Platform) can be integrated with Jssor to create more complex and sophisticated animations.  This approach requires programming proficiency and careful integration to avoid conflicts with Jssor's internal mechanisms.\n\n\n### Integrating with Other Libraries\n\nIntegrating Jssor with other JavaScript libraries is possible, but requires careful consideration.  Ensure compatibility by checking for potential conflicts between libraries.  You might integrate with libraries for image loading, animation (as mentioned above), or other UI elements.  Properly managing dependencies and ensuring proper initialization order is critical for successful integration.  If using a module bundler (like Webpack), managing dependencies becomes significantly easier.\n\n\n### Handling Events\n\nJssor provides several events that you can listen for and respond to using JavaScript.  These events can trigger custom actions, such as updating other parts of your website or performing specific actions based on slider state changes.  Examples include events triggered when a slide changes, when the autoplay starts or stops, or when a user interacts with the slider's navigation.  Proper event handling improves interactivity and dynamic behavior.  Consult the Jssor API documentation for a comprehensive list of available events and their parameters.\n\n\n### API Reference\n\nThe Jssor API reference is crucial for advanced development.  This comprehensive documentation lists all available methods, properties, and events provided by the Jssor library.  This allows you to directly manipulate the slider's behavior and access its internal state.  Understanding the API is essential for creating custom plugins, extending functionalities, and developing highly customized solutions.  The API reference is typically available on the Jssor website.  Always refer to the latest API documentation for the specific version of Jssor you are using.\n\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues and optimizing Jssor performance.\n\n### Common Issues and Solutions\n\nSeveral common issues can arise when using Jssor.  Here are some examples and solutions:\n\n*   **Slider not displaying:** Verify that Jssor's JavaScript and CSS files are correctly included in your HTML. Double-check file paths and ensure that there are no typos in your code. Also, confirm that the container element's ID matches the one used in the initialization code.\n\n*   **Slides not loading:** Ensure that the paths to your image or content files are correct. Check for any network errors that might prevent the resources from loading. If using external resources, confirm their availability and accessibility.\n\n*   **Navigation issues:** Ensure that the navigation options (arrows, bullets, thumbnails) are correctly configured.  Check the CSS for potential styling issues that might hide or misposition these elements.  If using custom navigation, review the implementation for errors.\n\n*   **Responsive issues:** Ensure that responsive settings are correctly configured.  Check CSS to make sure your slider scales appropriately on different screen sizes.  Inspect the slider's behavior on various devices and screen resolutions to identify any anomalies.\n\n*   **JavaScript errors:** Use your browser's developer tools to inspect the JavaScript console for error messages.  These messages often pinpoint the source of the problem.  Correct any syntax errors or logic flaws indicated in the console.\n\n\n### Debugging Tips\n\nEffective debugging is crucial for resolving Jssor issues.  Here are some helpful tips:\n\n*   **Use your browser's developer tools:**  Inspect the console for JavaScript errors, network requests, and other relevant information. The browser's debugger can also step through your code to help locate problems.\n\n*   **Simplify your code:**  If you're encountering complex issues, try simplifying your slider's configuration and content to isolate the problem.  A minimal working example can help pinpoint the root cause.\n\n*   **Test incrementally:**  Add features gradually and test after each addition.  This helps identify when and where problems are introduced.\n\n*   **Check Jssor documentation:**  Review the documentation thoroughly to ensure that your setup and configuration align with best practices.\n\n*   **Search for similar issues:**  Search online forums and communities for similar problems reported by other Jssor users.  Solutions or workarounds might already exist.\n\n\n### Browser Compatibility\n\nJssor generally supports modern browsers.  However, very old or outdated browsers might encounter compatibility issues.  Test your slider on various browsers and devices to ensure cross-browser compatibility.  Consider using a polyfill or transpiler to address potential compatibility gaps with older browsers.\n\n\n### Performance Optimization\n\nOptimizing Jssor for performance is crucial, particularly for sliders with many slides or large images.  Here are some tips:\n\n*   **Use optimized images:**  Compress your images to reduce their file sizes without significantly impacting quality.  Use appropriate image formats (e.g., WebP) for better compression.\n\n*   **Lazy loading:**  Implement lazy loading to load images only when they are about to be displayed.  This prevents unnecessary loading of images that might not be viewed.\n\n*   **Minimize HTTP requests:**  Combine CSS and JavaScript files to reduce the number of HTTP requests.\n\n*   **Use a CDN:**  Host your Jssor files on a CDN to reduce loading times by leveraging geographically closer servers.\n\n*   **Avoid complex animations:**  Overly complex animations can negatively impact performance.  Choose simpler transitions where possible.\n\n\n### Known Bugs and Limitations\n\nJssor, like any software, might have known bugs or limitations.  Check the Jssor website or forums for announcements of known issues and potential workarounds.   Always use the latest stable version of Jssor to benefit from bug fixes and performance improvements.  If you encounter a bug that's not documented, report it to the Jssor developers to assist with improving the library.\n\n\n## API Reference\n\nThis section provides a high-level overview of the Jssor API.  Due to the extensive nature of the API,  a complete reference is beyond the scope of this manual excerpt.  Consult the official Jssor documentation for a comprehensive and up-to-date API reference.  This section highlights key aspects.\n\n### Jssor Object Methods\n\nThe core Jssor object (`$JssorSlider`) exposes various methods for controlling the slider's behavior.  These methods allow you to programmatically interact with the slider, triggering actions, retrieving information, or modifying settings.  Key method categories often include:\n\n*   **Initialization and Setup:** Methods for initializing the slider, setting options, and configuring its structure.  This often includes methods to start and stop the autoplay, or to set the current slide.\n\n*   **Navigation Control:** Methods for navigating through the slides, jumping to specific slides, or controlling the direction of playback.  This would likely involve methods to go to the next or previous slide, or directly select a slide by index.\n\n*   **State Management:** Methods for retrieving information about the slider's current state, such as the current slide index, whether autoplay is active, or other relevant status information.\n\n*   **Event Handling:** Methods to attach event listeners to specific slider events.  This would encompass adding or removing functions to be executed when events occur.\n\n\nThe exact methods available and their parameters vary depending on the Jssor version.  Always refer to the official documentation for a complete list and detailed descriptions.  Method names often follow a clear and consistent naming convention, making it easier to understand their function.\n\n\n### Event Handling\n\nJssor supports an extensive set of events that allow you to react to various slider actions.  These events are triggered by user interactions (e.g., clicking navigation elements), automatic transitions (e.g., autoplay), or other slider-related actions (e.g., slider initialization, resizing).  Event handling typically involves attaching event listeners to the slider object, using functions that are executed when the specified event occurs.\n\n\nCommon events might include:\n\n*   `$OnSlidesChange`: Triggered when the currently displayed slide changes.\n\n*   `$OnStart`: Triggered when autoplay begins.\n\n*   `$OnStop`: Triggered when autoplay stops.\n\n*   `$OnMouseEnter`: Triggered when the mouse cursor enters the slider container.\n\n*   `$OnMouseLeave`: Triggered when the mouse cursor leaves the slider container.\n\n\nEvent handlers typically receive data related to the event, allowing you to perform actions based on the event context.  The precise parameters passed to event handlers will vary based on the specific event.\n\n\n### Utility Functions\n\nJssor might include utility functions to assist with various tasks. These functions are often helper methods designed to simplify common operations or provide convenient access to internal functionalities.  While not as extensive as the methods directly related to slider control, these utility functions can significantly aid in custom development and integration tasks.  Examples might include helper functions for image manipulation, animation control, or DOM element manipulation.\n\n\nRemember that the specific utility functions and their availability depend on the Jssor version.  Always check the official API documentation for the most up-to-date information on all methods, events, and utility functions available. The documentation will typically provide detailed explanations of each function's purpose, parameters, and return values, accompanied by code examples to guide you through usage.\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nJssor offers several methods for installation, catering to different project setups.  The most common methods are via CDN inclusion or downloading the Jssor package directly.\n\n**CDN Inclusion:** The simplest approach involves including Jssor via a Content Delivery Network (CDN). This avoids the need to download and manage the files yourself.  You can include Jssor using a `<script>` tag in your HTML file, pointing to the appropriate CDN URL.  Check the Jssor website for the most up-to-date CDN links and ensure you're using a version compatible with your project.  For example:\n\n```html\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jssor-slider/1.1.0/jssor.slider.min.js\"></script> \n```\nReplace `1.1.0` with the desired version number.\n\n**Direct Download:** Alternatively, download the Jssor package from the official website. This gives you greater control over the files and allows for offline development.  Unzip the downloaded archive and place the necessary JavaScript and CSS files into your project's directory.  Reference these files in your HTML using `<script>` and `<link>` tags, adjusting paths as needed.\n\n\n### Basic Usage\n\nAfter installing Jssor, integrating it into your project involves several key steps.  First, you'll need to create a container element in your HTML to house the slider. This container will be referenced by the Jssor initialization script.  Next, you'll need to include the necessary Jssor CSS file(s) and the core Jssor JavaScript file using `<link>` and `<script>` tags respectively.  Finally, you'll use JavaScript to initialize the slider, configuring its settings within a specific Jssor options object.  This object allows customization of numerous aspects, from transition effects to autoplay behavior.  Consult the Jssor documentation for a complete list of options.\n\n\n### First Slider Example\n\nThis example demonstrates a basic slider setup. Remember to replace `\"path/to/your/jssor.slider.min.js\"` with the actual path to the Jssor script file.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Jssor Slider Example</title>\n    <link rel=\"stylesheet\" href=\"path/to/your/jssor.slider.css\" />\n    <script type=\"text/javascript\" src=\"path/to/your/jssor.slider.min.js\"></script>\n    <style>\n        /*Optional: Add some basic styling for the slider container*/\n        #slider1_container {\n            width: 600px;\n            height: 300px;\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"slider1_container\">\n        <!-- Slides will be added here -->\n    </div>\n\n    <script>\n        var jssor_1_options = {\n          // Basic options here - refer to Jssor documentation for more advanced options.\n            $AutoPlay: true,\n            $SlideshowOptions: { $PauseOnHover: true }\n        };\n        var jssor_1_slider = new $JssorSlider$( '#slider1_container', jssor_1_options );\n    </script>\n\n</body>\n</html>\n```\nYou'll need to populate the `#slider1_container` with your actual slide images and content.  Refer to the Jssor documentation for details on how to structure your slide content.\n\n\n### Including Jssor in your Project\n\nIncluding Jssor in your project depends on your chosen installation method (CDN or direct download).  Regardless of the method, ensure that both the necessary CSS files (for styling) and the core JavaScript file (for functionality) are correctly referenced within your HTML file's `<head>` section using `<link>` and `<script>` tags respectively,  pointing to the correct file paths. The order of inclusion generally matters; CSS should be included before JavaScript.  After inclusion, you can initialize the slider using the JavaScript code provided in the 'Basic Usage' and 'First Slider Example' sections.  Remember to adapt the file paths and options to suit your specific project setup and desired slider behavior.  If using a build system (like Webpack or Parcel), adjust the importing mechanism accordingly to match your build process.\n\n\n## Slider Structure and Markup\n\n### Understanding the Container\n\nThe foundation of any Jssor slider is its container element. This is a standard HTML element (typically a `<div>`) that serves as the parent for all slider components.  It's crucial to define the container's dimensions (width and height) using CSS, as this dictates the size and aspect ratio of the slider.  Jssor uses this container to position and manage the slides.  The ID of this container is essential; it's used in the JavaScript initialization code to specify which element the slider should be applied to.  Incorrectly specifying the container ID will prevent the slider from functioning.  Properly sizing and identifying this container is the first and most important step in creating a Jssor slider.\n\n### Image Slides\n\nThe simplest form of a Jssor slide consists of an image.  Each image slide is typically represented as an `<img>` tag within the slider container.  You can add multiple `<img>` tags to create a sequence of image slides.  While simple, these can be enhanced with captions or overlays using additional HTML elements nested within the same container as the image.  Jssor will automatically handle the display and transitions of these image slides based on the configuration settings.  Remember to provide appropriate alternative text (`alt` attribute) for accessibility.  For optimal performance, use optimized images (e.g., appropriately sized and compressed).\n\n### Content Slides\n\nJssor isn't limited to just images; it also supports content slides. These slides allow for more complex layouts and incorporate elements beyond just images.  You can include text, videos, or other HTML elements within a content slide.  The structure of a content slide is very flexible; you can use any HTML element you need, but it is usually contained within a `<div>` element acting as a slide.  The styling of content slides is entirely up to you and should be done using CSS, ensuring proper layout and responsiveness. You can use nested divs or other suitable HTML elements to structure the content within each slide.\n\n### Using Markers\n\nMarkers (or bullets) provide a visual indication of the current slide and the total number of slides. They act as a simple navigation mechanism, allowing users to jump to specific slides. Jssor automatically generates and manages markers based on the number of slides. The appearance of the markers (size, shape, color, etc.) is highly customizable through Jssor's options. Markers typically appear below or above the slider container, providing a compact navigation solution.  You don't need to manually add markers in your HTML; Jssor handles their creation and positioning automatically.\n\n### Navigation Arrows\n\nNavigation arrows offer another way for users to navigate through the slides. These are typically displayed on either side of the slider container, with one arrow moving to the previous slide and the other to the next. Similar to markers, Jssor manages the creation and behavior of these arrows. You can customize their appearance and behavior through various options.  Their inclusion is optional but greatly enhances user interaction and makes it easier to traverse the slides.\n\n### Thumbnail Navigator\n\nA thumbnail navigator provides a visual preview of all slides as small thumbnails.  Users can click on a thumbnail to jump directly to the corresponding slide.  The implementation of a thumbnail navigator requires you to create the thumbnails (either as images or using other means) and provide the necessary HTML structure to hold them. The Jssor configuration options then define how the thumbnail navigator connects with the main slider to provide this advanced navigation functionality. The location and visual style of the thumbnail navigator are also highly customizable through Jssorâ€™s options.\n\n\n## Configuration Options\n\nJssor offers a wide array of configuration options, allowing for extensive customization of your slider's behavior and appearance. These options are passed to the JssorSlider constructor as a JavaScript object.  This section provides an overview of the key option categories.  Refer to the complete Jssor documentation for detailed descriptions of each option and its possible values.\n\n### General Options\n\nGeneral options control fundamental aspects of the slider, such as its width, height, and overall behavior.  Key options in this category often include:\n\n*   `$FillMode`:  Determines how the slider fills its container (e.g., `$FillMode.fill`, `$FillMode.fit`, `$FillMode.actual`).\n*   `$AutoPlay`: Enables or disables automatic slideshow playback (boolean value).\n*   `$Idle`: Defines the idle time (in milliseconds) between transitions when autoplay is enabled.\n*   `$UISearchMode`: Specifies how the slider's user interface (UI) elements are searched (e.g.,  `$UISearchMode.PARENT`, `$UISearchMode.INNER`).\n*   `$DragOrientation`: Restricts the dragging direction to either horizontal or vertical.\n\n\n### Slideshow Options\n\nSlideshow options govern the behavior of the automatic slideshow functionality.  Important options in this category include:\n\n*   `$PauseOnHover`: Pauses the slideshow when the mouse hovers over the slider (boolean value).\n*   `$PlayOrientation`: Defines the direction of slideshow playback (e.g., forward, backward, or both).\n*   `$PlayDirection`: Specifies the playback direction of the slideshow (e.g., `$PlayDirection.LTR`, `$PlayDirection.RTL`).\n*   `$Interval`: Sets the time interval (in milliseconds) between slide transitions during autoplay.\n\n\n### Navigation Options\n\nNavigation options control the appearance and behavior of the slider's navigation elements, such as arrows and bullets. Key options in this category include:\n\n*   `$ArrowNavigatorOptions`:  Configures the appearance and behavior of the arrow navigator.  This is often a nested object containing options for arrow size, position, and appearance.\n*   `$BulletNavigatorOptions`: Configures the appearance and behavior of the bullet navigator.  This is also usually a nested object specifying bullet size, shape, position, and behavior.\n*   `$ThumbnailNavigatorOptions`:  Configures the appearance and behavior of the thumbnail navigator, including the number of visible thumbnails and their arrangement.\n\n\n### Autoplay Options\n\nAutoplay options are essential for configuring the automatic slide transitions.  Key options in this category include:\n\n*   `$AutoPlayInterval`: Sets the interval (in milliseconds) between automatic transitions.\n*   `$AutoPlaySteps`:  Determines the number of slides to advance or reverse during each autoplay step.\n*   `$AutoPlayLoops`: Specifies the number of times the slideshow loops before stopping. (Set to -1 for infinite loops).\n\n\n### Responsive Options\n\nResponsive options are crucial for adapting the slider's behavior to different screen sizes.  Key options in this category often include:\n\n*   `$Responsive`: Enables or disables responsive behavior (boolean value).\n*   `$MinDragOffsetToSlide`:  Defines the minimum drag offset required to trigger a slide transition. Useful for preventing accidental slide changes on touch devices.\n*   `$ScaleWidth`: Defines how the slider scales its width to fit different screen sizes.\n\n\n### Accessibility Options\n\nAccessibility options ensure the slider is usable by people with disabilities.  While specific options may vary depending on the Jssor version, ensure to check for options related to:\n\n*   Keyboard navigation: Options allowing control of the slider using keyboard shortcuts.\n*   Screen reader compatibility: Settings that improve compatibility with screen readers.\n*   Alternative text for images:  Proper configuration encourages the use of `alt` attributes on images for screen readers.\n\n\n### Advanced Options\n\nAdvanced options cater to more complex customizations and fine-grained control.  These options often relate to:\n\n*   Custom transitions: Allows for the definition of custom transition effects.\n*   Event handling: Options to handle specific slider events (e.g., slide change, start, stop).\n*   Deep linking:  Enables integration with deep links for direct navigation to specific slides.\n*   Performance optimization: options for enhancing slider performance, such as disabling certain features.\n\nRemember to consult the official Jssor documentation for the most up-to-date information on available options, their functionalities, and usage examples.  The specific options and their parameters might change slightly between versions.\n\n\n## Slider Types and Effects\n\nJssor offers a variety of slider types and transition effects, allowing for significant customization of your slider's presentation.  This section outlines some common slider types and effects.  The specific effects available might vary depending on the Jssor version. Consult the latest documentation for a complete list and details.\n\n### Carousel Slider\n\nA carousel slider displays slides sequentially, often with a smooth horizontal or vertical transition.  This is one of the most common slider types and is well-suited for displaying a series of images or content blocks. Jssor simplifies the creation of a carousel slider by providing options to control the transition speed, direction, and easing function. You can configure the number of slides visible at once (partially visible slides are also common in carousel sliders), creating a dynamic and visually appealing experience.\n\n### Banner Slider\n\nA banner slider is similar to a carousel but typically focuses on showcasing large, impactful images or banners.  It often uses minimal navigation and emphasizes visual appeal.  In Jssor, this type of slider is usually achieved by configuring the slider's dimensions to accommodate large images and choosing transition effects that emphasize visual impact, such as fade transitions or more subtle slide animations.\n\n### Thumbnail Slider\n\nA thumbnail slider combines a main slider with a thumbnail navigator.  This allows users to preview all slides as thumbnails and select the desired slide. Jssor provides options to customize the thumbnail navigator's appearance (size, layout, etc.) and its interaction with the main slider.  This type of slider is particularly useful when dealing with a large number of slides, enhancing user navigation and allowing quick access to specific content.\n\n\n### Fade Effects\n\nFade effects transition between slides by gradually fading out the current slide and fading in the next. Jssor allows you to adjust the fade duration and easing function, creating smooth and visually appealing transitions.  Simple fade effects are often best suited for clean, elegant designs where the focus is on content rather than elaborate animations.\n\n\n### Slide Effects\n\nSlide effects involve the horizontal or vertical movement of slides. Jssor offers various slide effects, including simple linear slides, accelerated slides, and more complex animated movements. You can control the speed, direction, and easing function of these slide effects to create a unique and engaging experience.  Slide effects are often visually more dynamic than fade effects, drawing more attention to the transition itself.\n\n### Zoom Effects\n\nZoom effects involve scaling the slides during the transition. Jssor can achieve zoom effects through configuration options. You can control the zoom intensity, duration, and direction, often combined with other transition types like slide or fade, to create more complex and striking visual effects.  Zoom effects are particularly effective for showcasing high-resolution images or emphasizing specific details.\n\n\n### Customizing Transition Effects\n\nWhile Jssor offers a variety of built-in transition effects, it also allows for more advanced customization.  For highly specialized requirements, you might need to create custom transition effects using Jssor's API or by extending its functionalities.  This typically involves more complex JavaScript coding and a deep understanding of the Jssor framework.  Consult the advanced sections of the Jssor documentation for information on creating and implementing custom transitions. The level of customization depends greatly on your programming skills and the complexity of the desired effect.\n\n\n## Responsive Design and Adaptation\n\nCreating responsive sliders with Jssor involves configuring settings to ensure the slider adapts gracefully to different screen sizes and devices. This section explores techniques for achieving responsive behavior.\n\n### Responsive Settings\n\nJssor's responsive settings are crucial for adapting the slider to various screen sizes. The primary setting is usually a boolean option (often `$Responsive`) that enables or disables responsive behavior.  When enabled, the slider automatically adjusts its dimensions and behavior based on the available screen width.  Many other configuration options interact with the responsive settings, impacting aspects like scaling, slide dimensions, and navigation element positioning.  Carefully reviewing and configuring these options ensures your slider functions correctly across different devices.\n\n\n### Scaling and Resizing\n\nScaling and resizing are essential aspects of responsive design.  Jssor allows you to control how the slider scales its width and height when the screen size changes.  Options often include controlling the aspect ratio, maintaining proportions, or allowing independent scaling of width and height.  You might choose to scale the slider proportionally to maintain its original aspect ratio or allow it to fill the available width and adjust its height accordingly. The choice depends on your design and how you want the slider to adapt.\n\n### Device Detection\n\nWhile Jssor doesn't explicitly provide device detection features, you can leverage browser capabilities to detect device characteristics (e.g., screen size, touch support) and adjust slider settings accordingly. You could use JavaScript to check for touch support and enable touch-friendly navigation options or adjust the slider's animation speed based on the device's processing power.  This approach enhances the user experience by tailoring the slider to the capabilities of the device.\n\n\n### Fluid Width and Height\n\nFluid width and height allow the slider to dynamically adjust its size based on the available space.  Jssor often supports this through CSS and configuration options.  By specifying percentage-based dimensions for the slider container, the slider adapts to the available space within its parent container.  Combining this with responsive settings ensures that the slider scales gracefully across different screen sizes and resolutions.\n\n### Optimizing for Mobile Devices\n\nOptimizing Jssor sliders for mobile devices involves several considerations.  First, ensuring responsiveness is crucialâ€”the slider should adapt seamlessly to smaller screens.  Next, consider performance optimization; minimize the number of high-resolution images or use responsive images to load appropriately sized images based on the device's screen resolution.  Finally, enhance usability by implementing touch-friendly navigation and avoiding overly complex animations which could negatively impact performance on lower-powered devices.  Proper touch event handling is also key to making the slider intuitive and easy to use on touchscreens.\n\n\n## Advanced Techniques\n\nThis section covers advanced techniques for customizing and extending Jssor's functionality beyond basic configuration.\n\n### Customizing Styles\n\nJssor allows extensive style customization using CSS. While Jssor provides default styles, you can override these or create entirely new styles to match your website's design.  Target specific Jssor elements using their class names or IDs. For instance, you can change the color, size, and shape of navigation arrows, bullets, or even the slides themselves by writing CSS rules that target the relevant CSS classes provided by Jssor.  Be sure to include your custom CSS after including the Jssor CSS file to ensure your styles override the defaults.  Using a CSS preprocessor (like Sass or Less) can further simplify styling complex sliders.\n\n\n### Using CSS\n\nCSS plays a vital role in styling Jssor sliders.  Jssor relies on specific CSS classes to style its elements.  You should not modify the Jssor CSS file directly; instead, create a separate CSS file to add custom styles and overrides.  Use the developer tools of your browser to inspect the CSS classes used by Jssor and target them in your custom stylesheet.  This approach ensures that updates to Jssor's CSS won't affect your custom styles.  Remember to maintain CSS specificity when writing your custom styles to avoid unintended conflicts.\n\n\n### Adding Custom Animations\n\nWhile Jssor offers several built-in transition effects, you might need to create custom animations. This typically requires a deeper understanding of JavaScript and Jssor's API. You might use Jssor's event handling capabilities to trigger custom animation functions at specific points during the slide transitions. Libraries like GSAP (GreenSock Animation Platform) can be integrated with Jssor to create more complex and sophisticated animations.  This approach requires programming proficiency and careful integration to avoid conflicts with Jssor's internal mechanisms.\n\n\n### Integrating with Other Libraries\n\nIntegrating Jssor with other JavaScript libraries is possible, but requires careful consideration.  Ensure compatibility by checking for potential conflicts between libraries.  You might integrate with libraries for image loading, animation (as mentioned above), or other UI elements.  Properly managing dependencies and ensuring proper initialization order is critical for successful integration.  If using a module bundler (like Webpack), managing dependencies becomes significantly easier.\n\n\n### Handling Events\n\nJssor provides several events that you can listen for and respond to using JavaScript.  These events can trigger custom actions, such as updating other parts of your website or performing specific actions based on slider state changes.  Examples include events triggered when a slide changes, when the autoplay starts or stops, or when a user interacts with the slider's navigation.  Proper event handling improves interactivity and dynamic behavior.  Consult the Jssor API documentation for a comprehensive list of available events and their parameters.\n\n\n### API Reference\n\nThe Jssor API reference is crucial for advanced development.  This comprehensive documentation lists all available methods, properties, and events provided by the Jssor library.  This allows you to directly manipulate the slider's behavior and access its internal state.  Understanding the API is essential for creating custom plugins, extending functionalities, and developing highly customized solutions.  The API reference is typically available on the Jssor website.  Always refer to the latest API documentation for the specific version of Jssor you are using.\n\n\n\n## Troubleshooting\n\nThis section provides guidance on resolving common issues and optimizing Jssor performance.\n\n### Common Issues and Solutions\n\nSeveral common issues can arise when using Jssor.  Here are some examples and solutions:\n\n*   **Slider not displaying:** Verify that Jssor's JavaScript and CSS files are correctly included in your HTML. Double-check file paths and ensure that there are no typos in your code. Also, confirm that the container element's ID matches the one used in the initialization code.\n\n*   **Slides not loading:** Ensure that the paths to your image or content files are correct. Check for any network errors that might prevent the resources from loading. If using external resources, confirm their availability and accessibility.\n\n*   **Navigation issues:** Ensure that the navigation options (arrows, bullets, thumbnails) are correctly configured.  Check the CSS for potential styling issues that might hide or misposition these elements.  If using custom navigation, review the implementation for errors.\n\n*   **Responsive issues:** Ensure that responsive settings are correctly configured.  Check CSS to make sure your slider scales appropriately on different screen sizes.  Inspect the slider's behavior on various devices and screen resolutions to identify any anomalies.\n\n*   **JavaScript errors:** Use your browser's developer tools to inspect the JavaScript console for error messages.  These messages often pinpoint the source of the problem.  Correct any syntax errors or logic flaws indicated in the console.\n\n\n### Debugging Tips\n\nEffective debugging is crucial for resolving Jssor issues.  Here are some helpful tips:\n\n*   **Use your browser's developer tools:**  Inspect the console for JavaScript errors, network requests, and other relevant information. The browser's debugger can also step through your code to help locate problems.\n\n*   **Simplify your code:**  If you're encountering complex issues, try simplifying your slider's configuration and content to isolate the problem.  A minimal working example can help pinpoint the root cause.\n\n*   **Test incrementally:**  Add features gradually and test after each addition.  This helps identify when and where problems are introduced.\n\n*   **Check Jssor documentation:**  Review the documentation thoroughly to ensure that your setup and configuration align with best practices.\n\n*   **Search for similar issues:**  Search online forums and communities for similar problems reported by other Jssor users.  Solutions or workarounds might already exist.\n\n\n### Browser Compatibility\n\nJssor generally supports modern browsers.  However, very old or outdated browsers might encounter compatibility issues.  Test your slider on various browsers and devices to ensure cross-browser compatibility.  Consider using a polyfill or transpiler to address potential compatibility gaps with older browsers.\n\n\n### Performance Optimization\n\nOptimizing Jssor for performance is crucial, particularly for sliders with many slides or large images.  Here are some tips:\n\n*   **Use optimized images:**  Compress your images to reduce their file sizes without significantly impacting quality.  Use appropriate image formats (e.g., WebP) for better compression.\n\n*   **Lazy loading:**  Implement lazy loading to load images only when they are about to be displayed.  This prevents unnecessary loading of images that might not be viewed.\n\n*   **Minimize HTTP requests:**  Combine CSS and JavaScript files to reduce the number of HTTP requests.\n\n*   **Use a CDN:**  Host your Jssor files on a CDN to reduce loading times by leveraging geographically closer servers.\n\n*   **Avoid complex animations:**  Overly complex animations can negatively impact performance.  Choose simpler transitions where possible.\n\n\n### Known Bugs and Limitations\n\nJssor, like any software, might have known bugs or limitations.  Check the Jssor website or forums for announcements of known issues and potential workarounds.   Always use the latest stable version of Jssor to benefit from bug fixes and performance improvements.  If you encounter a bug that's not documented, report it to the Jssor developers to assist with improving the library.\n\n\n## API Reference\n\nThis section provides a high-level overview of the Jssor API.  Due to the extensive nature of the API,  a complete reference is beyond the scope of this manual excerpt.  Consult the official Jssor documentation for a comprehensive and up-to-date API reference.  This section highlights key aspects.\n\n### Jssor Object Methods\n\nThe core Jssor object (`$JssorSlider`) exposes various methods for controlling the slider's behavior.  These methods allow you to programmatically interact with the slider, triggering actions, retrieving information, or modifying settings.  Key method categories often include:\n\n*   **Initialization and Setup:** Methods for initializing the slider, setting options, and configuring its structure.  This often includes methods to start and stop the autoplay, or to set the current slide.\n\n*   **Navigation Control:** Methods for navigating through the slides, jumping to specific slides, or controlling the direction of playback.  This would likely involve methods to go to the next or previous slide, or directly select a slide by index.\n\n*   **State Management:** Methods for retrieving information about the slider's current state, such as the current slide index, whether autoplay is active, or other relevant status information.\n\n*   **Event Handling:** Methods to attach event listeners to specific slider events.  This would encompass adding or removing functions to be executed when events occur.\n\n\nThe exact methods available and their parameters vary depending on the Jssor version.  Always refer to the official documentation for a complete list and detailed descriptions.  Method names often follow a clear and consistent naming convention, making it easier to understand their function.\n\n\n### Event Handling\n\nJssor supports an extensive set of events that allow you to react to various slider actions.  These events are triggered by user interactions (e.g., clicking navigation elements), automatic transitions (e.g., autoplay), or other slider-related actions (e.g., slider initialization, resizing).  Event handling typically involves attaching event listeners to the slider object, using functions that are executed when the specified event occurs.\n\n\nCommon events might include:\n\n*   `$OnSlidesChange`: Triggered when the currently displayed slide changes.\n\n*   `$OnStart`: Triggered when autoplay begins.\n\n*   `$OnStop`: Triggered when autoplay stops.\n\n*   `$OnMouseEnter`: Triggered when the mouse cursor enters the slider container.\n\n*   `$OnMouseLeave`: Triggered when the mouse cursor leaves the slider container.\n\n\nEvent handlers typically receive data related to the event, allowing you to perform actions based on the event context.  The precise parameters passed to event handlers will vary based on the specific event.\n\n\n### Utility Functions\n\nJssor might include utility functions to assist with various tasks. These functions are often helper methods designed to simplify common operations or provide convenient access to internal functionalities.  While not as extensive as the methods directly related to slider control, these utility functions can significantly aid in custom development and integration tasks.  Examples might include helper functions for image manipulation, animation control, or DOM element manipulation.\n\n\nRemember that the specific utility functions and their availability depend on the Jssor version.  Always check the official API documentation for the most up-to-date information on all methods, events, and utility functions available. The documentation will typically provide detailed explanations of each function's purpose, parameters, and return values, accompanied by code examples to guide you through usage.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"jssor.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Jssor - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}