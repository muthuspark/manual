{"title":"YUI3 - A Developer's Handbook","markdown":{"yaml":{"title":"YUI3 - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started with YUI3","containsRefs":false,"markdown":"\n\n### Downloading and Installation\n\nYUI 3 is no longer actively developed or supported by Yahoo.  The official YUI 3 website and download links are defunct.  However, the source code is still available through various archives and repositories (such as GitHub).  You'll need to find a suitable archive and download the YUI 3 library.  The core library will typically be a compressed file (e.g., a `.zip` or `.tar.gz` file) containing the JavaScript files and potentially other resources.\n\nOnce downloaded, extract the contents of the archive to a directory of your choice. This directory will contain the YUI library's files. You will likely find a `build` directory; this is where the compiled and ready-to-use JavaScript files reside.  The specific structure of the files might vary depending on the archive you downloaded.\n\n**Note:**  Because YUI 3 is no longer officially supported, be aware that you may encounter difficulties finding up-to-date documentation or community support.  Consider exploring more modern JavaScript frameworks if you are starting a new project.\n\n\n### Basic Project Setup\n\nTo use YUI 3 in your project, you will need to include the necessary JavaScript files in your HTML. The simplest approach is to include the combined `yui-min.js` file (if available in your downloaded version).  This file contains the core YUI library.  Alternatively, you can include individual modules as needed, but this requires a more detailed understanding of the YUI module system (explained in the next section).\n\nA basic HTML file structure would look like this:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>YUI 3 Example</title>\n    <script src=\"path/to/your/yui/build/yui/yui-min.js\"></script>  </head>\n<body>\n    <script>\n        // Your YUI 3 code goes here\n    </script>\n</body>\n</html>\n```\n\nReplace `\"path/to/your/yui/build/yui/yui-min.js\"` with the actual path to the `yui-min.js` file in your downloaded YUI 3 library.\n\n\n### Hello World Example\n\nThis example demonstrates a simple \"Hello, World!\" alert using YUI 3's `YUI` global object.  This approach uses the `use()` method which loads the core YUI module.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>YUI 3 Hello World</title>\n    <script src=\"path/to/your/yui/build/yui/yui-min.js\"></script>\n</head>\n<body>\n    <script>\n        YUI().use('yui', function (Y) {\n            Y.log('Hello, World!', 'info', 'my-logger'); //Logs to the console.  Not strictly necessary, but illustrates YUI functionality\n            alert('Hello, World!');\n        });\n    </script>\n</body>\n</html>\n```\n\nRemember to replace `\"path/to/your/yui/build/yui/yui-min.js\"` with the correct path.  This code uses the `YUI().use()` method to load the core YUI module before accessing YUI functionalities.\n\n### Understanding the YUI Module System\n\nYUI 3 utilizes a modular system to organize its components.  This allows you to include only the necessary modules for your application, improving performance and reducing download size.  Modules are self-contained units of functionality.\n\nThe `YUI().use()` method is the primary way to load modules.  It takes an array of module names as its first argument and a callback function as its second.  The callback function receives a `Y` object, which is the YUI instance, containing all the loaded modules.\n\nFor example:\n\n```javascript\nYUI().use('node', 'event', function (Y) {\n    // 'node' module provides access to DOM manipulation functions.\n    var myNode = Y.one('#myElement'); // Selects an element with ID 'myElement'.\n\n    // 'event' module provides event handling capabilities.\n    myNode.on('click', function(e) {\n        alert('Element clicked!');\n    });\n});\n```\n\nThis code loads the `node` and `event` modules.  After they are loaded, the callback function has access to their functionalities through the `Y` object.  You can find a list of available modules in the (now outdated) YUI 3 documentation, if you can locate it, or by inspecting the contents of the downloaded `build` directory.  Remember that the structure and availability of modules might vary depending on the specific YUI 3 version you downloaded.\n\n\n## Core Modules\n\n### The YUI Object\n\nThe `YUI` object is the central namespace and entry point for all YUI 3 functionality.  It's the global object you interact with to use YUI's modules and utilities.  You typically obtain an instance of the `YUI` object using `YUI()`. This creates a new YUI instance, allowing you to manage module loading and configuration separately from other parts of your application.  The `use()` method is the most important method of the `YUI` object.\n\n**Example:**\n\n```javascript\nYUI().use('node', function (Y) {\n    // Y is a YUI instance with the 'node' module loaded.\n    var node = Y.one('#myElement');  // Accessing Node utility\n});\n```\n\nThe `YUI` object has several useful methods beyond `use()`, including `config()` for setting global options,  `env` for accessing browser environment information, and methods for managing the lifecycle of the YUI instance (though less critical with the simpler approach shown above). Refer to the (now unavailable official) YUI 3 documentation for a complete list of methods.  Finding this documentation will be a challenge, as it's no longer actively maintained.\n\n\n\n### Event Utility\n\nYUI 3's `Event` utility provides a powerful and cross-browser compatible mechanism for handling DOM events.  It simplifies event attachment, detachment, and custom event creation.  The `Event` utility is usually loaded alongside the `node` module as it often works in tandem with DOM manipulation.\n\n**Key methods:**\n\n* **`on(type, fn, context)`:** Attaches an event listener.  `type` is the event type (e.g., 'click', 'mouseover'), `fn` is the event handler function, and `context` is the optional scope for the function.\n\n* **`once(type, fn, context)`:** Attaches an event listener that fires only once.\n\n* **`detach(type, fn, context)`:** Detaches an event listener.\n\n* **`fire(type, eventData)`:** Programmatically fires an event.\n\n**Example:**\n\n```javascript\nYUI().use('node', 'event', function (Y) {\n  var button = Y.one('#myButton');\n  button.on('click', function(e) {\n      alert('Button clicked!');\n  });\n});\n```\n\nThis attaches a click event listener to an element with the ID 'myButton'.  The event handler function alerts a message when the button is clicked.\n\n### DOM Utility\n\nThe `Node` utility (often accessed via `Y.one()` or `Y.all()`) provides a high-level, efficient, and cross-browser-compatible interface for manipulating the DOM. It simplifies tasks such as selecting elements, adding/removing classes, changing content, and working with attributes.  `Y.one()` selects a single element, while `Y.all()` selects multiple elements.\n\n\n**Key methods (examples using Y.one()):**\n\n* **`addClass(className)`:** Adds a CSS class.\n* **`removeClass(className)`:** Removes a CSS class.\n* **`toggleClass(className)`:** Toggles a CSS class.\n* **`setAttribute(name, value)`:** Sets an attribute.\n* **`getAttribute(name)`:** Gets an attribute.\n* **`setContent(html)`:** Sets the HTML content.\n* **`append(newNode)`:** Appends a new node.\n\n\n**Example:**\n\n```javascript\nYUI().use('node', function (Y) {\n    var element = Y.one('#myElement');\n    element.addClass('highlight');\n    element.setContent('New content');\n});\n\n```\n\nThis adds the class 'highlight' and changes the content of an element with the ID 'myElement'.\n\n\n### Custom Events\n\nYUI 3 allows you to create and manage custom events. This is useful for decoupling components and creating a more modular and maintainable application.  You create a custom event using the `EventTarget` class, or more directly through the `Y.publish` method (though this method is less favored in newer YUI-influenced code).\n\n\n**Example (using EventTarget):**\n\n```javascript\nYUI().use('event', function(Y) {\n    var myCustomEvent = new Y.EventTarget();\n\n    myCustomEvent.on('myevent', function(e) {\n        console.log('Custom event fired!', e.data);\n    });\n\n    myCustomEvent.fire('myevent', { message: 'Hello from custom event!' });\n});\n```\n\nThis creates a custom event named 'myevent', attaches an event listener, and then fires the event with some data.  The event listener then logs a message to the console including the event data.  Remember that direct usage of `EventTarget` is generally preferred to older `publish` methods.  This section needs to be further augmented with further explanations of how to use custom events within the `YUI` context.\n\n\n## UI Components\n\nYUI 3 provides a rich set of UI components to simplify the creation of interactive web applications.  These components are built on top of the core modules, offering pre-built functionality and styling.  Remember that YUI 3 is no longer supported, and finding comprehensive documentation for these components will be challenging.  The descriptions below provide a general overview; details might vary slightly depending on the specific YUI 3 version.\n\n\n### Button\n\nThe `Button` component provides a customizable button element.  You can configure its label, icon, and event handlers.\n\n**Example (Conceptual - actual implementation might require a slightly different syntax):**\n\n```javascript\nYUI().use('button', function (Y) {\n    var button = new Y.Button({\n        label: 'Click Me',\n        onclick: function() {\n            alert('Button clicked!');\n        }\n    });\n    button.render('#myContainer'); // Render the button into a container element.\n});\n```\n\nThis creates a button with the label \"Click Me\" and an event handler that alerts a message when clicked.  The `render()` method is crucial for displaying the component in the DOM.\n\n\n### Checkbox\n\nThe `Checkbox` component renders a checkbox input element. You can configure its checked state, label, and event handlers.\n\n**Example (Conceptual):**\n\n```javascript\nYUI().use('checkbox', function (Y) {\n    var checkbox = new Y.Checkbox({\n        label: 'Agree to terms',\n        checked: false,\n        onChange: function(e) {\n            console.log('Checkbox state changed:', e.target.get('checked'));\n        }\n    });\n    checkbox.render('#myContainer');\n});\n```\n\n\n### Container\n\nThe `Container` component serves as a base class for many other layout components. It provides a flexible way to organize and structure other UI elements.\n\n\n### DataGrid\n\nThe `DataGrid` component displays tabular data.  It supports features like sorting, pagination, and cell editing (though the extent of these features might be limited compared to modern data grid libraries).\n\n\n### Dialog\n\nThe `Dialog` component creates modal or non-modal dialog boxes.  You can customize its title, content, buttons, and other aspects.\n\n\n### Menu\n\nThe `Menu` component renders a menu with items that can be selected.  It supports hierarchical menus and various styling options.\n\n\n### Panel\n\nThe `Panel` component is a general-purpose container with a header, body, and optional footer.  It's often used as a building block for more complex layouts.\n\n\n### Slider\n\nThe `Slider` component creates a horizontal or vertical slider control.  You can configure its range, value, and event handlers.\n\n\n### TabView\n\nThe `TabView` component displays multiple panels as tabs, allowing users to switch between them.\n\n\n### Tree\n\nThe `Tree` component renders a hierarchical tree structure, often used to display file systems, organizational charts, or other hierarchical data.\n\n\n**Important Note:**  The exact syntax, available options, and even the existence of certain components might vary depending on the YUI 3 version and the specific build you are using.  The examples above are conceptual and might need adjustments to work correctly in your specific setup. Because YUI 3 is obsolete, finding reliable, up-to-date documentation will prove challenging.  Consider using a more current JavaScript framework for new projects.\n\n\n## Utilities\n\nYUI 3 provides a set of utility functions to assist with common programming tasks. These utilities are designed to be cross-browser compatible and efficient.  They operate on various data types, enhancing code readability and maintainability.  Remember that YUI 3 is no longer officially supported, so detailed documentation might be scarce.\n\n\n### Array Utility\n\nThe YUI `Array` utility extends JavaScript's built-in `Array` object with additional methods.  While the specifics might vary slightly between YUI versions, you'd generally access these methods through the `Y.Array` namespace (e.g., `Y.Array.some()`).  These methods often provide more concise or robust alternatives to standard array operations.\n\n**Example (Conceptual):**\n\n```javascript\nYUI().use('array-extras', function(Y) { //The module name might vary slightly.\n    var myArray = [1, 2, 3, 4, 5];\n    var evenNumbers = Y.Array.filter(myArray, function(num) {\n        return num % 2 === 0;\n    });\n    console.log(evenNumbers); // Output: [2, 4]\n});\n```\n\nThis uses a `filter` method (an example; other methods like `some`, `every`, etc., are expected) to create a new array containing only the even numbers from `myArray`.  Note that you need to include the appropriate YUI module (likely named something similar to `array-extras`) to access these utility functions.\n\n\n### Lang Utility\n\nThe `Lang` utility provides functions for type checking, object manipulation, and other language-related tasks.  It’s a core utility used extensively within YUI itself and should be readily accessible through `Y.Lang`.\n\n**Example (Conceptual):**\n\n```javascript\nYUI().use('yui', function(Y) { //Lang is often implicitly loaded, but this ensures it's available.\n  console.log(Y.Lang.isArray([1,2,3])); //true\n  console.log(Y.Lang.isObject({a:1}));   //true\n  var clonedObject = Y.Lang.clone({a:1, b:2}); //Creates a shallow copy\n});\n```\n\nThis shows the `isArray` and `isObject` methods which check data types, and `clone` for creating a copy of an object.  Many other helper functions for type checking and manipulation are included within `Y.Lang`.\n\n\n### JSON Utility\n\nThe `JSON` utility provides functions for working with JSON (JavaScript Object Notation) data.  This would likely involve `Y.JSON.parse()` to decode JSON strings and `Y.JSON.stringify()` to encode JavaScript objects into JSON strings.  These are fundamental for handling data received from servers or other sources that use JSON.\n\n**Example (Conceptual):**\n\n```javascript\nYUI().use('json', function(Y) {\n    var jsonData = '{\"name\": \"John Doe\", \"age\": 30}';\n    var jsonObject = Y.JSON.parse(jsonData);\n    console.log(jsonObject.name); // Output: John Doe\n});\n```\n\nThis parses a JSON string into a JavaScript object and then accesses its properties.  Again, you'll need to include the relevant YUI module (usually named `json` or a similar variant).\n\n\n### Number Utility\n\nThe `Number` utility offers functions for working with numbers, possibly including functions for formatting numbers, performing calculations, or handling specific number-related tasks.  The available methods might be less extensive than in more modern libraries.\n\n\n### Object Utility\n\nThe `Object` utility extends the functionality of JavaScript's built-in `Object` object, adding methods for iterating, extending, or modifying objects.  These are highly useful for working with complex data structures.  These methods often mimic those found in `Y.Lang` but might focus specifically on object manipulation.\n\n\n\n### String Utility\n\nThe `String` utility provides functions for manipulating strings, such as trimming whitespace, replacing substrings, or performing other common string operations.  These are essential tools for data processing and text manipulation.  For example, you might find methods similar to `trim()`, `substring()`, or more advanced ones like functions for escaping HTML or regular expression matching (though check if these are explicitly part of the `Y.String` namespace in your YUI version).\n\n\n**Important Note:**  The availability and exact names of methods within the YUI 3 utilities might vary slightly depending on the YUI version and build you are using.  Always refer to the (now unavailable official) documentation or inspect the source code if available to confirm the available methods and their precise usage.  Given the obsolescence of YUI 3, using more recent JavaScript frameworks is highly recommended for new projects.\n\n\n## Advanced Topics\n\nThis section covers more advanced aspects of YUI 3 development.  Remember that YUI 3 is no longer supported, so finding detailed and up-to-date documentation for these topics will be difficult.  The information below provides a general overview; specific implementation details might vary depending on your YUI 3 version and build.\n\n\n### Customizing Components\n\nYUI 3 components are designed to be highly customizable.  You can override their default styles using CSS, modify their behavior by extending their classes, or add new features by creating custom component instances and modifying their properties and methods.  The process often involves subclassing existing component classes and overriding methods or properties as needed.  However, the lack of readily available official documentation makes this a more challenging task for YUI 3.\n\n### Creating Custom Modules\n\nCreating custom modules is essential for organizing and reusing code in larger YUI 3 applications.  This involves defining new modules that encapsulate specific functionality, and then using the `YUI().use()` mechanism to load them.   The general structure involves creating a JavaScript file with a module definition, using a module definition pattern (like AMD or YUI's own internal module mechanism), and making sure to correctly register the new module. Again, the lack of readily available updated documentation will make researching the exact process challenging.\n\n### Asynchronous Loading\n\nAsynchronous loading of YUI 3 modules is crucial for improving the initial page load time and providing a better user experience. YUI 3 supports asynchronous module loading through its module system and the `YUI().use()` method. The `use()` method inherently loads modules asynchronously.  However, you would need to pay special attention to handling the asynchronous nature of this loading within your application logic (e.g., using callbacks or promises).\n\n### Internationalization\n\nInternationalization (i18n) in YUI 3 involves adapting your application to support multiple languages and locales.  This typically requires using resource bundles to store localized text and other data, and then loading the appropriate bundle based on the user's locale.  YUI 3 likely offered some support for this, but specifics require a deep dive into potentially outdated documentation or example applications.\n\n### Accessibility\n\nBuilding accessible YUI 3 applications requires adhering to accessibility guidelines (like WCAG). This involves using appropriate ARIA attributes, providing alternative text for images, ensuring sufficient color contrast, and making sure your application is usable with assistive technologies.  YUI 3 components were likely designed with some accessibility considerations in mind, but you must still follow best practices for accessibility.\n\n### Performance Optimization\n\nOptimizing YUI 3 application performance involves several techniques: minimizing the number of modules loaded, using efficient DOM manipulation techniques, avoiding unnecessary calculations, and optimizing images and other resources.  Profiling tools would help identify performance bottlenecks, but remember the outdated nature of YUI 3 might limit the tools and advice available.\n\n### Debugging and Troubleshooting\n\nDebugging YUI 3 applications involves using browser developer tools (like the console and debugger) to identify and fix errors.  Logging messages at strategic points in your code is invaluable for troubleshooting.   The lack of officially supported tools or debugging aids for YUI 3 might necessitate using general browser debugging approaches.  The older nature of the framework may also mean you encounter compatibility challenges with newer browsers or development tools.\n\n\n**Important Note:** Given that YUI 3 is no longer supported, the information above offers a general conceptual overview.  Specific implementation details and the availability of certain features might vary significantly depending on the exact YUI 3 version and build you are using.  For new projects, using more modern and actively maintained JavaScript frameworks is highly recommended.\n\n\n## Migration from YUI 2\n\nMigrating from YUI 2 to YUI 3 requires careful planning and execution due to significant architectural differences between the two versions.  This section outlines key differences, strategies for conversion, and common pitfalls to avoid.  Remember that YUI 3 itself is no longer supported, so this migration path is largely of historical interest.  If undertaking a migration, thoroughly assess whether continuing with YUI 3 or migrating to a more modern framework is the optimal approach.\n\n\n### Key Differences\n\n* **Modular Architecture:** YUI 3 uses a highly modular architecture, where components and utilities are loaded individually as needed.  This contrasts with YUI 2's more monolithic structure.  This means a significant shift in how modules are included and managed.\n\n* **Namespace:**  The namespace structure changed considerably. YUI 2 used a nested namespace structure (`YAHOO.util`, `YAHOO.widget`, etc.), while YUI 3 uses a flatter structure primarily based on the `Y` object and module loading.\n\n* **DOM Manipulation:**  YUI 2 primarily used its own DOM manipulation functions, while YUI 3 uses the `Node` utility, offering a more streamlined and efficient approach built on top of standard DOM APIs.  This necessitates a translation of DOM operations.\n\n* **Events:** Event handling has been revamped.  YUI 2's event system is different from the more robust and customizable event system in YUI 3 (which leverages the `Event` utility).\n\n* **Component API:** YUI 3 components are significantly different from YUI 2 components.  Methods, properties, and the overall API are redesigned, requiring significant code changes.  Expect substantial rewriting of UI component usage.\n\n* **Utility Functions:**  Many YUI 2 utility functions have counterparts in YUI 3, but their names, parameters, and return values might differ. Careful comparison and code adjustment is necessary.\n\n### Conversion Strategies\n\nA phased approach is recommended for migrating from YUI 2 to YUI 3:\n\n1. **Assessment:** Thoroughly analyze your YUI 2 codebase to identify all dependencies and components used.\n\n2. **Modularization:** Break down your YUI 2 code into smaller, more manageable modules.  This step is vital for the transition to YUI 3's modular architecture.\n\n3. **Component Replacement:** Replace YUI 2 components with their YUI 3 equivalents.  This often requires substantial code rewriting because of the API differences.\n\n4. **Utility Function Replacement:** Update YUI 2 utility functions to their YUI 3 counterparts, considering any changes in parameters and return values.\n\n5. **Testing:** Rigorously test the migrated code to ensure functionality and compatibility across different browsers.\n\n6. **Deployment:** Deploy the migrated application in stages, starting with a small subset of features and gradually expanding.\n\n### Common Pitfalls and Solutions\n\n* **Incorrect Module Loading:**  Failure to load necessary YUI 3 modules correctly is a common problem.  Double-check module names and dependencies when using `YUI().use()`.\n\n* **Namespace Conflicts:**  The change in namespace structure can lead to conflicts.  Careful renaming and organization are crucial to avoid clashes.\n\n* **API Mismatches:**  Don't assume that YUI 2 and YUI 3 component APIs are directly interchangeable.  Consult the (now unavailable official) YUI 3 documentation for the correct methods and properties.\n\n* **Event Handling Issues:**  Differences in event handling mechanisms require careful translation. Pay close attention to event attachment, detachment, and custom event implementation.\n\n* **Testing Gaps:**  Insufficient testing can lead to unexpected behavior.  Comprehensive testing across browsers is critical.\n\n* **Lack of Documentation:**  The absence of readily available, complete documentation for YUI 3 makes the migration significantly more challenging.\n\n**Recommendation:** Before starting a migration from YUI 2 to YUI 3 (or even considering YUI 3 at all), carefully weigh the effort required against the potential benefits.  Given the lack of official support for YUI 3, migrating to a modern, actively maintained JavaScript framework might be a more efficient and sustainable long-term solution.\n\n\n## Appendix\n\nThis appendix provides supplemental information to aid in your understanding and use of YUI 3.  Keep in mind that YUI 3 is no longer supported, so the resources mentioned here may be incomplete or unavailable.\n\n\n### Glossary of Terms\n\nBecause YUI 3 is no longer actively maintained, a comprehensive glossary is not readily available. However, key terms include:\n\n* **Module:** A self-contained unit of functionality in YUI 3. Modules are loaded individually using `YUI().use()`.\n* **YUI Instance (Y):**  The object (`Y`) that provides access to all loaded YUI modules and utilities.\n* **Node:** The primary YUI 3 utility for DOM manipulation.\n* **Event:** A mechanism for handling user interactions and other events in the application.\n* **Component:** A pre-built UI element provided by YUI 3, such as Button, Checkbox, or DataGrid.\n* **Utility:** A helper function for common tasks, such as string manipulation, array operations, or JSON handling.\n* **Asynchronous Loading:** Loading modules in the background without blocking the main thread.\n\nFor more detailed definitions of terms specific to YUI 3, you would need to search for archived documentation or potentially examine the source code of the framework itself.\n\n### API Reference\n\nUnfortunately, a complete and readily available API reference for YUI 3 is unlikely to exist due to the project's discontinuation.  The official documentation is defunct.  Your best bet for finding information about specific components or utilities would involve searching for archived versions of the documentation online (a difficult and unreliable task) or inspecting the source code directly.\n\n### Example Code Snippets\n\nBecause no central repository for updated code examples exists for YUI 3, finding examples will prove challenging.  However, you might find snippets of code in outdated blog posts, forums, or archived YUI community resources.  These snippets could provide illustrations of specific tasks or usages of YUI 3 components and utilities.   Searching for \"YUI 3 [specific task or component]\" on relevant platforms might yield some results.\n\n### Contributors\n\nDue to the project's age and lack of official maintenance, identifying all original YUI 3 contributors is difficult.  Information on contributors is likely scattered across various sources.  However, it's safe to say that the core team at Yahoo! at the time played a significant role in its development, along with many community members who contributed code, bug fixes, and documentation.  Finding a comprehensive list of contributors will likely require extensive research across old forums, mailing lists, and code repositories associated with the project.\n\n\n","srcMarkdownNoYaml":"\n## Getting Started with YUI3\n\n### Downloading and Installation\n\nYUI 3 is no longer actively developed or supported by Yahoo.  The official YUI 3 website and download links are defunct.  However, the source code is still available through various archives and repositories (such as GitHub).  You'll need to find a suitable archive and download the YUI 3 library.  The core library will typically be a compressed file (e.g., a `.zip` or `.tar.gz` file) containing the JavaScript files and potentially other resources.\n\nOnce downloaded, extract the contents of the archive to a directory of your choice. This directory will contain the YUI library's files. You will likely find a `build` directory; this is where the compiled and ready-to-use JavaScript files reside.  The specific structure of the files might vary depending on the archive you downloaded.\n\n**Note:**  Because YUI 3 is no longer officially supported, be aware that you may encounter difficulties finding up-to-date documentation or community support.  Consider exploring more modern JavaScript frameworks if you are starting a new project.\n\n\n### Basic Project Setup\n\nTo use YUI 3 in your project, you will need to include the necessary JavaScript files in your HTML. The simplest approach is to include the combined `yui-min.js` file (if available in your downloaded version).  This file contains the core YUI library.  Alternatively, you can include individual modules as needed, but this requires a more detailed understanding of the YUI module system (explained in the next section).\n\nA basic HTML file structure would look like this:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>YUI 3 Example</title>\n    <script src=\"path/to/your/yui/build/yui/yui-min.js\"></script>  </head>\n<body>\n    <script>\n        // Your YUI 3 code goes here\n    </script>\n</body>\n</html>\n```\n\nReplace `\"path/to/your/yui/build/yui/yui-min.js\"` with the actual path to the `yui-min.js` file in your downloaded YUI 3 library.\n\n\n### Hello World Example\n\nThis example demonstrates a simple \"Hello, World!\" alert using YUI 3's `YUI` global object.  This approach uses the `use()` method which loads the core YUI module.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>YUI 3 Hello World</title>\n    <script src=\"path/to/your/yui/build/yui/yui-min.js\"></script>\n</head>\n<body>\n    <script>\n        YUI().use('yui', function (Y) {\n            Y.log('Hello, World!', 'info', 'my-logger'); //Logs to the console.  Not strictly necessary, but illustrates YUI functionality\n            alert('Hello, World!');\n        });\n    </script>\n</body>\n</html>\n```\n\nRemember to replace `\"path/to/your/yui/build/yui/yui-min.js\"` with the correct path.  This code uses the `YUI().use()` method to load the core YUI module before accessing YUI functionalities.\n\n### Understanding the YUI Module System\n\nYUI 3 utilizes a modular system to organize its components.  This allows you to include only the necessary modules for your application, improving performance and reducing download size.  Modules are self-contained units of functionality.\n\nThe `YUI().use()` method is the primary way to load modules.  It takes an array of module names as its first argument and a callback function as its second.  The callback function receives a `Y` object, which is the YUI instance, containing all the loaded modules.\n\nFor example:\n\n```javascript\nYUI().use('node', 'event', function (Y) {\n    // 'node' module provides access to DOM manipulation functions.\n    var myNode = Y.one('#myElement'); // Selects an element with ID 'myElement'.\n\n    // 'event' module provides event handling capabilities.\n    myNode.on('click', function(e) {\n        alert('Element clicked!');\n    });\n});\n```\n\nThis code loads the `node` and `event` modules.  After they are loaded, the callback function has access to their functionalities through the `Y` object.  You can find a list of available modules in the (now outdated) YUI 3 documentation, if you can locate it, or by inspecting the contents of the downloaded `build` directory.  Remember that the structure and availability of modules might vary depending on the specific YUI 3 version you downloaded.\n\n\n## Core Modules\n\n### The YUI Object\n\nThe `YUI` object is the central namespace and entry point for all YUI 3 functionality.  It's the global object you interact with to use YUI's modules and utilities.  You typically obtain an instance of the `YUI` object using `YUI()`. This creates a new YUI instance, allowing you to manage module loading and configuration separately from other parts of your application.  The `use()` method is the most important method of the `YUI` object.\n\n**Example:**\n\n```javascript\nYUI().use('node', function (Y) {\n    // Y is a YUI instance with the 'node' module loaded.\n    var node = Y.one('#myElement');  // Accessing Node utility\n});\n```\n\nThe `YUI` object has several useful methods beyond `use()`, including `config()` for setting global options,  `env` for accessing browser environment information, and methods for managing the lifecycle of the YUI instance (though less critical with the simpler approach shown above). Refer to the (now unavailable official) YUI 3 documentation for a complete list of methods.  Finding this documentation will be a challenge, as it's no longer actively maintained.\n\n\n\n### Event Utility\n\nYUI 3's `Event` utility provides a powerful and cross-browser compatible mechanism for handling DOM events.  It simplifies event attachment, detachment, and custom event creation.  The `Event` utility is usually loaded alongside the `node` module as it often works in tandem with DOM manipulation.\n\n**Key methods:**\n\n* **`on(type, fn, context)`:** Attaches an event listener.  `type` is the event type (e.g., 'click', 'mouseover'), `fn` is the event handler function, and `context` is the optional scope for the function.\n\n* **`once(type, fn, context)`:** Attaches an event listener that fires only once.\n\n* **`detach(type, fn, context)`:** Detaches an event listener.\n\n* **`fire(type, eventData)`:** Programmatically fires an event.\n\n**Example:**\n\n```javascript\nYUI().use('node', 'event', function (Y) {\n  var button = Y.one('#myButton');\n  button.on('click', function(e) {\n      alert('Button clicked!');\n  });\n});\n```\n\nThis attaches a click event listener to an element with the ID 'myButton'.  The event handler function alerts a message when the button is clicked.\n\n### DOM Utility\n\nThe `Node` utility (often accessed via `Y.one()` or `Y.all()`) provides a high-level, efficient, and cross-browser-compatible interface for manipulating the DOM. It simplifies tasks such as selecting elements, adding/removing classes, changing content, and working with attributes.  `Y.one()` selects a single element, while `Y.all()` selects multiple elements.\n\n\n**Key methods (examples using Y.one()):**\n\n* **`addClass(className)`:** Adds a CSS class.\n* **`removeClass(className)`:** Removes a CSS class.\n* **`toggleClass(className)`:** Toggles a CSS class.\n* **`setAttribute(name, value)`:** Sets an attribute.\n* **`getAttribute(name)`:** Gets an attribute.\n* **`setContent(html)`:** Sets the HTML content.\n* **`append(newNode)`:** Appends a new node.\n\n\n**Example:**\n\n```javascript\nYUI().use('node', function (Y) {\n    var element = Y.one('#myElement');\n    element.addClass('highlight');\n    element.setContent('New content');\n});\n\n```\n\nThis adds the class 'highlight' and changes the content of an element with the ID 'myElement'.\n\n\n### Custom Events\n\nYUI 3 allows you to create and manage custom events. This is useful for decoupling components and creating a more modular and maintainable application.  You create a custom event using the `EventTarget` class, or more directly through the `Y.publish` method (though this method is less favored in newer YUI-influenced code).\n\n\n**Example (using EventTarget):**\n\n```javascript\nYUI().use('event', function(Y) {\n    var myCustomEvent = new Y.EventTarget();\n\n    myCustomEvent.on('myevent', function(e) {\n        console.log('Custom event fired!', e.data);\n    });\n\n    myCustomEvent.fire('myevent', { message: 'Hello from custom event!' });\n});\n```\n\nThis creates a custom event named 'myevent', attaches an event listener, and then fires the event with some data.  The event listener then logs a message to the console including the event data.  Remember that direct usage of `EventTarget` is generally preferred to older `publish` methods.  This section needs to be further augmented with further explanations of how to use custom events within the `YUI` context.\n\n\n## UI Components\n\nYUI 3 provides a rich set of UI components to simplify the creation of interactive web applications.  These components are built on top of the core modules, offering pre-built functionality and styling.  Remember that YUI 3 is no longer supported, and finding comprehensive documentation for these components will be challenging.  The descriptions below provide a general overview; details might vary slightly depending on the specific YUI 3 version.\n\n\n### Button\n\nThe `Button` component provides a customizable button element.  You can configure its label, icon, and event handlers.\n\n**Example (Conceptual - actual implementation might require a slightly different syntax):**\n\n```javascript\nYUI().use('button', function (Y) {\n    var button = new Y.Button({\n        label: 'Click Me',\n        onclick: function() {\n            alert('Button clicked!');\n        }\n    });\n    button.render('#myContainer'); // Render the button into a container element.\n});\n```\n\nThis creates a button with the label \"Click Me\" and an event handler that alerts a message when clicked.  The `render()` method is crucial for displaying the component in the DOM.\n\n\n### Checkbox\n\nThe `Checkbox` component renders a checkbox input element. You can configure its checked state, label, and event handlers.\n\n**Example (Conceptual):**\n\n```javascript\nYUI().use('checkbox', function (Y) {\n    var checkbox = new Y.Checkbox({\n        label: 'Agree to terms',\n        checked: false,\n        onChange: function(e) {\n            console.log('Checkbox state changed:', e.target.get('checked'));\n        }\n    });\n    checkbox.render('#myContainer');\n});\n```\n\n\n### Container\n\nThe `Container` component serves as a base class for many other layout components. It provides a flexible way to organize and structure other UI elements.\n\n\n### DataGrid\n\nThe `DataGrid` component displays tabular data.  It supports features like sorting, pagination, and cell editing (though the extent of these features might be limited compared to modern data grid libraries).\n\n\n### Dialog\n\nThe `Dialog` component creates modal or non-modal dialog boxes.  You can customize its title, content, buttons, and other aspects.\n\n\n### Menu\n\nThe `Menu` component renders a menu with items that can be selected.  It supports hierarchical menus and various styling options.\n\n\n### Panel\n\nThe `Panel` component is a general-purpose container with a header, body, and optional footer.  It's often used as a building block for more complex layouts.\n\n\n### Slider\n\nThe `Slider` component creates a horizontal or vertical slider control.  You can configure its range, value, and event handlers.\n\n\n### TabView\n\nThe `TabView` component displays multiple panels as tabs, allowing users to switch between them.\n\n\n### Tree\n\nThe `Tree` component renders a hierarchical tree structure, often used to display file systems, organizational charts, or other hierarchical data.\n\n\n**Important Note:**  The exact syntax, available options, and even the existence of certain components might vary depending on the YUI 3 version and the specific build you are using.  The examples above are conceptual and might need adjustments to work correctly in your specific setup. Because YUI 3 is obsolete, finding reliable, up-to-date documentation will prove challenging.  Consider using a more current JavaScript framework for new projects.\n\n\n## Utilities\n\nYUI 3 provides a set of utility functions to assist with common programming tasks. These utilities are designed to be cross-browser compatible and efficient.  They operate on various data types, enhancing code readability and maintainability.  Remember that YUI 3 is no longer officially supported, so detailed documentation might be scarce.\n\n\n### Array Utility\n\nThe YUI `Array` utility extends JavaScript's built-in `Array` object with additional methods.  While the specifics might vary slightly between YUI versions, you'd generally access these methods through the `Y.Array` namespace (e.g., `Y.Array.some()`).  These methods often provide more concise or robust alternatives to standard array operations.\n\n**Example (Conceptual):**\n\n```javascript\nYUI().use('array-extras', function(Y) { //The module name might vary slightly.\n    var myArray = [1, 2, 3, 4, 5];\n    var evenNumbers = Y.Array.filter(myArray, function(num) {\n        return num % 2 === 0;\n    });\n    console.log(evenNumbers); // Output: [2, 4]\n});\n```\n\nThis uses a `filter` method (an example; other methods like `some`, `every`, etc., are expected) to create a new array containing only the even numbers from `myArray`.  Note that you need to include the appropriate YUI module (likely named something similar to `array-extras`) to access these utility functions.\n\n\n### Lang Utility\n\nThe `Lang` utility provides functions for type checking, object manipulation, and other language-related tasks.  It’s a core utility used extensively within YUI itself and should be readily accessible through `Y.Lang`.\n\n**Example (Conceptual):**\n\n```javascript\nYUI().use('yui', function(Y) { //Lang is often implicitly loaded, but this ensures it's available.\n  console.log(Y.Lang.isArray([1,2,3])); //true\n  console.log(Y.Lang.isObject({a:1}));   //true\n  var clonedObject = Y.Lang.clone({a:1, b:2}); //Creates a shallow copy\n});\n```\n\nThis shows the `isArray` and `isObject` methods which check data types, and `clone` for creating a copy of an object.  Many other helper functions for type checking and manipulation are included within `Y.Lang`.\n\n\n### JSON Utility\n\nThe `JSON` utility provides functions for working with JSON (JavaScript Object Notation) data.  This would likely involve `Y.JSON.parse()` to decode JSON strings and `Y.JSON.stringify()` to encode JavaScript objects into JSON strings.  These are fundamental for handling data received from servers or other sources that use JSON.\n\n**Example (Conceptual):**\n\n```javascript\nYUI().use('json', function(Y) {\n    var jsonData = '{\"name\": \"John Doe\", \"age\": 30}';\n    var jsonObject = Y.JSON.parse(jsonData);\n    console.log(jsonObject.name); // Output: John Doe\n});\n```\n\nThis parses a JSON string into a JavaScript object and then accesses its properties.  Again, you'll need to include the relevant YUI module (usually named `json` or a similar variant).\n\n\n### Number Utility\n\nThe `Number` utility offers functions for working with numbers, possibly including functions for formatting numbers, performing calculations, or handling specific number-related tasks.  The available methods might be less extensive than in more modern libraries.\n\n\n### Object Utility\n\nThe `Object` utility extends the functionality of JavaScript's built-in `Object` object, adding methods for iterating, extending, or modifying objects.  These are highly useful for working with complex data structures.  These methods often mimic those found in `Y.Lang` but might focus specifically on object manipulation.\n\n\n\n### String Utility\n\nThe `String` utility provides functions for manipulating strings, such as trimming whitespace, replacing substrings, or performing other common string operations.  These are essential tools for data processing and text manipulation.  For example, you might find methods similar to `trim()`, `substring()`, or more advanced ones like functions for escaping HTML or regular expression matching (though check if these are explicitly part of the `Y.String` namespace in your YUI version).\n\n\n**Important Note:**  The availability and exact names of methods within the YUI 3 utilities might vary slightly depending on the YUI version and build you are using.  Always refer to the (now unavailable official) documentation or inspect the source code if available to confirm the available methods and their precise usage.  Given the obsolescence of YUI 3, using more recent JavaScript frameworks is highly recommended for new projects.\n\n\n## Advanced Topics\n\nThis section covers more advanced aspects of YUI 3 development.  Remember that YUI 3 is no longer supported, so finding detailed and up-to-date documentation for these topics will be difficult.  The information below provides a general overview; specific implementation details might vary depending on your YUI 3 version and build.\n\n\n### Customizing Components\n\nYUI 3 components are designed to be highly customizable.  You can override their default styles using CSS, modify their behavior by extending their classes, or add new features by creating custom component instances and modifying their properties and methods.  The process often involves subclassing existing component classes and overriding methods or properties as needed.  However, the lack of readily available official documentation makes this a more challenging task for YUI 3.\n\n### Creating Custom Modules\n\nCreating custom modules is essential for organizing and reusing code in larger YUI 3 applications.  This involves defining new modules that encapsulate specific functionality, and then using the `YUI().use()` mechanism to load them.   The general structure involves creating a JavaScript file with a module definition, using a module definition pattern (like AMD or YUI's own internal module mechanism), and making sure to correctly register the new module. Again, the lack of readily available updated documentation will make researching the exact process challenging.\n\n### Asynchronous Loading\n\nAsynchronous loading of YUI 3 modules is crucial for improving the initial page load time and providing a better user experience. YUI 3 supports asynchronous module loading through its module system and the `YUI().use()` method. The `use()` method inherently loads modules asynchronously.  However, you would need to pay special attention to handling the asynchronous nature of this loading within your application logic (e.g., using callbacks or promises).\n\n### Internationalization\n\nInternationalization (i18n) in YUI 3 involves adapting your application to support multiple languages and locales.  This typically requires using resource bundles to store localized text and other data, and then loading the appropriate bundle based on the user's locale.  YUI 3 likely offered some support for this, but specifics require a deep dive into potentially outdated documentation or example applications.\n\n### Accessibility\n\nBuilding accessible YUI 3 applications requires adhering to accessibility guidelines (like WCAG). This involves using appropriate ARIA attributes, providing alternative text for images, ensuring sufficient color contrast, and making sure your application is usable with assistive technologies.  YUI 3 components were likely designed with some accessibility considerations in mind, but you must still follow best practices for accessibility.\n\n### Performance Optimization\n\nOptimizing YUI 3 application performance involves several techniques: minimizing the number of modules loaded, using efficient DOM manipulation techniques, avoiding unnecessary calculations, and optimizing images and other resources.  Profiling tools would help identify performance bottlenecks, but remember the outdated nature of YUI 3 might limit the tools and advice available.\n\n### Debugging and Troubleshooting\n\nDebugging YUI 3 applications involves using browser developer tools (like the console and debugger) to identify and fix errors.  Logging messages at strategic points in your code is invaluable for troubleshooting.   The lack of officially supported tools or debugging aids for YUI 3 might necessitate using general browser debugging approaches.  The older nature of the framework may also mean you encounter compatibility challenges with newer browsers or development tools.\n\n\n**Important Note:** Given that YUI 3 is no longer supported, the information above offers a general conceptual overview.  Specific implementation details and the availability of certain features might vary significantly depending on the exact YUI 3 version and build you are using.  For new projects, using more modern and actively maintained JavaScript frameworks is highly recommended.\n\n\n## Migration from YUI 2\n\nMigrating from YUI 2 to YUI 3 requires careful planning and execution due to significant architectural differences between the two versions.  This section outlines key differences, strategies for conversion, and common pitfalls to avoid.  Remember that YUI 3 itself is no longer supported, so this migration path is largely of historical interest.  If undertaking a migration, thoroughly assess whether continuing with YUI 3 or migrating to a more modern framework is the optimal approach.\n\n\n### Key Differences\n\n* **Modular Architecture:** YUI 3 uses a highly modular architecture, where components and utilities are loaded individually as needed.  This contrasts with YUI 2's more monolithic structure.  This means a significant shift in how modules are included and managed.\n\n* **Namespace:**  The namespace structure changed considerably. YUI 2 used a nested namespace structure (`YAHOO.util`, `YAHOO.widget`, etc.), while YUI 3 uses a flatter structure primarily based on the `Y` object and module loading.\n\n* **DOM Manipulation:**  YUI 2 primarily used its own DOM manipulation functions, while YUI 3 uses the `Node` utility, offering a more streamlined and efficient approach built on top of standard DOM APIs.  This necessitates a translation of DOM operations.\n\n* **Events:** Event handling has been revamped.  YUI 2's event system is different from the more robust and customizable event system in YUI 3 (which leverages the `Event` utility).\n\n* **Component API:** YUI 3 components are significantly different from YUI 2 components.  Methods, properties, and the overall API are redesigned, requiring significant code changes.  Expect substantial rewriting of UI component usage.\n\n* **Utility Functions:**  Many YUI 2 utility functions have counterparts in YUI 3, but their names, parameters, and return values might differ. Careful comparison and code adjustment is necessary.\n\n### Conversion Strategies\n\nA phased approach is recommended for migrating from YUI 2 to YUI 3:\n\n1. **Assessment:** Thoroughly analyze your YUI 2 codebase to identify all dependencies and components used.\n\n2. **Modularization:** Break down your YUI 2 code into smaller, more manageable modules.  This step is vital for the transition to YUI 3's modular architecture.\n\n3. **Component Replacement:** Replace YUI 2 components with their YUI 3 equivalents.  This often requires substantial code rewriting because of the API differences.\n\n4. **Utility Function Replacement:** Update YUI 2 utility functions to their YUI 3 counterparts, considering any changes in parameters and return values.\n\n5. **Testing:** Rigorously test the migrated code to ensure functionality and compatibility across different browsers.\n\n6. **Deployment:** Deploy the migrated application in stages, starting with a small subset of features and gradually expanding.\n\n### Common Pitfalls and Solutions\n\n* **Incorrect Module Loading:**  Failure to load necessary YUI 3 modules correctly is a common problem.  Double-check module names and dependencies when using `YUI().use()`.\n\n* **Namespace Conflicts:**  The change in namespace structure can lead to conflicts.  Careful renaming and organization are crucial to avoid clashes.\n\n* **API Mismatches:**  Don't assume that YUI 2 and YUI 3 component APIs are directly interchangeable.  Consult the (now unavailable official) YUI 3 documentation for the correct methods and properties.\n\n* **Event Handling Issues:**  Differences in event handling mechanisms require careful translation. Pay close attention to event attachment, detachment, and custom event implementation.\n\n* **Testing Gaps:**  Insufficient testing can lead to unexpected behavior.  Comprehensive testing across browsers is critical.\n\n* **Lack of Documentation:**  The absence of readily available, complete documentation for YUI 3 makes the migration significantly more challenging.\n\n**Recommendation:** Before starting a migration from YUI 2 to YUI 3 (or even considering YUI 3 at all), carefully weigh the effort required against the potential benefits.  Given the lack of official support for YUI 3, migrating to a modern, actively maintained JavaScript framework might be a more efficient and sustainable long-term solution.\n\n\n## Appendix\n\nThis appendix provides supplemental information to aid in your understanding and use of YUI 3.  Keep in mind that YUI 3 is no longer supported, so the resources mentioned here may be incomplete or unavailable.\n\n\n### Glossary of Terms\n\nBecause YUI 3 is no longer actively maintained, a comprehensive glossary is not readily available. However, key terms include:\n\n* **Module:** A self-contained unit of functionality in YUI 3. Modules are loaded individually using `YUI().use()`.\n* **YUI Instance (Y):**  The object (`Y`) that provides access to all loaded YUI modules and utilities.\n* **Node:** The primary YUI 3 utility for DOM manipulation.\n* **Event:** A mechanism for handling user interactions and other events in the application.\n* **Component:** A pre-built UI element provided by YUI 3, such as Button, Checkbox, or DataGrid.\n* **Utility:** A helper function for common tasks, such as string manipulation, array operations, or JSON handling.\n* **Asynchronous Loading:** Loading modules in the background without blocking the main thread.\n\nFor more detailed definitions of terms specific to YUI 3, you would need to search for archived documentation or potentially examine the source code of the framework itself.\n\n### API Reference\n\nUnfortunately, a complete and readily available API reference for YUI 3 is unlikely to exist due to the project's discontinuation.  The official documentation is defunct.  Your best bet for finding information about specific components or utilities would involve searching for archived versions of the documentation online (a difficult and unreliable task) or inspecting the source code directly.\n\n### Example Code Snippets\n\nBecause no central repository for updated code examples exists for YUI 3, finding examples will prove challenging.  However, you might find snippets of code in outdated blog posts, forums, or archived YUI community resources.  These snippets could provide illustrations of specific tasks or usages of YUI 3 components and utilities.   Searching for \"YUI 3 [specific task or component]\" on relevant platforms might yield some results.\n\n### Contributors\n\nDue to the project's age and lack of official maintenance, identifying all original YUI 3 contributors is difficult.  Information on contributors is likely scattered across various sources.  However, it's safe to say that the core team at Yahoo! at the time played a significant role in its development, along with many community members who contributed code, bug fixes, and documentation.  Finding a comprehensive list of contributors will likely require extensive research across old forums, mailing lists, and code repositories associated with the project.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"yui3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"YUI3 - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}