{"entries":[],"headings":["introduction-to-refluxjs","what-is-refluxjs","why-use-refluxjs","refluxjs-vs.-other-frameworks-flux-redux","setting-up-a-refluxjs-project.","core-concepts","stores","actions","components","lifecycle-methods","data-flow","creating-stores","defining-a-store","handling-actions","triggering-changes","listening-for-changes","managing-state","asynchronous-operations","error-handling","working-with-actions","creating-actions","dispatching-actions","action-creators","action-payloads","integrating-with-components","connecting-stores-to-components","listening-for-store-changes-in-components","updating-components-based-on-store-changes","best-practices-for-component-design","advanced-topics","mixins","higher-order-components-hocs","testing-refluxjs-applications","performance-optimization","debugging-refluxjs-applications","working-with-external-libraries","best-practices-and-patterns","structuring-your-application","data-normalization","managing-application-state","code-organization-and-maintainability","troubleshooting-and-common-issues","debugging-tips","common-errors-and-solutions","performance-issues-and-solutions","appendix","glossary-of-terms","api-reference","further-resources"]}