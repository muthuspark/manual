{"title":"countTo - Documentation","markdown":{"yaml":{"title":"countTo - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is countTo?\n\n`countTo` is a lightweight JavaScript library designed to smoothly animate numerical counters on a webpage.  It provides a simple and efficient way to display visually engaging number transitions, perfect for showcasing statistics, progress, or any scenario where dynamic number updates are desired.  Instead of instantly displaying a final number, `countTo` animates the count from a starting value to a target value, creating a more captivating user experience.\n\n\n### Why use countTo?\n\nUsing `countTo` offers several advantages:\n\n* **Improved User Experience:**  Animated counters are more visually appealing and engaging than static numbers, grabbing the user's attention and making data easier to digest.\n* **Ease of Implementation:** The library is designed for simplicity, requiring minimal code to integrate into your projects.\n* **Customization:** `countTo` offers options to customize the animation speed, easing effect, and formatting of the displayed numbers.\n* **Lightweight:**  The library is small in size, minimizing the impact on page load times.\n* **Flexibility:** It can be used with various JavaScript frameworks or standalone.\n\n\n### Installation\n\n`countTo` can be easily installed using npm or yarn:\n\n**npm:**\n\n```bash\nnpm install countto\n```\n\n**yarn:**\n\n```bash\nyarn add countto\n```\n\nAlternatively, you can download the minified JavaScript file from https://cdnjs.com/libraries/jquery-countto and include it in your HTML file using a `<script>` tag:\n\n```html\n<script src=\"path/to/countto.min.js\"></script>\n```\n\nRemember to replace `\"path/to/countto.min.js\"` with the actual path to the downloaded file.  After installation, you're ready to start using the `countTo` library in your project.\n\n\n## Basic Usage\n\n### Simple Counting\n\nThe simplest way to use `countTo` is to target an element and provide a target number.  The library will automatically detect the starting number (assuming it's already present in the element's text content) and animate the count.\n\n```javascript\n// Assuming you have an element with the ID \"counter\"\n// and its text content is \"0\".\nconst counterElement = document.getElementById('counter');\ncountTo(counterElement, 100); // Animates the counter to 100\n```\n\nThis will smoothly animate the number in the element from 0 to 100.\n\n### Specifying the Target Number\n\nYou can explicitly set both the starting and target numbers using the `from` and `to` properties within the options object.  This is useful when the starting value isn't directly available from the element's text content or if you need more control.\n\n```javascript\ncountTo(counterElement, {\n  from: 50,\n  to: 200,\n}); // Animates the counter from 50 to 200\n```\n\n\n### Setting the Step Increment\n\nBy default, `countTo` automatically determines the step increment for smooth animation. You can override this behavior and specify a custom step size using the `step` option.  Larger step sizes result in faster but potentially less smooth animations.\n\n```javascript\ncountTo(counterElement, {\n  from: 0,\n  to: 100,\n  step: 10, // Increments by 10 in each step\n});\n```\n\n### Using Different Data Types\n\nWhile integers are commonly used, `countTo` can handle floating-point numbers and even formatted numbers (though you might need to handle formatting separately for optimal visual results).\n\n```javascript\ncountTo(counterElement, {\n  from: 0.0,\n  to: 10.5,\n  step: 0.5,\n}); // Animates with decimal numbers\n\ncountTo(counterElement, {\n    from: '$0.00',\n    to: '$100.00',\n    formatter: (value) => '$' + value.toFixed(2) //Handles formatting for currency.  Note: you would need to adjust step size to reflect formatting\n  })\n```\n**Note:**  For complex data types or custom formatting, you'll likely need to use the `formatter` option (see the advanced usage section for details).\n\n\n### Handling Errors\n\n`countTo` includes basic error handling. If the target element isn't found or if the provided numerical values are invalid, it will log a console error message indicating the issue, and the animation will not start.  Make sure to inspect the console for any errors if the animation doesn't behave as expected.  Proper error handling in your main application code is also recommended to handle cases where `countTo` may fail to execute.\n\n\n## Advanced Usage\n\n### Customizing the Counting Speed\n\nThe animation speed is controlled by the `duration` option (in milliseconds).  A smaller duration results in a faster animation.  The default duration is 1000ms (1 second).\n\n```javascript\ncountTo(counterElement, {\n  from: 0,\n  to: 100,\n  duration: 2000, // 2-second animation\n});\n```\n\nYou can also influence the perceived speed using different easing functions (see below).\n\n\n### Adding Callbacks\n\nYou can add callback functions to be executed at the start and end of the animation using the `onStart` and `onComplete` options, respectively. These functions receive the `countTo` instance as an argument.\n\n```javascript\ncountTo(counterElement, {\n  from: 0,\n  to: 100,\n  onStart: (instance) => {\n    console.log('Animation started!', instance);\n  },\n  onComplete: (instance) => {\n    console.log('Animation completed!', instance);\n    // Perform other actions after the animation finishes\n  },\n});\n```\n\n\n### Integrating with Other Libraries\n\n`countTo` is designed to be compatible with most JavaScript frameworks and libraries.  You simply need to ensure that the target element is correctly selected and that any framework-specific methods (like data binding) are handled appropriately.  No special integrations are usually required.\n\n\n### Using countTo with Asynchronous Operations\n\nIf you're using `countTo` with data fetched asynchronously (e.g., from an API), ensure that the `countTo` function is called *after* the data has been received and processed.  For instance, use a `.then()` block with Promises or an appropriate callback from your asynchronous function.\n\n```javascript\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => {\n    const targetValue = data.count;\n    countTo(counterElement, targetValue);\n  });\n```\n\n\n### Implementing countTo in React\n\nIn React, you would typically use `countTo` within a `useEffect` hook to ensure that the animation runs after the component mounts.  You may also need to handle updates appropriately if the target value changes.\n\n```javascript\nimport React, { useEffect, useRef } from 'react';\nimport countTo from 'countto';\n\nfunction MyComponent() {\n  const counterRef = useRef(null);\n  const targetValue = 100;\n\n  useEffect(() => {\n    if (counterRef.current) {\n      countTo(counterRef.current, targetValue);\n    }\n    // Cleanup function (optional)\n    return () => {\n        // Stop any ongoing animation if the component unmounts.  This is not currently built-in, and would require adding functionality to countTo.\n    };\n  }, [targetValue]);\n\n  return <div ref={counterRef}>0</div>; //Initially displays 0\n}\n\nexport default MyComponent;\n```\n\n\n### Implementing countTo in Angular\n\nSimilar to React, you might use `countTo` within an `AfterViewInit` lifecycle hook in Angular. Ensure that the `@ViewChild` is correctly used to access the element.\n\n```typescript\nimport { Component, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport countTo from 'countto';\n\n@Component({\n  selector: 'app-my-component',\n  template: `<div #counter>0</div>`\n})\nexport class MyComponent implements AfterViewInit {\n  @ViewChild('counter') counterElement!: ElementRef;\n\n  ngAfterViewInit(): void {\n    countTo(this.counterElement.nativeElement, 100);\n  }\n}\n```\n\n\n### Implementing countTo in Vue\n\nIn Vue, you would typically use `countTo` within a `mounted` lifecycle hook or a `watch` effect if the target value is reactive.\n\n```vue\n<template>\n  <div ref=\"counter\">0</div>\n</template>\n\n<script>\nimport countTo from 'countto';\n\nexport default {\n  mounted() {\n    countTo(this.$refs.counter, 100);\n  }\n};\n</script>\n```\n\nRemember to adjust these examples to fit your specific project structure and requirements.  Always consult the documentation for your chosen framework for best practices.\n\n\n## API Reference\n\n### countTo(target, options)\n\nThe core function of the `countTo` library.  It initiates the animated counter.\n\n* **`target`:**  (Required) This can be one of the following:\n    * A DOM element:  A reference to the HTML element where the counter will be displayed (e.g., obtained using `document.getElementById()`).\n    * A CSS selector string: A string representing a CSS selector that uniquely identifies the target element (e.g., `'#myCounter'`).  Note: Only the *first* matching element will be used.\n\n\n* **`options`:** (Optional) An object containing various options to customize the counter's behavior (see Options Object below).  If omitted, default values will be used.\n\n\n**Return Value:** A `countTo` instance object.  This object can be used to access certain properties and methods (future versions may enhance this functionality).\n\n\n### Options Object\n\nThe `options` object accepts the following properties:\n\n* **`from`:** (Number, optional) The starting value of the counter. If omitted, `countTo` attempts to extract it from the `target` element's text content.\n* **`to`:** (Number, required) The target (final) value of the counter.\n* **`duration`:** (Number, optional) The duration of the animation in milliseconds (default: 1000).\n* **`step`:** (Number, optional) The increment step size.  If omitted, `countTo` automatically calculates an appropriate step.  Note: Using a large step may result in less-smooth animation.\n* **`easing`:** (String or function, optional)  Specifies the easing function for the animation.  Common options include 'linear', 'easeInQuad', 'easeOutQuad', etc. (See easing library documentation for more details). Default is a smooth animation.\n* **`formatter`:** (Function, optional) A function that formats the displayed number at each step.  It receives the current number as an argument and should return a formatted string.\n* **`onStart`:** (Function, optional) A callback function executed when the animation starts.  Receives the `countTo` instance as an argument.\n* **`onComplete`:** (Function, optional) A callback function executed when the animation completes. Receives the `countTo` instance as an argument.\n* **`onUpdate`:** (Function, optional) A callback function executed at each step of the animation. Receives the current value as an argument.\n\n\n### Events\n\nCurrently, `countTo` does not explicitly emit custom events.  However, the `onStart` and `onComplete` callbacks provide functionality equivalent to events.  Future versions might include more robust event handling.\n\n\n\n## Examples\n\n### Example 1: Basic Count\n\nThis example demonstrates a simple count from 0 to 100 with default settings.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>countTo Example</title>\n</head>\n<body>\n  <div id=\"counter\">0</div>\n  <script src=\"countto.min.js\"></script> <script>\n    const counterElement = document.getElementById('counter');\n    countTo(counterElement, 100);\n  </script>\n</body>\n</html>\n```\n\nRemember to replace `\"countto.min.js\"` with the actual path to your `countTo` library file.\n\n\n### Example 2: Custom Speed and Callbacks\n\nThis example shows how to customize the animation speed and add `onStart` and `onComplete` callbacks.\n\n```javascript\nconst counterElement = document.getElementById('counter');\ncountTo(counterElement, {\n  from: 0,\n  to: 500,\n  duration: 3000, // 3-second animation\n  onStart: () => console.log('Counting started!'),\n  onComplete: () => console.log('Counting finished!')\n});\n```\n\n\n### Example 3: Asynchronous Counting\n\nThis example fetches data asynchronously and then uses it as the target value for the counter.  Error handling is simplified for brevity.\n\n```javascript\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => {\n    const targetValue = data.count;\n    countTo(document.getElementById('counter'), targetValue);\n  })\n  .catch(error => console.error('Error fetching data:', error));\n```\n\n\n### Example 4: Integration with React\n\nThis example shows a basic React component using `countTo`.  Error handling and cleanup are omitted for brevity.  See the Advanced Usage section for a more complete example.\n\n```jsx\nimport React, { useEffect, useRef } from 'react';\nimport countTo from 'countto';\n\nfunction MyComponent() {\n  const counterRef = useRef(null);\n\n  useEffect(() => {\n    if (counterRef.current) {\n      countTo(counterRef.current, 250);\n    }\n  }, []);\n\n  return <div ref={counterRef}>0</div>;\n}\n\nexport default MyComponent;\n```\n\n\n### Example 5: Integration with Angular\n\nThis Angular example demonstrates a simple counter.  Error handling and more sophisticated lifecycle management are omitted for brevity.  See the Advanced Usage section for a more complete example.\n\n```typescript\nimport { Component, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport countTo from 'countto';\n\n@Component({\n  selector: 'app-my-component',\n  template: '<div #counter>0</div>'\n})\nexport class MyComponent implements AfterViewInit {\n  @ViewChild('counter') counterElement!: ElementRef;\n\n  ngAfterViewInit(): void {\n    countTo(this.counterElement.nativeElement, 500);\n  }\n}\n```\n\n\n### Example 6: Integration with Vue\n\nThis Vue example shows a basic counter.  Error handling and lifecycle considerations beyond the `mounted` hook are omitted for brevity.  See the Advanced Usage section for a more complete example.\n\n```vue\n<template>\n  <div ref=\"counter\">0</div>\n</template>\n\n<script>\nimport countTo from 'countto';\nexport default {\n  mounted() {\n    countTo(this.$refs.counter, 750);\n  }\n};\n</script>\n```\n\nRemember to install `countto` and import it correctly in your project before running these examples.  These are simplified examples; for production use, consider robust error handling, data management, and appropriate lifecycle hooks within your chosen framework.\n\n\n## Troubleshooting\n\n### Common Issues\n\n* **Animation doesn't start:**\n    * **Check the `target`:** Ensure that the `target` element exists and is correctly selected. Use your browser's developer tools to inspect the element and verify its ID or selector.  A common mistake is using an incorrect selector string (e.g., forgetting the `#` for ID selectors).\n    * **Check the `to` value:** Make sure the `to` value in the options object is a valid number.\n    * **Console Errors:** Carefully examine the browser's developer console for any error messages.  `countTo` logs errors if it encounters problems (e.g., invalid `target` or `to` value).\n    * **Conflicting Libraries:** Check for any conflicts with other JavaScript libraries that might interfere with the animation.\n    * **Asynchronous Operations:** If you are fetching data asynchronously, ensure that `countTo` is called *after* the data is received and processed.\n* **Animation is too fast or too slow:** Adjust the `duration` option in the settings to control the speed.\n* **Numbers are not formatted correctly:** If you're using a custom `formatter` function, double-check its implementation to ensure it correctly formats the numbers and handles potential edge cases.\n* **Animation is jerky or not smooth:**  This might be due to a large `step` value, or potentially interaction with other CSS transitions or animations on the same element.  Try reducing the step size, or temporarily removing other animations to isolate the issue.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:** The console will display error messages and provide helpful information about the state of your application.\n* **Simplify your code:**  Isolate the `countTo` function to rule out issues from other parts of your code. Create a minimal, reproducible example that demonstrates the problem.\n* **Inspect the element:** Use your browser's developer tools to inspect the target element and make sure it's correctly updated during the animation.\n* **Check the console for errors:** If something goes wrong, `countTo` will usually log an error message to the console.  Read the error message carefully to understand the problem.\n* **Log values:**  Add `console.log()` statements to your code to track the values of variables and the execution flow, especially during the `onStart`, `onUpdate`, and `onComplete` callbacks.  This is particularly helpful when debugging asynchronous operations or custom formatter functions.\n\n\n### Error Handling\n\n`countTo` includes basic error handling.  If the library encounters a problem (e.g., the target element is not found, or the `to` value is invalid), it will log an error message to the console.  The animation will not start in these cases.\n\nWhile `countTo` provides basic error messages,  you should implement robust error handling in your main application code to gracefully handle situations where `countTo` might fail.  For instance, you could display an alternative message to the user or try a fallback mechanism.  A `try...catch` block might be used to wrap the call to `countTo`.  Consider handling potential errors from asynchronous operations (like network failures) that could cause `countTo` to not execute properly.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is countTo?\n\n`countTo` is a lightweight JavaScript library designed to smoothly animate numerical counters on a webpage.  It provides a simple and efficient way to display visually engaging number transitions, perfect for showcasing statistics, progress, or any scenario where dynamic number updates are desired.  Instead of instantly displaying a final number, `countTo` animates the count from a starting value to a target value, creating a more captivating user experience.\n\n\n### Why use countTo?\n\nUsing `countTo` offers several advantages:\n\n* **Improved User Experience:**  Animated counters are more visually appealing and engaging than static numbers, grabbing the user's attention and making data easier to digest.\n* **Ease of Implementation:** The library is designed for simplicity, requiring minimal code to integrate into your projects.\n* **Customization:** `countTo` offers options to customize the animation speed, easing effect, and formatting of the displayed numbers.\n* **Lightweight:**  The library is small in size, minimizing the impact on page load times.\n* **Flexibility:** It can be used with various JavaScript frameworks or standalone.\n\n\n### Installation\n\n`countTo` can be easily installed using npm or yarn:\n\n**npm:**\n\n```bash\nnpm install countto\n```\n\n**yarn:**\n\n```bash\nyarn add countto\n```\n\nAlternatively, you can download the minified JavaScript file from https://cdnjs.com/libraries/jquery-countto and include it in your HTML file using a `<script>` tag:\n\n```html\n<script src=\"path/to/countto.min.js\"></script>\n```\n\nRemember to replace `\"path/to/countto.min.js\"` with the actual path to the downloaded file.  After installation, you're ready to start using the `countTo` library in your project.\n\n\n## Basic Usage\n\n### Simple Counting\n\nThe simplest way to use `countTo` is to target an element and provide a target number.  The library will automatically detect the starting number (assuming it's already present in the element's text content) and animate the count.\n\n```javascript\n// Assuming you have an element with the ID \"counter\"\n// and its text content is \"0\".\nconst counterElement = document.getElementById('counter');\ncountTo(counterElement, 100); // Animates the counter to 100\n```\n\nThis will smoothly animate the number in the element from 0 to 100.\n\n### Specifying the Target Number\n\nYou can explicitly set both the starting and target numbers using the `from` and `to` properties within the options object.  This is useful when the starting value isn't directly available from the element's text content or if you need more control.\n\n```javascript\ncountTo(counterElement, {\n  from: 50,\n  to: 200,\n}); // Animates the counter from 50 to 200\n```\n\n\n### Setting the Step Increment\n\nBy default, `countTo` automatically determines the step increment for smooth animation. You can override this behavior and specify a custom step size using the `step` option.  Larger step sizes result in faster but potentially less smooth animations.\n\n```javascript\ncountTo(counterElement, {\n  from: 0,\n  to: 100,\n  step: 10, // Increments by 10 in each step\n});\n```\n\n### Using Different Data Types\n\nWhile integers are commonly used, `countTo` can handle floating-point numbers and even formatted numbers (though you might need to handle formatting separately for optimal visual results).\n\n```javascript\ncountTo(counterElement, {\n  from: 0.0,\n  to: 10.5,\n  step: 0.5,\n}); // Animates with decimal numbers\n\ncountTo(counterElement, {\n    from: '$0.00',\n    to: '$100.00',\n    formatter: (value) => '$' + value.toFixed(2) //Handles formatting for currency.  Note: you would need to adjust step size to reflect formatting\n  })\n```\n**Note:**  For complex data types or custom formatting, you'll likely need to use the `formatter` option (see the advanced usage section for details).\n\n\n### Handling Errors\n\n`countTo` includes basic error handling. If the target element isn't found or if the provided numerical values are invalid, it will log a console error message indicating the issue, and the animation will not start.  Make sure to inspect the console for any errors if the animation doesn't behave as expected.  Proper error handling in your main application code is also recommended to handle cases where `countTo` may fail to execute.\n\n\n## Advanced Usage\n\n### Customizing the Counting Speed\n\nThe animation speed is controlled by the `duration` option (in milliseconds).  A smaller duration results in a faster animation.  The default duration is 1000ms (1 second).\n\n```javascript\ncountTo(counterElement, {\n  from: 0,\n  to: 100,\n  duration: 2000, // 2-second animation\n});\n```\n\nYou can also influence the perceived speed using different easing functions (see below).\n\n\n### Adding Callbacks\n\nYou can add callback functions to be executed at the start and end of the animation using the `onStart` and `onComplete` options, respectively. These functions receive the `countTo` instance as an argument.\n\n```javascript\ncountTo(counterElement, {\n  from: 0,\n  to: 100,\n  onStart: (instance) => {\n    console.log('Animation started!', instance);\n  },\n  onComplete: (instance) => {\n    console.log('Animation completed!', instance);\n    // Perform other actions after the animation finishes\n  },\n});\n```\n\n\n### Integrating with Other Libraries\n\n`countTo` is designed to be compatible with most JavaScript frameworks and libraries.  You simply need to ensure that the target element is correctly selected and that any framework-specific methods (like data binding) are handled appropriately.  No special integrations are usually required.\n\n\n### Using countTo with Asynchronous Operations\n\nIf you're using `countTo` with data fetched asynchronously (e.g., from an API), ensure that the `countTo` function is called *after* the data has been received and processed.  For instance, use a `.then()` block with Promises or an appropriate callback from your asynchronous function.\n\n```javascript\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => {\n    const targetValue = data.count;\n    countTo(counterElement, targetValue);\n  });\n```\n\n\n### Implementing countTo in React\n\nIn React, you would typically use `countTo` within a `useEffect` hook to ensure that the animation runs after the component mounts.  You may also need to handle updates appropriately if the target value changes.\n\n```javascript\nimport React, { useEffect, useRef } from 'react';\nimport countTo from 'countto';\n\nfunction MyComponent() {\n  const counterRef = useRef(null);\n  const targetValue = 100;\n\n  useEffect(() => {\n    if (counterRef.current) {\n      countTo(counterRef.current, targetValue);\n    }\n    // Cleanup function (optional)\n    return () => {\n        // Stop any ongoing animation if the component unmounts.  This is not currently built-in, and would require adding functionality to countTo.\n    };\n  }, [targetValue]);\n\n  return <div ref={counterRef}>0</div>; //Initially displays 0\n}\n\nexport default MyComponent;\n```\n\n\n### Implementing countTo in Angular\n\nSimilar to React, you might use `countTo` within an `AfterViewInit` lifecycle hook in Angular. Ensure that the `@ViewChild` is correctly used to access the element.\n\n```typescript\nimport { Component, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport countTo from 'countto';\n\n@Component({\n  selector: 'app-my-component',\n  template: `<div #counter>0</div>`\n})\nexport class MyComponent implements AfterViewInit {\n  @ViewChild('counter') counterElement!: ElementRef;\n\n  ngAfterViewInit(): void {\n    countTo(this.counterElement.nativeElement, 100);\n  }\n}\n```\n\n\n### Implementing countTo in Vue\n\nIn Vue, you would typically use `countTo` within a `mounted` lifecycle hook or a `watch` effect if the target value is reactive.\n\n```vue\n<template>\n  <div ref=\"counter\">0</div>\n</template>\n\n<script>\nimport countTo from 'countto';\n\nexport default {\n  mounted() {\n    countTo(this.$refs.counter, 100);\n  }\n};\n</script>\n```\n\nRemember to adjust these examples to fit your specific project structure and requirements.  Always consult the documentation for your chosen framework for best practices.\n\n\n## API Reference\n\n### countTo(target, options)\n\nThe core function of the `countTo` library.  It initiates the animated counter.\n\n* **`target`:**  (Required) This can be one of the following:\n    * A DOM element:  A reference to the HTML element where the counter will be displayed (e.g., obtained using `document.getElementById()`).\n    * A CSS selector string: A string representing a CSS selector that uniquely identifies the target element (e.g., `'#myCounter'`).  Note: Only the *first* matching element will be used.\n\n\n* **`options`:** (Optional) An object containing various options to customize the counter's behavior (see Options Object below).  If omitted, default values will be used.\n\n\n**Return Value:** A `countTo` instance object.  This object can be used to access certain properties and methods (future versions may enhance this functionality).\n\n\n### Options Object\n\nThe `options` object accepts the following properties:\n\n* **`from`:** (Number, optional) The starting value of the counter. If omitted, `countTo` attempts to extract it from the `target` element's text content.\n* **`to`:** (Number, required) The target (final) value of the counter.\n* **`duration`:** (Number, optional) The duration of the animation in milliseconds (default: 1000).\n* **`step`:** (Number, optional) The increment step size.  If omitted, `countTo` automatically calculates an appropriate step.  Note: Using a large step may result in less-smooth animation.\n* **`easing`:** (String or function, optional)  Specifies the easing function for the animation.  Common options include 'linear', 'easeInQuad', 'easeOutQuad', etc. (See easing library documentation for more details). Default is a smooth animation.\n* **`formatter`:** (Function, optional) A function that formats the displayed number at each step.  It receives the current number as an argument and should return a formatted string.\n* **`onStart`:** (Function, optional) A callback function executed when the animation starts.  Receives the `countTo` instance as an argument.\n* **`onComplete`:** (Function, optional) A callback function executed when the animation completes. Receives the `countTo` instance as an argument.\n* **`onUpdate`:** (Function, optional) A callback function executed at each step of the animation. Receives the current value as an argument.\n\n\n### Events\n\nCurrently, `countTo` does not explicitly emit custom events.  However, the `onStart` and `onComplete` callbacks provide functionality equivalent to events.  Future versions might include more robust event handling.\n\n\n\n## Examples\n\n### Example 1: Basic Count\n\nThis example demonstrates a simple count from 0 to 100 with default settings.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>countTo Example</title>\n</head>\n<body>\n  <div id=\"counter\">0</div>\n  <script src=\"countto.min.js\"></script> <script>\n    const counterElement = document.getElementById('counter');\n    countTo(counterElement, 100);\n  </script>\n</body>\n</html>\n```\n\nRemember to replace `\"countto.min.js\"` with the actual path to your `countTo` library file.\n\n\n### Example 2: Custom Speed and Callbacks\n\nThis example shows how to customize the animation speed and add `onStart` and `onComplete` callbacks.\n\n```javascript\nconst counterElement = document.getElementById('counter');\ncountTo(counterElement, {\n  from: 0,\n  to: 500,\n  duration: 3000, // 3-second animation\n  onStart: () => console.log('Counting started!'),\n  onComplete: () => console.log('Counting finished!')\n});\n```\n\n\n### Example 3: Asynchronous Counting\n\nThis example fetches data asynchronously and then uses it as the target value for the counter.  Error handling is simplified for brevity.\n\n```javascript\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => {\n    const targetValue = data.count;\n    countTo(document.getElementById('counter'), targetValue);\n  })\n  .catch(error => console.error('Error fetching data:', error));\n```\n\n\n### Example 4: Integration with React\n\nThis example shows a basic React component using `countTo`.  Error handling and cleanup are omitted for brevity.  See the Advanced Usage section for a more complete example.\n\n```jsx\nimport React, { useEffect, useRef } from 'react';\nimport countTo from 'countto';\n\nfunction MyComponent() {\n  const counterRef = useRef(null);\n\n  useEffect(() => {\n    if (counterRef.current) {\n      countTo(counterRef.current, 250);\n    }\n  }, []);\n\n  return <div ref={counterRef}>0</div>;\n}\n\nexport default MyComponent;\n```\n\n\n### Example 5: Integration with Angular\n\nThis Angular example demonstrates a simple counter.  Error handling and more sophisticated lifecycle management are omitted for brevity.  See the Advanced Usage section for a more complete example.\n\n```typescript\nimport { Component, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport countTo from 'countto';\n\n@Component({\n  selector: 'app-my-component',\n  template: '<div #counter>0</div>'\n})\nexport class MyComponent implements AfterViewInit {\n  @ViewChild('counter') counterElement!: ElementRef;\n\n  ngAfterViewInit(): void {\n    countTo(this.counterElement.nativeElement, 500);\n  }\n}\n```\n\n\n### Example 6: Integration with Vue\n\nThis Vue example shows a basic counter.  Error handling and lifecycle considerations beyond the `mounted` hook are omitted for brevity.  See the Advanced Usage section for a more complete example.\n\n```vue\n<template>\n  <div ref=\"counter\">0</div>\n</template>\n\n<script>\nimport countTo from 'countto';\nexport default {\n  mounted() {\n    countTo(this.$refs.counter, 750);\n  }\n};\n</script>\n```\n\nRemember to install `countto` and import it correctly in your project before running these examples.  These are simplified examples; for production use, consider robust error handling, data management, and appropriate lifecycle hooks within your chosen framework.\n\n\n## Troubleshooting\n\n### Common Issues\n\n* **Animation doesn't start:**\n    * **Check the `target`:** Ensure that the `target` element exists and is correctly selected. Use your browser's developer tools to inspect the element and verify its ID or selector.  A common mistake is using an incorrect selector string (e.g., forgetting the `#` for ID selectors).\n    * **Check the `to` value:** Make sure the `to` value in the options object is a valid number.\n    * **Console Errors:** Carefully examine the browser's developer console for any error messages.  `countTo` logs errors if it encounters problems (e.g., invalid `target` or `to` value).\n    * **Conflicting Libraries:** Check for any conflicts with other JavaScript libraries that might interfere with the animation.\n    * **Asynchronous Operations:** If you are fetching data asynchronously, ensure that `countTo` is called *after* the data is received and processed.\n* **Animation is too fast or too slow:** Adjust the `duration` option in the settings to control the speed.\n* **Numbers are not formatted correctly:** If you're using a custom `formatter` function, double-check its implementation to ensure it correctly formats the numbers and handles potential edge cases.\n* **Animation is jerky or not smooth:**  This might be due to a large `step` value, or potentially interaction with other CSS transitions or animations on the same element.  Try reducing the step size, or temporarily removing other animations to isolate the issue.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:** The console will display error messages and provide helpful information about the state of your application.\n* **Simplify your code:**  Isolate the `countTo` function to rule out issues from other parts of your code. Create a minimal, reproducible example that demonstrates the problem.\n* **Inspect the element:** Use your browser's developer tools to inspect the target element and make sure it's correctly updated during the animation.\n* **Check the console for errors:** If something goes wrong, `countTo` will usually log an error message to the console.  Read the error message carefully to understand the problem.\n* **Log values:**  Add `console.log()` statements to your code to track the values of variables and the execution flow, especially during the `onStart`, `onUpdate`, and `onComplete` callbacks.  This is particularly helpful when debugging asynchronous operations or custom formatter functions.\n\n\n### Error Handling\n\n`countTo` includes basic error handling.  If the library encounters a problem (e.g., the target element is not found, or the `to` value is invalid), it will log an error message to the console.  The animation will not start in these cases.\n\nWhile `countTo` provides basic error messages,  you should implement robust error handling in your main application code to gracefully handle situations where `countTo` might fail.  For instance, you could display an alternative message to the user or try a fallback mechanism.  A `try...catch` block might be used to wrap the call to `countTo`.  Consider handling potential errors from asynchronous operations (like network failures) that could cause `countTo` to not execute properly.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"countto.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"countTo - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}