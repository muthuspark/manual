{"title":"Axios - Documentation","markdown":{"yaml":{"title":"Axios - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Axios?","containsRefs":false,"markdown":"\n\n\n\nAxios is a popular, promise-based HTTP client for making asynchronous requests to REST endpoints and other HTTP servers. It's designed to work in both browser and Node.js environments, offering a consistent API across platforms.  It simplifies the process of sending HTTP requests (GET, POST, PUT, DELETE, etc.) and handling their responses, including error handling.  Axios intercepts requests and responses, allowing for modifications before they are sent or after they are received. This makes it ideal for tasks like adding authentication headers, transforming data, or handling common errors.\n\n### Why use Axios?\n\nAxios offers several advantages over other HTTP client libraries and native approaches:\n\n* **Promise-based:** Axios uses promises, making asynchronous code cleaner and easier to manage using `.then()` and `.catch()` methods.  This improves code readability and maintainability compared to callbacks.\n* **Cross-platform:** Works seamlessly in both browsers and Node.js environments with minimal code changes, enabling efficient development for various applications.\n* **Interceptors:** Allows for modifying requests before they are sent and responses before they are received, providing powerful capabilities for tasks like adding headers, transforming data, and implementing global error handling.\n* **Automatic JSON transformation:**  Axios automatically transforms JSON responses into JavaScript objects, simplifying data handling.\n* **Client-side and server-side support:** Can be used in both frontend and backend JavaScript projects.\n* **Cancellation of requests:**  Provides mechanisms for canceling pending requests.\n* **Progress tracking:**  For uploads, it allows tracking of upload progress.\n* **Error Handling:**  Provides structured ways to handle errors, including network errors and HTTP status codes.\n\n\n### Axios vs. Fetch API\n\nWhile both Axios and the native Fetch API are used for making HTTP requests, Axios offers several advantages:\n\n* **Automatic JSON transformation:** Axios automatically parses JSON responses, while Fetch requires explicit `response.json()` handling.\n* **Interceptors:** Axios's interceptors offer a more structured and powerful way to intercept and modify requests and responses than what Fetch provides.\n* **Request cancellation:**  Axios provides a more straightforward way to cancel requests.\n* **Progress tracking:** Axios offers built-in support for tracking upload progress, which is not directly available in Fetch.\n* **Better browser support (Historically):**  Although Fetch is now widely supported, Axios historically offered better compatibility across older browsers.\n\n\n### Setting up Axios\n\nSetting up Axios is straightforward.  For browser environments, include the library via a `<script>` tag or use a module bundler like Webpack.  For Node.js, install it using npm or yarn:\n\n**Node.js:**\n\n```bash\nnpm install axios\n```\n\nor\n\n```bash\nyarn add axios\n```\n\n**Browser (using a CDN):**\n\nAdd this script tag to your HTML file:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n```\n\n**Import in your JavaScript code (both browser and Node.js with module bundler):**\n\n```javascript\nimport axios from 'axios';\n```\n\nAfter installation or inclusion, you can start making requests using the Axios API.  Refer to the subsequent sections for details on making different types of requests and utilizing Axios features.\n\n\n## Making Requests\n\n### GET requests\n\nGET requests retrieve data from a specified resource.  Here's how to make a GET request with Axios:\n\n```javascript\naxios.get('/user?ID=12345')\n  .then(response => {\n    console.log(response.data); // Access the response data\n  })\n  .catch(error => {\n    console.error(error); // Handle errors\n  });\n```\n\nThis example fetches data from `/user?ID=12345`.  The response data is accessible via `response.data`.\n\n\n### POST requests\n\nPOST requests submit data to be processed to a specified resource.  This is often used to create new resources.\n\n```javascript\naxios.post('/user', {\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 30\n  })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis sends a JSON payload to `/user`. The response contains the result of the POST operation.\n\n\n### PUT requests\n\nPUT requests replace all current representations of the target resource with the request payload.\n\n```javascript\naxios.put('/user/12345', {\n    firstName: 'Jane',\n    lastName: 'Doe',\n    age: 25\n  })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis updates the resource at `/user/12345` with the provided data.\n\n\n### PATCH requests\n\nPATCH requests apply partial modifications to a resource.  Only the specified fields are updated.\n\n```javascript\naxios.patch('/user/12345', {\n    age: 26\n  })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis updates only the `age` field of the resource at `/user/12345`.\n\n\n### DELETE requests\n\nDELETE requests delete the specified resource.\n\n```javascript\naxios.delete('/user/12345')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis deletes the resource at `/user/12345`.\n\n\n### Request parameters\n\nRequest parameters are added to the URL query string.\n\n```javascript\naxios.get('/users', {\n  params: {\n    page: 1,\n    limit: 10\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis results in a request to `/users?page=1&limit=10`.\n\n\n### Request headers\n\nRequest headers provide additional information about the request.\n\n```javascript\naxios.get('/users', {\n  headers: {\n    'Authorization': 'Bearer my-token',\n    'Content-Type': 'application/json'\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis adds authorization and content type headers to the request.\n\n\n### Request body (data)\n\nThe request body contains data sent with POST, PUT, and PATCH requests.\n\n```javascript\naxios.post('/users', {\n  firstName: 'Bob',\n  lastName: 'Smith'\n}, {\n  headers: {\n    'Content-Type': 'application/json' //Important for JSON payloads\n  }\n})\n.then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n  This sends a JSON object as the request body.  Ensure the correct `Content-Type` header is set.\n\n\n### Handling different response types\n\nAxios automatically parses JSON responses. For other types, handle them accordingly:\n\n\n```javascript\naxios.get('/data')\n  .then(response => {\n    if (response.headers['content-type'].includes('application/json')) {\n      console.log('JSON response:', response.data);\n    } else if (response.headers['content-type'].includes('text/plain')) {\n      console.log('Plain text response:', response.data);\n    } else {\n      console.log('Other response type:', response.data);\n    }\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n### Timeout settings\n\nSet a timeout for requests to prevent indefinite hanging.\n\n```javascript\naxios.get('/slow-resource', {\n  timeout: 5000 // 5 seconds\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    if (error.code === 'ECONNABORTED') {\n      console.error('Request timed out');\n    } else {\n      console.error(error);\n    }\n  });\n```\n\n\n### Interceptors\n\nInterceptors allow modifying requests and responses globally.\n\n```javascript\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    config.headers.Authorization = 'Bearer my-new-token';\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nThis example adds an authorization header to all outgoing requests and handles response errors globally.  Remember to handle potential errors appropriately within interceptors.\n\n\n## Handling Responses\n\n### Status Codes\n\nAxios responses include a `status` property indicating the HTTP status code.  You should always check the status code to ensure the request was successful.  Codes in the 2xx range generally indicate success, while others (e.g., 4xx client errors, 5xx server errors) signal issues.\n\n```javascript\naxios.get('/users')\n  .then(response => {\n    if (response.status === 200) {\n      console.log('Success:', response.data);\n    } else if (response.status === 404) {\n      console.error('Not Found');\n    } else {\n      console.error('Error:', response.status);\n    }\n  })\n  .catch(error => {\n    console.error('Request failed:', error);\n  });\n\n```\n\nThis example checks for a 200 OK status and handles a 404 Not Found error specifically.\n\n\n### Response Data\n\nThe response data is accessible via the `response.data` property.  The format depends on the `Content-Type` header of the response.  Axios automatically parses JSON responses into JavaScript objects.  For other content types (e.g., text/plain, text/html), `response.data` will contain the raw response body as a string.\n\n```javascript\naxios.get('/api/data')\n  .then(response => {\n    console.log(response.data); // Access the JSON data\n    console.log(typeof response.data); //Should output 'object' for JSON\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Response Headers\n\nResponse headers provide additional information about the response.  They are accessible via `response.headers`.\n\n```javascript\naxios.get('/api/data')\n  .then(response => {\n    console.log(response.headers); //Access all headers\n    console.log(response.headers['content-type']); //Access specific header\n    console.log(response.headers['content-length']);//Access specific header\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Error Handling\n\nAxios uses promises, so errors are handled using `.catch()`.  The `error` object contains information about the error, including the response (if available) and the error code.\n\n\n```javascript\naxios.get('/invalid-endpoint')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.error('Response Error:', error.response.data);\n      console.error('Status:', error.response.status);\n      console.error('Headers:', error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.error('Request Error:', error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error('Error:', error.message);\n    }\n    console.error('Config:', error.config);\n  });\n```\n\nThis comprehensive error handling checks for different error scenarios: network errors (no response), server errors (non-2xx status codes), and other errors during request setup.\n\n\n### Transforming Responses\n\nYou can transform responses using interceptors or within the `.then()` block.  This is useful for modifying data before it's used in your application.\n\n```javascript\naxios.get('/api/data')\n  .then(response => {\n    const transformedData = response.data.map(item => ({\n      id: item.id,\n      name: item.name.toUpperCase()\n    }));\n    console.log(transformedData);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis example transforms the response data by converting names to uppercase.  More complex transformations can be implemented here or using response interceptors for global transformations.\n\n\n## Advanced Usage\n\n### Cancellation of requests\n\nAxios allows you to cancel pending requests using a `CancelToken`. This is useful for preventing unnecessary requests when, for instance, a user navigates away from a page before a request completes.\n\n```javascript\nimport axios from 'axios';\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\nconst fetchData = () => {\n  cancel && cancel(); // Cancel any previous request\n  axios.get('/data', {\n    cancelToken: new CancelToken(function executor(c) {\n      cancel = c;\n    })\n  })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    if (axios.isCancel(error)) {\n      console.log('Request cancelled', error.message);\n    } else {\n      console.error(error);\n    }\n  });\n};\n\n//Call fetchData multiple times to demonstrate cancellation\nfetchData();\nsetTimeout(fetchData, 2000); //Simulate a second request after 2 seconds\nsetTimeout(() => cancel(), 1500); //Cancel after 1.5 seconds\n\n```\n\nThis example shows how to create a `CancelToken` and use it to cancel a request.  The `axios.isCancel` function helps differentiate between cancellation and other errors.\n\n\n\n### Authentication\n\nAuthentication is typically handled by including authorization headers in your requests.  The specific method depends on your authentication scheme (e.g., Bearer tokens, Basic Auth).\n\n```javascript\n// Bearer Token Authentication\naxios.get('/protected-resource', {\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem('token')}`\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n\n\n//Basic Auth (generally less secure, avoid if possible)\naxios.get('/protected-resource', {\n  auth: {\n    username: 'user',\n    password: 'password'\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Uploading Files\n\nTo upload files, use `FormData` and set the `Content-Type` header appropriately.\n\n```javascript\nconst formData = new FormData();\nformData.append('file', fileInput.files[0]); //fileInput is a file input element\n\naxios.post('/upload', formData, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Downloading Files\n\nDownloading files often involves setting the `responseType` to `'blob'` and handling the response appropriately.\n\n```javascript\naxios({\n  url: '/download',\n  method: 'GET',\n  responseType: 'blob',\n})\n  .then(response => {\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'filename.ext'); // Set filename\n    document.body.appendChild(link);\n    link.click();\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Proxies\n\nIf you need to use a proxy, you can configure it in your Axios instance.\n\n```javascript\nconst axiosInstance = axios.create({\n  proxy: {\n    host: 'your-proxy-host',\n    port: your-proxy-port\n  }\n});\n\naxiosInstance.get('/data')\n  .then(...)\n  .catch(...);\n```\n\n\n### Customizing Axios Instance\n\nCreate customized Axios instances for specific needs (e.g., different base URLs, headers).\n\n```javascript\nconst api = axios.create({\n  baseURL: 'https://api.example.com',\n  headers: {\n    'X-Custom-Header': 'value'\n  }\n});\n\napi.get('/users')\n  .then(...)\n  .catch(...);\n```\n\n\n\n### Working with JSON Data\n\nAxios automatically parses JSON responses.  Ensure your server sends the correct `Content-Type` header (`application/json`).\n\n```javascript\naxios.get('/api/users')\n  .then(response => {\n    const users = response.data; // users is a JavaScript object/array\n    console.log(users);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n### Working with FormData\n\nUse `FormData` for sending files or other non-JSON data.  Remember the `multipart/form-data` content type.  (See Uploading Files above)\n\n### Using Axios with React\n\nAxios works well within React applications.  Typically, you'd make requests within component functions or custom hooks.\n\n```javascript\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction MyComponent() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    axios.get('/api/data')\n      .then(response => setData(response.data))\n      .catch(error => console.error(error));\n  }, []);\n\n  return (\n    <div>\n      {/* ... render data ... */}\n    </div>\n  );\n}\n```\n\n### Using Axios with other frameworks\n\nAxios is framework-agnostic and works similarly in other JavaScript frameworks (Vue, Angular, Svelte, etc.).  The integration patterns are similar to the React example above.\n\n\n### Debugging Tips\n\n* **Inspect network requests in your browser's developer tools:** This helps identify issues with requests and responses.\n* **Use logging to track request/response data and status codes:**  Add `console.log` statements to monitor the flow of your requests.\n* **Check your server logs:**  Server-side errors might provide clues to resolve issues.\n* **Test with simpler requests:** Isolate the problem by starting with basic requests to eliminate client-side issues.\n* **Use Axios interceptors:** To log all requests or responses, aiding in debugging.\n\n\n\n\n## Security Considerations\n\n### Cross-Origin Resource Sharing (CORS)\n\nCross-Origin Resource Sharing (CORS) is a mechanism that allows web pages from one origin (domain, protocol, and port) to access resources from a different origin.  Axios, by default, handles CORS automatically. However, if your requests are blocked due to CORS issues, you need to configure your backend server to allow requests from your frontend origin.  This typically involves setting appropriate headers on the server-side (e.g., `Access-Control-Allow-Origin`).\n\nIf you encounter CORS errors, check your browser's developer console for error messages detailing the CORS issue.  Ensure your server is correctly configured to allow requests from the origin of your frontend application.  For example, if your frontend runs on `https://example.com` and your backend API is on `https://api.example.com`, `https://api.example.com` needs to be configured to allow requests from `https://example.com`.\n\n**Important Note:** Using `Access-Control-Allow-Origin: *` is generally discouraged in production environments as it allows any origin to access your API, creating a significant security vulnerability.  Instead, specify the exact origins allowed.\n\n\n### Protecting against XSS attacks\n\nCross-Site Scripting (XSS) attacks occur when malicious scripts are injected into otherwise benign and trusted websites. Axios itself does not directly prevent XSS attacks; preventing them requires server-side measures and secure coding practices on the frontend.  Here's how to mitigate XSS vulnerabilities related to Axios:\n\n* **Server-Side Input Validation and Sanitization:**  Your backend API must validate and sanitize all user inputs before storing or processing them to prevent malicious scripts from being stored in your database or injected into API responses.\n* **Output Encoding:** When displaying data received from Axios responses in your frontend, always properly encode the data to prevent the browser from interpreting it as executable code. Use appropriate HTML encoding functions to prevent XSS vulnerabilities when rendering data from API responses.  Libraries like DOMPurify can assist in this process.\n* **Content Security Policy (CSP):** Implement a Content Security Policy (CSP) to control the resources the browser is allowed to load, reducing the risk of XSS attacks. This is a server-side configuration.\n* **HTTP Strict Transport Security (HSTS):** Enforce HTTPS connections to prevent man-in-the-middle attacks that could inject malicious scripts. This is a server-side configuration.\n* **Regular Security Audits:** Regularly audit your codebase and backend for potential vulnerabilities.\n\n\n### Handling Sensitive Data\n\nWhen working with sensitive data (passwords, credit card information, API keys, etc.) using Axios, it is crucial to take extra precautions:\n\n* **HTTPS:** Always use HTTPS for all requests to protect data in transit.\n* **Avoid exposing sensitive data in URLs:**  Do not include sensitive data directly in the URL query parameters. Use POST requests with data in the request body instead.\n* **Secure Storage of Credentials:** Never store sensitive information like API keys directly in your frontend code. Use environment variables or secure backend mechanisms to manage credentials.\n* **Use appropriate authentication mechanisms:**  Implement strong authentication methods (e.g., OAuth 2.0, JWT) to protect access to your API.\n* **Input Validation:** Validate all user inputs on the server-side to prevent injection attacks.\n* **Data Encryption:** Encrypt sensitive data both at rest (in databases) and in transit.\n* **Regular Security Updates:** Keep Axios and all related libraries up-to-date to patch known vulnerabilities.\n\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **API (Application Programming Interface):** A set of rules and specifications that software programs can follow to communicate with each other.\n* **Axios:** A promise-based HTTP client for JavaScript.\n* **CORS (Cross-Origin Resource Sharing):** A mechanism that allows web pages from one origin to access resources from a different origin.\n* **HTTP (Hypertext Transfer Protocol):** The protocol used for communication between web browsers and servers.\n* **Interceptor:** A function that intercepts and modifies requests or responses in Axios.\n* **JSON (JavaScript Object Notation):** A lightweight data-interchange format.\n* **Promise:** An object representing the eventual completion (or failure) of an asynchronous operation.\n* **Request:** A message sent from a client (e.g., a web browser) to a server.\n* **Response:** A message sent from a server to a client in response to a request.\n* **REST (Representational State Transfer):** An architectural style for designing networked applications.\n* **Status Code:** A three-digit code indicating the status of an HTTP request (e.g., 200 OK, 404 Not Found, 500 Internal Server Error).\n* **XMLHttpRequest:** A browser API for making HTTP requests.\n* **FormData:** A browser API to construct a form's data for sending to a server.\n* **XSS (Cross-Site Scripting):** A type of web security vulnerability where malicious scripts are injected into otherwise benign and trusted websites.\n\n\n### Useful Links and Resources\n\n* **Official Axios Documentation:** [https://axios-http.com/docs/](https://axios-http.com/docs/)\n* **GitHub Repository:** [https://github.com/axios/axios](https://github.com/axios/axios)\n* **Stack Overflow:** Search for \"axios\" on Stack Overflow for troubleshooting and solutions to common problems.\n* **MDN Web Docs (for related concepts):**  Check MDN for information on HTTP, Promises, Fetch API, etc.\n\n\n### Changelog\n\n*(This section would contain a chronologically ordered list of significant changes and updates to Axios.  Include version numbers, release dates, and a brief description of the changes.  For example:*)\n\n**v1.5.0 (YYYY-MM-DD):**\n* Added support for new feature X.\n* Fixed bug Y.\n* Improved performance of Z.\n\n**v1.4.0 (YYYY-MM-DD):**\n* Introduced breaking change A.\n* Enhanced security feature B.\n\n\n**v1.3.1 (YYYY-MM-DD):**\n* Minor bug fix.\n\n\n*(Continue adding entries for each version)*\n\n\n**(Note:  Replace the placeholder version numbers and dates with actual release information from the Axios project.)**\n\n","srcMarkdownNoYaml":"\n\n\n### What is Axios?\n\nAxios is a popular, promise-based HTTP client for making asynchronous requests to REST endpoints and other HTTP servers. It's designed to work in both browser and Node.js environments, offering a consistent API across platforms.  It simplifies the process of sending HTTP requests (GET, POST, PUT, DELETE, etc.) and handling their responses, including error handling.  Axios intercepts requests and responses, allowing for modifications before they are sent or after they are received. This makes it ideal for tasks like adding authentication headers, transforming data, or handling common errors.\n\n### Why use Axios?\n\nAxios offers several advantages over other HTTP client libraries and native approaches:\n\n* **Promise-based:** Axios uses promises, making asynchronous code cleaner and easier to manage using `.then()` and `.catch()` methods.  This improves code readability and maintainability compared to callbacks.\n* **Cross-platform:** Works seamlessly in both browsers and Node.js environments with minimal code changes, enabling efficient development for various applications.\n* **Interceptors:** Allows for modifying requests before they are sent and responses before they are received, providing powerful capabilities for tasks like adding headers, transforming data, and implementing global error handling.\n* **Automatic JSON transformation:**  Axios automatically transforms JSON responses into JavaScript objects, simplifying data handling.\n* **Client-side and server-side support:** Can be used in both frontend and backend JavaScript projects.\n* **Cancellation of requests:**  Provides mechanisms for canceling pending requests.\n* **Progress tracking:**  For uploads, it allows tracking of upload progress.\n* **Error Handling:**  Provides structured ways to handle errors, including network errors and HTTP status codes.\n\n\n### Axios vs. Fetch API\n\nWhile both Axios and the native Fetch API are used for making HTTP requests, Axios offers several advantages:\n\n* **Automatic JSON transformation:** Axios automatically parses JSON responses, while Fetch requires explicit `response.json()` handling.\n* **Interceptors:** Axios's interceptors offer a more structured and powerful way to intercept and modify requests and responses than what Fetch provides.\n* **Request cancellation:**  Axios provides a more straightforward way to cancel requests.\n* **Progress tracking:** Axios offers built-in support for tracking upload progress, which is not directly available in Fetch.\n* **Better browser support (Historically):**  Although Fetch is now widely supported, Axios historically offered better compatibility across older browsers.\n\n\n### Setting up Axios\n\nSetting up Axios is straightforward.  For browser environments, include the library via a `<script>` tag or use a module bundler like Webpack.  For Node.js, install it using npm or yarn:\n\n**Node.js:**\n\n```bash\nnpm install axios\n```\n\nor\n\n```bash\nyarn add axios\n```\n\n**Browser (using a CDN):**\n\nAdd this script tag to your HTML file:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n```\n\n**Import in your JavaScript code (both browser and Node.js with module bundler):**\n\n```javascript\nimport axios from 'axios';\n```\n\nAfter installation or inclusion, you can start making requests using the Axios API.  Refer to the subsequent sections for details on making different types of requests and utilizing Axios features.\n\n\n## Making Requests\n\n### GET requests\n\nGET requests retrieve data from a specified resource.  Here's how to make a GET request with Axios:\n\n```javascript\naxios.get('/user?ID=12345')\n  .then(response => {\n    console.log(response.data); // Access the response data\n  })\n  .catch(error => {\n    console.error(error); // Handle errors\n  });\n```\n\nThis example fetches data from `/user?ID=12345`.  The response data is accessible via `response.data`.\n\n\n### POST requests\n\nPOST requests submit data to be processed to a specified resource.  This is often used to create new resources.\n\n```javascript\naxios.post('/user', {\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 30\n  })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis sends a JSON payload to `/user`. The response contains the result of the POST operation.\n\n\n### PUT requests\n\nPUT requests replace all current representations of the target resource with the request payload.\n\n```javascript\naxios.put('/user/12345', {\n    firstName: 'Jane',\n    lastName: 'Doe',\n    age: 25\n  })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis updates the resource at `/user/12345` with the provided data.\n\n\n### PATCH requests\n\nPATCH requests apply partial modifications to a resource.  Only the specified fields are updated.\n\n```javascript\naxios.patch('/user/12345', {\n    age: 26\n  })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis updates only the `age` field of the resource at `/user/12345`.\n\n\n### DELETE requests\n\nDELETE requests delete the specified resource.\n\n```javascript\naxios.delete('/user/12345')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis deletes the resource at `/user/12345`.\n\n\n### Request parameters\n\nRequest parameters are added to the URL query string.\n\n```javascript\naxios.get('/users', {\n  params: {\n    page: 1,\n    limit: 10\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis results in a request to `/users?page=1&limit=10`.\n\n\n### Request headers\n\nRequest headers provide additional information about the request.\n\n```javascript\naxios.get('/users', {\n  headers: {\n    'Authorization': 'Bearer my-token',\n    'Content-Type': 'application/json'\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis adds authorization and content type headers to the request.\n\n\n### Request body (data)\n\nThe request body contains data sent with POST, PUT, and PATCH requests.\n\n```javascript\naxios.post('/users', {\n  firstName: 'Bob',\n  lastName: 'Smith'\n}, {\n  headers: {\n    'Content-Type': 'application/json' //Important for JSON payloads\n  }\n})\n.then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n  This sends a JSON object as the request body.  Ensure the correct `Content-Type` header is set.\n\n\n### Handling different response types\n\nAxios automatically parses JSON responses. For other types, handle them accordingly:\n\n\n```javascript\naxios.get('/data')\n  .then(response => {\n    if (response.headers['content-type'].includes('application/json')) {\n      console.log('JSON response:', response.data);\n    } else if (response.headers['content-type'].includes('text/plain')) {\n      console.log('Plain text response:', response.data);\n    } else {\n      console.log('Other response type:', response.data);\n    }\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n### Timeout settings\n\nSet a timeout for requests to prevent indefinite hanging.\n\n```javascript\naxios.get('/slow-resource', {\n  timeout: 5000 // 5 seconds\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    if (error.code === 'ECONNABORTED') {\n      console.error('Request timed out');\n    } else {\n      console.error(error);\n    }\n  });\n```\n\n\n### Interceptors\n\nInterceptors allow modifying requests and responses globally.\n\n```javascript\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    config.headers.Authorization = 'Bearer my-new-token';\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nThis example adds an authorization header to all outgoing requests and handles response errors globally.  Remember to handle potential errors appropriately within interceptors.\n\n\n## Handling Responses\n\n### Status Codes\n\nAxios responses include a `status` property indicating the HTTP status code.  You should always check the status code to ensure the request was successful.  Codes in the 2xx range generally indicate success, while others (e.g., 4xx client errors, 5xx server errors) signal issues.\n\n```javascript\naxios.get('/users')\n  .then(response => {\n    if (response.status === 200) {\n      console.log('Success:', response.data);\n    } else if (response.status === 404) {\n      console.error('Not Found');\n    } else {\n      console.error('Error:', response.status);\n    }\n  })\n  .catch(error => {\n    console.error('Request failed:', error);\n  });\n\n```\n\nThis example checks for a 200 OK status and handles a 404 Not Found error specifically.\n\n\n### Response Data\n\nThe response data is accessible via the `response.data` property.  The format depends on the `Content-Type` header of the response.  Axios automatically parses JSON responses into JavaScript objects.  For other content types (e.g., text/plain, text/html), `response.data` will contain the raw response body as a string.\n\n```javascript\naxios.get('/api/data')\n  .then(response => {\n    console.log(response.data); // Access the JSON data\n    console.log(typeof response.data); //Should output 'object' for JSON\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Response Headers\n\nResponse headers provide additional information about the response.  They are accessible via `response.headers`.\n\n```javascript\naxios.get('/api/data')\n  .then(response => {\n    console.log(response.headers); //Access all headers\n    console.log(response.headers['content-type']); //Access specific header\n    console.log(response.headers['content-length']);//Access specific header\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Error Handling\n\nAxios uses promises, so errors are handled using `.catch()`.  The `error` object contains information about the error, including the response (if available) and the error code.\n\n\n```javascript\naxios.get('/invalid-endpoint')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.error('Response Error:', error.response.data);\n      console.error('Status:', error.response.status);\n      console.error('Headers:', error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.error('Request Error:', error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error('Error:', error.message);\n    }\n    console.error('Config:', error.config);\n  });\n```\n\nThis comprehensive error handling checks for different error scenarios: network errors (no response), server errors (non-2xx status codes), and other errors during request setup.\n\n\n### Transforming Responses\n\nYou can transform responses using interceptors or within the `.then()` block.  This is useful for modifying data before it's used in your application.\n\n```javascript\naxios.get('/api/data')\n  .then(response => {\n    const transformedData = response.data.map(item => ({\n      id: item.id,\n      name: item.name.toUpperCase()\n    }));\n    console.log(transformedData);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis example transforms the response data by converting names to uppercase.  More complex transformations can be implemented here or using response interceptors for global transformations.\n\n\n## Advanced Usage\n\n### Cancellation of requests\n\nAxios allows you to cancel pending requests using a `CancelToken`. This is useful for preventing unnecessary requests when, for instance, a user navigates away from a page before a request completes.\n\n```javascript\nimport axios from 'axios';\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\nconst fetchData = () => {\n  cancel && cancel(); // Cancel any previous request\n  axios.get('/data', {\n    cancelToken: new CancelToken(function executor(c) {\n      cancel = c;\n    })\n  })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    if (axios.isCancel(error)) {\n      console.log('Request cancelled', error.message);\n    } else {\n      console.error(error);\n    }\n  });\n};\n\n//Call fetchData multiple times to demonstrate cancellation\nfetchData();\nsetTimeout(fetchData, 2000); //Simulate a second request after 2 seconds\nsetTimeout(() => cancel(), 1500); //Cancel after 1.5 seconds\n\n```\n\nThis example shows how to create a `CancelToken` and use it to cancel a request.  The `axios.isCancel` function helps differentiate between cancellation and other errors.\n\n\n\n### Authentication\n\nAuthentication is typically handled by including authorization headers in your requests.  The specific method depends on your authentication scheme (e.g., Bearer tokens, Basic Auth).\n\n```javascript\n// Bearer Token Authentication\naxios.get('/protected-resource', {\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem('token')}`\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n\n\n//Basic Auth (generally less secure, avoid if possible)\naxios.get('/protected-resource', {\n  auth: {\n    username: 'user',\n    password: 'password'\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Uploading Files\n\nTo upload files, use `FormData` and set the `Content-Type` header appropriately.\n\n```javascript\nconst formData = new FormData();\nformData.append('file', fileInput.files[0]); //fileInput is a file input element\n\naxios.post('/upload', formData, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n})\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Downloading Files\n\nDownloading files often involves setting the `responseType` to `'blob'` and handling the response appropriately.\n\n```javascript\naxios({\n  url: '/download',\n  method: 'GET',\n  responseType: 'blob',\n})\n  .then(response => {\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'filename.ext'); // Set filename\n    document.body.appendChild(link);\n    link.click();\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n\n### Proxies\n\nIf you need to use a proxy, you can configure it in your Axios instance.\n\n```javascript\nconst axiosInstance = axios.create({\n  proxy: {\n    host: 'your-proxy-host',\n    port: your-proxy-port\n  }\n});\n\naxiosInstance.get('/data')\n  .then(...)\n  .catch(...);\n```\n\n\n### Customizing Axios Instance\n\nCreate customized Axios instances for specific needs (e.g., different base URLs, headers).\n\n```javascript\nconst api = axios.create({\n  baseURL: 'https://api.example.com',\n  headers: {\n    'X-Custom-Header': 'value'\n  }\n});\n\napi.get('/users')\n  .then(...)\n  .catch(...);\n```\n\n\n\n### Working with JSON Data\n\nAxios automatically parses JSON responses.  Ensure your server sends the correct `Content-Type` header (`application/json`).\n\n```javascript\naxios.get('/api/users')\n  .then(response => {\n    const users = response.data; // users is a JavaScript object/array\n    console.log(users);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n### Working with FormData\n\nUse `FormData` for sending files or other non-JSON data.  Remember the `multipart/form-data` content type.  (See Uploading Files above)\n\n### Using Axios with React\n\nAxios works well within React applications.  Typically, you'd make requests within component functions or custom hooks.\n\n```javascript\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction MyComponent() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    axios.get('/api/data')\n      .then(response => setData(response.data))\n      .catch(error => console.error(error));\n  }, []);\n\n  return (\n    <div>\n      {/* ... render data ... */}\n    </div>\n  );\n}\n```\n\n### Using Axios with other frameworks\n\nAxios is framework-agnostic and works similarly in other JavaScript frameworks (Vue, Angular, Svelte, etc.).  The integration patterns are similar to the React example above.\n\n\n### Debugging Tips\n\n* **Inspect network requests in your browser's developer tools:** This helps identify issues with requests and responses.\n* **Use logging to track request/response data and status codes:**  Add `console.log` statements to monitor the flow of your requests.\n* **Check your server logs:**  Server-side errors might provide clues to resolve issues.\n* **Test with simpler requests:** Isolate the problem by starting with basic requests to eliminate client-side issues.\n* **Use Axios interceptors:** To log all requests or responses, aiding in debugging.\n\n\n\n\n## Security Considerations\n\n### Cross-Origin Resource Sharing (CORS)\n\nCross-Origin Resource Sharing (CORS) is a mechanism that allows web pages from one origin (domain, protocol, and port) to access resources from a different origin.  Axios, by default, handles CORS automatically. However, if your requests are blocked due to CORS issues, you need to configure your backend server to allow requests from your frontend origin.  This typically involves setting appropriate headers on the server-side (e.g., `Access-Control-Allow-Origin`).\n\nIf you encounter CORS errors, check your browser's developer console for error messages detailing the CORS issue.  Ensure your server is correctly configured to allow requests from the origin of your frontend application.  For example, if your frontend runs on `https://example.com` and your backend API is on `https://api.example.com`, `https://api.example.com` needs to be configured to allow requests from `https://example.com`.\n\n**Important Note:** Using `Access-Control-Allow-Origin: *` is generally discouraged in production environments as it allows any origin to access your API, creating a significant security vulnerability.  Instead, specify the exact origins allowed.\n\n\n### Protecting against XSS attacks\n\nCross-Site Scripting (XSS) attacks occur when malicious scripts are injected into otherwise benign and trusted websites. Axios itself does not directly prevent XSS attacks; preventing them requires server-side measures and secure coding practices on the frontend.  Here's how to mitigate XSS vulnerabilities related to Axios:\n\n* **Server-Side Input Validation and Sanitization:**  Your backend API must validate and sanitize all user inputs before storing or processing them to prevent malicious scripts from being stored in your database or injected into API responses.\n* **Output Encoding:** When displaying data received from Axios responses in your frontend, always properly encode the data to prevent the browser from interpreting it as executable code. Use appropriate HTML encoding functions to prevent XSS vulnerabilities when rendering data from API responses.  Libraries like DOMPurify can assist in this process.\n* **Content Security Policy (CSP):** Implement a Content Security Policy (CSP) to control the resources the browser is allowed to load, reducing the risk of XSS attacks. This is a server-side configuration.\n* **HTTP Strict Transport Security (HSTS):** Enforce HTTPS connections to prevent man-in-the-middle attacks that could inject malicious scripts. This is a server-side configuration.\n* **Regular Security Audits:** Regularly audit your codebase and backend for potential vulnerabilities.\n\n\n### Handling Sensitive Data\n\nWhen working with sensitive data (passwords, credit card information, API keys, etc.) using Axios, it is crucial to take extra precautions:\n\n* **HTTPS:** Always use HTTPS for all requests to protect data in transit.\n* **Avoid exposing sensitive data in URLs:**  Do not include sensitive data directly in the URL query parameters. Use POST requests with data in the request body instead.\n* **Secure Storage of Credentials:** Never store sensitive information like API keys directly in your frontend code. Use environment variables or secure backend mechanisms to manage credentials.\n* **Use appropriate authentication mechanisms:**  Implement strong authentication methods (e.g., OAuth 2.0, JWT) to protect access to your API.\n* **Input Validation:** Validate all user inputs on the server-side to prevent injection attacks.\n* **Data Encryption:** Encrypt sensitive data both at rest (in databases) and in transit.\n* **Regular Security Updates:** Keep Axios and all related libraries up-to-date to patch known vulnerabilities.\n\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **API (Application Programming Interface):** A set of rules and specifications that software programs can follow to communicate with each other.\n* **Axios:** A promise-based HTTP client for JavaScript.\n* **CORS (Cross-Origin Resource Sharing):** A mechanism that allows web pages from one origin to access resources from a different origin.\n* **HTTP (Hypertext Transfer Protocol):** The protocol used for communication between web browsers and servers.\n* **Interceptor:** A function that intercepts and modifies requests or responses in Axios.\n* **JSON (JavaScript Object Notation):** A lightweight data-interchange format.\n* **Promise:** An object representing the eventual completion (or failure) of an asynchronous operation.\n* **Request:** A message sent from a client (e.g., a web browser) to a server.\n* **Response:** A message sent from a server to a client in response to a request.\n* **REST (Representational State Transfer):** An architectural style for designing networked applications.\n* **Status Code:** A three-digit code indicating the status of an HTTP request (e.g., 200 OK, 404 Not Found, 500 Internal Server Error).\n* **XMLHttpRequest:** A browser API for making HTTP requests.\n* **FormData:** A browser API to construct a form's data for sending to a server.\n* **XSS (Cross-Site Scripting):** A type of web security vulnerability where malicious scripts are injected into otherwise benign and trusted websites.\n\n\n### Useful Links and Resources\n\n* **Official Axios Documentation:** [https://axios-http.com/docs/](https://axios-http.com/docs/)\n* **GitHub Repository:** [https://github.com/axios/axios](https://github.com/axios/axios)\n* **Stack Overflow:** Search for \"axios\" on Stack Overflow for troubleshooting and solutions to common problems.\n* **MDN Web Docs (for related concepts):**  Check MDN for information on HTTP, Promises, Fetch API, etc.\n\n\n### Changelog\n\n*(This section would contain a chronologically ordered list of significant changes and updates to Axios.  Include version numbers, release dates, and a brief description of the changes.  For example:*)\n\n**v1.5.0 (YYYY-MM-DD):**\n* Added support for new feature X.\n* Fixed bug Y.\n* Improved performance of Z.\n\n**v1.4.0 (YYYY-MM-DD):**\n* Introduced breaking change A.\n* Enhanced security feature B.\n\n\n**v1.3.1 (YYYY-MM-DD):**\n* Minor bug fix.\n\n\n*(Continue adding entries for each version)*\n\n\n**(Note:  Replace the placeholder version numbers and dates with actual release information from the Axios project.)**\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"axios.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Axios - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}