{"title":"Tween.js - Documentation","markdown":{"yaml":{"title":"Tween.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"What is Tween.js?","containsRefs":false,"markdown":"\n\n\n\nTween.js is a lightweight JavaScript library that provides an easy and efficient way to create smooth animations and transitions between different values over time.  It's particularly useful for creating visually appealing animations for user interface elements, game objects, or any other element requiring gradual changes in position, size, opacity, or other properties.  Tween.js handles the complex calculations necessary to create smooth, interpolated animation curves, freeing you from the burden of manually managing animation timelines and easing functions.\n\n\n### Why use Tween.js?\n\nUsing Tween.js offers several advantages:\n\n* **Simplicity:**  Tween.js provides a clean and intuitive API, making it easy to create complex animations with minimal code.\n* **Performance:**  It's designed to be performant, even when animating many objects simultaneously.\n* **Flexibility:**  It supports a wide range of easing functions, allowing you to customize the look and feel of your animations.  You can control the animation's speed, duration, and other parameters precisely.\n* **Ease of use:** It abstracts away the complexities of animation timing and interpolation, allowing developers to focus on the creative aspects of their animations.\n* **Wide browser compatibility:** Tween.js works across a wide range of modern browsers.\n\n\n### Setting up Tween.js in your project\n\nThe simplest way to include Tween.js in your project is via a CDN link. Add the following `<script>` tag to your HTML file within the `<head>` or just before the closing `</body>` tag:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/Tween.js\"></script>\n```\n\nAlternatively, you can download the Tween.js library from its repository and include it locally.\n\n\n### Basic usage example.\n\nThis example demonstrates a simple animation that changes the `x` and `y` coordinates of an element over 1000 milliseconds (1 second):\n\n```javascript\n// Select the element to animate\nconst element = document.getElementById('myElement');\n\n// Create a new Tween\nconst tween = new TWEEN.Tween({ x: 0, y: 0 })\n  .to({ x: 200, y: 100 }, 1000) // Animate to x: 200, y: 100 over 1000ms\n  .onUpdate(function() {\n    // Update the element's position based on the tween's current values\n    element.style.left = this.x + 'px';\n    element.style.top = this.y + 'px';\n  })\n  .start();\n\n\n// This is crucial for animations to run!  Call this in your animation loop (e.g., `requestAnimationFrame`)\nfunction animate() {\n  requestAnimationFrame(animate);\n  TWEEN.update();\n}\n\nanimate();\n```\n\nRemember to have an element with the ID `myElement` in your HTML for this code to function correctly.  For example:\n\n```html\n<div id=\"myElement\" style=\"position: absolute; width: 50px; height: 50px; background-color: blue;\"></div>\n```\nThis will create a blue square that animates smoothly to a new position.  Remember that the element needs `position: absolute` or `position: relative` for the `left` and `top` styles to work correctly.\n\n\n## Core Concepts\n\n### Tweens and Updates\n\nThe fundamental unit of animation in Tween.js is the `Tween`.  A `Tween` object represents a single animation, defining the target object, the properties to animate, the target values, the duration, and the easing function.  Tweens don't animate themselves; they need to be updated regularly to progress through their animation cycle.\n\nThis updating is typically done using `TWEEN.update()`, which is called within an animation loop, commonly using `requestAnimationFrame`. `requestAnimationFrame` ensures that the animation is synchronized with the browser's repaint cycle, resulting in smoother animations.  Each call to `TWEEN.update()` advances all active tweens by a small time step.  If you don't call `TWEEN.update()` regularly, your animations won't play.\n\n\n### Easing Functions\n\nEasing functions control the speed and rhythm of an animation over time.  Tween.js offers a variety of pre-defined easing functions, such as linear, quadratic, cubic, and more.  These functions determine how the animated property changes over the animation's duration.  For example, a linear easing function results in a constant animation speed, while a easeInOutQuad function accelerates at the beginning, slows down towards the end and creates a more natural-looking animation.\n\nYou can specify the easing function when creating a `Tween` or later in the chain.  Refer to the Tween.js documentation for a complete list of available easing functions.  Custom easing functions can also be implemented.\n\n\n### Chaining Tweens\n\nTween.js allows you to chain multiple tweens together to create complex sequences of animations.  This is achieved using methods like `.chain()`.  By chaining tweens, you can create smooth transitions between different animation stages without manual intervention to start subsequent animations.  When one tween completes, the next one in the chain automatically starts.\n\n\n### Tween Properties\n\nSeveral key properties control the behavior of a Tween object:\n\n* **`to(target, duration)`:** Defines the target values for the animation and the duration of the animation in milliseconds.\n* **`onUpdate(callback)`:** Specifies a callback function that is executed on every update of the tween. This function receives the current state of the tween's properties as its context (`this`).\n* **`onComplete(callback)`:**  Specifies a callback function that's executed when the tween completes.\n* **`onStart(callback)`:** Specifies a callback function that is executed when the tween starts.\n* **`easing(easingFunction)`:** Specifies the easing function to use for the animation. You can use pre-defined easing functions from TWEEN.Easing or provide your custom easing function.\n* **`delay(delayTime)`:** Adds a delay (in milliseconds) before the tween starts.\n* **`repeat(repetitions)`:** Repeats the tween a specified number of times.\n* **`yoyo(yoyo)`:** Makes the tween reverse after it completes, optionally repeating the yoyo effect.\n* **`start()`:** Starts the tween animation.\n* **`stop()`:** Stops the tween animation.\n* **`pause()`:** Pauses the tween animation.\n* **`resume()`:** Resumes a paused tween animation.\n\n\nBy manipulating these properties, you can fine-tune your animations to achieve the desired visual effects.  Understanding these properties is crucial for creating sophisticated and engaging animations with Tween.js.\n\n\n## Creating and Managing Tweens\n\n### Creating a Tween\n\nTo create a new Tween, you use the `new TWEEN.Tween(object)` constructor, where `object` is the object whose properties you want to animate.  This object can be a simple JavaScript object literal or any other JavaScript object.  The initial values of the properties to be animated are taken from this object.\n\n```javascript\n// Create a tween for a simple object\nconst myTween = new TWEEN.Tween({ x: 0, y: 0 });\n\n// Create a tween for an existing object\nconst myElement = document.getElementById('myElement');\nconst elementTween = new TWEEN.Tween(myElement); // Animating properties directly on the element\n```\n\n\n### Setting Tween Properties (`to`, `duration`, `easing`, etc.)\n\nAfter creating a Tween, you use methods to set its properties, including the target values (`to`), the animation duration, the easing function, and callbacks.\n\n```javascript\nmyTween\n  .to({ x: 100, y: 200 }, 1000) // Target values and duration (milliseconds)\n  .easing(TWEEN.Easing.Quadratic.InOut) // Easing function\n  .onUpdate(function() {\n    console.log('x:', this.x, 'y:', this.y); // Access tween properties within the callback\n  });\n\nelementTween.to({opacity: 0},500).easing(TWEEN.Easing.Cubic.Out)\n```\n\n\n### Starting and Stopping Tweens\n\nTweens are started using the `.start()` method.  To stop a running Tween, use the `.stop()` method.\n\n```javascript\nmyTween.start();\n// ... later ...\nmyTween.stop();\n```\n\n\n### Pausing and Resuming Tweens\n\nYou can pause and resume a Tween using the `.pause()` and `.resume()` methods.  This allows for temporarily halting and restarting an animation without losing its current state.\n\n```javascript\nmyTween.pause();\n// ... later ...\nmyTween.resume();\n```\n\n\n### Chaining Multiple Tweens\n\nChaining allows you to create sequences of animations.  Use the `.chain()` method to specify the next Tween to run after the current one completes.  You can chain multiple tweens together to create complex animation sequences.\n\n```javascript\nconst tween1 = new TWEEN.Tween({ x: 0 }).to({ x: 100 }, 500);\nconst tween2 = new TWEEN.Tween({ x: 100 }).to({ x: 200 }, 500);\nconst tween3 = new TWEEN.Tween({x:200}).to({x:0}, 500);\n\ntween1.chain(tween2).chain(tween3);\ntween1.start();\n```\n\n\n### Tween Events (`onStart`, `onComplete`, etc.)\n\nCallbacks are attached to specific events in a Tween's lifecycle using methods like `.onStart()`, `.onUpdate()`, and `.onComplete()`.  These functions are executed at the respective stages of the animation.\n\n```javascript\nmyTween\n  .onStart(function() { console.log('Tween started!'); })\n  .onUpdate(function() { /* ... */ })\n  .onComplete(function() { console.log('Tween completed!'); });\n```\n\n### Managing Multiple Tweens\n\nTo manage multiple tweens effectively, use `TWEEN.getAll()` to get an array of all active tweens, and `TWEEN.removeAll()` to remove all tweens.  Individual tweens can be removed using `tween.stop()`. Remember to call `TWEEN.update()` in your animation loop (e.g., using `requestAnimationFrame`) to update all active tweens.  This ensures all your animations run smoothly and concurrently.\n```javascript\n// Get all active tweens\nconst allTweens = TWEEN.getAll();\n\n// Remove all active tweens\nTWEEN.removeAll();\n\n```\n\nRemember that `TWEEN.update()` must be called within an animation loop (usually using `requestAnimationFrame`) to update all active tweens and see the animations.\n\n\n## Easing Functions in Detail\n\nTween.js provides a wide variety of easing functions to control the speed and rhythm of your animations.  These functions are categorized by their mathematical basis and produce different animation curves.  Each easing function is available in `TWEEN.Easing` as an object with `In`, `Out`, and `InOut` variations.  `In` accelerates from the start, `Out` decelerates towards the end, and `InOut` combines both acceleration and deceleration.  They all accept a normalized time value (between 0 and 1) as input and return a normalized output value (also between 0 and 1).\n\n### Linear Easing\n\nProvides a constant animation speed throughout its duration.  No acceleration or deceleration.\n\n```javascript\n// Example using linear easing\nmyTween.easing(TWEEN.Easing.Linear.None);\n```\n\n### Quadratic Easing\n\nUses quadratic equations to create acceleration or deceleration effects.\n\n```javascript\n// Quadratic ease-in\nmyTween.easing(TWEEN.Easing.Quadratic.In);\n// Quadratic ease-out\nmyTween.easing(TWEEN.Easing.Quadratic.Out);\n// Quadratic ease-in-out\nmyTween.easing(TWEEN.Easing.Quadratic.InOut);\n```\n\n### Cubic Easing\n\nUses cubic equations, providing smoother acceleration and deceleration than quadratic easing.\n\n```javascript\n// Cubic ease-in\nmyTween.easing(TWEEN.Easing.Cubic.In);\n// Cubic ease-out\nmyTween.easing(TWEEN.Easing.Cubic.Out);\n// Cubic ease-in-out\nmyTween.easing(TWEEN.Easing.Cubic.InOut);\n```\n\n### Quartic Easing\n\nUses quartic (fourth-power) equations for even smoother transitions.\n\n```javascript\n// Quartic ease-in\nmyTween.easing(TWEEN.Easing.Quartic.In);\n// Quartic ease-out\nmyTween.easing(TWEEN.Easing.Quartic.Out);\n// Quartic ease-in-out\nmyTween.easing(TWEEN.Easing.Quartic.InOut);\n```\n\n### Quintic Easing\n\nUses quintic (fifth-power) equations, offering the smoothest transitions among the power-based easings.\n\n```javascript\n// Quintic ease-in\nmyTween.easing(TWEEN.Easing.Quintic.In);\n// Quintic ease-out\nmyTween.easing(TWEEN.Easing.Quintic.Out);\n// Quintic ease-in-out\nmyTween.easing(TWEEN.Easing.Quintic.InOut);\n```\n\n### Sinusoidal Easing\n\nUses sine functions to create a smooth, wave-like animation.\n\n```javascript\n// Sinusoidal ease-in\nmyTween.easing(TWEEN.Easing.Sinusoidal.In);\n// Sinusoidal ease-out\nmyTween.easing(TWEEN.Easing.Sinusoidal.Out);\n// Sinusoidal ease-in-out\nmyTween.easing(TWEEN.Easing.Sinusoidal.InOut);\n```\n\n### Exponential Easing\n\nUses exponential functions, resulting in rapid acceleration or deceleration.\n\n```javascript\n// Exponential ease-in\nmyTween.easing(TWEEN.Easing.Exponential.In);\n// Exponential ease-out\nmyTween.easing(TWEEN.Easing.Exponential.Out);\n// Exponential ease-in-out\nmyTween.easing(TWEEN.Easing.Exponential.InOut);\n```\n\n### Circular Easing\n\nUses circular functions, creating a smooth, rounded animation.\n\n```javascript\n// Circular ease-in\nmyTween.easing(TWEEN.Easing.Circular.In);\n// Circular ease-out\nmyTween.easing(TWEEN.Easing.Circular.Out);\n// Circular ease-in-out\nmyTween.easing(TWEEN.Easing.Circular.InOut);\n```\n\n### Elastic Easing\n\nSimulates an elastic effect, with overshooting and oscillations.  It takes an `amplitude` and `period` parameter to customize the effect.\n\n```javascript\n// Elastic ease-in\nmyTween.easing(TWEEN.Easing.Elastic.In);\n// Elastic ease-out\nmyTween.easing(TWEEN.Easing.Elastic.Out);\n// Elastic ease-in-out\nmyTween.easing(TWEEN.Easing.Elastic.InOut);\n\n//Example with custom parameters.\nmyTween.easing(TWEEN.Easing.Elastic.InOut.get(1, .3)); // amplitude = 1, period = .3\n```\n\n\n### Back Easing\n\nCreates an animation that overshoots its target before settling.  Similar to elastic, but without oscillations.\n\n```javascript\n// Back ease-in\nmyTween.easing(TWEEN.Easing.Back.In);\n// Back ease-out\nmyTween.easing(TWEEN.Easing.Back.Out);\n// Back ease-in-out\nmyTween.easing(TWEEN.Easing.Back.InOut);\n```\n\n### Bounce Easing\n\nSimulates a bouncing effect, with decreasing amplitude.\n\n```javascript\n// Bounce ease-in\nmyTween.easing(TWEEN.Easing.Bounce.In);\n// Bounce ease-out\nmyTween.easing(TWEEN.Easing.Bounce.Out);\n// Bounce ease-in-out\nmyTween.easing(TWEEN.Easing.Bounce.InOut);\n```\n\n### Custom Easing Functions\n\nYou can create your own custom easing functions by defining a function that takes a single normalized time argument (between 0 and 1) and returns a normalized output value (also between 0 and 1).  This function can then be used directly with the `easing()` method.\n\n```javascript\n// Example custom easing function\nfunction myCustomEasing(k) {\n  return k * k; //Simple quadratic ease-in\n}\n\nmyTween.easing(myCustomEasing);\n```\n\nRemember to experiment with different easing functions to find the best fit for your animation needs. The visual difference between many of these can be subtle, but choosing the right one significantly impacts the feel of your animations.\n\n\n## Advanced Techniques\n\n### Using Tween.js with different animation libraries\n\nTween.js can coexist with other animation libraries.  It doesn't directly integrate with them, but you can use Tween.js to manage specific animations while letting other libraries handle other aspects of your application's visual effects.  The key is to ensure that your animation loops and update mechanisms don't conflict.  If you're using another library that provides its own animation loop (like a game engine's update function), you should integrate `TWEEN.update()` into that loop instead of creating a separate `requestAnimationFrame` loop.\n\n\n### Creating complex animations with Tween.js\n\nComplex animations can be achieved by chaining multiple tweens, using different easing functions, and incorporating callbacks.  For highly intricate animations, consider breaking down the animation into smaller, manageable tweens that are chained together sequentially or in parallel using techniques like creating multiple tweens that start simultaneously or using branching logic within `onUpdate` or `onComplete` callbacks to control the flow.\n\n\n### Optimizing Tween.js performance\n\nFor optimal performance, particularly with many simultaneous animations:\n\n* **Avoid unnecessary updates:** Only update properties that actually change in your `onUpdate` callbacks.  Unnecessary reads and writes can impact performance.\n* **Batch updates:**  If you have many objects with similar animations, try to batch them into fewer tweens whenever possible, perhaps by animating properties of a single object that contains all the properties of multiple visual elements.\n* **Use efficient data structures:** For large numbers of tweens, consider using more efficient data structures (if the default implementation becomes a bottleneck, which is unlikely with modern hardware and reasonable numbers of tweens).\n* **Minimize DOM manipulations:** Direct manipulation of the DOM within `onUpdate` callbacks can be performance-intensive. Consider using techniques to minimize direct DOM access, such as caching element references or using CSS transitions and transformations where applicable.  Tween.js is better suited for animating numerical values, which are then applied to CSS styles.\n\n\n### Debugging Tween.js animations\n\nDebugging issues with Tween.js animations involves standard JavaScript debugging techniques:\n\n* **Use the browser's developer tools:** Set breakpoints within your `onUpdate` and `onComplete` callbacks to inspect the values of your animated properties at different stages of the animation.\n* **Console logging:** Use `console.log()` statements to log important values or events to help track the progress and state of your tweens.\n* **Visual inspection:** Carefully observe the animation visually to identify unexpected behavior or incorrect values.\n* **Simplify the animation:**  If you're dealing with a complex animation, try simplifying it to isolate the problematic parts. Start with a minimal example to rule out errors in other parts of your code.\n\n\n### Integrating with other JavaScript frameworks (React, Angular, Vue)\n\nIntegrating Tween.js with popular JavaScript frameworks generally involves:\n\n* **React:** You can use Tween.js within functional components or class components, triggering animations based on state changes or lifecycle events.  Using hooks (in functional components) or `setState` (in class components) will allow you to control the animation start/stop using React's state management.\n* **Angular:**  Integrate Tween.js into your Angular components, potentially using `ChangeDetectionStrategy` or zones to properly update the view when animation values change.\n* **Vue:** Tween.js can be used within Vue components, manipulating data properties to drive animations.  Use Vue's reactivity system to trigger animations based on data changes.  Reactive properties update the DOM automatically.\n\nIn all cases, remember to handle the `TWEEN.update()` call within your framework's rendering loop or lifecycle methods (e.g., `requestAnimationFrame` in React or Angular, using Vue's lifecycle hooks).\n\n\n### Using Plugins\n\nTween.js itself doesn't have a built-in plugin architecture. However, you can extend its functionality by creating custom functions or classes that build on top of the core Tween.js API.  These custom additions could be considered \"plugins\" in the sense that they extend Tween.js's capabilities.  For example, you could create a plugin that adds support for more complex easing functions or animation types.  This would involve creating a new module with your added functions that operate on the core Tween.js classes.\n\n\n## API Reference\n\nThis section provides a detailed overview of the Tween.js API.  Note that the specific methods and properties available might vary slightly depending on the version of Tween.js you are using.  Always consult the latest documentation for the most up-to-date information.\n\n\n### Tween Class Methods\n\nThe `TWEEN.Tween` class is the core of Tween.js.  It represents a single animation.  Here are some of its key methods:\n\n* **`constructor(object)`:** Creates a new Tween instance.  `object` is the target object whose properties will be animated.  The initial values for animation are taken from this object's properties.\n\n* **`to(properties, duration)`:** Specifies the target properties and the animation duration in milliseconds.  `properties` is an object where keys are property names and values are the target values.\n\n* **`start([time])`:** Starts the tween animation.  An optional `time` parameter can specify the starting time.\n\n* **`stop()`:** Stops the tween animation.\n\n* **`pause()`:** Pauses the tween animation.\n\n* **`resume()`:** Resumes a paused tween animation.\n\n* **`update(time)`:** Manually updates the tween.  This is usually handled automatically by `TWEEN.update()`, but you might need to call it directly in specific circumstances.\n\n* **`easing(easingFunction)`:** Sets the easing function for the animation.\n\n* **`chain(tween)`:** Chains the current tween to another tween.  The chained tween starts automatically after the current tween completes.\n\n* **`repeat(times)`:** Specifies the number of times the animation should repeat.\n\n* **`yoyo(yoyo)`:**  Makes the tween reverse after it completes, optionally repeating the yoyo effect.\n\n* **`delay(amount)`:** Adds a delay before the tween starts (in milliseconds).\n\n* **`onComplete(callback)`:** Specifies a callback function to be executed when the animation completes.\n\n* **`onStart(callback)`:** Specifies a callback function to be executed when the animation starts.\n\n* **`onUpdate(callback)`:** Specifies a callback function to be executed on every update of the tween.  The callback's context (`this`) will be the tween itself.\n\n* **`onStop(callback)`:** Specifies a callback function to be executed when the tween is stopped.\n\n\n### Easing Function Reference\n\nTween.js provides a comprehensive set of easing functions categorized under `TWEEN.Easing`. Each category (e.g., `Quadratic`, `Cubic`, `Elastic`) has `In`, `Out`, and `InOut` variations:\n\n* **`TWEEN.Easing.Linear.None`:** Linear easing (constant speed).\n* **`TWEEN.Easing.Quadratic.In`, `TWEEN.Easing.Quadratic.Out`, `TWEEN.Easing.Quadratic.InOut`:** Quadratic easing.\n* **`TWEEN.Easing.Cubic.In`, `TWEEN.Easing.Cubic.Out`, `TWEEN.Easing.Cubic.InOut`:** Cubic easing.\n* **`TWEEN.Easing.Quartic.In`, `TWEEN.Easing.Quartic.Out`, `TWEEN.Easing.Quartic.InOut`:** Quartic easing.\n* **`TWEEN.Easing.Quintic.In`, `TWEEN.Easing.Quintic.Out`, `TWEEN.Easing.Quintic.InOut`:** Quintic easing.\n* **`TWEEN.Easing.Sinusoidal.In`, `TWEEN.Easing.Sinusoidal.Out`, `TWEEN.Easing.Sinusoidal.InOut`:** Sinusoidal easing.\n* **`TWEEN.Easing.Exponential.In`, `TWEEN.Easing.Exponential.Out`, `TWEEN.Easing.Exponential.InOut`:** Exponential easing.\n* **`TWEEN.Easing.Circular.In`, `TWEEN.Easing.Circular.Out`, `TWEEN.Easing.Circular.InOut`:** Circular easing.\n* **`TWEEN.Easing.Elastic.In`, `TWEEN.Easing.Elastic.Out`, `TWEEN.Easing.Elastic.InOut`:** Elastic easing (can take amplitude and period parameters).\n* **`TWEEN.Easing.Back.In`, `TWEEN.Easing.Back.Out`, `TWEEN.Easing.Back.InOut`:** Back easing.\n* **`TWEEN.Easing.Bounce.In`, `TWEEN.Easing.Bounce.Out`, `TWEEN.Easing.Bounce.InOut`:** Bounce easing.\n\n\n### Utility Functions\n\nTween.js provides several utility functions:\n\n* **`TWEEN.update(time)`:** Updates all active tweens.  `time` is an optional parameter representing the current time.  If omitted, it uses `performance.now()` if available, falling back to `Date.now()`.  Crucial for animating! Call this repeatedly (usually within a `requestAnimationFrame` loop).\n\n* **`TWEEN.removeAll()`:** Removes all active tweens.\n\n* **`TWEEN.getAll()`:** Returns an array of all active tweens.\n\n* **`TWEEN.add(tween)`:** Adds a tween to the list of active tweens. (Generally not needed unless you're managing tweens outside the usual `new TWEEN.Tween(...)` process).\n\n\nThis API reference provides a concise summary.  For complete details and examples, refer to the full Tween.js documentation and source code. Remember to check the version you are using, as minor variations in methods or parameters might exist across versions.\n\n\n## Examples\n\nThis section provides examples demonstrating various uses of Tween.js, ranging from simple animations to more complex scenarios.  Remember to include the Tween.js library in your HTML file (via CDN or local file) before running these examples.\n\n\n### Simple Animations\n\nThis example animates the `left` and `opacity` properties of a div element:\n\n```html\n<div id=\"myElement\" style=\"position: absolute; left: 0px; top: 0px; width: 50px; height: 50px; background-color: blue;\"></div>\n<script>\n  const element = document.getElementById('myElement');\n  const tween = new TWEEN.Tween({ left: 0, opacity: 1 })\n    .to({ left: 200, opacity: 0 }, 1000)\n    .onUpdate(function() {\n      element.style.left = this.left + 'px';\n      element.style.opacity = this.opacity;\n    })\n    .start();\n\n  function animate() {\n    requestAnimationFrame(animate);\n    TWEEN.update();\n  }\n  animate();\n</script>\n```\n\nThis moves the blue square 200 pixels to the right and fades it out over one second.\n\n\n### Complex Animations\n\nThis example chains multiple tweens together to create a more complex animation sequence:\n\n```javascript\nconst element = document.getElementById('myElement');\nlet x = 0;\nconst tween1 = new TWEEN.Tween({ x: x }).to({ x: 200 }, 1000).easing(TWEEN.Easing.Quadratic.InOut);\nconst tween2 = new TWEEN.Tween({ x: 200 }).to({ x: 0 }, 1000).easing(TWEEN.Easing.Cubic.InOut);\n\ntween1.onUpdate(function() { element.style.left = this.x + 'px'; })\n      .chain(tween2);\n\ntween2.onUpdate(function() { element.style.left = this.x + 'px'; });\n\n\ntween1.start();\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  TWEEN.update();\n}\nanimate();\n```\n\nThis animates an element back and forth using different easing functions.  Remember you need the `myElement` div from the previous example.\n\n\n### Animations with Easing Functions\n\nThis example demonstrates the use of different easing functions:\n\n```javascript\nconst element = document.getElementById('myElement');\nconst tweenLinear = new TWEEN.Tween({ x: 0 }).to({ x: 200 }, 1000).easing(TWEEN.Easing.Linear.None);\nconst tweenBounce = new TWEEN.Tween({ x: 0 }).to({ x: 200 }, 1000).easing(TWEEN.Easing.Bounce.Out);\n\n\ntweenLinear.onUpdate(function() { element.style.left = this.x + 'px'; }).start();\n\ntweenBounce.onUpdate(function() {element.style.left = this.x + 'px';}).start();\n\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  TWEEN.update();\n}\nanimate();\n\n```\n\nThis creates two tweens animating the `myElement` to show the difference between linear and bounce easing.  Note this example requires some adjustment to avoid conflicting animations; you might want to make a copy of `myElement` or chain these tweens sequentially rather than starting them concurrently.\n\n\n### Practical Application Examples\n\n* **Loading indicators:** Animate a progress bar or spinning icon to visually represent loading progress.\n* **UI transitions:** Create smooth transitions for elements appearing, disappearing, or changing state.\n* **Game development:** Animate game objects, characters, or effects.\n* **Interactive data visualizations:** Animate charts or graphs to highlight trends or changes in data.\n* **Parallax scrolling:** Create a parallax scrolling effect by animating elements at different speeds.\n\n\nThese examples provide a starting point.  The possibilities for creating sophisticated animations with Tween.js are vast.  Experiment with different combinations of tweens, easing functions, and callbacks to achieve the desired results.  Remember to adjust the selectors and styles to match your specific HTML structure.\n\n\n## Troubleshooting\n\nThis section addresses common issues encountered when using Tween.js and provides strategies for debugging.\n\n\n### Common Errors and Solutions\n\n* **Animations not playing:** The most frequent problem is forgetting to call `TWEEN.update()` within a requestAnimationFrame loop.  Without this, the tweens won't progress.  Ensure you have `requestAnimationFrame(animate);` and `TWEEN.update();` inside your `animate()` function, and that this function is called at least once to start the animation loop.\n\n* **Incorrect animation values:** Double-check the target values (`to` method) passed to the tween.  Make sure you're targeting the correct properties of your object and that the values are numerically correct.  Typographical errors in property names are a common cause.\n\n* **Unexpected easing behavior:** Verify that you've correctly specified the easing function using the correct path within `TWEEN.Easing`.  Incorrect parameters for certain easing functions (like `Elastic` or `Back`) can also lead to unexpected results.\n\n* **Tweens not chaining correctly:**  Ensure the `.chain()` method is used correctly, passing the next `TWEEN.Tween` object as an argument.  If the tweens aren't starting sequentially, check for any errors in the `onComplete` callback of the preceding tween.\n\n* **Animations running too fast or too slow:**  Adjust the `duration` parameter in the `to` method to change the animation speed.  Lower duration values lead to faster animations.\n\n* **Conflicts with other libraries:** If you're using other animation libraries or JavaScript frameworks, ensure that your animation update mechanisms don't conflict. Tween.js should typically integrate within the main animation loop of your chosen framework.\n\n\n### Debugging Tips\n\n* **Console logging:**  Use `console.log()` statements at various points in your code (within `onStart`, `onUpdate`, `onComplete` callbacks) to print the values of relevant variables and the current state of your tweens.  This helps trace the animation's progress and identify unexpected behavior.\n\n* **Breakpoints:** Use your browser's developer tools (usually F12) to set breakpoints in your code. This allows you to step through your code line by line and inspect variables at each step, making it easy to pinpoint the source of errors.\n\n* **Simplify your animation:** If you have a complex animation, try simplifying it to isolate potential issues.  Start with a minimal example that only animates a single property to ensure the core functionality works correctly before adding more complexity.\n\n* **Check for typos:** Carefully review your code for any typos in property names, function names, or easing function references.  Even a small typo can prevent your code from working as expected.\n\n* **Inspect the DOM:**  Use your browser's developer tools to inspect the DOM and verify that the properties you are animating are actually being updated.  This helps rule out potential problems with how you're applying the animation changes to your elements.\n\n* **Check for version compatibility:** Ensure that the version of Tween.js you're using is compatible with other libraries or frameworks in your project.  Outdated or incompatible versions can cause unexpected issues.\n\nBy systematically using these debugging techniques and checking for the common errors listed above, you should be able to resolve most issues when working with Tween.js. Remember that a well-structured codebase with clear separation of concerns makes debugging much easier.\n\n","srcMarkdownNoYaml":"\n\n\n### What is Tween.js?\n\nTween.js is a lightweight JavaScript library that provides an easy and efficient way to create smooth animations and transitions between different values over time.  It's particularly useful for creating visually appealing animations for user interface elements, game objects, or any other element requiring gradual changes in position, size, opacity, or other properties.  Tween.js handles the complex calculations necessary to create smooth, interpolated animation curves, freeing you from the burden of manually managing animation timelines and easing functions.\n\n\n### Why use Tween.js?\n\nUsing Tween.js offers several advantages:\n\n* **Simplicity:**  Tween.js provides a clean and intuitive API, making it easy to create complex animations with minimal code.\n* **Performance:**  It's designed to be performant, even when animating many objects simultaneously.\n* **Flexibility:**  It supports a wide range of easing functions, allowing you to customize the look and feel of your animations.  You can control the animation's speed, duration, and other parameters precisely.\n* **Ease of use:** It abstracts away the complexities of animation timing and interpolation, allowing developers to focus on the creative aspects of their animations.\n* **Wide browser compatibility:** Tween.js works across a wide range of modern browsers.\n\n\n### Setting up Tween.js in your project\n\nThe simplest way to include Tween.js in your project is via a CDN link. Add the following `<script>` tag to your HTML file within the `<head>` or just before the closing `</body>` tag:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/Tween.js\"></script>\n```\n\nAlternatively, you can download the Tween.js library from its repository and include it locally.\n\n\n### Basic usage example.\n\nThis example demonstrates a simple animation that changes the `x` and `y` coordinates of an element over 1000 milliseconds (1 second):\n\n```javascript\n// Select the element to animate\nconst element = document.getElementById('myElement');\n\n// Create a new Tween\nconst tween = new TWEEN.Tween({ x: 0, y: 0 })\n  .to({ x: 200, y: 100 }, 1000) // Animate to x: 200, y: 100 over 1000ms\n  .onUpdate(function() {\n    // Update the element's position based on the tween's current values\n    element.style.left = this.x + 'px';\n    element.style.top = this.y + 'px';\n  })\n  .start();\n\n\n// This is crucial for animations to run!  Call this in your animation loop (e.g., `requestAnimationFrame`)\nfunction animate() {\n  requestAnimationFrame(animate);\n  TWEEN.update();\n}\n\nanimate();\n```\n\nRemember to have an element with the ID `myElement` in your HTML for this code to function correctly.  For example:\n\n```html\n<div id=\"myElement\" style=\"position: absolute; width: 50px; height: 50px; background-color: blue;\"></div>\n```\nThis will create a blue square that animates smoothly to a new position.  Remember that the element needs `position: absolute` or `position: relative` for the `left` and `top` styles to work correctly.\n\n\n## Core Concepts\n\n### Tweens and Updates\n\nThe fundamental unit of animation in Tween.js is the `Tween`.  A `Tween` object represents a single animation, defining the target object, the properties to animate, the target values, the duration, and the easing function.  Tweens don't animate themselves; they need to be updated regularly to progress through their animation cycle.\n\nThis updating is typically done using `TWEEN.update()`, which is called within an animation loop, commonly using `requestAnimationFrame`. `requestAnimationFrame` ensures that the animation is synchronized with the browser's repaint cycle, resulting in smoother animations.  Each call to `TWEEN.update()` advances all active tweens by a small time step.  If you don't call `TWEEN.update()` regularly, your animations won't play.\n\n\n### Easing Functions\n\nEasing functions control the speed and rhythm of an animation over time.  Tween.js offers a variety of pre-defined easing functions, such as linear, quadratic, cubic, and more.  These functions determine how the animated property changes over the animation's duration.  For example, a linear easing function results in a constant animation speed, while a easeInOutQuad function accelerates at the beginning, slows down towards the end and creates a more natural-looking animation.\n\nYou can specify the easing function when creating a `Tween` or later in the chain.  Refer to the Tween.js documentation for a complete list of available easing functions.  Custom easing functions can also be implemented.\n\n\n### Chaining Tweens\n\nTween.js allows you to chain multiple tweens together to create complex sequences of animations.  This is achieved using methods like `.chain()`.  By chaining tweens, you can create smooth transitions between different animation stages without manual intervention to start subsequent animations.  When one tween completes, the next one in the chain automatically starts.\n\n\n### Tween Properties\n\nSeveral key properties control the behavior of a Tween object:\n\n* **`to(target, duration)`:** Defines the target values for the animation and the duration of the animation in milliseconds.\n* **`onUpdate(callback)`:** Specifies a callback function that is executed on every update of the tween. This function receives the current state of the tween's properties as its context (`this`).\n* **`onComplete(callback)`:**  Specifies a callback function that's executed when the tween completes.\n* **`onStart(callback)`:** Specifies a callback function that is executed when the tween starts.\n* **`easing(easingFunction)`:** Specifies the easing function to use for the animation. You can use pre-defined easing functions from TWEEN.Easing or provide your custom easing function.\n* **`delay(delayTime)`:** Adds a delay (in milliseconds) before the tween starts.\n* **`repeat(repetitions)`:** Repeats the tween a specified number of times.\n* **`yoyo(yoyo)`:** Makes the tween reverse after it completes, optionally repeating the yoyo effect.\n* **`start()`:** Starts the tween animation.\n* **`stop()`:** Stops the tween animation.\n* **`pause()`:** Pauses the tween animation.\n* **`resume()`:** Resumes a paused tween animation.\n\n\nBy manipulating these properties, you can fine-tune your animations to achieve the desired visual effects.  Understanding these properties is crucial for creating sophisticated and engaging animations with Tween.js.\n\n\n## Creating and Managing Tweens\n\n### Creating a Tween\n\nTo create a new Tween, you use the `new TWEEN.Tween(object)` constructor, where `object` is the object whose properties you want to animate.  This object can be a simple JavaScript object literal or any other JavaScript object.  The initial values of the properties to be animated are taken from this object.\n\n```javascript\n// Create a tween for a simple object\nconst myTween = new TWEEN.Tween({ x: 0, y: 0 });\n\n// Create a tween for an existing object\nconst myElement = document.getElementById('myElement');\nconst elementTween = new TWEEN.Tween(myElement); // Animating properties directly on the element\n```\n\n\n### Setting Tween Properties (`to`, `duration`, `easing`, etc.)\n\nAfter creating a Tween, you use methods to set its properties, including the target values (`to`), the animation duration, the easing function, and callbacks.\n\n```javascript\nmyTween\n  .to({ x: 100, y: 200 }, 1000) // Target values and duration (milliseconds)\n  .easing(TWEEN.Easing.Quadratic.InOut) // Easing function\n  .onUpdate(function() {\n    console.log('x:', this.x, 'y:', this.y); // Access tween properties within the callback\n  });\n\nelementTween.to({opacity: 0},500).easing(TWEEN.Easing.Cubic.Out)\n```\n\n\n### Starting and Stopping Tweens\n\nTweens are started using the `.start()` method.  To stop a running Tween, use the `.stop()` method.\n\n```javascript\nmyTween.start();\n// ... later ...\nmyTween.stop();\n```\n\n\n### Pausing and Resuming Tweens\n\nYou can pause and resume a Tween using the `.pause()` and `.resume()` methods.  This allows for temporarily halting and restarting an animation without losing its current state.\n\n```javascript\nmyTween.pause();\n// ... later ...\nmyTween.resume();\n```\n\n\n### Chaining Multiple Tweens\n\nChaining allows you to create sequences of animations.  Use the `.chain()` method to specify the next Tween to run after the current one completes.  You can chain multiple tweens together to create complex animation sequences.\n\n```javascript\nconst tween1 = new TWEEN.Tween({ x: 0 }).to({ x: 100 }, 500);\nconst tween2 = new TWEEN.Tween({ x: 100 }).to({ x: 200 }, 500);\nconst tween3 = new TWEEN.Tween({x:200}).to({x:0}, 500);\n\ntween1.chain(tween2).chain(tween3);\ntween1.start();\n```\n\n\n### Tween Events (`onStart`, `onComplete`, etc.)\n\nCallbacks are attached to specific events in a Tween's lifecycle using methods like `.onStart()`, `.onUpdate()`, and `.onComplete()`.  These functions are executed at the respective stages of the animation.\n\n```javascript\nmyTween\n  .onStart(function() { console.log('Tween started!'); })\n  .onUpdate(function() { /* ... */ })\n  .onComplete(function() { console.log('Tween completed!'); });\n```\n\n### Managing Multiple Tweens\n\nTo manage multiple tweens effectively, use `TWEEN.getAll()` to get an array of all active tweens, and `TWEEN.removeAll()` to remove all tweens.  Individual tweens can be removed using `tween.stop()`. Remember to call `TWEEN.update()` in your animation loop (e.g., using `requestAnimationFrame`) to update all active tweens.  This ensures all your animations run smoothly and concurrently.\n```javascript\n// Get all active tweens\nconst allTweens = TWEEN.getAll();\n\n// Remove all active tweens\nTWEEN.removeAll();\n\n```\n\nRemember that `TWEEN.update()` must be called within an animation loop (usually using `requestAnimationFrame`) to update all active tweens and see the animations.\n\n\n## Easing Functions in Detail\n\nTween.js provides a wide variety of easing functions to control the speed and rhythm of your animations.  These functions are categorized by their mathematical basis and produce different animation curves.  Each easing function is available in `TWEEN.Easing` as an object with `In`, `Out`, and `InOut` variations.  `In` accelerates from the start, `Out` decelerates towards the end, and `InOut` combines both acceleration and deceleration.  They all accept a normalized time value (between 0 and 1) as input and return a normalized output value (also between 0 and 1).\n\n### Linear Easing\n\nProvides a constant animation speed throughout its duration.  No acceleration or deceleration.\n\n```javascript\n// Example using linear easing\nmyTween.easing(TWEEN.Easing.Linear.None);\n```\n\n### Quadratic Easing\n\nUses quadratic equations to create acceleration or deceleration effects.\n\n```javascript\n// Quadratic ease-in\nmyTween.easing(TWEEN.Easing.Quadratic.In);\n// Quadratic ease-out\nmyTween.easing(TWEEN.Easing.Quadratic.Out);\n// Quadratic ease-in-out\nmyTween.easing(TWEEN.Easing.Quadratic.InOut);\n```\n\n### Cubic Easing\n\nUses cubic equations, providing smoother acceleration and deceleration than quadratic easing.\n\n```javascript\n// Cubic ease-in\nmyTween.easing(TWEEN.Easing.Cubic.In);\n// Cubic ease-out\nmyTween.easing(TWEEN.Easing.Cubic.Out);\n// Cubic ease-in-out\nmyTween.easing(TWEEN.Easing.Cubic.InOut);\n```\n\n### Quartic Easing\n\nUses quartic (fourth-power) equations for even smoother transitions.\n\n```javascript\n// Quartic ease-in\nmyTween.easing(TWEEN.Easing.Quartic.In);\n// Quartic ease-out\nmyTween.easing(TWEEN.Easing.Quartic.Out);\n// Quartic ease-in-out\nmyTween.easing(TWEEN.Easing.Quartic.InOut);\n```\n\n### Quintic Easing\n\nUses quintic (fifth-power) equations, offering the smoothest transitions among the power-based easings.\n\n```javascript\n// Quintic ease-in\nmyTween.easing(TWEEN.Easing.Quintic.In);\n// Quintic ease-out\nmyTween.easing(TWEEN.Easing.Quintic.Out);\n// Quintic ease-in-out\nmyTween.easing(TWEEN.Easing.Quintic.InOut);\n```\n\n### Sinusoidal Easing\n\nUses sine functions to create a smooth, wave-like animation.\n\n```javascript\n// Sinusoidal ease-in\nmyTween.easing(TWEEN.Easing.Sinusoidal.In);\n// Sinusoidal ease-out\nmyTween.easing(TWEEN.Easing.Sinusoidal.Out);\n// Sinusoidal ease-in-out\nmyTween.easing(TWEEN.Easing.Sinusoidal.InOut);\n```\n\n### Exponential Easing\n\nUses exponential functions, resulting in rapid acceleration or deceleration.\n\n```javascript\n// Exponential ease-in\nmyTween.easing(TWEEN.Easing.Exponential.In);\n// Exponential ease-out\nmyTween.easing(TWEEN.Easing.Exponential.Out);\n// Exponential ease-in-out\nmyTween.easing(TWEEN.Easing.Exponential.InOut);\n```\n\n### Circular Easing\n\nUses circular functions, creating a smooth, rounded animation.\n\n```javascript\n// Circular ease-in\nmyTween.easing(TWEEN.Easing.Circular.In);\n// Circular ease-out\nmyTween.easing(TWEEN.Easing.Circular.Out);\n// Circular ease-in-out\nmyTween.easing(TWEEN.Easing.Circular.InOut);\n```\n\n### Elastic Easing\n\nSimulates an elastic effect, with overshooting and oscillations.  It takes an `amplitude` and `period` parameter to customize the effect.\n\n```javascript\n// Elastic ease-in\nmyTween.easing(TWEEN.Easing.Elastic.In);\n// Elastic ease-out\nmyTween.easing(TWEEN.Easing.Elastic.Out);\n// Elastic ease-in-out\nmyTween.easing(TWEEN.Easing.Elastic.InOut);\n\n//Example with custom parameters.\nmyTween.easing(TWEEN.Easing.Elastic.InOut.get(1, .3)); // amplitude = 1, period = .3\n```\n\n\n### Back Easing\n\nCreates an animation that overshoots its target before settling.  Similar to elastic, but without oscillations.\n\n```javascript\n// Back ease-in\nmyTween.easing(TWEEN.Easing.Back.In);\n// Back ease-out\nmyTween.easing(TWEEN.Easing.Back.Out);\n// Back ease-in-out\nmyTween.easing(TWEEN.Easing.Back.InOut);\n```\n\n### Bounce Easing\n\nSimulates a bouncing effect, with decreasing amplitude.\n\n```javascript\n// Bounce ease-in\nmyTween.easing(TWEEN.Easing.Bounce.In);\n// Bounce ease-out\nmyTween.easing(TWEEN.Easing.Bounce.Out);\n// Bounce ease-in-out\nmyTween.easing(TWEEN.Easing.Bounce.InOut);\n```\n\n### Custom Easing Functions\n\nYou can create your own custom easing functions by defining a function that takes a single normalized time argument (between 0 and 1) and returns a normalized output value (also between 0 and 1).  This function can then be used directly with the `easing()` method.\n\n```javascript\n// Example custom easing function\nfunction myCustomEasing(k) {\n  return k * k; //Simple quadratic ease-in\n}\n\nmyTween.easing(myCustomEasing);\n```\n\nRemember to experiment with different easing functions to find the best fit for your animation needs. The visual difference between many of these can be subtle, but choosing the right one significantly impacts the feel of your animations.\n\n\n## Advanced Techniques\n\n### Using Tween.js with different animation libraries\n\nTween.js can coexist with other animation libraries.  It doesn't directly integrate with them, but you can use Tween.js to manage specific animations while letting other libraries handle other aspects of your application's visual effects.  The key is to ensure that your animation loops and update mechanisms don't conflict.  If you're using another library that provides its own animation loop (like a game engine's update function), you should integrate `TWEEN.update()` into that loop instead of creating a separate `requestAnimationFrame` loop.\n\n\n### Creating complex animations with Tween.js\n\nComplex animations can be achieved by chaining multiple tweens, using different easing functions, and incorporating callbacks.  For highly intricate animations, consider breaking down the animation into smaller, manageable tweens that are chained together sequentially or in parallel using techniques like creating multiple tweens that start simultaneously or using branching logic within `onUpdate` or `onComplete` callbacks to control the flow.\n\n\n### Optimizing Tween.js performance\n\nFor optimal performance, particularly with many simultaneous animations:\n\n* **Avoid unnecessary updates:** Only update properties that actually change in your `onUpdate` callbacks.  Unnecessary reads and writes can impact performance.\n* **Batch updates:**  If you have many objects with similar animations, try to batch them into fewer tweens whenever possible, perhaps by animating properties of a single object that contains all the properties of multiple visual elements.\n* **Use efficient data structures:** For large numbers of tweens, consider using more efficient data structures (if the default implementation becomes a bottleneck, which is unlikely with modern hardware and reasonable numbers of tweens).\n* **Minimize DOM manipulations:** Direct manipulation of the DOM within `onUpdate` callbacks can be performance-intensive. Consider using techniques to minimize direct DOM access, such as caching element references or using CSS transitions and transformations where applicable.  Tween.js is better suited for animating numerical values, which are then applied to CSS styles.\n\n\n### Debugging Tween.js animations\n\nDebugging issues with Tween.js animations involves standard JavaScript debugging techniques:\n\n* **Use the browser's developer tools:** Set breakpoints within your `onUpdate` and `onComplete` callbacks to inspect the values of your animated properties at different stages of the animation.\n* **Console logging:** Use `console.log()` statements to log important values or events to help track the progress and state of your tweens.\n* **Visual inspection:** Carefully observe the animation visually to identify unexpected behavior or incorrect values.\n* **Simplify the animation:**  If you're dealing with a complex animation, try simplifying it to isolate the problematic parts. Start with a minimal example to rule out errors in other parts of your code.\n\n\n### Integrating with other JavaScript frameworks (React, Angular, Vue)\n\nIntegrating Tween.js with popular JavaScript frameworks generally involves:\n\n* **React:** You can use Tween.js within functional components or class components, triggering animations based on state changes or lifecycle events.  Using hooks (in functional components) or `setState` (in class components) will allow you to control the animation start/stop using React's state management.\n* **Angular:**  Integrate Tween.js into your Angular components, potentially using `ChangeDetectionStrategy` or zones to properly update the view when animation values change.\n* **Vue:** Tween.js can be used within Vue components, manipulating data properties to drive animations.  Use Vue's reactivity system to trigger animations based on data changes.  Reactive properties update the DOM automatically.\n\nIn all cases, remember to handle the `TWEEN.update()` call within your framework's rendering loop or lifecycle methods (e.g., `requestAnimationFrame` in React or Angular, using Vue's lifecycle hooks).\n\n\n### Using Plugins\n\nTween.js itself doesn't have a built-in plugin architecture. However, you can extend its functionality by creating custom functions or classes that build on top of the core Tween.js API.  These custom additions could be considered \"plugins\" in the sense that they extend Tween.js's capabilities.  For example, you could create a plugin that adds support for more complex easing functions or animation types.  This would involve creating a new module with your added functions that operate on the core Tween.js classes.\n\n\n## API Reference\n\nThis section provides a detailed overview of the Tween.js API.  Note that the specific methods and properties available might vary slightly depending on the version of Tween.js you are using.  Always consult the latest documentation for the most up-to-date information.\n\n\n### Tween Class Methods\n\nThe `TWEEN.Tween` class is the core of Tween.js.  It represents a single animation.  Here are some of its key methods:\n\n* **`constructor(object)`:** Creates a new Tween instance.  `object` is the target object whose properties will be animated.  The initial values for animation are taken from this object's properties.\n\n* **`to(properties, duration)`:** Specifies the target properties and the animation duration in milliseconds.  `properties` is an object where keys are property names and values are the target values.\n\n* **`start([time])`:** Starts the tween animation.  An optional `time` parameter can specify the starting time.\n\n* **`stop()`:** Stops the tween animation.\n\n* **`pause()`:** Pauses the tween animation.\n\n* **`resume()`:** Resumes a paused tween animation.\n\n* **`update(time)`:** Manually updates the tween.  This is usually handled automatically by `TWEEN.update()`, but you might need to call it directly in specific circumstances.\n\n* **`easing(easingFunction)`:** Sets the easing function for the animation.\n\n* **`chain(tween)`:** Chains the current tween to another tween.  The chained tween starts automatically after the current tween completes.\n\n* **`repeat(times)`:** Specifies the number of times the animation should repeat.\n\n* **`yoyo(yoyo)`:**  Makes the tween reverse after it completes, optionally repeating the yoyo effect.\n\n* **`delay(amount)`:** Adds a delay before the tween starts (in milliseconds).\n\n* **`onComplete(callback)`:** Specifies a callback function to be executed when the animation completes.\n\n* **`onStart(callback)`:** Specifies a callback function to be executed when the animation starts.\n\n* **`onUpdate(callback)`:** Specifies a callback function to be executed on every update of the tween.  The callback's context (`this`) will be the tween itself.\n\n* **`onStop(callback)`:** Specifies a callback function to be executed when the tween is stopped.\n\n\n### Easing Function Reference\n\nTween.js provides a comprehensive set of easing functions categorized under `TWEEN.Easing`. Each category (e.g., `Quadratic`, `Cubic`, `Elastic`) has `In`, `Out`, and `InOut` variations:\n\n* **`TWEEN.Easing.Linear.None`:** Linear easing (constant speed).\n* **`TWEEN.Easing.Quadratic.In`, `TWEEN.Easing.Quadratic.Out`, `TWEEN.Easing.Quadratic.InOut`:** Quadratic easing.\n* **`TWEEN.Easing.Cubic.In`, `TWEEN.Easing.Cubic.Out`, `TWEEN.Easing.Cubic.InOut`:** Cubic easing.\n* **`TWEEN.Easing.Quartic.In`, `TWEEN.Easing.Quartic.Out`, `TWEEN.Easing.Quartic.InOut`:** Quartic easing.\n* **`TWEEN.Easing.Quintic.In`, `TWEEN.Easing.Quintic.Out`, `TWEEN.Easing.Quintic.InOut`:** Quintic easing.\n* **`TWEEN.Easing.Sinusoidal.In`, `TWEEN.Easing.Sinusoidal.Out`, `TWEEN.Easing.Sinusoidal.InOut`:** Sinusoidal easing.\n* **`TWEEN.Easing.Exponential.In`, `TWEEN.Easing.Exponential.Out`, `TWEEN.Easing.Exponential.InOut`:** Exponential easing.\n* **`TWEEN.Easing.Circular.In`, `TWEEN.Easing.Circular.Out`, `TWEEN.Easing.Circular.InOut`:** Circular easing.\n* **`TWEEN.Easing.Elastic.In`, `TWEEN.Easing.Elastic.Out`, `TWEEN.Easing.Elastic.InOut`:** Elastic easing (can take amplitude and period parameters).\n* **`TWEEN.Easing.Back.In`, `TWEEN.Easing.Back.Out`, `TWEEN.Easing.Back.InOut`:** Back easing.\n* **`TWEEN.Easing.Bounce.In`, `TWEEN.Easing.Bounce.Out`, `TWEEN.Easing.Bounce.InOut`:** Bounce easing.\n\n\n### Utility Functions\n\nTween.js provides several utility functions:\n\n* **`TWEEN.update(time)`:** Updates all active tweens.  `time` is an optional parameter representing the current time.  If omitted, it uses `performance.now()` if available, falling back to `Date.now()`.  Crucial for animating! Call this repeatedly (usually within a `requestAnimationFrame` loop).\n\n* **`TWEEN.removeAll()`:** Removes all active tweens.\n\n* **`TWEEN.getAll()`:** Returns an array of all active tweens.\n\n* **`TWEEN.add(tween)`:** Adds a tween to the list of active tweens. (Generally not needed unless you're managing tweens outside the usual `new TWEEN.Tween(...)` process).\n\n\nThis API reference provides a concise summary.  For complete details and examples, refer to the full Tween.js documentation and source code. Remember to check the version you are using, as minor variations in methods or parameters might exist across versions.\n\n\n## Examples\n\nThis section provides examples demonstrating various uses of Tween.js, ranging from simple animations to more complex scenarios.  Remember to include the Tween.js library in your HTML file (via CDN or local file) before running these examples.\n\n\n### Simple Animations\n\nThis example animates the `left` and `opacity` properties of a div element:\n\n```html\n<div id=\"myElement\" style=\"position: absolute; left: 0px; top: 0px; width: 50px; height: 50px; background-color: blue;\"></div>\n<script>\n  const element = document.getElementById('myElement');\n  const tween = new TWEEN.Tween({ left: 0, opacity: 1 })\n    .to({ left: 200, opacity: 0 }, 1000)\n    .onUpdate(function() {\n      element.style.left = this.left + 'px';\n      element.style.opacity = this.opacity;\n    })\n    .start();\n\n  function animate() {\n    requestAnimationFrame(animate);\n    TWEEN.update();\n  }\n  animate();\n</script>\n```\n\nThis moves the blue square 200 pixels to the right and fades it out over one second.\n\n\n### Complex Animations\n\nThis example chains multiple tweens together to create a more complex animation sequence:\n\n```javascript\nconst element = document.getElementById('myElement');\nlet x = 0;\nconst tween1 = new TWEEN.Tween({ x: x }).to({ x: 200 }, 1000).easing(TWEEN.Easing.Quadratic.InOut);\nconst tween2 = new TWEEN.Tween({ x: 200 }).to({ x: 0 }, 1000).easing(TWEEN.Easing.Cubic.InOut);\n\ntween1.onUpdate(function() { element.style.left = this.x + 'px'; })\n      .chain(tween2);\n\ntween2.onUpdate(function() { element.style.left = this.x + 'px'; });\n\n\ntween1.start();\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  TWEEN.update();\n}\nanimate();\n```\n\nThis animates an element back and forth using different easing functions.  Remember you need the `myElement` div from the previous example.\n\n\n### Animations with Easing Functions\n\nThis example demonstrates the use of different easing functions:\n\n```javascript\nconst element = document.getElementById('myElement');\nconst tweenLinear = new TWEEN.Tween({ x: 0 }).to({ x: 200 }, 1000).easing(TWEEN.Easing.Linear.None);\nconst tweenBounce = new TWEEN.Tween({ x: 0 }).to({ x: 200 }, 1000).easing(TWEEN.Easing.Bounce.Out);\n\n\ntweenLinear.onUpdate(function() { element.style.left = this.x + 'px'; }).start();\n\ntweenBounce.onUpdate(function() {element.style.left = this.x + 'px';}).start();\n\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  TWEEN.update();\n}\nanimate();\n\n```\n\nThis creates two tweens animating the `myElement` to show the difference between linear and bounce easing.  Note this example requires some adjustment to avoid conflicting animations; you might want to make a copy of `myElement` or chain these tweens sequentially rather than starting them concurrently.\n\n\n### Practical Application Examples\n\n* **Loading indicators:** Animate a progress bar or spinning icon to visually represent loading progress.\n* **UI transitions:** Create smooth transitions for elements appearing, disappearing, or changing state.\n* **Game development:** Animate game objects, characters, or effects.\n* **Interactive data visualizations:** Animate charts or graphs to highlight trends or changes in data.\n* **Parallax scrolling:** Create a parallax scrolling effect by animating elements at different speeds.\n\n\nThese examples provide a starting point.  The possibilities for creating sophisticated animations with Tween.js are vast.  Experiment with different combinations of tweens, easing functions, and callbacks to achieve the desired results.  Remember to adjust the selectors and styles to match your specific HTML structure.\n\n\n## Troubleshooting\n\nThis section addresses common issues encountered when using Tween.js and provides strategies for debugging.\n\n\n### Common Errors and Solutions\n\n* **Animations not playing:** The most frequent problem is forgetting to call `TWEEN.update()` within a requestAnimationFrame loop.  Without this, the tweens won't progress.  Ensure you have `requestAnimationFrame(animate);` and `TWEEN.update();` inside your `animate()` function, and that this function is called at least once to start the animation loop.\n\n* **Incorrect animation values:** Double-check the target values (`to` method) passed to the tween.  Make sure you're targeting the correct properties of your object and that the values are numerically correct.  Typographical errors in property names are a common cause.\n\n* **Unexpected easing behavior:** Verify that you've correctly specified the easing function using the correct path within `TWEEN.Easing`.  Incorrect parameters for certain easing functions (like `Elastic` or `Back`) can also lead to unexpected results.\n\n* **Tweens not chaining correctly:**  Ensure the `.chain()` method is used correctly, passing the next `TWEEN.Tween` object as an argument.  If the tweens aren't starting sequentially, check for any errors in the `onComplete` callback of the preceding tween.\n\n* **Animations running too fast or too slow:**  Adjust the `duration` parameter in the `to` method to change the animation speed.  Lower duration values lead to faster animations.\n\n* **Conflicts with other libraries:** If you're using other animation libraries or JavaScript frameworks, ensure that your animation update mechanisms don't conflict. Tween.js should typically integrate within the main animation loop of your chosen framework.\n\n\n### Debugging Tips\n\n* **Console logging:**  Use `console.log()` statements at various points in your code (within `onStart`, `onUpdate`, `onComplete` callbacks) to print the values of relevant variables and the current state of your tweens.  This helps trace the animation's progress and identify unexpected behavior.\n\n* **Breakpoints:** Use your browser's developer tools (usually F12) to set breakpoints in your code. This allows you to step through your code line by line and inspect variables at each step, making it easy to pinpoint the source of errors.\n\n* **Simplify your animation:** If you have a complex animation, try simplifying it to isolate potential issues.  Start with a minimal example that only animates a single property to ensure the core functionality works correctly before adding more complexity.\n\n* **Check for typos:** Carefully review your code for any typos in property names, function names, or easing function references.  Even a small typo can prevent your code from working as expected.\n\n* **Inspect the DOM:**  Use your browser's developer tools to inspect the DOM and verify that the properties you are animating are actually being updated.  This helps rule out potential problems with how you're applying the animation changes to your elements.\n\n* **Check for version compatibility:** Ensure that the version of Tween.js you're using is compatible with other libraries or frameworks in your project.  Outdated or incompatible versions can cause unexpected issues.\n\nBy systematically using these debugging techniques and checking for the common errors listed above, you should be able to resolve most issues when working with Tween.js. Remember that a well-structured codebase with clear separation of concerns makes debugging much easier.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"tweenjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Tween.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}