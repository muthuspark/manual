{"title":"Featherlight - Documentation","markdown":{"yaml":{"title":"Featherlight - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is Featherlight?\n\nFeatherlight is a lightweight and highly customizable JavaScript library designed to create elegant and responsive lightbox-style image galleries and content viewers.  It focuses on simplicity and performance, minimizing the impact on your website's loading time and resources.  Featherlight is ideal for showcasing images, videos, or any other HTML content in a clean and unobtrusive modal window.  It's easy to integrate into existing projects and requires minimal coding.\n\n### Key Features and Benefits\n\n* **Lightweight:** Featherlight boasts a tiny footprint, ensuring minimal impact on your website's performance.\n* **Customization:**  Easily customize the appearance and behavior of the lightbox through CSS and options.\n* **Responsive Design:** Adapts seamlessly to different screen sizes and devices.\n* **Multiple Content Support:** Displays images, videos, iframes, and any custom HTML content.\n* **Keyboard Navigation:** Users can easily navigate through the gallery using keyboard shortcuts.\n* **Touch-Friendly:** Provides a smooth and intuitive experience on touch devices.\n* **Easy Integration:** Simple to install and integrate with existing projects using a minimal number of lines of code.\n* **Accessibility:**  Designed with accessibility in mind, ensuring a good user experience for everyone.\n\n### Getting Started: Installation and Setup\n\nFeatherlight can be included in your project via several methods:\n\n1. **Download:** Download the latest version of Featherlight from https://noelboss.github.io/featherlight/.  Include the `featherlight.min.js` and `featherlight.min.css` files in your project's `<head>` section.\n\n2. **CDN:**  Use a CDN link to include Featherlight in your project.  You can find suitable CDN links on sites like jsDelivr or cdnjs.:\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/featherlight/1.7.13/featherlight.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/featherlight/1.7.13/featherlight.min.js\"></script>\n```\n\n3. **NPM:** If you're using a package manager like npm, install Featherlight using:\n\n```bash\nnpm install featherlight\n```\n\nRemember to include the CSS file in your HTML `<head>` and the JS file before the closing `</body>` tag for proper functionality.\n\n### Basic Usage Example\n\nThis example shows how to create a simple image lightbox:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Featherlight Example</title>\n  <link rel=\"stylesheet\" href=\"featherlight.min.css\">\n</head>\n<body>\n\n<a href=\"image1.jpg\" data-featherlight=\"image1.jpg\">Image 1</a>\n<a href=\"image2.jpg\" data-featherlight=\"image2.jpg\">Image 2</a>\n\n<script src=\"featherlight.min.js\"></script>\n</body>\n</html>\n```\n\nReplace `\"image1.jpg\"` and `\"image2.jpg\"` with the actual paths to your images.  Featherlight automatically detects the `href` attribute and opens the link in a lightbox.  You can customize this further using various options and parameters detailed in the advanced usage section.\n\n\n## Core Functionality\n\n### Opening a Lightbox\n\nFeatherlight offers several ways to open a lightbox:\n\n**1. Using HTML links:** The simplest method is to wrap your content links with `<a>` tags and add the `data-featherlight` attribute.  The value of this attribute can be a URL, a selector, or a function returning the content to be displayed in the lightbox.\n\n```html\n<a href=\"image.jpg\" data-featherlight=\"image.jpg\">View Image</a>\n<a href=\"#my-content\" data-featherlight=\"#my-content\">View Content</a>\n<a href=\"#\" data-featherlight=\"function(){return '<h1>Hello!</h1>';}\">View Custom HTML</a>\n```\n\n**2. Programmatically:** You can open a lightbox programmatically using JavaScript:\n\n```javascript\nFeatherlight.open('image.jpg');\nFeatherlight.open('#my-content');\nFeatherlight.open(function(){ return '<h1>Hello!</h1>'; });\n\n// or with options\nFeatherlight.open('image.jpg', {\n    afterOpen: function() { console.log('Lightbox opened!'); }\n});\n```\n\nReplace `\"image.jpg\"` and `\"#my-content\"` with your actual content. The function example demonstrates creating dynamic content within the lightbox.  For elements, make sure they exist on the page *before* the script that opens the lightbox is executed.\n\n\n### Closing a Lightbox\n\nFeatherlight provides several methods to close the lightbox:\n\n* **Clicking the close button:** Featherlight automatically adds a close button to the lightbox. Clicking this button will close the lightbox.\n\n* **Pressing the Escape key:**  Pressing the Escape key on your keyboard will close the lightbox.\n\n* **Programmatically:**  Use the following JavaScript code to close the lightbox:\n\n```javascript\nFeatherlight.close();\n```\n\nThis will close the currently open lightbox.\n\n* **Via the `close` event:**  Close the lightbox in response to a custom event.  See the Event Handling section below for details.\n\n\n### Event Handling\n\nFeatherlight offers several events you can listen for and use to trigger custom actions:\n\n* **`afterOpen`:**  Triggered after the lightbox has been opened.\n* **`beforeClose`:** Triggered before the lightbox is closed; use to prevent closure if necessary (return `false` to prevent closing).\n* **`close`:** Triggered after the lightbox has been closed.\n* **`beforeOpen`:** Triggered before the lightbox is opened; use to prevent opening if necessary (return `false` to prevent opening).\n* **`load`:** Triggered when the content inside the lightbox has fully loaded.\n\n\nHere's how to listen for these events:\n\n```javascript\nFeatherlight.open('image.jpg', {\n    afterOpen: function() { console.log('Lightbox opened!'); },\n    beforeClose: function() {\n        if (confirm(\"Are you sure you want to close?\")) {\n            return true; // Allow closing\n        } else {\n            return false; // Prevent closing\n        }\n    },\n    close: function() { console.log('Lightbox closed!'); }\n});\n\n// alternative using jQuery:\n\n$('a[data-featherlight]').featherlight({\n  afterOpen: function() { console.log('Lightbox opened!'); }\n});\n\n```\n\nRemember to replace `\"image.jpg\"` with your actual content.\n\n\n### Accessibility Features\n\nFeatherlight incorporates several features to enhance accessibility:\n\n* **Keyboard Navigation:** Users can navigate through galleries using arrow keys and close the lightbox using the Escape key.\n* **ARIA Attributes:**  Featherlight uses ARIA attributes (like `aria-modal`, `aria-hidden`, `role=\"dialog\"`) to improve screen reader compatibility and overall accessibility.\n* **Focus Management:** Featherlight manages focus within the lightbox, ensuring that keyboard navigation remains intuitive and accessible.  The focus will return to the trigger element when the lightbox closes.\n* **Customizable Content:** The ability to easily add custom HTML allows developers to tailor the lightbox's content to meet specific accessibility needs.  This allows for things like proper semantic HTML markup and alt-text for images.\n\n\nThese features ensure that Featherlight is usable by a wider audience, including users who rely on assistive technologies.  Always test your implementation with assistive technologies to ensure optimal accessibility.\n\n\n## Customization Options\n\n### Styling the Lightbox\n\nFeatherlight's appearance is easily customizable through CSS.  The library uses a well-structured CSS architecture, making it straightforward to override default styles.  The main CSS class for the lightbox is `featherlight`.  You can target specific elements within the lightbox using classes like `.featherlight-content`, `.featherlight-close`, and `.featherlight-inner`.\n\nFor example, to change the background color of the lightbox:\n\n```css\n.featherlight {\n  background-color: #f0f0f0; /* Change to your desired color */\n}\n```\n\nTo customize the close button:\n\n```css\n.featherlight-close {\n  color: red; /* Change the color of the close button */\n  font-size: 20px; /* Adjust the size */\n}\n```\n\nRemember to include your custom CSS after the Featherlight CSS file to override the default styles.\n\n\n### Customizing Content\n\nYou can customize the content displayed within the lightbox in several ways:\n\n* **Using data attributes:**  Include custom data attributes within the `<a>` tag linking to your lightbox content:\n\n```html\n<a href=\"image.jpg\" data-featherlight=\"image.jpg\" data-my-custom-attribute=\"My custom value\">View Image</a>\n```\n\nAccess this data attribute using Javascript within the lightbox's callbacks (see Using Callbacks section).\n\n* **Programmatic content:**  Use JavaScript to dynamically generate content inside the lightbox:\n\n\n```javascript\nFeatherlight.open(function() {\n  return '<div><h1>Dynamic Content</h1><p>This content is generated dynamically.</p></div>';\n});\n```\n\n* **Iframe content:** Display content from an external URL within an iframe:\n\n```html\n<a href=\"http://example.com\" data-featherlight-iframe=\"true\">View External Content</a>\n```\nThis will open the link within an iframe inside the lightbox.  Note that the `data-featherlight-iframe` attribute is used to indicate iframe content.\n\n\n### Adding Custom Controls\n\nYou can add custom controls to your lightbox using Javascript and manipulating the DOM.  After the lightbox opens (using the `afterOpen` callback), you can append your custom elements to the lightbox container.\n\n\n```javascript\nFeatherlight.open('image.jpg', {\n  afterOpen: function() {\n    const customButton = document.createElement('button');\n    customButton.textContent = 'My Custom Button';\n    customButton.addEventListener('click', function() {\n      // Add your custom functionality here\n      alert('Custom button clicked!');\n    });\n    this.$instance.find('.featherlight-inner').append(customButton);\n  }\n});\n```\n\nThis code adds a button to the lightbox after it's opened. Replace this example with your own custom HTML and functionality.\n\n\n\n### Configuring Options\n\nFeatherlight provides several options that you can configure to customize its behavior:\n\n* `afterOpen`: Callback function executed after the lightbox opens.\n* `beforeClose`: Callback function executed before the lightbox closes.  Return `false` to cancel closure.\n* `beforeOpen`: Callback function executed before the lightbox opens.  Return `false` to cancel opening.\n* `close`: Callback function executed after the lightbox closes.\n* `closeOnEscape`: Boolean (default: true) - Whether to close the lightbox when the Escape key is pressed.\n* `closeOnClick`: Boolean (default: true) - Whether to close the lightbox when clicking outside the lightbox content.\n* `loading`: String (default: '') -  Content to display while the lightbox is loading.\n* `root`: String (default: 'body') -  Where the lightbox should be appended.  Useful for specific page layouts.\n* `variant`: String (default: '') - Adds a CSS class for styling variations (e.g., `featherlight featherlight-variant-dark`).\n* `persist`: Boolean (default: false) - Prevents the lightbox from being automatically closed after the content is viewed.\n\nTo use these options, pass them as an object to `Featherlight.open()` or as a parameter to `$.featherlight()`.\n\n```javascript\nFeatherlight.open('image.jpg', {\n  closeOnEscape: false,\n  afterOpen: function() { console.log('Lightbox opened!'); }\n});\n```\n\n\n### Using Callbacks\n\nCallbacks allow you to execute custom code at specific points in the lightbox lifecycle.  Featherlight provides the `afterOpen`, `beforeClose`, `beforeOpen`, `close`, and `load` callbacks.\n\nThese callbacks receive the lightbox instance as `this` allowing access to methods and properties. For example, `this.$instance` refers to the lightbox's jQuery element. You can use this to manipulate the lightbox's DOM elements.  See the examples within the \"Event Handling\" and \"Adding Custom Controls\" sections above.  Use callbacks to integrate Featherlight seamlessly into your application's workflow.\n\n\n## Advanced Usage\n\n### Multiple Lightboxes\n\nFeatherlight supports opening multiple lightboxes simultaneously.  Each lightbox instance is independent, allowing for flexible use cases.  Simply call `Featherlight.open()` multiple times, each with its own content.  Featherlight manages the instances internally, ensuring proper behavior even when overlapping.  The `close()` method closes only the most recently opened lightbox unless specified otherwise.  Consider using unique identifiers or namespaces to easily manage multiple lightboxes within a complex application.\n\n\n### Integrating with Other Libraries\n\nFeatherlight is designed to be compatible with many JavaScript libraries. However, potential conflicts may arise due to overlapping functionality (such as event handling or DOM manipulation).  When integrating with other libraries, ensure that you properly load the scripts in the correct order and consider using namespaces to avoid naming collisions.  Test your integration thoroughly to identify and resolve any conflicts that may occur.  If using jQuery, Featherlight's jQuery plugin offers a seamless integration, simplifying the setup and usage.\n\n\n### Handling Errors and Edge Cases\n\nWhile Featherlight is robust, certain situations may require specific handling:\n\n* **Failed Content Loading:** If the content fails to load (e.g., a broken image link), you can use the `load` callback to detect and handle errors gracefully.  Within this callback, you can display an error message or take other corrective actions.\n\n* **Content Size Issues:**  Very large images or content might exceed the available viewport. You can use CSS to define overflow behavior or implement custom scrolling within the lightbox to address this.\n\n* **Browser Compatibility:**  While Featherlight aims for broad browser support, some very old or obscure browsers might require specific handling or might not be fully supported.  Always test thoroughly across various browsers and versions to ensure consistent behavior.\n\n* **Accessibility Considerations:**  Ensure sufficient contrast between text and background colors in the lightbox, add appropriate ARIA attributes, and implement keyboard navigation for improved accessibility.\n\n\n### Performance Optimization\n\nFor optimal performance, especially when dealing with many images or large content:\n\n* **Lazy Loading:**  Implement lazy loading techniques to defer loading of images or content until they are needed, improving initial page load times.\n\n* **Image Optimization:** Optimize your images to reduce their file size without significant quality loss.\n\n* **Caching:**  Utilize browser caching mechanisms to reduce redundant network requests.\n\n* **Minification and Compression:**  Minify and compress your JavaScript and CSS files to reduce their size, improving download times.\n\n* **Avoid Unnecessary DOM Manipulation:**  Minimize the number of times you manipulate the DOM within the lightbox callbacks, as frequent DOM changes can impact performance.\n\n\n\n### Building Custom Lightbox Plugins\n\nFeatherlight's architecture is designed to be extensible.  You can create custom plugins to add new features or modify existing behavior. This typically involves extending the core functionality using the provided callbacks and adding your own custom logic.  You would then register this plugin, making it available to use throughout your application. Create a separate JavaScript file for your plugin to maintain a clear and organized structure.  Keep your plugin’s code concise and well-documented for easy maintenance and future use. Thoroughly test your custom plugin to ensure it functions correctly and integrates seamlessly with the rest of Featherlight.\n\n\n## API Reference\n\n### Featherlight Constructor\n\nThe Featherlight constructor is used to initialize a new lightbox instance. While generally not called directly (as it's typically handled internally by the library), understanding its purpose is beneficial for advanced usage and custom plugin development.  The constructor takes an optional configuration object as an argument which will be passed through to the `Featherlight.open` method if called directly from the constructor.  For standard use cases, direct instantiation isn't necessary; instead, utilize the `Featherlight.open()` method or the jQuery plugin.\n\n\n### Methods\n\nFeatherlight provides several methods for manipulating lightbox instances:\n\n* **`Featherlight.open(content, options)`:** Opens a new lightbox with the specified `content` and optional `options`.  `content` can be a string (URL, selector), a function returning content, or a DOM element.  `options` is an object containing configuration settings (see Options section).  This is the primary method for creating and showing lightboxes.\n\n* **`Featherlight.close()`:** Closes the currently active lightbox.\n\n* **`Featherlight.current()`:** Returns the currently active Featherlight instance.  This allows you to interact directly with the active lightbox.  Returns `null` if no lightbox is open.\n\n\n### Events\n\nFeatherlight triggers several custom events throughout its lifecycle. These events are useful for adding custom functionality and extending the library's behavior.  These events are detailed in the \"Core Functionality\" and \"Customization Options\" sections, but are summarized here:\n\n* **`beforeOpen`:** Triggered just before a lightbox opens.  Returning `false` from a handler prevents the lightbox from opening.\n* **`afterOpen`:** Triggered after a lightbox has opened.\n* **`beforeClose`:** Triggered just before a lightbox closes.  Returning `false` from a handler prevents the lightbox from closing.\n* **`close`:** Triggered after a lightbox has closed.\n* **`load`:** Triggered after the lightbox content has finished loading.\n\nThese events are accessible via the `on` method on the instance (e.g., `featherlightInstance.on('afterOpen', myFunction)`), or via the options object when calling `Featherlight.open`.\n\n\n### Options\n\nFeatherlight offers a range of options for customizing its behavior.  These options can be passed as a second argument to `Featherlight.open()`.  Key options include:\n\n* **`afterOpen`:** Callback function executed after the lightbox is opened.\n* **`beforeClose`:** Callback function executed before the lightbox is closed. Return `false` to prevent closing.\n* **`beforeOpen`:** Callback function executed before the lightbox is opened. Return `false` to prevent opening.\n* **`close`:** Callback function executed after the lightbox is closed.\n* **`closeOnEscape`:** Boolean (default: `true`). Whether to close the lightbox when the Escape key is pressed.\n* **`closeOnClick`:** Boolean (default: `true`). Whether to close the lightbox when clicking outside the lightbox content.\n* **`loading`:** String (default: `''`). Content to display while the lightbox is loading.\n* **`root`:** String (default: `'body'`).  Where to append the lightbox in the DOM.\n* **`variant`:** String (default: `''`). Adds a CSS class to the lightbox for styling variations.\n* **`persist`:** Boolean (default: `false`). Prevents the lightbox from automatically closing after content is viewed.\n* **`filter`**: String (default: 'a').  The CSS selector to use for identifying links that trigger Featherlight.\n* **`content`**:  The content to be displayed,  used internally in the initialization.\n\nA full example of using options:\n\n```javascript\nFeatherlight.open('#my-content', {\n  closeOnEscape: false,\n  afterOpen: function() { console.log('Lightbox opened!'); },\n  variant: 'dark'\n});\n\n```\nRemember to consult the latest Featherlight documentation for the most up-to-date list of options and their descriptions.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Lightbox not opening:**\n    * **Problem:**  The lightbox doesn't appear when clicking a link.\n    * **Solutions:**\n        * Verify that Featherlight's CSS and JavaScript files are correctly included in your HTML. Check for typos in file paths.\n        * Ensure that the links triggering the lightbox have the correct `data-featherlight` attribute.\n        * Inspect the browser's console for JavaScript errors.\n        * Check if any JavaScript conflicts exist, interfering with Featherlight's functionality.\n        * Make sure the target element exists in the DOM *before* the Featherlight script executes (if using a selector).\n\n* **Lightbox content not displaying correctly:**\n    * **Problem:** The image, video, or other content within the lightbox isn't showing.\n    * **Solutions:**\n        * Verify the path to your content is correct.  Use your browser's developer tools to check network requests and ensure the content is loading successfully.\n        * Check for typos or incorrect syntax in your HTML or JavaScript code.\n        * If using iframes, ensure that the iframe's `src` attribute is correctly set and that the source URL allows embedding.\n        * For images, verify that the image file exists and is accessible.\n\n* **CSS styling issues:**\n    * **Problem:** The lightbox's appearance is not as expected.\n    * **Solutions:**\n        * Make sure your custom CSS is included *after* Featherlight's CSS to override the default styles correctly.\n        * Inspect the browser's developer tools to examine the applied CSS and identify any conflicting styles.\n        * Use the browser's developer tools to check if the correct CSS selectors are being targeted.\n\n\n* **JavaScript errors:**\n    * **Problem:** JavaScript errors are shown in the browser's console.\n    * **Solutions:**\n        * Carefully examine the error messages in the console for clues about the cause.\n        * Check for syntax errors in your JavaScript code.\n        * Ensure that you are using the correct versions of Featherlight and any other libraries you have integrated.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:**  The browser's developer tools (usually accessed by pressing F12) provide invaluable information, including network requests, JavaScript console errors, and CSS styling.\n* **Simplify your code:**  Isolate the problem by creating a minimal example that reproduces the issue. This will help pinpoint the source of the problem.\n* **Check your console:** Regularly check the browser's console for any errors or warnings related to Featherlight.  These messages often provide valuable clues to solve the problem.\n* **Use the `console.log()` statements:** Add `console.log()` statements to your code to track variable values and the execution flow.\n\n\n### Frequently Asked Questions (FAQ)\n\n* **Q: How can I customize the lightbox's appearance?**\n    * A:  Use CSS to style the lightbox.  Target the `.featherlight` class and its child elements to customize colors, fonts, and other visual aspects.  See the \"Customization Options\" section of this manual.\n\n* **Q: How do I handle errors during content loading?**\n    * A: Use the `load` event callback to check for errors. If the content fails to load, you can handle it gracefully within the callback (e.g., display an error message).\n\n* **Q: Can I use Featherlight with other JavaScript libraries?**\n    * A: Yes, but be aware of potential conflicts. Carefully manage script loading order and consider using namespaces to prevent naming collisions.  Testing is crucial.\n\n* **Q: How do I open multiple lightboxes?**\n    * A: Simply call `Featherlight.open()` multiple times. Featherlight handles multiple instances correctly.\n\n* **Q: How can I make my lightbox more accessible?**\n    * A: Ensure sufficient color contrast, use appropriate ARIA attributes, and implement keyboard navigation. See the Accessibility section for details.\n\n* **Q: What if my lightbox content is very large?**\n    * A: Handle overflow using CSS or implement custom scrolling within the lightbox.  Consider using pagination for extremely large content.\n\n\nRemember to check the official Featherlight documentation and GitHub repository for the most current information and solutions to any issues you encounter.\n\n\n## Contributing\n\nWe welcome contributions to Featherlight!  Whether you're reporting bugs, suggesting features, or submitting code changes, your involvement is valuable.  Please follow these guidelines to ensure a smooth and efficient contribution process.\n\n\n### Reporting Bugs\n\nWhen reporting a bug, please provide the following information:\n\n* **Featherlight version:** Specify the version of Featherlight you are using.\n* **Browser and operating system:**  Include details about the browser and operating system you're experiencing the issue on.\n* **Steps to reproduce:**  Clearly describe the steps needed to reproduce the bug.  The more detail you provide, the easier it is to identify and fix the problem.\n* **Expected behavior:**  Describe what you expected to happen.\n* **Actual behavior:**  Describe what actually happened.\n* **Error messages (if any):**  Include any error messages displayed in the browser's console.\n* **Minimal reproducible example:**  If possible, create a minimal HTML, CSS, and JavaScript example that demonstrates the bug. This makes it much easier to debug and solve the problem.\n* **Screenshots or screen recordings (if applicable):** Visual aids are helpful in understanding the issue.\n\n\n### Suggesting Features\n\nWe encourage you to suggest new features for Featherlight. When suggesting a feature, please provide:\n\n* **Clear description:** Explain the feature you're proposing and why it's needed.\n* **Use cases:**  Describe how the feature would be used in real-world scenarios.\n* **Potential implementation:**  If you have any ideas about how the feature could be implemented, share them.  This isn't required, but it's helpful.\n* **Alternatives considered:**  If you've considered alternative approaches to achieving the same result, mention them.\n\n\n### Submitting Pull Requests\n\nIf you're submitting a pull request (PR), please follow these guidelines:\n\n* **Fork the repository:** Fork the official Featherlight repository on GitHub.\n* **Create a new branch:** Create a new branch for your changes.  Use descriptive branch names (e.g., `fix-bug-lightbox-closing`, `feature-custom-controls`).\n* **Write clear commit messages:**  Use clear and concise commit messages that explain the changes made.\n* **Adhere to the coding style guide:**  Follow the coding style guide outlined below.\n* **Write tests (if applicable):** If your changes affect functionality, add or update tests to ensure the code works correctly.\n* **Update documentation:** Update any relevant documentation to reflect your changes.\n* **Create a pull request:** Submit a pull request describing your changes and addressing any potential concerns.\n\n\nWe will review your pull request and provide feedback.\n\n\n### Coding Style Guide\n\nFeatherlight uses a consistent coding style to maintain readability and maintainability. Please adhere to the following guidelines when contributing code:\n\n* **Indentation:** Use 2 spaces for indentation.\n* **Line length:** Keep lines under 80 characters.\n* **Variable names:** Use descriptive and consistent variable names (camelCase).\n* **Comments:**  Add clear and concise comments to explain complex logic.\n* **Semicolons:** Use semicolons to terminate statements.\n* **Whitespace:** Use consistent whitespace around operators and keywords.\n\n\nPlease ensure your code follows these guidelines before submitting a pull request.  Consistency in code style makes it easier for others to review and understand your contributions.  Refer to existing code in Featherlight's source as a guide for style.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is Featherlight?\n\nFeatherlight is a lightweight and highly customizable JavaScript library designed to create elegant and responsive lightbox-style image galleries and content viewers.  It focuses on simplicity and performance, minimizing the impact on your website's loading time and resources.  Featherlight is ideal for showcasing images, videos, or any other HTML content in a clean and unobtrusive modal window.  It's easy to integrate into existing projects and requires minimal coding.\n\n### Key Features and Benefits\n\n* **Lightweight:** Featherlight boasts a tiny footprint, ensuring minimal impact on your website's performance.\n* **Customization:**  Easily customize the appearance and behavior of the lightbox through CSS and options.\n* **Responsive Design:** Adapts seamlessly to different screen sizes and devices.\n* **Multiple Content Support:** Displays images, videos, iframes, and any custom HTML content.\n* **Keyboard Navigation:** Users can easily navigate through the gallery using keyboard shortcuts.\n* **Touch-Friendly:** Provides a smooth and intuitive experience on touch devices.\n* **Easy Integration:** Simple to install and integrate with existing projects using a minimal number of lines of code.\n* **Accessibility:**  Designed with accessibility in mind, ensuring a good user experience for everyone.\n\n### Getting Started: Installation and Setup\n\nFeatherlight can be included in your project via several methods:\n\n1. **Download:** Download the latest version of Featherlight from https://noelboss.github.io/featherlight/.  Include the `featherlight.min.js` and `featherlight.min.css` files in your project's `<head>` section.\n\n2. **CDN:**  Use a CDN link to include Featherlight in your project.  You can find suitable CDN links on sites like jsDelivr or cdnjs.:\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/featherlight/1.7.13/featherlight.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/featherlight/1.7.13/featherlight.min.js\"></script>\n```\n\n3. **NPM:** If you're using a package manager like npm, install Featherlight using:\n\n```bash\nnpm install featherlight\n```\n\nRemember to include the CSS file in your HTML `<head>` and the JS file before the closing `</body>` tag for proper functionality.\n\n### Basic Usage Example\n\nThis example shows how to create a simple image lightbox:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Featherlight Example</title>\n  <link rel=\"stylesheet\" href=\"featherlight.min.css\">\n</head>\n<body>\n\n<a href=\"image1.jpg\" data-featherlight=\"image1.jpg\">Image 1</a>\n<a href=\"image2.jpg\" data-featherlight=\"image2.jpg\">Image 2</a>\n\n<script src=\"featherlight.min.js\"></script>\n</body>\n</html>\n```\n\nReplace `\"image1.jpg\"` and `\"image2.jpg\"` with the actual paths to your images.  Featherlight automatically detects the `href` attribute and opens the link in a lightbox.  You can customize this further using various options and parameters detailed in the advanced usage section.\n\n\n## Core Functionality\n\n### Opening a Lightbox\n\nFeatherlight offers several ways to open a lightbox:\n\n**1. Using HTML links:** The simplest method is to wrap your content links with `<a>` tags and add the `data-featherlight` attribute.  The value of this attribute can be a URL, a selector, or a function returning the content to be displayed in the lightbox.\n\n```html\n<a href=\"image.jpg\" data-featherlight=\"image.jpg\">View Image</a>\n<a href=\"#my-content\" data-featherlight=\"#my-content\">View Content</a>\n<a href=\"#\" data-featherlight=\"function(){return '<h1>Hello!</h1>';}\">View Custom HTML</a>\n```\n\n**2. Programmatically:** You can open a lightbox programmatically using JavaScript:\n\n```javascript\nFeatherlight.open('image.jpg');\nFeatherlight.open('#my-content');\nFeatherlight.open(function(){ return '<h1>Hello!</h1>'; });\n\n// or with options\nFeatherlight.open('image.jpg', {\n    afterOpen: function() { console.log('Lightbox opened!'); }\n});\n```\n\nReplace `\"image.jpg\"` and `\"#my-content\"` with your actual content. The function example demonstrates creating dynamic content within the lightbox.  For elements, make sure they exist on the page *before* the script that opens the lightbox is executed.\n\n\n### Closing a Lightbox\n\nFeatherlight provides several methods to close the lightbox:\n\n* **Clicking the close button:** Featherlight automatically adds a close button to the lightbox. Clicking this button will close the lightbox.\n\n* **Pressing the Escape key:**  Pressing the Escape key on your keyboard will close the lightbox.\n\n* **Programmatically:**  Use the following JavaScript code to close the lightbox:\n\n```javascript\nFeatherlight.close();\n```\n\nThis will close the currently open lightbox.\n\n* **Via the `close` event:**  Close the lightbox in response to a custom event.  See the Event Handling section below for details.\n\n\n### Event Handling\n\nFeatherlight offers several events you can listen for and use to trigger custom actions:\n\n* **`afterOpen`:**  Triggered after the lightbox has been opened.\n* **`beforeClose`:** Triggered before the lightbox is closed; use to prevent closure if necessary (return `false` to prevent closing).\n* **`close`:** Triggered after the lightbox has been closed.\n* **`beforeOpen`:** Triggered before the lightbox is opened; use to prevent opening if necessary (return `false` to prevent opening).\n* **`load`:** Triggered when the content inside the lightbox has fully loaded.\n\n\nHere's how to listen for these events:\n\n```javascript\nFeatherlight.open('image.jpg', {\n    afterOpen: function() { console.log('Lightbox opened!'); },\n    beforeClose: function() {\n        if (confirm(\"Are you sure you want to close?\")) {\n            return true; // Allow closing\n        } else {\n            return false; // Prevent closing\n        }\n    },\n    close: function() { console.log('Lightbox closed!'); }\n});\n\n// alternative using jQuery:\n\n$('a[data-featherlight]').featherlight({\n  afterOpen: function() { console.log('Lightbox opened!'); }\n});\n\n```\n\nRemember to replace `\"image.jpg\"` with your actual content.\n\n\n### Accessibility Features\n\nFeatherlight incorporates several features to enhance accessibility:\n\n* **Keyboard Navigation:** Users can navigate through galleries using arrow keys and close the lightbox using the Escape key.\n* **ARIA Attributes:**  Featherlight uses ARIA attributes (like `aria-modal`, `aria-hidden`, `role=\"dialog\"`) to improve screen reader compatibility and overall accessibility.\n* **Focus Management:** Featherlight manages focus within the lightbox, ensuring that keyboard navigation remains intuitive and accessible.  The focus will return to the trigger element when the lightbox closes.\n* **Customizable Content:** The ability to easily add custom HTML allows developers to tailor the lightbox's content to meet specific accessibility needs.  This allows for things like proper semantic HTML markup and alt-text for images.\n\n\nThese features ensure that Featherlight is usable by a wider audience, including users who rely on assistive technologies.  Always test your implementation with assistive technologies to ensure optimal accessibility.\n\n\n## Customization Options\n\n### Styling the Lightbox\n\nFeatherlight's appearance is easily customizable through CSS.  The library uses a well-structured CSS architecture, making it straightforward to override default styles.  The main CSS class for the lightbox is `featherlight`.  You can target specific elements within the lightbox using classes like `.featherlight-content`, `.featherlight-close`, and `.featherlight-inner`.\n\nFor example, to change the background color of the lightbox:\n\n```css\n.featherlight {\n  background-color: #f0f0f0; /* Change to your desired color */\n}\n```\n\nTo customize the close button:\n\n```css\n.featherlight-close {\n  color: red; /* Change the color of the close button */\n  font-size: 20px; /* Adjust the size */\n}\n```\n\nRemember to include your custom CSS after the Featherlight CSS file to override the default styles.\n\n\n### Customizing Content\n\nYou can customize the content displayed within the lightbox in several ways:\n\n* **Using data attributes:**  Include custom data attributes within the `<a>` tag linking to your lightbox content:\n\n```html\n<a href=\"image.jpg\" data-featherlight=\"image.jpg\" data-my-custom-attribute=\"My custom value\">View Image</a>\n```\n\nAccess this data attribute using Javascript within the lightbox's callbacks (see Using Callbacks section).\n\n* **Programmatic content:**  Use JavaScript to dynamically generate content inside the lightbox:\n\n\n```javascript\nFeatherlight.open(function() {\n  return '<div><h1>Dynamic Content</h1><p>This content is generated dynamically.</p></div>';\n});\n```\n\n* **Iframe content:** Display content from an external URL within an iframe:\n\n```html\n<a href=\"http://example.com\" data-featherlight-iframe=\"true\">View External Content</a>\n```\nThis will open the link within an iframe inside the lightbox.  Note that the `data-featherlight-iframe` attribute is used to indicate iframe content.\n\n\n### Adding Custom Controls\n\nYou can add custom controls to your lightbox using Javascript and manipulating the DOM.  After the lightbox opens (using the `afterOpen` callback), you can append your custom elements to the lightbox container.\n\n\n```javascript\nFeatherlight.open('image.jpg', {\n  afterOpen: function() {\n    const customButton = document.createElement('button');\n    customButton.textContent = 'My Custom Button';\n    customButton.addEventListener('click', function() {\n      // Add your custom functionality here\n      alert('Custom button clicked!');\n    });\n    this.$instance.find('.featherlight-inner').append(customButton);\n  }\n});\n```\n\nThis code adds a button to the lightbox after it's opened. Replace this example with your own custom HTML and functionality.\n\n\n\n### Configuring Options\n\nFeatherlight provides several options that you can configure to customize its behavior:\n\n* `afterOpen`: Callback function executed after the lightbox opens.\n* `beforeClose`: Callback function executed before the lightbox closes.  Return `false` to cancel closure.\n* `beforeOpen`: Callback function executed before the lightbox opens.  Return `false` to cancel opening.\n* `close`: Callback function executed after the lightbox closes.\n* `closeOnEscape`: Boolean (default: true) - Whether to close the lightbox when the Escape key is pressed.\n* `closeOnClick`: Boolean (default: true) - Whether to close the lightbox when clicking outside the lightbox content.\n* `loading`: String (default: '') -  Content to display while the lightbox is loading.\n* `root`: String (default: 'body') -  Where the lightbox should be appended.  Useful for specific page layouts.\n* `variant`: String (default: '') - Adds a CSS class for styling variations (e.g., `featherlight featherlight-variant-dark`).\n* `persist`: Boolean (default: false) - Prevents the lightbox from being automatically closed after the content is viewed.\n\nTo use these options, pass them as an object to `Featherlight.open()` or as a parameter to `$.featherlight()`.\n\n```javascript\nFeatherlight.open('image.jpg', {\n  closeOnEscape: false,\n  afterOpen: function() { console.log('Lightbox opened!'); }\n});\n```\n\n\n### Using Callbacks\n\nCallbacks allow you to execute custom code at specific points in the lightbox lifecycle.  Featherlight provides the `afterOpen`, `beforeClose`, `beforeOpen`, `close`, and `load` callbacks.\n\nThese callbacks receive the lightbox instance as `this` allowing access to methods and properties. For example, `this.$instance` refers to the lightbox's jQuery element. You can use this to manipulate the lightbox's DOM elements.  See the examples within the \"Event Handling\" and \"Adding Custom Controls\" sections above.  Use callbacks to integrate Featherlight seamlessly into your application's workflow.\n\n\n## Advanced Usage\n\n### Multiple Lightboxes\n\nFeatherlight supports opening multiple lightboxes simultaneously.  Each lightbox instance is independent, allowing for flexible use cases.  Simply call `Featherlight.open()` multiple times, each with its own content.  Featherlight manages the instances internally, ensuring proper behavior even when overlapping.  The `close()` method closes only the most recently opened lightbox unless specified otherwise.  Consider using unique identifiers or namespaces to easily manage multiple lightboxes within a complex application.\n\n\n### Integrating with Other Libraries\n\nFeatherlight is designed to be compatible with many JavaScript libraries. However, potential conflicts may arise due to overlapping functionality (such as event handling or DOM manipulation).  When integrating with other libraries, ensure that you properly load the scripts in the correct order and consider using namespaces to avoid naming collisions.  Test your integration thoroughly to identify and resolve any conflicts that may occur.  If using jQuery, Featherlight's jQuery plugin offers a seamless integration, simplifying the setup and usage.\n\n\n### Handling Errors and Edge Cases\n\nWhile Featherlight is robust, certain situations may require specific handling:\n\n* **Failed Content Loading:** If the content fails to load (e.g., a broken image link), you can use the `load` callback to detect and handle errors gracefully.  Within this callback, you can display an error message or take other corrective actions.\n\n* **Content Size Issues:**  Very large images or content might exceed the available viewport. You can use CSS to define overflow behavior or implement custom scrolling within the lightbox to address this.\n\n* **Browser Compatibility:**  While Featherlight aims for broad browser support, some very old or obscure browsers might require specific handling or might not be fully supported.  Always test thoroughly across various browsers and versions to ensure consistent behavior.\n\n* **Accessibility Considerations:**  Ensure sufficient contrast between text and background colors in the lightbox, add appropriate ARIA attributes, and implement keyboard navigation for improved accessibility.\n\n\n### Performance Optimization\n\nFor optimal performance, especially when dealing with many images or large content:\n\n* **Lazy Loading:**  Implement lazy loading techniques to defer loading of images or content until they are needed, improving initial page load times.\n\n* **Image Optimization:** Optimize your images to reduce their file size without significant quality loss.\n\n* **Caching:**  Utilize browser caching mechanisms to reduce redundant network requests.\n\n* **Minification and Compression:**  Minify and compress your JavaScript and CSS files to reduce their size, improving download times.\n\n* **Avoid Unnecessary DOM Manipulation:**  Minimize the number of times you manipulate the DOM within the lightbox callbacks, as frequent DOM changes can impact performance.\n\n\n\n### Building Custom Lightbox Plugins\n\nFeatherlight's architecture is designed to be extensible.  You can create custom plugins to add new features or modify existing behavior. This typically involves extending the core functionality using the provided callbacks and adding your own custom logic.  You would then register this plugin, making it available to use throughout your application. Create a separate JavaScript file for your plugin to maintain a clear and organized structure.  Keep your plugin’s code concise and well-documented for easy maintenance and future use. Thoroughly test your custom plugin to ensure it functions correctly and integrates seamlessly with the rest of Featherlight.\n\n\n## API Reference\n\n### Featherlight Constructor\n\nThe Featherlight constructor is used to initialize a new lightbox instance. While generally not called directly (as it's typically handled internally by the library), understanding its purpose is beneficial for advanced usage and custom plugin development.  The constructor takes an optional configuration object as an argument which will be passed through to the `Featherlight.open` method if called directly from the constructor.  For standard use cases, direct instantiation isn't necessary; instead, utilize the `Featherlight.open()` method or the jQuery plugin.\n\n\n### Methods\n\nFeatherlight provides several methods for manipulating lightbox instances:\n\n* **`Featherlight.open(content, options)`:** Opens a new lightbox with the specified `content` and optional `options`.  `content` can be a string (URL, selector), a function returning content, or a DOM element.  `options` is an object containing configuration settings (see Options section).  This is the primary method for creating and showing lightboxes.\n\n* **`Featherlight.close()`:** Closes the currently active lightbox.\n\n* **`Featherlight.current()`:** Returns the currently active Featherlight instance.  This allows you to interact directly with the active lightbox.  Returns `null` if no lightbox is open.\n\n\n### Events\n\nFeatherlight triggers several custom events throughout its lifecycle. These events are useful for adding custom functionality and extending the library's behavior.  These events are detailed in the \"Core Functionality\" and \"Customization Options\" sections, but are summarized here:\n\n* **`beforeOpen`:** Triggered just before a lightbox opens.  Returning `false` from a handler prevents the lightbox from opening.\n* **`afterOpen`:** Triggered after a lightbox has opened.\n* **`beforeClose`:** Triggered just before a lightbox closes.  Returning `false` from a handler prevents the lightbox from closing.\n* **`close`:** Triggered after a lightbox has closed.\n* **`load`:** Triggered after the lightbox content has finished loading.\n\nThese events are accessible via the `on` method on the instance (e.g., `featherlightInstance.on('afterOpen', myFunction)`), or via the options object when calling `Featherlight.open`.\n\n\n### Options\n\nFeatherlight offers a range of options for customizing its behavior.  These options can be passed as a second argument to `Featherlight.open()`.  Key options include:\n\n* **`afterOpen`:** Callback function executed after the lightbox is opened.\n* **`beforeClose`:** Callback function executed before the lightbox is closed. Return `false` to prevent closing.\n* **`beforeOpen`:** Callback function executed before the lightbox is opened. Return `false` to prevent opening.\n* **`close`:** Callback function executed after the lightbox is closed.\n* **`closeOnEscape`:** Boolean (default: `true`). Whether to close the lightbox when the Escape key is pressed.\n* **`closeOnClick`:** Boolean (default: `true`). Whether to close the lightbox when clicking outside the lightbox content.\n* **`loading`:** String (default: `''`). Content to display while the lightbox is loading.\n* **`root`:** String (default: `'body'`).  Where to append the lightbox in the DOM.\n* **`variant`:** String (default: `''`). Adds a CSS class to the lightbox for styling variations.\n* **`persist`:** Boolean (default: `false`). Prevents the lightbox from automatically closing after content is viewed.\n* **`filter`**: String (default: 'a').  The CSS selector to use for identifying links that trigger Featherlight.\n* **`content`**:  The content to be displayed,  used internally in the initialization.\n\nA full example of using options:\n\n```javascript\nFeatherlight.open('#my-content', {\n  closeOnEscape: false,\n  afterOpen: function() { console.log('Lightbox opened!'); },\n  variant: 'dark'\n});\n\n```\nRemember to consult the latest Featherlight documentation for the most up-to-date list of options and their descriptions.\n\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n* **Lightbox not opening:**\n    * **Problem:**  The lightbox doesn't appear when clicking a link.\n    * **Solutions:**\n        * Verify that Featherlight's CSS and JavaScript files are correctly included in your HTML. Check for typos in file paths.\n        * Ensure that the links triggering the lightbox have the correct `data-featherlight` attribute.\n        * Inspect the browser's console for JavaScript errors.\n        * Check if any JavaScript conflicts exist, interfering with Featherlight's functionality.\n        * Make sure the target element exists in the DOM *before* the Featherlight script executes (if using a selector).\n\n* **Lightbox content not displaying correctly:**\n    * **Problem:** The image, video, or other content within the lightbox isn't showing.\n    * **Solutions:**\n        * Verify the path to your content is correct.  Use your browser's developer tools to check network requests and ensure the content is loading successfully.\n        * Check for typos or incorrect syntax in your HTML or JavaScript code.\n        * If using iframes, ensure that the iframe's `src` attribute is correctly set and that the source URL allows embedding.\n        * For images, verify that the image file exists and is accessible.\n\n* **CSS styling issues:**\n    * **Problem:** The lightbox's appearance is not as expected.\n    * **Solutions:**\n        * Make sure your custom CSS is included *after* Featherlight's CSS to override the default styles correctly.\n        * Inspect the browser's developer tools to examine the applied CSS and identify any conflicting styles.\n        * Use the browser's developer tools to check if the correct CSS selectors are being targeted.\n\n\n* **JavaScript errors:**\n    * **Problem:** JavaScript errors are shown in the browser's console.\n    * **Solutions:**\n        * Carefully examine the error messages in the console for clues about the cause.\n        * Check for syntax errors in your JavaScript code.\n        * Ensure that you are using the correct versions of Featherlight and any other libraries you have integrated.\n\n\n### Debugging Tips\n\n* **Use your browser's developer tools:**  The browser's developer tools (usually accessed by pressing F12) provide invaluable information, including network requests, JavaScript console errors, and CSS styling.\n* **Simplify your code:**  Isolate the problem by creating a minimal example that reproduces the issue. This will help pinpoint the source of the problem.\n* **Check your console:** Regularly check the browser's console for any errors or warnings related to Featherlight.  These messages often provide valuable clues to solve the problem.\n* **Use the `console.log()` statements:** Add `console.log()` statements to your code to track variable values and the execution flow.\n\n\n### Frequently Asked Questions (FAQ)\n\n* **Q: How can I customize the lightbox's appearance?**\n    * A:  Use CSS to style the lightbox.  Target the `.featherlight` class and its child elements to customize colors, fonts, and other visual aspects.  See the \"Customization Options\" section of this manual.\n\n* **Q: How do I handle errors during content loading?**\n    * A: Use the `load` event callback to check for errors. If the content fails to load, you can handle it gracefully within the callback (e.g., display an error message).\n\n* **Q: Can I use Featherlight with other JavaScript libraries?**\n    * A: Yes, but be aware of potential conflicts. Carefully manage script loading order and consider using namespaces to prevent naming collisions.  Testing is crucial.\n\n* **Q: How do I open multiple lightboxes?**\n    * A: Simply call `Featherlight.open()` multiple times. Featherlight handles multiple instances correctly.\n\n* **Q: How can I make my lightbox more accessible?**\n    * A: Ensure sufficient color contrast, use appropriate ARIA attributes, and implement keyboard navigation. See the Accessibility section for details.\n\n* **Q: What if my lightbox content is very large?**\n    * A: Handle overflow using CSS or implement custom scrolling within the lightbox.  Consider using pagination for extremely large content.\n\n\nRemember to check the official Featherlight documentation and GitHub repository for the most current information and solutions to any issues you encounter.\n\n\n## Contributing\n\nWe welcome contributions to Featherlight!  Whether you're reporting bugs, suggesting features, or submitting code changes, your involvement is valuable.  Please follow these guidelines to ensure a smooth and efficient contribution process.\n\n\n### Reporting Bugs\n\nWhen reporting a bug, please provide the following information:\n\n* **Featherlight version:** Specify the version of Featherlight you are using.\n* **Browser and operating system:**  Include details about the browser and operating system you're experiencing the issue on.\n* **Steps to reproduce:**  Clearly describe the steps needed to reproduce the bug.  The more detail you provide, the easier it is to identify and fix the problem.\n* **Expected behavior:**  Describe what you expected to happen.\n* **Actual behavior:**  Describe what actually happened.\n* **Error messages (if any):**  Include any error messages displayed in the browser's console.\n* **Minimal reproducible example:**  If possible, create a minimal HTML, CSS, and JavaScript example that demonstrates the bug. This makes it much easier to debug and solve the problem.\n* **Screenshots or screen recordings (if applicable):** Visual aids are helpful in understanding the issue.\n\n\n### Suggesting Features\n\nWe encourage you to suggest new features for Featherlight. When suggesting a feature, please provide:\n\n* **Clear description:** Explain the feature you're proposing and why it's needed.\n* **Use cases:**  Describe how the feature would be used in real-world scenarios.\n* **Potential implementation:**  If you have any ideas about how the feature could be implemented, share them.  This isn't required, but it's helpful.\n* **Alternatives considered:**  If you've considered alternative approaches to achieving the same result, mention them.\n\n\n### Submitting Pull Requests\n\nIf you're submitting a pull request (PR), please follow these guidelines:\n\n* **Fork the repository:** Fork the official Featherlight repository on GitHub.\n* **Create a new branch:** Create a new branch for your changes.  Use descriptive branch names (e.g., `fix-bug-lightbox-closing`, `feature-custom-controls`).\n* **Write clear commit messages:**  Use clear and concise commit messages that explain the changes made.\n* **Adhere to the coding style guide:**  Follow the coding style guide outlined below.\n* **Write tests (if applicable):** If your changes affect functionality, add or update tests to ensure the code works correctly.\n* **Update documentation:** Update any relevant documentation to reflect your changes.\n* **Create a pull request:** Submit a pull request describing your changes and addressing any potential concerns.\n\n\nWe will review your pull request and provide feedback.\n\n\n### Coding Style Guide\n\nFeatherlight uses a consistent coding style to maintain readability and maintainability. Please adhere to the following guidelines when contributing code:\n\n* **Indentation:** Use 2 spaces for indentation.\n* **Line length:** Keep lines under 80 characters.\n* **Variable names:** Use descriptive and consistent variable names (camelCase).\n* **Comments:**  Add clear and concise comments to explain complex logic.\n* **Semicolons:** Use semicolons to terminate statements.\n* **Whitespace:** Use consistent whitespace around operators and keywords.\n\n\nPlease ensure your code follows these guidelines before submitting a pull request.  Consistency in code style makes it easier for others to review and understand your contributions.  Refer to existing code in Featherlight's source as a guide for style.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"featherlight.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Featherlight - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}