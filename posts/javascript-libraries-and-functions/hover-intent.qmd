---
title: "Hover Intent - Documentation"
categories: [ "JavaScript Libraries and Functions" ]
---
## Developer Manual: Hover Intent


### What is Hover Intent?

Hover Intent is a JavaScript library designed to detect and respond to user hover intent over interactive elements.  Unlike traditional `mouseover` and `mouseout` events, which fire immediately upon the cursor entering or leaving an element, Hover Intent provides a more refined and user-friendly experience by introducing a delay and a confirmation mechanism before triggering actions. This prevents accidental triggering of actions due to quick or unintentional mouse movements.  Hover Intent uses a combination of timer-based logic and mouse movement tracking to determine if the user's intention is truly to hover over an element.

This library is especially useful for scenarios where actions triggered by hover events should be deliberate, such as:

* **Tooltips:** Displaying detailed information only when the user pauses their cursor over an element.
* **Context menus:** Preventing accidental opening of menus when the cursor briefly passes over a target.
* **Animations:** Initiating complex animations only when a hover action is confirmed.
* **Delayed interactions:** Introducing a small delay before executing a time-consuming task triggered by hover.


### Why Use Hover Intent?

Traditional `mouseover` and `mouseout` events are susceptible to accidental triggers, creating a poor user experience.  Hover Intent offers several key advantages:

* **Improved User Experience:**  Reduces accidental triggering of actions, making the interaction more intuitive and less frustrating.
* **Enhanced Responsiveness:** Allows for more deliberate and controlled interactions with elements.
* **Increased Accuracy:**  Confirms the user's intent before triggering events, improving the precision of actions.
* **Flexibility:** Provides customizable parameters (delay, tolerance, etc.) to tailor the behavior to specific needs.
* **Efficiency:**  Avoids unnecessary computations and resource consumption by only triggering actions when user intent is confirmed.


### Key Concepts and Terminology

* **`hoverIntentDelay`:**  The amount of time (in milliseconds) the cursor must remain stationary over an element before the `hoverIntent` event is triggered. This is a crucial parameter to fine-tune sensitivity.
* **`hoverIntentSensitivity`:**  Determines the acceptable amount of mouse movement (in pixels) during the `hoverIntentDelay` period. A higher sensitivity allows for more movement before canceling the intent.
* **`hoverIntentEvent`:**  The custom event triggered by Hover Intent when the hover intent is confirmed.  This event replaces the standard `mouseover` event.
* **`hoverIntentOutEvent`:**  The custom event triggered by Hover Intent when the cursor leaves the element *after* a confirmed `hoverIntentEvent`.  This replaces the standard `mouseout` event.
* **Intent Confirmation:** The process by which Hover Intent assesses whether the user's mouse movements indicate a genuine hover action, rather than a quick pass-over.
* **Sensitivity vs. Delay:**  These two parameters are interdependent. A higher delay allows for more sensitivity, and vice versa.  Balancing them appropriately is key to optimal performance.
* **Event Handlers:** Functions attached to the `hoverIntentEvent` and `hoverIntentOutEvent` to execute desired actions upon confirmed hover intent and subsequent mouse exit.


This section provides a fundamental understanding of Hover Intent and its terminology.  The following sections will detail implementation and usage examples.


## Getting Started with Hover Intent

### Installation and Setup

Hover Intent can be integrated into your project using various methods:

**1. Using a CDN (Content Delivery Network):**

The easiest way to get started is by including the Hover Intent library via a CDN.  Add the following `<script>` tag to your HTML file within the `<head>` or just before the closing `</body>` tag:

```html
<script src="https://cdn.jsdelivr.net/npm/hoverintent@r1.8.1/jquery.hoverIntent.min.js"></script>
```
**Note:** This method requires jQuery to be included in your project as well.  Make sure to include jQuery before the Hover Intent script.  For example:

```html
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/hoverintent@r1.8.1/jquery.hoverIntent.min.js"></script>
```

**2. Using npm (Node Package Manager):**

If you're using npm for your project's dependencies, you can install Hover Intent with:

```bash
npm install jquery hoverintent
```

Then, import it into your JavaScript file:

```javascript
import $ from 'jquery';
import hoverIntent from 'hoverintent';

// ... your code using jQuery and hoverIntent ...
```

**3. Downloading the Library:**

You can download the library directly from [the source repository/CDN link].  Include the downloaded `jquery.hoverIntent.min.js` file in your HTML, ensuring jQuery is included first.

Remember to always include jQuery before including the Hover Intent library, as it relies on jQuery.


### Basic Usage Example

Once Hover Intent is installed, you can use it to replace standard `mouseover` and `mouseout` event handlers.  Here's a simple example:

```html
<!DOCTYPE html>
<html>
<head>
<title>Hover Intent Example</title>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/hoverintent@r1.8.1/jquery.hoverIntent.min.js"></script>
<style>
#myElement {
  width: 100px;
  height: 100px;
  background-color: lightblue;
}
</style>
</head>
<body>

<div id="myElement">Hover Over Me</div>

<script>
$('#myElement').hoverIntent(
  function(){
    $(this).css('background-color', 'lightgreen');
    console.log("hoverIntent triggered!");
  },
  function(){
    $(this).css('background-color', 'lightblue');
    console.log("hoverIntentOut triggered!");
  }
);
</script>

</body>
</html>
```

This code changes the background color of the `#myElement` div when the hover intent is confirmed and reverts it when the cursor leaves after the confirmation. The console messages help you track the event triggers.  Replace the console logs with your desired actions.



### Configuration Options

Hover Intent allows you to customize its behavior using several configuration options passed as an object to the `hoverIntent()` method's first argument:


```javascript
$('#myElement').hoverIntent({
  sensitivity: 7, // Number of pixels the mouse can move before canceling the hover intent
  interval: 100,   // Number of milliseconds to wait before triggering the event
  timeout: 0,      // Number of milliseconds to wait before triggering the out event (0 for immediate)
  over: function(){ /* your over function */ },
  out: function(){ /* your out function */ }
}, function() {}, function(){});
```

* **`sensitivity`:**  (default: 7)  The amount of movement in pixels allowed before the hover intent is canceled.  Higher values allow more movement.
* **`interval`:** (default: 100) The delay in milliseconds before the `over` function is executed.
* **`timeout`:** (default: 0)  The delay in milliseconds before the `out` function is executed after the cursor leaves. A value of 0 means the `out` function executes immediately.
* **`over`:**  (required) The function to execute when the hover intent is confirmed.
* **`out`:** (required) The function to execute when the cursor moves out of the element *after* a confirmed hover.


The third and fourth arguments (empty functions in the example above) are optional and are used for handling the standard `mouseover` and `mouseout` events separately, if desired.  They are not usually needed.  By default, they won't be triggered.  Using these allows you to create a complete separation from the default behavior, if you need it.


## Advanced Usage and Techniques

### Customizing Hover Effects

Beyond simple color changes, you can use Hover Intent to trigger a wide range of effects.  Here are a few examples:

* **Showing/Hiding Elements:**  Use Hover Intent to show tooltips, context menus, or other elements on hover intent and hide them on `hoverIntentOut`.

```javascript
$('#myElement').hoverIntent({
  over: function(){
    $('#myTooltip').show();
  },
  out: function(){
    $('#myTooltip').hide();
  }
});
```

* **Animations:** Integrate Hover Intent with animation libraries like Animate.css or GSAP to create more engaging hover effects.

```javascript
$('#myElement').hoverIntent({
  over: function(){
    $(this).addClass('animated bounceIn');
  },
  out: function(){
    $(this).removeClass('animated bounceIn');
  }
});
```

* **AJAX Calls:** Initiate AJAX requests to fetch and display data on hover.  Remember to handle potential loading states and errors appropriately.

```javascript
$('#myElement').hoverIntent({
  over: function(){
    $.ajax({
      url: '/data',
      success: function(data){
        $('#myDataContainer').html(data);
      }
    });
  },
  out: function(){
    $('#myDataContainer').empty();
  }
});
```

Remember to adjust the CSS and HTML structure to accommodate your chosen effects.


### Handling Multiple Elements

Applying Hover Intent to multiple elements can be achieved efficiently using jQuery's selectors and iteration:

**Method 1: Using `each()` loop:**

```javascript
$('.myElements').each(function() {
  $(this).hoverIntent({
    over: function() {
      // Action on hover for each element
      $(this).addClass('hovered');
    },
    out: function() {
      // Action on hover out for each element
      $(this).removeClass('hovered');
    }
  });
});
```

**Method 2: Using delegated event handling:**

This approach is more efficient for dynamically added elements:

```javascript
$('#container').on('hoverIntent', '.myElements', function(e) {
  // Action on hover for each element within #container
  $(this).addClass('hovered');
}).on('hoverIntentOut', '.myElements', function(e){
  //Action on hover out for each element within #container
  $(this).removeClass('hovered');
});
```
Replace `#container` and `.myElements` with your actual selectors.  This method attaches the event listener to a parent container, making it efficient even if new `.myElements` are added later.


### Integrating with Other Libraries

Hover Intent works well with other JavaScript libraries.  However, ensure proper order of inclusion in your HTML file, particularly with jQuery-dependent libraries.  The general rule is to include jQuery, then Hover Intent, and then other libraries that depend on jQuery.

Potential conflicts may arise if other libraries also handle `mouseover` and `mouseout` events in ways that interfere with Hover Intent's logic.  In such cases, you might need to adjust the library integration or carefully manage event handling priorities.


### Performance Optimization

For optimal performance, especially with many elements:

* **Minimize the complexity of `over` and `out` functions:** Avoid heavy computations or resource-intensive tasks within these functions.  Delegate complex tasks to separate functions if necessary.
* **Use efficient selectors:** Avoid overly general selectors that increase DOM traversal time.  Use more specific selectors if possible.
* **Throttle or debounce:** If the `over` or `out` functions involve actions that don't need to be executed at every pixel movement, consider using throttle or debounce techniques to limit the execution frequency.  Libraries like Lodash provide these utilities.
* **Cache jQuery objects:** Store frequently accessed jQuery objects in variables to reduce repeated DOM lookups.
* **Event delegation (as described above):**  This is particularly helpful when dealing with dynamically added elements.  Avoid attaching event listeners to each element individually.


By following these best practices, you can ensure that Hover Intent performs efficiently even in complex web applications.


## Event Handling and Callbacks

Hover Intent provides custom events for handling hover starts and ends, offering more control and precision than traditional `mouseover` and `mouseout` events.


### Hover Start Event (`hoverIntent`)

The `hoverIntent` event is triggered when the user's hover intent is confirmed. This event signifies that the user has deliberately paused their cursor over the element for a sufficient duration, without excessive movement, as defined by the `sensitivity` and `interval` parameters.  The event handler function receives an event object as an argument.

```javascript
$('#myElement').hoverIntent({
  over: function(event) {
    console.log("Hover Intent Started!", event);
    // Perform actions on hover intent start
    $(this).addClass('hovered');
  }
});
```

The `event` object contains standard jQuery event properties.


### Hover End Event (`hoverIntentOut`)

The `hoverIntentOut` event is fired when the cursor leaves the element *after* a confirmed `hoverIntent` event. This ensures that the end action is only triggered after a successful hover intention. The event handler receives an event object as an argument.

```javascript
$('#myElement').hoverIntent({
  out: function(event) {
    console.log("Hover Intent Ended!", event);
    // Perform actions on hover intent end
    $(this).removeClass('hovered');
  }
});
```

Similar to `hoverIntent`, the `event` object provides standard jQuery event properties.


### Custom Event Handling

While Hover Intent provides `over` and `out` options for its custom events, you can also use standard jQuery's `on()` method to bind handlers to the `hoverIntent` and `hoverIntentOut` events:

```javascript
$('#myElement').on('hoverIntent', function(event) {
  console.log("Hover Intent Started (using on())!", event);
  //Your code here
});

$('#myElement').on('hoverIntentOut', function(event) {
  console.log("Hover Intent Ended (using on())!", event);
  //Your code here
});
```

This approach is particularly useful when managing multiple event handlers for the same element.


### Event Propagation

By default, Hover Intent events propagate up the DOM tree. This means that if an element within another element triggers a `hoverIntent` event, the parent element will also receive the event unless explicitly stopped.

To prevent event propagation, use `event.stopPropagation()` within your event handler function:

```javascript
$('#myElement').on('hoverIntent', function(event) {
  event.stopPropagation();
  console.log("Hover Intent Started (propagation stopped)!");
  //Your code here
});
```

This can be crucial for avoiding unintended actions on parent elements when handling nested elements.  Similarly, you can use `event.preventDefault()` to prevent default actions, though Hover Intent doesn't inherently trigger any default browser actions.  This is mainly useful if you are combining HoverIntent with other event handlers that might have default behavior you want to suppress.


## Troubleshooting and Debugging

This section provides guidance on resolving common issues and effectively debugging Hover Intent implementations.


### Common Issues and Solutions

* **Hover Intent not triggering:**
    * **Issue:** The most common cause is incorrect library inclusion or setup. Ensure jQuery is included *before* Hover Intent, and the script is correctly linked in your HTML.  Check your browser's console for JavaScript errors.
    * **Solution:** Double-check the script tags, verify jQuery's inclusion, and inspect the browser's console for error messages.  Try a simplified test case to isolate the problem.

* **Accidental triggers:**
    * **Issue:** The `sensitivity` and `interval` settings might be too low, causing unintended activations.
    * **Solution:** Increase the `sensitivity` value to allow more mouse movement before canceling the hover intent, or increase the `interval` value to extend the delay before triggering the event. Experiment with different values to find the optimal balance.

* **Hover Intent not working with specific elements:**
    * **Issue:**  The element might have CSS properties that interfere with mouse event detection (e.g., `pointer-events: none;`).
    * **Solution:** Inspect the element's CSS properties to ensure they don't prevent mouse events from being captured.  If using complex layouts or frameworks, ensure proper event bubbling and capturing are not causing issues.

* **`hoverIntentOut` not firing consistently:**
    * **Issue:**  This could be related to the `timeout` setting or the speed at which the cursor leaves the element.
    * **Solution:** Check your `timeout` value, and ensure it’s appropriately set for the specific use case. Consider adjusting the sensitivity settings as well.  The mouse might move too quickly to register the `hoverIntentOut` event.

* **Conflicts with other libraries:**
    * **Issue:** Other JavaScript libraries might interfere with Hover Intent's event handling.
    * **Solution:** Carefully review the order of script inclusion in your HTML file.  Try disabling other libraries temporarily to see if they are causing the conflict.


### Debugging Techniques

* **Browser Console:** Use your browser's developer tools (usually accessed by pressing F12) to check for JavaScript errors, warnings, and inspect network requests if you're using AJAX calls within Hover Intent.

* **Console Logging:**  Add `console.log()` statements within your `over` and `out` functions to track the events and the values of relevant variables:

```javascript
$('#myElement').hoverIntent({
  over: function(event) {
    console.log("Hover Intent Started! event:", event);
    console.log("This element:", $(this));
  },
  out: function(event) {
    console.log("Hover Intent Ended! event:", event);
  }
});
```

* **Simplify the code:**  If you're having trouble with a complex implementation, create a minimal test case with only the essential elements and code to isolate the problem.

* **Check jQuery version:** Make sure you're using a compatible version of jQuery (generally a recent, stable version).  Consult the HoverIntent documentation for specific jQuery version compatibility details.


### Browser Compatibility

Hover Intent relies on jQuery and should generally work across modern browsers.  However, very old or outdated browsers might exhibit compatibility issues.  Thorough testing across target browsers is recommended.  You may encounter minor variations in behavior depending on the browser's event handling specifics.  While generally compatible, ensuring proper testing across various browsers is recommended for production applications.  If you encounter issues, checking for CSS inconsistencies or conflicts between the libraries you use is a good starting point.


## API Reference

This section details the Hover Intent API, providing comprehensive information on its constructor, methods, properties, and events.


### Hover Intent Constructor

The Hover Intent plugin is applied to a jQuery selection using the `hoverIntent()` method.  It accepts several arguments:

```javascript
$(selector).hoverIntent( config, [over, out, selector] )
```

* **`selector`:** (jQuery selector)  The jQuery selector targeting the elements to apply Hover Intent to.  This is required.

* **`config`:** (Object, optional) An object containing configuration options. See the "Configuration Options" section in the "Getting Started" chapter for details on available options (`sensitivity`, `interval`, `timeout`). This parameter is needed, even if you're using defaults.  Pass an empty object `{}` if you want to use default settings.

* **`over`:** (Function, optional) The callback function to execute when the hover intent is confirmed.  If omitted, you must handle the `hoverIntent` event using `on()`.

* **`out`:** (Function, optional) The callback function to execute when the hover intent ends. If omitted, you must handle the `hoverIntentOut` event using `on()`.

* **`selector` (3rd argument):** (String, optional)  A selector used with delegated event handling.  If present, this method binds events to the specified selector *within* the elements selected in the first argument.  Only use this with the other three arguments.  It's not a replacement for the first `selector` argument.


**Example:**

```javascript
$('#myElement').hoverIntent({ sensitivity: 10, interval: 200 }, function() { /* over function */ }, function() { /* out function */ });
```

This applies Hover Intent to the element with the ID "myElement," using a sensitivity of 10 and an interval of 200 milliseconds.  The `over` and `out` functions are defined here directly.



### Methods

Hover Intent doesn't expose any public methods beyond the constructor (`hoverIntent()`).  All functionality is controlled through configuration options and event handlers.


### Properties

Hover Intent does not expose any public properties that can be directly accessed or modified after initialization.  All settings are provided during initialization via the `config` object.


### Events

Hover Intent triggers two custom events:

* **`hoverIntent`:** Fired when the user's hover intent is confirmed.  This is analogous to a "hover start" event.  The event object is passed to the handler.

* **`hoverIntentOut`:** Fired when the cursor leaves the element *after* a confirmed `hoverIntent` event. This is analogous to a "hover end" event. The event object is passed to the handler.


Both events can be handled using jQuery's `on()` method:

```javascript
$('#myElement').on('hoverIntent', function(event) {
  console.log('hoverIntent event triggered!', event);
});

$('#myElement').on('hoverIntentOut', function(event) {
  console.log('hoverIntentOut event triggered!', event);
});
```

The `event` object provides standard jQuery event properties.  Note that these are only triggered if you don't define the `over` and `out` functions directly in the `hoverIntent` call.  You can use both approaches (direct functions or `on()` handlers), but not simultaneously for the same event type.


## Examples and Use Cases

This section demonstrates practical applications of Hover Intent, showcasing its versatility in enhancing user interactions.


### Tooltips and Popovers

Hover Intent is ideal for creating tooltips and popovers that appear only after a deliberate hover, preventing accidental triggering.

```html
<div id="myElement" data-tooltip="This is a tooltip!">Hover Over Me</div>
<div id="tooltip" style="display:none; position:absolute; background-color: #333; color: white; padding: 5px;"> </div>

<script>
$('#myElement').hoverIntent({
  over: function(event) {
    let tooltipText = $(this).data('tooltip');
    $('#tooltip').text(tooltipText).show().css({
      left: event.pageX + 10,
      top: event.pageY + 10
    });
  },
  out: function() {
    $('#tooltip').hide();
  }
});
</script>
```

This code displays a tooltip containing the `data-tooltip` attribute's value when the hover intent is confirmed. The tooltip's position is dynamically adjusted based on the cursor's coordinates.  Remember to include appropriate CSS for styling the tooltip.


### Interactive Menus

Create context menus or navigation menus that only appear after a confirmed hover, avoiding accidental opening.

```html
<div id="menuTrigger">Open Menu</div>
<ul id="myMenu" style="display:none; position:absolute;">
  <li>Item 1</li>
  <li>Item 2</li>
  <li>Item 3</li>
</ul>

<script>
$('#menuTrigger').hoverIntent({
  over: function(event) {
    $('#myMenu').show().css({
      left: event.pageX,
      top: event.pageY
    });
  },
  out: function() {
    $('#myMenu').hide();
  }
});
</script>
```

This example shows a menu (`#myMenu`) when the `#menuTrigger` element's hover intent is confirmed and hides it when the cursor leaves.  Adjust the CSS to style the menu appropriately.


### Image Zoom Effects

Enhance image browsing with a zoom effect that only activates upon a deliberate hover.

```html
<img id="myImage" src="image.jpg" alt="My Image">

<script>
$('#myImage').hoverIntent({
  over: function() {
    $(this).addClass('zoom');
  },
  out: function() {
    $(this).removeClass('zoom');
  }
});
</script>

<style>
#myImage {
  transition: transform 0.3s ease; /* Add a smooth transition */
}
#myImage.zoom {
  transform: scale(1.2); /* Adjust zoom level as needed */
}
</style>
```

This code uses CSS transitions to smoothly zoom the image when the hover intent is confirmed.  Replace `"image.jpg"` with the actual image path.


### Custom Animations

Use Hover Intent to trigger sophisticated animations using libraries like GSAP (GreenSock Animation Platform) or Animate.css.

```html
<div id="animatedElement">Animate Me</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script> <!-- Include GSAP -->
<script>
$('#animatedElement').hoverIntent({
  over: function() {
    gsap.to(this, { scale: 1.1, duration: 0.5, ease: "power1.out" });
  },
  out: function() {
    gsap.to(this, { scale: 1, duration: 0.5, ease: "power1.out" });
  }
});
</script>
```

This example utilizes GSAP to scale the element on hover intent and revert to the original scale when the hover ends. Remember to include the GSAP library.  You can replace the GSAP animation with other animation libraries or custom animation functions.  This offers a lot of flexibility to create sophisticated hover effects.


Remember to adapt these examples to your specific HTML structure and styling preferences.  These are basic examples, you can expand them with additional functionality and styling to match your design.


## Contributing to Hover Intent

We welcome contributions to Hover Intent! This section guides you through the process of setting up the development environment, following code style guidelines, performing testing, and submitting pull requests.


### Setting up the Development Environment

1. **Clone the Repository:** Start by forking the Hover Intent repository on GitHub and cloning your fork to your local machine:

   ```bash
   git clone <your_fork_url>
   ```

2. **Install Dependencies:** Navigate to the project directory and install the necessary dependencies using npm:

   ```bash
   npm install
   ```

3. **Run the Tests (Optional but Recommended):** Before making any changes, run the test suite to establish a baseline:

   ```bash
   npm test
   ```

4. **Set up a Development Server (Optional):** A development server isn't strictly required for making changes but is helpful to see changes in a browser environment.  If the project includes a development server setup, refer to its documentation for instructions.


### Code Style Guidelines

Hover Intent follows consistent coding style conventions to ensure readability and maintainability.  Adherence to these guidelines is crucial for contributions to be accepted.  The guidelines may be specified in a separate document (e.g., `CONTRIBUTING.md` or `CODESTYLE.md` within the repository), or they might be implicitly defined by the existing codebase.  Common aspects include:

* **Indentation:** Typically uses 2 spaces for indentation.
* **Naming Conventions:**  Follow consistent naming conventions for variables, functions, and classes.
* **Comments:** Write clear and concise comments to explain complex logic or non-obvious code.
* **Linting:**  Use a linter (like ESLint) to enforce code style and catch potential errors.  The project may specify a linting configuration file.


### Testing and Quality Assurance

Hover Intent utilizes a test suite to ensure the functionality and stability of the library.  Before submitting a pull request, it is crucial to:

1. **Write Tests:** For any new features or bug fixes, write comprehensive unit tests to verify the functionality.  The tests should cover various scenarios and edge cases.

2. **Run Tests:** Execute the entire test suite to confirm your changes haven't introduced regressions. Use the command provided in the project's documentation (typically `npm test`).

3. **Code Coverage:**  Strive for high code coverage to ensure that your changes are thoroughly tested.


### Submitting Pull Requests

1. **Create a Branch:** Create a new branch for your changes:

   ```bash
   git checkout -b feature/your-feature-name
   ```

2. **Make Your Changes:** Implement your changes, ensuring they adhere to the code style guidelines and include comprehensive tests.

3. **Commit Your Changes:** Commit your changes with clear and concise messages:

   ```bash
   git add .
   git commit -m "Your commit message"
   ```

4. **Push Your Branch:** Push your branch to your forked repository:

   ```bash
   git push origin feature/your-feature-name
   ```

5. **Create a Pull Request:** On GitHub, create a pull request from your branch to the main branch of the original Hover Intent repository.  Provide a clear description of your changes and address any feedback from the maintainers.

6. **Address Feedback:**  The maintainers may provide feedback on your pull request.  Respond promptly and address any concerns or requested changes.


By following these guidelines, you can contribute effectively to Hover Intent and help improve its quality and functionality.  Refer to the project's `CONTRIBUTING.md` file for more specific instructions and guidelines.

