{"title":"Enquire JS - A Developer's Handbook","markdown":{"yaml":{"title":"Enquire JS - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction to Enquire.js","containsRefs":false,"markdown":"\n\n### What is Enquire.js?\n\nEnquire.js is a lightweight JavaScript library designed for responsive design. It provides a simple and elegant way to listen for changes in the browser viewport's size and orientation, triggering specific actions or CSS changes based on predefined media queries.  Unlike other solutions, Enquire.js focuses on providing a clean API for handling media query matching, without imposing a specific structure or methodology for your responsive design implementation. This makes it highly versatile and adaptable to various project needs.\n\n### Why use Enquire.js?\n\nEnquire.js offers several advantages over manually handling window resize events or using complex CSS frameworks:\n\n* **Simplicity and Ease of Use:**  Its API is incredibly straightforward, making it easy to learn and implement, even for developers new to responsive design techniques.\n* **Efficiency:** Enquire.js efficiently manages media query listening, avoiding unnecessary recalculations and improving performance. It only fires events when a media query's state actually changes.\n* **Flexibility:** It doesn't dictate how you structure your responsive design. You can integrate it seamlessly into existing projects and workflows.\n* **Unmatched Reliability:** Unlike relying on `window.resize` which can fire excessively, Enquire.js provides a stable and reliable way to detect media query changes, even across different browsers and devices.\n* **Lightweight:** Enquire.js has a tiny footprint, minimizing the impact on your application's load time and performance.\n\n\n### Setting up Enquire.js\n\nEnquire.js can be included in your project using various methods:\n\n* **CDN:** Include the library directly from a CDN like jsDelivr:  `<script src=\"https://cdn.jsdelivr.net/npm/enquire.js@2.0.0/dist/enquire.js\"></script>`\n\n* **npm:** If you're using npm, install it with: `npm install enquire.js` and then import it into your JavaScript file using a module bundler like Webpack or Parcel.\n\n* **Download:** Download the library from the project's repository and include it in your HTML file.\n\n\n### Basic usage example.\n\nThis example demonstrates how to listen for changes to a media query and log a message to the console:\n\n```javascript\nenquire.register(\"screen and (max-width: 768px)\", {\n  match: function() {\n    console.log(\"Screen width is now 768px or less.\");\n  },\n  unmatch: function() {\n    console.log(\"Screen width is now greater than 768px.\");\n  }\n});\n```\n\nThis code registers a listener for the media query `screen and (max-width: 768px)`.  The `match` function is executed when the media query becomes true (screen width is 768px or less), and the `unmatch` function is executed when it becomes false (screen width is greater than 768px).  Remember to replace the console logs with your desired actions.  You can register multiple listeners for different media queries as needed.\n\n\n## Core Concepts\n\n### Media Queries\n\nEnquire.js operates based on CSS media queries.  A media query is a way to apply different styles based on characteristics of the device displaying the page, such as screen width, orientation, resolution, and more.  Enquire.js uses the string representation of a media query (e.g., `\"screen and (min-width: 768px)\"`) to define the conditions under which registered listeners should be activated or deactivated.  Understanding CSS media queries is fundamental to effectively using Enquire.js.  Refer to the CSS Media Queries specification for a comprehensive understanding of syntax and capabilities.\n\n### Match Media API\n\nEnquire.js leverages the browser's native `matchMedia` API (or a polyfill if the API is not available) to monitor changes in media query states.  The `matchMedia` API provides a way to programmatically check if a given media query matches the current environment.  Enquire.js abstracts the complexities of the `matchMedia` API, providing a simpler and more developer-friendly interface. It handles the event listeners for media query changes, ensuring that your registered handlers are called only when necessary and reducing the overhead associated with continuous monitoring.\n\n### Listeners and Handlers\n\nIn Enquire.js, listeners are registered using the `enquire.register()` method.  A listener consists of a media query string and a set of handlers. The handlers are functions that execute when the media query's state changes:\n\n* **`match`:** This function is called when the media query becomes true (the conditions of the query are met).\n* **`unmatch`:** This function is called when the media query becomes false (the conditions of the query are no longer met).\n\n\nThese handlers can contain any JavaScript code you need to execute in response to the media query's state change, such as adjusting the layout, modifying CSS classes, or updating DOM elements.\n\n### Unmatched Media Queries\n\nWhen a media query is initially registered and the current environment doesn't match the query's conditions, the `match` handler will not be executed.  Only when the environment changes and the query becomes true will the `match` handler be triggered. Similarly, if a media query is currently matched and the environment changes such that the query is no longer met, only then will the `unmatch` handler be executed. Enquire.js intelligently manages this state, ensuring efficient resource usage and only triggering actions when necessary.  This behavior is crucial for preventing unnecessary computations and maintaining a performant application.\n\n\n## API Reference\n\n### Enquire.register()\n\nThe core function of Enquire.js.  It registers a listener for a given media query.\n\n**Syntax:**\n\n```javascript\nenquire.register(query, listener);\n```\n\n* **`query` (String):** The media query string (e.g., `\"screen and (min-width: 600px)\"`).\n* **`listener` (Object):** An object containing the `match` and `unmatch` handler functions.  See the \"Listener object\" section below for details.\n\n**Returns:**  An object representing the registered listener (see \"Match object\").  This object can be used later to unregister the listener.\n\n**Example:**\n\n```javascript\nconst myListener = enquire.register(\"(min-width: 768px)\", {\n  match: function() { /* code to execute when query matches */ },\n  unmatch: function() { /* code to execute when query unmatches */ }\n});\n```\n\n### Enquire.unregister()\n\nUnregisters a previously registered listener.  This prevents the listener from being triggered by further media query changes.\n\n**Syntax:**\n\n```javascript\nenquire.unregister(listener);\n```\n\n* **`listener` (Object):** The listener object returned by `enquire.register()`.\n\n**Example:**\n\n```javascript\nenquire.unregister(myListener);\n```\n\n### Enquire.match()\n\nThis method allows you to check if a given media query currently matches the browser environment without registering a listener.\n\n**Syntax:**\n\n```javascript\nenquire.match(query);\n```\n\n* **`query` (String):** The media query string to check.\n\n**Returns:** `true` if the query matches, `false` otherwise.\n\n\n### Enquire.unmatch()\n\nThis method is not directly exposed by Enquire.js as the `unmatch` functionality is handled implicitly within the `enquire.register()` mechanism.  The state of a media query's match is automatically tracked and the appropriate handler is called.\n\n\n### Listener object\n\nThe `listener` object passed to `enquire.register()` must have the following structure:\n\n```javascript\n{\n  match: function() { /* code to execute on match */ },\n  unmatch: function() { /* code to execute on unmatch */ }\n}\n```\n\nBoth `match` and `unmatch` are optional. If one is omitted, no action will be taken when the respective event occurs.\n\n### Match object\n\nThe object returned by `enquire.register()`. It contains the registered media query and the listener functions.  Primarily used with `enquire.unregister()`.  The internal structure of this object is not directly exposed and should not be relied upon.\n\n### Handling Events\n\nEnquire.js handles the underlying media query events via the `matchMedia` API. Your provided `match` and `unmatch` functions are executed when the associated media query's state changes.  No manual event handling (like attaching listeners to the `window.resize` event) is needed or recommended when using Enquire.js as it provides this functionality directly and efficiently.\n\n\n## Advanced Usage\n\n### Using multiple media queries\n\nYou can register multiple listeners for different media queries independently:\n\n```javascript\nenquire.register('(min-width: 768px)', {\n  match: function() { /* Actions for large screens */ },\n  unmatch: function() { /* Actions when screen is smaller than 768px */}\n});\n\nenquire.register('(orientation: landscape)', {\n  match: function() { /* Actions for landscape orientation */ },\n  unmatch: function() { /* Actions for portrait orientation */ }\n});\n```\n\nEach call to `enquire.register()` creates an independent listener.\n\n\n### Nesting media queries\n\nWhile Enquire.js doesn't directly support nesting media queries within the `register` function's query string, you can achieve similar results by using more complex, combined media queries. For instance, to target both landscape orientation and screens wider than 1024px:\n\n```javascript\nenquire.register('(orientation: landscape) and (min-width: 1024px)', {\n  match: function() { /* Actions for landscape orientation and wide screens */ },\n  unmatch: function() { /* Actions when not both conditions are met */ }\n});\n```\n\n\n### Managing multiple listeners\n\nWhen dealing with numerous listeners, it's crucial to keep track of the listener objects returned by `enquire.register()`.  This allows for precise control, enabling you to unregister specific listeners when needed, preventing memory leaks, and avoiding unexpected behavior.  Use descriptive variable names for your listeners to improve code readability and maintainability. Consider using an array to store listener objects for easier management if you have a substantial number.\n\n```javascript\nconst listeners = [];\nlisteners.push(enquire.register('(max-width: 600px)', { /* ... */ }));\nlisteners.push(enquire.register('(min-width: 1024px)', { /* ... */ }));\n\n// ... later, to unregister all listeners:\nlisteners.forEach(listener => enquire.unregister(listener));\n```\n\n### Conditional logic and actions\n\nWithin your `match` and `unmatch` handlers, you can employ any JavaScript conditional logic and perform various actions based on the media query state.  This allows for highly customized responses to different screen sizes and device capabilities.\n\n```javascript\nenquire.register('(max-width: 480px)', {\n  match: function() {\n    if (document.querySelector('.my-element')) {\n      document.querySelector('.my-element').style.display = 'none';\n    }\n    // ... other actions\n  },\n  unmatch: function() {\n    if (document.querySelector('.my-element')) {\n      document.querySelector('.my-element').style.display = 'block';\n    }\n     // ... other actions\n  }\n});\n```\n\n\n### Integration with other libraries\n\nEnquire.js is designed to be unobtrusive and easily integrated with other JavaScript libraries and frameworks.  It doesn't impose any specific structure or methodology on your project, allowing you to use it alongside other tools for responsive design, DOM manipulation, or state management. For example, you could combine it with a CSS framework like Bootstrap or a JavaScript framework like React, Vue, or Angular to create a robust responsive application.  You simply integrate Enquire.js to handle the media query detection, and use your framework of choice to manage the actual application logic and UI updates.\n\n\n## Troubleshooting\n\n### Common errors\n\n* **`enquire is not defined`:** This error indicates that Enquire.js hasn't been correctly included in your project. Double-check that the `<script>` tag referencing the Enquire.js file is present in your HTML and that the path is accurate.  Also verify that the script is included *before* any code that attempts to use `enquire`.\n\n* **`Uncaught TypeError: listener.match is not a function`:** This error means that the `listener` object passed to `enquire.register()` is missing the `match` function (or the `unmatch` function, if you're trying to use it). Ensure that your `listener` object has both `match` and `unmatch` properties, each assigned a function.\n\n* **Media query not working as expected:**  Carefully review your media query syntax.  Typos or incorrect use of media query features can lead to unexpected behavior.  Use the browser's developer tools (usually F12) to inspect the applied CSS and check if your media queries are matching correctly.  Test your queries in different browsers and screen sizes.\n\n* **Handlers not being triggered:** Ensure that the conditions of your media query actually change within the browser's viewport.  If you're targeting screen size, make sure you resize the browser window; for orientation, rotate your device.\n\n\n### Debugging tips\n\n* **Use your browser's developer tools:** The browser's developer tools (usually accessed by pressing F12) are invaluable for debugging JavaScript.  Set breakpoints in your `match` and `unmatch` functions to examine the state of your application at the moment the handlers are triggered.\n\n* **Console logging:** Use `console.log()` statements strategically within your handlers to track the execution flow and check the values of relevant variables.  This can help pinpoint where problems occur.\n\n* **Simplify your code:**  If you're encountering problems with complex queries or numerous listeners, try simplifying your code to isolate the problem. Test individual media queries and listeners separately to determine which part of your code is causing the issue.\n\n* **Check your media query in a CSS stylesheet:** Before using it with Enquire.js, test the media query in a CSS file to make sure it behaves as expected in the browser.  This helps rule out syntax errors or incorrect media query logic.\n\n\n### Performance considerations\n\n* **Avoid unnecessary listeners:**  Only register listeners for the media queries you absolutely need.  Too many listeners can impact performance, especially on lower-powered devices.\n\n* **Efficient handlers:** Keep your `match` and `unmatch` handlers concise and efficient.  Avoid performing heavy computations or DOM manipulations that could slow down the browser.\n\n* **Optimize DOM manipulation:** If your handlers manipulate the DOM, use techniques to minimize the number of DOM changes.  This is particularly important when dealing with large or complex DOM structures.\n\n* **Debouncing/throttling:** If you're making multiple changes within the handlers, consider using debouncing or throttling techniques to reduce the frequency of updates and improve responsiveness.\n\n\n### Browser compatibility\n\nEnquire.js aims for broad browser compatibility and uses a polyfill for older browsers that don't support the `matchMedia` API.  However, extremely outdated browsers may have limited or no support.  While Enquire.js itself should function correctly, your specific use case might rely on features or behaviours not consistently supported across all browsers.  Thorough testing across different browsers (including older versions and mobile browsers) is recommended, especially if your application has complex interactions with CSS or the DOM.  Ensure any polyfills you need are included appropriately.\n\n\n## Examples and Best Practices\n\n### Responsive navigation\n\nA common use case for Enquire.js is creating responsive navigation menus.  For example, you might want to hide a complex navigation menu on smaller screens and replace it with a simpler hamburger menu:\n\n\n```javascript\nenquire.register(\"(max-width: 767px)\", {\n  match: function() {\n    // Show hamburger menu, hide full navigation\n    document.getElementById(\"hamburger-menu\").style.display = \"block\";\n    document.getElementById(\"full-navigation\").style.display = \"none\";\n  },\n  unmatch: function() {\n    // Hide hamburger menu, show full navigation\n    document.getElementById(\"hamburger-menu\").style.display = \"none\";\n    document.getElementById(\"full-navigation\").style.display = \"block\";\n  }\n});\n```\n\nThis assumes you have elements with the IDs \"hamburger-menu\" and \"full-navigation\" in your HTML.  Remember to adjust the media query and element IDs to match your specific HTML structure.\n\n### Adaptive images\n\nEnquire.js can be used to load different images based on screen size or other media query conditions.  This can improve performance by loading smaller images on smaller screens:\n\n```javascript\nenquire.register(\"(max-width: 480px)\", {\n  match: function() {\n    document.getElementById(\"my-image\").src = \"small-image.jpg\";\n  },\n  unmatch: function() {\n    document.getElementById(\"my-image\").src = \"large-image.jpg\";\n  }\n});\n```\n\nAgain, adjust the media query, image paths, and element ID to fit your implementation.  Consider using a more robust image loading approach (e.g. using `srcset` attribute if supported) for a more efficient and robust solution in production.\n\n### Layout adjustments\n\nEnquire.js can help create various layout adjustments based on screen size.  For example, you might change the number of columns in a grid layout:\n\n```javascript\nenquire.register(\"(min-width: 1024px)\", {\n  match: function() {\n    // Change grid layout to 3 columns\n    document.body.classList.add(\"three-column-layout\");\n    document.body.classList.remove(\"two-column-layout\");\n  },\n  unmatch: function() {\n    // Change grid layout to 2 columns\n    document.body.classList.remove(\"three-column-layout\");\n    document.body.classList.add(\"two-column-layout\");\n  }\n});\n```\n\nThis example relies on CSS classes defining the 2 and 3 column layouts.   This approach is generally preferable to directly manipulating inline styles.\n\n\n### Code examples and snippets\n\nFor more comprehensive and detailed code examples, refer to the Enquire.js project's documentation and examples.  The official resources often provide practical implementations and best practices that go beyond the basic usage shown here.  Searching for \"Enquire.js examples\" on sites like CodePen or GitHub will also reveal numerous community-contributed examples showcasing different applications of the library.  Remember to always consult the official documentation for the most up-to-date information and best practices.\n\n\n## Contributing to Enquire.js\n\nThis section outlines how to contribute to the Enquire.js project.  Contributions, including bug reports, feature requests, and code improvements, are highly valued.\n\n### Setting up the development environment\n\n1. **Clone the repository:** Start by forking the Enquire.js repository on GitHub and cloning your fork to your local machine:\n\n   ```bash\n   git clone git@github.com:YOUR_USERNAME/enquire.js.git\n   ```\n   Replace `YOUR_USERNAME` with your GitHub username.\n\n2. **Install dependencies:** Navigate to the project directory and install the necessary packages using npm:\n\n   ```bash\n   cd enquire.js\n   npm install\n   ```\n\n3. **Run the development server:** Enquire.js uses a simple development server for testing. Start it using:\n\n   ```bash\n   npm start\n   ```\n\n   This will start a local server and open the test page in your browser.  Changes you make to the source code will automatically trigger a rebuild and refresh the browser.\n\n\n### Testing and code style guidelines\n\n* **Testing:** Enquire.js uses a testing framework (check the project's `package.json` for details).  Before submitting any code changes, ensure that all tests pass.  Run the tests using:\n\n   ```bash\n   npm test\n   ```\n\n   Add new tests for any new features or bug fixes you implement.\n\n* **Code style:** Adhere to the existing coding style of Enquire.js.  Consistent formatting and code style improve readability and maintainability.  Use the project's linting tools to check your code style (if available).\n\n\n### Submitting pull requests\n\n1. **Create a branch:** Create a new branch for your changes from the `main` or `develop` branch (check the project's main branch name):\n\n   ```bash\n   git checkout -b feature/my-new-feature\n   ```\n\n2. **Make your changes:** Implement your bug fixes, features, or improvements.  Write clear and concise commit messages that explain your changes.\n\n3. **Run tests:** Ensure that all tests pass before submitting your pull request.\n\n4. **Push your branch:** Push your branch to your forked repository:\n\n   ```bash\n   git push origin feature/my-new-feature\n   ```\n\n5. **Create a pull request:** Go to your forked repository on GitHub and create a pull request to merge your branch into the main Enquire.js repository.  Provide a clear description of your changes and address any feedback provided by the maintainers.\n\nBefore submitting a pull request, ensure that your changes are well-documented, thoroughly tested, and adhere to the project's coding style guidelines.  Clear and concise communication is essential for a smooth and efficient contribution process.\n\n","srcMarkdownNoYaml":"\n## Introduction to Enquire.js\n\n### What is Enquire.js?\n\nEnquire.js is a lightweight JavaScript library designed for responsive design. It provides a simple and elegant way to listen for changes in the browser viewport's size and orientation, triggering specific actions or CSS changes based on predefined media queries.  Unlike other solutions, Enquire.js focuses on providing a clean API for handling media query matching, without imposing a specific structure or methodology for your responsive design implementation. This makes it highly versatile and adaptable to various project needs.\n\n### Why use Enquire.js?\n\nEnquire.js offers several advantages over manually handling window resize events or using complex CSS frameworks:\n\n* **Simplicity and Ease of Use:**  Its API is incredibly straightforward, making it easy to learn and implement, even for developers new to responsive design techniques.\n* **Efficiency:** Enquire.js efficiently manages media query listening, avoiding unnecessary recalculations and improving performance. It only fires events when a media query's state actually changes.\n* **Flexibility:** It doesn't dictate how you structure your responsive design. You can integrate it seamlessly into existing projects and workflows.\n* **Unmatched Reliability:** Unlike relying on `window.resize` which can fire excessively, Enquire.js provides a stable and reliable way to detect media query changes, even across different browsers and devices.\n* **Lightweight:** Enquire.js has a tiny footprint, minimizing the impact on your application's load time and performance.\n\n\n### Setting up Enquire.js\n\nEnquire.js can be included in your project using various methods:\n\n* **CDN:** Include the library directly from a CDN like jsDelivr:  `<script src=\"https://cdn.jsdelivr.net/npm/enquire.js@2.0.0/dist/enquire.js\"></script>`\n\n* **npm:** If you're using npm, install it with: `npm install enquire.js` and then import it into your JavaScript file using a module bundler like Webpack or Parcel.\n\n* **Download:** Download the library from the project's repository and include it in your HTML file.\n\n\n### Basic usage example.\n\nThis example demonstrates how to listen for changes to a media query and log a message to the console:\n\n```javascript\nenquire.register(\"screen and (max-width: 768px)\", {\n  match: function() {\n    console.log(\"Screen width is now 768px or less.\");\n  },\n  unmatch: function() {\n    console.log(\"Screen width is now greater than 768px.\");\n  }\n});\n```\n\nThis code registers a listener for the media query `screen and (max-width: 768px)`.  The `match` function is executed when the media query becomes true (screen width is 768px or less), and the `unmatch` function is executed when it becomes false (screen width is greater than 768px).  Remember to replace the console logs with your desired actions.  You can register multiple listeners for different media queries as needed.\n\n\n## Core Concepts\n\n### Media Queries\n\nEnquire.js operates based on CSS media queries.  A media query is a way to apply different styles based on characteristics of the device displaying the page, such as screen width, orientation, resolution, and more.  Enquire.js uses the string representation of a media query (e.g., `\"screen and (min-width: 768px)\"`) to define the conditions under which registered listeners should be activated or deactivated.  Understanding CSS media queries is fundamental to effectively using Enquire.js.  Refer to the CSS Media Queries specification for a comprehensive understanding of syntax and capabilities.\n\n### Match Media API\n\nEnquire.js leverages the browser's native `matchMedia` API (or a polyfill if the API is not available) to monitor changes in media query states.  The `matchMedia` API provides a way to programmatically check if a given media query matches the current environment.  Enquire.js abstracts the complexities of the `matchMedia` API, providing a simpler and more developer-friendly interface. It handles the event listeners for media query changes, ensuring that your registered handlers are called only when necessary and reducing the overhead associated with continuous monitoring.\n\n### Listeners and Handlers\n\nIn Enquire.js, listeners are registered using the `enquire.register()` method.  A listener consists of a media query string and a set of handlers. The handlers are functions that execute when the media query's state changes:\n\n* **`match`:** This function is called when the media query becomes true (the conditions of the query are met).\n* **`unmatch`:** This function is called when the media query becomes false (the conditions of the query are no longer met).\n\n\nThese handlers can contain any JavaScript code you need to execute in response to the media query's state change, such as adjusting the layout, modifying CSS classes, or updating DOM elements.\n\n### Unmatched Media Queries\n\nWhen a media query is initially registered and the current environment doesn't match the query's conditions, the `match` handler will not be executed.  Only when the environment changes and the query becomes true will the `match` handler be triggered. Similarly, if a media query is currently matched and the environment changes such that the query is no longer met, only then will the `unmatch` handler be executed. Enquire.js intelligently manages this state, ensuring efficient resource usage and only triggering actions when necessary.  This behavior is crucial for preventing unnecessary computations and maintaining a performant application.\n\n\n## API Reference\n\n### Enquire.register()\n\nThe core function of Enquire.js.  It registers a listener for a given media query.\n\n**Syntax:**\n\n```javascript\nenquire.register(query, listener);\n```\n\n* **`query` (String):** The media query string (e.g., `\"screen and (min-width: 600px)\"`).\n* **`listener` (Object):** An object containing the `match` and `unmatch` handler functions.  See the \"Listener object\" section below for details.\n\n**Returns:**  An object representing the registered listener (see \"Match object\").  This object can be used later to unregister the listener.\n\n**Example:**\n\n```javascript\nconst myListener = enquire.register(\"(min-width: 768px)\", {\n  match: function() { /* code to execute when query matches */ },\n  unmatch: function() { /* code to execute when query unmatches */ }\n});\n```\n\n### Enquire.unregister()\n\nUnregisters a previously registered listener.  This prevents the listener from being triggered by further media query changes.\n\n**Syntax:**\n\n```javascript\nenquire.unregister(listener);\n```\n\n* **`listener` (Object):** The listener object returned by `enquire.register()`.\n\n**Example:**\n\n```javascript\nenquire.unregister(myListener);\n```\n\n### Enquire.match()\n\nThis method allows you to check if a given media query currently matches the browser environment without registering a listener.\n\n**Syntax:**\n\n```javascript\nenquire.match(query);\n```\n\n* **`query` (String):** The media query string to check.\n\n**Returns:** `true` if the query matches, `false` otherwise.\n\n\n### Enquire.unmatch()\n\nThis method is not directly exposed by Enquire.js as the `unmatch` functionality is handled implicitly within the `enquire.register()` mechanism.  The state of a media query's match is automatically tracked and the appropriate handler is called.\n\n\n### Listener object\n\nThe `listener` object passed to `enquire.register()` must have the following structure:\n\n```javascript\n{\n  match: function() { /* code to execute on match */ },\n  unmatch: function() { /* code to execute on unmatch */ }\n}\n```\n\nBoth `match` and `unmatch` are optional. If one is omitted, no action will be taken when the respective event occurs.\n\n### Match object\n\nThe object returned by `enquire.register()`. It contains the registered media query and the listener functions.  Primarily used with `enquire.unregister()`.  The internal structure of this object is not directly exposed and should not be relied upon.\n\n### Handling Events\n\nEnquire.js handles the underlying media query events via the `matchMedia` API. Your provided `match` and `unmatch` functions are executed when the associated media query's state changes.  No manual event handling (like attaching listeners to the `window.resize` event) is needed or recommended when using Enquire.js as it provides this functionality directly and efficiently.\n\n\n## Advanced Usage\n\n### Using multiple media queries\n\nYou can register multiple listeners for different media queries independently:\n\n```javascript\nenquire.register('(min-width: 768px)', {\n  match: function() { /* Actions for large screens */ },\n  unmatch: function() { /* Actions when screen is smaller than 768px */}\n});\n\nenquire.register('(orientation: landscape)', {\n  match: function() { /* Actions for landscape orientation */ },\n  unmatch: function() { /* Actions for portrait orientation */ }\n});\n```\n\nEach call to `enquire.register()` creates an independent listener.\n\n\n### Nesting media queries\n\nWhile Enquire.js doesn't directly support nesting media queries within the `register` function's query string, you can achieve similar results by using more complex, combined media queries. For instance, to target both landscape orientation and screens wider than 1024px:\n\n```javascript\nenquire.register('(orientation: landscape) and (min-width: 1024px)', {\n  match: function() { /* Actions for landscape orientation and wide screens */ },\n  unmatch: function() { /* Actions when not both conditions are met */ }\n});\n```\n\n\n### Managing multiple listeners\n\nWhen dealing with numerous listeners, it's crucial to keep track of the listener objects returned by `enquire.register()`.  This allows for precise control, enabling you to unregister specific listeners when needed, preventing memory leaks, and avoiding unexpected behavior.  Use descriptive variable names for your listeners to improve code readability and maintainability. Consider using an array to store listener objects for easier management if you have a substantial number.\n\n```javascript\nconst listeners = [];\nlisteners.push(enquire.register('(max-width: 600px)', { /* ... */ }));\nlisteners.push(enquire.register('(min-width: 1024px)', { /* ... */ }));\n\n// ... later, to unregister all listeners:\nlisteners.forEach(listener => enquire.unregister(listener));\n```\n\n### Conditional logic and actions\n\nWithin your `match` and `unmatch` handlers, you can employ any JavaScript conditional logic and perform various actions based on the media query state.  This allows for highly customized responses to different screen sizes and device capabilities.\n\n```javascript\nenquire.register('(max-width: 480px)', {\n  match: function() {\n    if (document.querySelector('.my-element')) {\n      document.querySelector('.my-element').style.display = 'none';\n    }\n    // ... other actions\n  },\n  unmatch: function() {\n    if (document.querySelector('.my-element')) {\n      document.querySelector('.my-element').style.display = 'block';\n    }\n     // ... other actions\n  }\n});\n```\n\n\n### Integration with other libraries\n\nEnquire.js is designed to be unobtrusive and easily integrated with other JavaScript libraries and frameworks.  It doesn't impose any specific structure or methodology on your project, allowing you to use it alongside other tools for responsive design, DOM manipulation, or state management. For example, you could combine it with a CSS framework like Bootstrap or a JavaScript framework like React, Vue, or Angular to create a robust responsive application.  You simply integrate Enquire.js to handle the media query detection, and use your framework of choice to manage the actual application logic and UI updates.\n\n\n## Troubleshooting\n\n### Common errors\n\n* **`enquire is not defined`:** This error indicates that Enquire.js hasn't been correctly included in your project. Double-check that the `<script>` tag referencing the Enquire.js file is present in your HTML and that the path is accurate.  Also verify that the script is included *before* any code that attempts to use `enquire`.\n\n* **`Uncaught TypeError: listener.match is not a function`:** This error means that the `listener` object passed to `enquire.register()` is missing the `match` function (or the `unmatch` function, if you're trying to use it). Ensure that your `listener` object has both `match` and `unmatch` properties, each assigned a function.\n\n* **Media query not working as expected:**  Carefully review your media query syntax.  Typos or incorrect use of media query features can lead to unexpected behavior.  Use the browser's developer tools (usually F12) to inspect the applied CSS and check if your media queries are matching correctly.  Test your queries in different browsers and screen sizes.\n\n* **Handlers not being triggered:** Ensure that the conditions of your media query actually change within the browser's viewport.  If you're targeting screen size, make sure you resize the browser window; for orientation, rotate your device.\n\n\n### Debugging tips\n\n* **Use your browser's developer tools:** The browser's developer tools (usually accessed by pressing F12) are invaluable for debugging JavaScript.  Set breakpoints in your `match` and `unmatch` functions to examine the state of your application at the moment the handlers are triggered.\n\n* **Console logging:** Use `console.log()` statements strategically within your handlers to track the execution flow and check the values of relevant variables.  This can help pinpoint where problems occur.\n\n* **Simplify your code:**  If you're encountering problems with complex queries or numerous listeners, try simplifying your code to isolate the problem. Test individual media queries and listeners separately to determine which part of your code is causing the issue.\n\n* **Check your media query in a CSS stylesheet:** Before using it with Enquire.js, test the media query in a CSS file to make sure it behaves as expected in the browser.  This helps rule out syntax errors or incorrect media query logic.\n\n\n### Performance considerations\n\n* **Avoid unnecessary listeners:**  Only register listeners for the media queries you absolutely need.  Too many listeners can impact performance, especially on lower-powered devices.\n\n* **Efficient handlers:** Keep your `match` and `unmatch` handlers concise and efficient.  Avoid performing heavy computations or DOM manipulations that could slow down the browser.\n\n* **Optimize DOM manipulation:** If your handlers manipulate the DOM, use techniques to minimize the number of DOM changes.  This is particularly important when dealing with large or complex DOM structures.\n\n* **Debouncing/throttling:** If you're making multiple changes within the handlers, consider using debouncing or throttling techniques to reduce the frequency of updates and improve responsiveness.\n\n\n### Browser compatibility\n\nEnquire.js aims for broad browser compatibility and uses a polyfill for older browsers that don't support the `matchMedia` API.  However, extremely outdated browsers may have limited or no support.  While Enquire.js itself should function correctly, your specific use case might rely on features or behaviours not consistently supported across all browsers.  Thorough testing across different browsers (including older versions and mobile browsers) is recommended, especially if your application has complex interactions with CSS or the DOM.  Ensure any polyfills you need are included appropriately.\n\n\n## Examples and Best Practices\n\n### Responsive navigation\n\nA common use case for Enquire.js is creating responsive navigation menus.  For example, you might want to hide a complex navigation menu on smaller screens and replace it with a simpler hamburger menu:\n\n\n```javascript\nenquire.register(\"(max-width: 767px)\", {\n  match: function() {\n    // Show hamburger menu, hide full navigation\n    document.getElementById(\"hamburger-menu\").style.display = \"block\";\n    document.getElementById(\"full-navigation\").style.display = \"none\";\n  },\n  unmatch: function() {\n    // Hide hamburger menu, show full navigation\n    document.getElementById(\"hamburger-menu\").style.display = \"none\";\n    document.getElementById(\"full-navigation\").style.display = \"block\";\n  }\n});\n```\n\nThis assumes you have elements with the IDs \"hamburger-menu\" and \"full-navigation\" in your HTML.  Remember to adjust the media query and element IDs to match your specific HTML structure.\n\n### Adaptive images\n\nEnquire.js can be used to load different images based on screen size or other media query conditions.  This can improve performance by loading smaller images on smaller screens:\n\n```javascript\nenquire.register(\"(max-width: 480px)\", {\n  match: function() {\n    document.getElementById(\"my-image\").src = \"small-image.jpg\";\n  },\n  unmatch: function() {\n    document.getElementById(\"my-image\").src = \"large-image.jpg\";\n  }\n});\n```\n\nAgain, adjust the media query, image paths, and element ID to fit your implementation.  Consider using a more robust image loading approach (e.g. using `srcset` attribute if supported) for a more efficient and robust solution in production.\n\n### Layout adjustments\n\nEnquire.js can help create various layout adjustments based on screen size.  For example, you might change the number of columns in a grid layout:\n\n```javascript\nenquire.register(\"(min-width: 1024px)\", {\n  match: function() {\n    // Change grid layout to 3 columns\n    document.body.classList.add(\"three-column-layout\");\n    document.body.classList.remove(\"two-column-layout\");\n  },\n  unmatch: function() {\n    // Change grid layout to 2 columns\n    document.body.classList.remove(\"three-column-layout\");\n    document.body.classList.add(\"two-column-layout\");\n  }\n});\n```\n\nThis example relies on CSS classes defining the 2 and 3 column layouts.   This approach is generally preferable to directly manipulating inline styles.\n\n\n### Code examples and snippets\n\nFor more comprehensive and detailed code examples, refer to the Enquire.js project's documentation and examples.  The official resources often provide practical implementations and best practices that go beyond the basic usage shown here.  Searching for \"Enquire.js examples\" on sites like CodePen or GitHub will also reveal numerous community-contributed examples showcasing different applications of the library.  Remember to always consult the official documentation for the most up-to-date information and best practices.\n\n\n## Contributing to Enquire.js\n\nThis section outlines how to contribute to the Enquire.js project.  Contributions, including bug reports, feature requests, and code improvements, are highly valued.\n\n### Setting up the development environment\n\n1. **Clone the repository:** Start by forking the Enquire.js repository on GitHub and cloning your fork to your local machine:\n\n   ```bash\n   git clone git@github.com:YOUR_USERNAME/enquire.js.git\n   ```\n   Replace `YOUR_USERNAME` with your GitHub username.\n\n2. **Install dependencies:** Navigate to the project directory and install the necessary packages using npm:\n\n   ```bash\n   cd enquire.js\n   npm install\n   ```\n\n3. **Run the development server:** Enquire.js uses a simple development server for testing. Start it using:\n\n   ```bash\n   npm start\n   ```\n\n   This will start a local server and open the test page in your browser.  Changes you make to the source code will automatically trigger a rebuild and refresh the browser.\n\n\n### Testing and code style guidelines\n\n* **Testing:** Enquire.js uses a testing framework (check the project's `package.json` for details).  Before submitting any code changes, ensure that all tests pass.  Run the tests using:\n\n   ```bash\n   npm test\n   ```\n\n   Add new tests for any new features or bug fixes you implement.\n\n* **Code style:** Adhere to the existing coding style of Enquire.js.  Consistent formatting and code style improve readability and maintainability.  Use the project's linting tools to check your code style (if available).\n\n\n### Submitting pull requests\n\n1. **Create a branch:** Create a new branch for your changes from the `main` or `develop` branch (check the project's main branch name):\n\n   ```bash\n   git checkout -b feature/my-new-feature\n   ```\n\n2. **Make your changes:** Implement your bug fixes, features, or improvements.  Write clear and concise commit messages that explain your changes.\n\n3. **Run tests:** Ensure that all tests pass before submitting your pull request.\n\n4. **Push your branch:** Push your branch to your forked repository:\n\n   ```bash\n   git push origin feature/my-new-feature\n   ```\n\n5. **Create a pull request:** Go to your forked repository on GitHub and create a pull request to merge your branch into the main Enquire.js repository.  Provide a clear description of your changes and address any feedback provided by the maintainers.\n\nBefore submitting a pull request, ensure that your changes are well-documented, thoroughly tested, and adhere to the project's coding style guidelines.  Clear and concise communication is essential for a smooth and efficient contribution process.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"}],"output-file":"enquire-js.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"title":"Enquire JS - A Developer's Handbook","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}