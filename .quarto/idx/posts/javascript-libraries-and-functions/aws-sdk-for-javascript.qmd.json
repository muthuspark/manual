{"title":"AWS SDK for JavaScript - Documentation","markdown":{"yaml":{"title":"AWS SDK for JavaScript - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n### What is the AWS SDK for JavaScript?\n\nThe AWS SDK for JavaScript is a comprehensive software development kit (SDK) that allows developers to easily interact with various AWS services from their JavaScript applications. It provides a consistent, user-friendly interface for accessing a wide range of AWS services, including Amazon S3, Amazon EC2, Amazon DynamoDB, and many more.  The SDK handles the complexities of authentication, signing requests, and managing responses, allowing developers to focus on building their applications. It supports both browser-based and Node.js environments.\n\n### Key Features and Benefits\n\n* **Simplified API:** The SDK offers a consistent and easy-to-use API across multiple AWS services, reducing the learning curve and development time.\n* **Comprehensive Service Coverage:** It supports a vast number of AWS services, providing access to a wide range of functionalities.\n* **Modular Design:** The SDK is modular, allowing you to install only the services you need, keeping your application size optimized.\n* **Promise-based API:**  The SDK uses Promises, enabling asynchronous operations in a clean and efficient manner.\n* **Automatic Retries and Error Handling:** The SDK includes built-in retry mechanisms and error handling to enhance application resilience.\n* **Cross-Platform Support:** Works with both Node.js (server-side) and browsers (client-side).\n* **Active Community and Support:** Benefits from a large and active community providing ample support and resources.\n\n\n### Target Audience\n\nThis manual is intended for developers who are building applications using JavaScript and need to integrate with AWS services.  It targets both frontend developers working in browsers and backend developers working with Node.js.  A basic understanding of JavaScript programming and familiarity with AWS concepts is helpful, but not strictly required.\n\n### Setting up your Environment\n\nBefore you begin using the AWS SDK for JavaScript, ensure you have the following:\n\n* **Node.js and npm (or yarn):** The AWS SDK for JavaScript is primarily used with Node.js.  Make sure you have a compatible version of Node.js and npm (Node Package Manager) or yarn installed on your system. You can download Node.js from [https://nodejs.org/](https://nodejs.org/).\n\n* **AWS Credentials:**  You need AWS credentials to access your AWS resources.  These credentials can be obtained in several ways, including using IAM users, roles, or temporary security credentials. For more information on managing credentials, refer to the AWS documentation on [IAM](https://aws.amazon.com/iam/).\n\n* **Text Editor or IDE:**  Choose a suitable text editor or Integrated Development Environment (IDE) for writing and running your JavaScript code.  Popular options include Visual Studio Code, Sublime Text, Atom, and WebStorm.\n\n### Installing the SDK\n\nThe AWS SDK for JavaScript uses npm (or yarn) for package management.  To install the SDK, open your terminal or command prompt and navigate to your project directory. Then, use the following command:\n\n\n```bash\nnpm install aws-sdk\n```\n\nor, if using yarn:\n\n```bash\nyarn add aws-sdk\n```\n\nThis command installs the core AWS SDK package.  You can then install individual service packages as needed.  For instance, to install only the S3 service, you could use:\n\n```bash\nnpm install aws-sdk/clients/s3\n```\n\nRemember to replace `s3` with the desired service name if you only need a specific AWS service.  Consult the AWS SDK for JavaScript API reference for a complete list of available services and their respective package names.\n\n\n## Getting Started\n\n### Creating your first AWS project\n\nTo create your first AWS project using the JavaScript SDK, follow these steps:\n\n1. **Create a new project directory:** Use your terminal or command prompt to create a new directory for your project.  For example: `mkdir my-aws-project` and then navigate into it using `cd my-aws-project`.\n\n2. **Initialize your project:** Initialize a Node.js project by running `npm init -y` (or `yarn init -y` if using yarn). This creates a `package.json` file.\n\n3. **Install the AWS SDK:** Install the AWS SDK for JavaScript as described in the previous section using `npm install aws-sdk` or `yarn add aws-sdk`.\n\n4. **Create a JavaScript file:** Create a new JavaScript file (e.g., `index.js`) within your project directory.  This is where you'll write your code.\n\n5. **Write your code:**  Start by importing the necessary AWS service client and then make your first API call (as described in the next sections).\n\n6. **Run your code:** Execute your code using `node index.js`.\n\n\n### Configuring AWS Credentials\n\nThe AWS SDK for JavaScript needs to know how to authenticate your requests to AWS.  You can configure your credentials in several ways:\n\n* **Environment Variables:** Set the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environment variables.  This is generally the least secure method but convenient for development.\n\n* **Shared Credentials File:** Create a credentials file (`~/.aws/credentials` on Linux/macOS, `%USERPROFILE%\\.aws\\credentials` on Windows) with your access key ID and secret access key. The format should be:\n\n```ini\n[default]\naws_access_key_id = YOUR_ACCESS_KEY_ID\naws_secret_access_key = YOUR_SECRET_ACCESS_KEY\n```\n\n* **IAM Roles (EC2):** If running on an EC2 instance, use an IAM role assigned to the instance. This is the most secure method for production environments.\n\n* **Programmatic Configuration:**  Pass the credentials directly to the AWS service client constructor.  This is less common but useful in certain scenarios.  See the SDK documentation for details.\n\n\n**Important Security Note:** Never hardcode your AWS credentials directly into your code.  Use environment variables or a shared credentials file, but prefer IAM roles for production systems.\n\n\n### Choosing a region\n\nAWS services are available in multiple regions around the world. You need to specify the region your application will interact with. You can set the region in several ways:\n\n* **Environment Variable:** Set the `AWS_REGION` environment variable.\n\n* **Shared Credentials File:** Add a `region` parameter within the `[default]` profile in your credentials file:\n\n```ini\n[default]\naws_access_key_id = YOUR_ACCESS_KEY_ID\naws_secret_access_key = YOUR_SECRET_ACCESS_KEY\nregion = us-west-2\n```\n\n* **Client Configuration:**  Pass the `region` parameter to the AWS service client constructor.\n\n\nFor example, if you want to use the `us-east-1` region, you would set `AWS_REGION=us-east-1`.  Choose a region close to your users for lower latency.\n\n\n### Making your first API call\n\nThis example demonstrates a simple S3 API call to list buckets:\n\n\n```javascript\nconst { S3 } = require('aws-sdk');\n\nconst s3 = new S3();\n\ns3.listBuckets((err, data) => {\n  if (err) {\n    console.error(\"Error:\", err);\n  } else {\n    console.log(\"Buckets:\", data.Buckets);\n  }\n});\n```\n\nThis code first imports the `S3` client from the AWS SDK. It then creates an `S3` object and calls the `listBuckets` method. The callback function handles both success and error cases. Remember to install the `aws-sdk` package as mentioned in previous sections.\n\n\n### Handling errors and exceptions\n\nThe AWS SDK for JavaScript uses callbacks or promises to handle asynchronous operations. Error handling is crucial to ensure robust applications.  In the callback example above, the `err` parameter in the callback function contains the error object if something goes wrong.  You can inspect the error object for details to understand the cause of the failure.\n\nFor promise-based calls, use `.then()` to handle successful responses and `.catch()` to handle errors:\n\n```javascript\nconst { S3 } = require('aws-sdk');\n\nconst s3 = new S3();\n\ns3.listBuckets()\n  .promise()\n  .then(data => {\n    console.log(\"Buckets:\", data.Buckets);\n  })\n  .catch(err => {\n    console.error(\"Error:\", err);\n  });\n\n```\n\nAlways include comprehensive error handling in your code to gracefully manage potential issues and provide informative error messages to users or log files.  Examine the error object's properties (like `code` and `message`) to determine the specific problem.  Consider implementing retry logic for transient errors.\n\n\n## Core Concepts\n\n### Clients and Commands\n\nThe AWS SDK for JavaScript is built around the concept of *clients* and *commands*.  A *client* represents a specific AWS service (e.g., S3, EC2, DynamoDB).  Each client exposes methods, often called *commands*, that correspond to the API operations available for that service.  These commands are used to interact with the AWS service.\n\nFor example, the `S3` client provides commands like `putObject` (to upload an object), `getObject` (to download an object), `listBuckets` (to list S3 buckets), and many others.  Each command takes input parameters specific to the API operation and returns a response (or an error).\n\n\n### Requests and Responses\n\nWhen you make an API call using a client command, the SDK constructs a request. This request includes the necessary parameters, authentication information, and other details required by the AWS service. The SDK handles the complexities of signing the request and sending it over the network.\n\nThe AWS service processes the request and returns a response. The response contains data specific to the command invoked.  The SDK parses this response and makes it available to your application. The structure of the response is documented for each specific command in the AWS service's API reference.\n\n\n### Pagination\n\nMany AWS service operations return large datasets. To prevent overwhelming your application with a single massive response, the SDK supports *pagination*.  Instead of returning all data at once, the service returns results in smaller pages.  The SDK provides mechanisms to efficiently handle this pagination and retrieve all the data.  Typically, this involves making multiple API calls, each requesting the next \"page\" of results using tokens provided in the previous response.  The SDK often abstracts away the complexities of pagination, making it easy to iterate through all results.\n\n\n### Promises and Async/Await\n\nThe AWS SDK for JavaScript utilizes promises extensively.  Each command returns a promise, which represents the eventual result of the asynchronous operation.  This allows developers to use the familiar promise-based patterns for asynchronous programming in JavaScript.  This makes asynchronous operations more manageable and avoids callback hell.\n\n`async/await` is a modern JavaScript feature that improves the readability and maintainability of asynchronous code that uses promises.  It allows you to write asynchronous code that looks and behaves a bit like synchronous code. The AWS SDK strongly encourages the use of `async/await` for cleaner error handling and improved code structure.\n\n\n### Error Handling\n\nRobust error handling is crucial when interacting with AWS services. The SDK provides various mechanisms for handling errors:\n\n* **Callbacks:**  Many methods use callbacks to handle both successful responses and errors.  The callback function typically receives an `error` object as its first argument; if `error` is null, the operation was successful.\n\n* **Promises:**  Using promises, you can use `.then()` to handle successful responses and `.catch()` to handle errors.  The `.catch()` block receives the error object.\n\n* **Error Objects:**  Error objects returned by the SDK usually contain helpful information such as the error code (`code`), message (`message`), and potentially other details depending on the error.  Examine these properties to determine the cause and type of error.\n\n* **Retry Mechanisms:** The SDK includes built-in retry logic for certain transient errors, automatically attempting the request again after a delay. You can configure retry behavior through client settings.\n\nEffective error handling involves:\n\n1. **Checking for errors:** Always check for errors after making API calls.\n2. **Handling specific errors:**  Handle specific error types appropriately, perhaps implementing different strategies based on the error code.\n3. **Logging errors:** Log errors for debugging and monitoring purposes.\n4. **Graceful degradation:** Implement mechanisms to gracefully handle failures, preventing application crashes and providing informative messages to users.\n\n\nRemember to always consult the AWS service API documentation and the SDK's API reference for details on the specific errors a given operation might return.\n\n\n## Services\n\nThis section provides a high-level overview of how to interact with several popular AWS services using the AWS SDK for JavaScript.  For detailed information on each service and its API operations, refer to the official AWS documentation for that service and the AWS SDK for JavaScript API reference.\n\n### Amazon S3 (Simple Storage Service)\n\nThe S3 client allows you to manage objects (files) stored in Amazon S3 buckets.  Common operations include:\n\n* **Uploading objects:** `putObject()`\n* **Downloading objects:** `getObject()`\n* **Listing objects:** `listObjectsV2()`\n* **Creating buckets:** `createBucket()`\n* **Deleting objects and buckets:** `deleteObject()`, `deleteBucket()`\n\n\nExample (Uploading an object):\n\n```javascript\nconst { S3 } = require('aws-sdk');\nconst fs = require('node:fs');\n\nconst s3 = new S3();\n\nconst params = {\n  Bucket: 'your-bucket-name',\n  Key: 'my-file.txt',\n  Body: fs.createReadStream('path/to/my-file.txt')\n};\n\ns3.upload(params, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(`File uploaded successfully: ${data.Location}`);\n  }\n});\n```\n\nRemember to replace `\"your-bucket-name\"` and `\"path/to/my-file.txt\"` with your actual bucket name and file path.\n\n\n### Amazon EC2 (Elastic Compute Cloud)\n\nThe EC2 client provides functionalities for managing EC2 instances, including:\n\n* **Launching instances:** `runInstances()`\n* **Stopping and starting instances:** `stopInstances()`, `startInstances()`\n* **Terminating instances:** `terminateInstances()`\n* **Describing instances:** `describeInstances()`\n* **Managing security groups:**  Various methods for creating, modifying, and deleting security groups.\n\n\n### Amazon DynamoDB\n\nThe DynamoDB client enables interaction with NoSQL databases.  Key operations include:\n\n* **Creating tables:** `createTable()`\n* **Putting items:** `putItem()`\n* **Getting items:** `getItem()`\n* **Querying and scanning:** `query()`, `scan()`\n* **Updating items:** `updateItem()`\n* **Deleting items:** `deleteItem()`\n\n\n### Amazon Lambda\n\nThe Lambda client allows you to manage Lambda functions, such as:\n\n* **Creating functions:** `createFunction()`\n* **Updating functions:** `updateFunctionConfiguration()`\n* **Invoking functions:** `invoke()`\n* **Getting function details:** `getFunction()`\n* **Listing functions:** `listFunctions()`\n\n\n### Amazon API Gateway\n\nThe API Gateway client lets you manage RESTful APIs:\n\n* **Creating APIs:** `createRestApi()`\n* **Deploying APIs:** `createDeployment()`\n* **Managing resources and methods:**  Various methods for configuring API resources and their HTTP methods.\n\n\n### Amazon SNS (Simple Notification Service)\n\nThe SNS client handles publishing and subscribing to messages:\n\n* **Publishing messages:** `publish()`\n* **Creating topics:** `createTopic()`\n* **Subscribing to topics:** `subscribe()`\n* **Listing subscriptions:** `listSubscriptions()`\n\n\n### Amazon SQS (Simple Queue Service)\n\nThe SQS client manages message queues:\n\n* **Sending messages:** `sendMessage()`\n* **Receiving messages:** `receiveMessage()`\n* **Deleting messages:** `deleteMessage()`\n* **Creating queues:** `createQueue()`\n\n\n### Amazon RDS (Relational Database Service)\n\nThe RDS client allows for managing relational databases:\n\n* **Creating DB instances:** `createDBInstance()`\n* **Describing DB instances:** `describeDBInstances()`\n* **Starting and stopping DB instances:** `startDBInstance()`, `stopDBInstance()`\n\n\n### Amazon ECS (Elastic Container Service)\n\nThe ECS client enables managing containerized applications:\n\n* **Running tasks:** `runTask()`\n* **Listing tasks:** `listTasks()`\n* **Creating and managing clusters:**  Methods to create, update, and delete ECS clusters.\n\n\n### Amazon EKS (Elastic Kubernetes Service)\n\nThe EKS client allows you to manage Kubernetes clusters on AWS:\n\n* **Creating clusters:** `createCluster()`\n* **Updating clusters:** `updateClusterVersion()`\n* **Describing clusters:** `describeCluster()`\n\n\n### Other AWS Services\n\nThe AWS SDK for JavaScript provides clients for a vast number of other AWS services, including but not limited to:\n\n* **Amazon CloudWatch:** Monitoring and logging.\n* **Amazon Cognito:** User authentication and authorization.\n* **Amazon Kinesis:** Real-time data streaming.\n* **Amazon CloudFormation:** Infrastructure as code.\n* **Amazon IAM (Identity and Access Management):** User and resource management.\n\n\nConsult the AWS SDK for JavaScript API reference for a complete list of supported services and their corresponding clients and commands.  Each service's API has its own nuances, so always refer to the relevant AWS documentation for best practices and detailed information.\n\n\n## Advanced Topics\n\nThis section covers advanced concepts and techniques for working with the AWS SDK for JavaScript.\n\n### Working with multiple accounts and profiles\n\nThe AWS SDK supports managing multiple AWS accounts and profiles using the AWS shared credentials file (~/.aws/credentials) and the AWS shared config file (~/.aws/config).  Each profile in the credentials file specifies an access key ID, secret access key, and optionally a region. The config file allows you to specify additional parameters for each profile.\n\nTo use a specific profile, set the `AWS_PROFILE` environment variable to the name of your profile, or explicitly specify it in the client constructor:\n\n\n```javascript\nconst { S3 } = require('aws-sdk');\n\n// Using environment variable\nprocess.env.AWS_PROFILE = 'my-profile';\nconst s3 = new S3();\n\n// Or explicitly specifying the profile in the constructor\nconst s3 = new S3({ profile: 'my-profile' });\n\n// ... your S3 code ...\n```\n\n\n### Implementing IAM roles for security\n\nUsing IAM roles for EC2 instances or other AWS services is a significantly more secure approach than using access keys directly in your code.  IAM roles eliminate the need to manage and securely store access keys.  When running on an EC2 instance with an IAM role attached, the SDK automatically retrieves the temporary credentials associated with that role.  This is the recommended approach for production environments.\n\n\n### Using middleware\n\nMiddleware allows you to add custom logic to the request/response cycle of the SDK. This is useful for tasks such as:\n\n* **Logging:**  Log requests and responses for debugging or auditing.\n* **Customizing requests:** Add headers, modify parameters before a request is sent.\n* **Handling responses:** Process responses before they reach your application.\n\nThe SDK provides mechanisms for adding middleware using `addMiddleware` method on a client object.\n\n\n### Building custom clients\n\nIn some cases, you might need to create custom clients to interact with AWS services that are not directly supported by the SDK or to customize the behavior of existing clients beyond what middleware allows. The SDK's modular design enables this by allowing you to construct clients using the underlying `AWS.Service` class.\n\n\n### Integrating with other JavaScript frameworks\n\nThe AWS SDK for JavaScript is designed to be compatible with various JavaScript frameworks such as React, Angular, Vue.js, and others.  The integration is usually straightforward.  You'll typically use the SDK within your application's component structure.  Remember to handle asynchronous operations appropriately within the framework's context.\n\n\n### Testing your code\n\nThorough testing is crucial for robust applications.  Use testing frameworks like Jest, Mocha, or Jasmine to create unit tests and integration tests for your code.  Mock AWS service responses to avoid dependencies on real AWS resources during testing.\n\n\n### Debugging tips\n\n* **Enable logging:** Use the `AWS_SDK_CONSOLE_LOGGING=true` environment variable to enable detailed logging of requests and responses.\n* **Inspect error objects:**  Carefully examine error objects to identify the source and cause of errors.\n* **Use debugging tools:** Utilize browser developer tools (for browser-based applications) or Node.js debuggers to step through your code.\n* **Check AWS console:**  Consult the AWS Management Console to examine the state of your resources and identify potential problems.\n\n\n### Performance optimization\n\n* **Use appropriate SDK methods:** Choose efficient SDK methods optimized for your needs.\n* **Batch operations:** Use batch operations where available to reduce the number of API calls.\n* **Caching:** Implement caching mechanisms for frequently accessed data to reduce the load on AWS services.\n* **Optimize data transfer:** Use efficient data compression and transfer techniques.\n* **Asynchronous operations:** Utilize asynchronous operations to prevent blocking your application's main thread.\n\n\n### Security best practices\n\n* **Use IAM roles:**  Prioritize IAM roles over access keys whenever possible.\n* **Principle of least privilege:** Grant only the necessary permissions to your IAM users and roles.\n* **Regular security audits:** Perform regular security audits of your code and AWS configurations.\n* **Keep dependencies updated:** Keep your SDK and other dependencies up-to-date to benefit from security patches.\n* **Securely store credentials:** Never hardcode credentials directly into your code. Use environment variables or a secure secrets management service.\n* **Input validation:** Always validate user inputs to prevent injection attacks.\n* **HTTPS:** Ensure that all communication with AWS services is over HTTPS.\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **AWS:** Amazon Web Services – a suite of cloud computing services offered by Amazon.\n* **SDK:** Software Development Kit – a collection of software development tools.\n* **Client:**  In the context of the AWS SDK, a client represents a specific AWS service (e.g., S3 Client, EC2 Client).\n* **Command:** A method exposed by a client that corresponds to an API operation on an AWS service.\n* **Request:** A message sent by the SDK to an AWS service.\n* **Response:** A message received from an AWS service in response to a request.\n* **Promise:** An object representing the eventual completion (or failure) of an asynchronous operation.\n* **Middleware:** Custom functions that can intercept and modify requests or responses.\n* **IAM:** Identity and Access Management – a web service that helps you securely control access to AWS resources.\n* **IAM Role:**  An IAM entity that allows you to grant permissions to an AWS service or resource (e.g., an EC2 instance) without managing individual user credentials.\n* **Region:**  A geographical location where AWS services are deployed.\n* **Bucket:** In Amazon S3, a container for storing objects (files).\n* **Object:** In Amazon S3, a file stored within a bucket.\n* **Pagination:** A mechanism to retrieve large datasets in smaller chunks.\n\n\n### Error Codes and Messages\n\nThe AWS SDK for JavaScript returns error objects when API calls fail.  These objects typically contain a `code` property indicating the type of error and a `message` property providing a description.  The specific error codes and messages vary depending on the AWS service and the API operation. Refer to the documentation for each AWS service for a complete list of possible error codes and their meanings.  Common error codes include:\n\n* `AccessDeniedException`: Indicates insufficient permissions.\n* `ResourceNotFoundException`: The requested resource was not found.\n* `ThrottlingException`: Too many requests were made in a short period.\n* `RequestLimitExceeded`:  The request exceeded a service limit.\n* `InvalidParameterException`:  Invalid parameters were passed to the API call.\n\n\nFor detailed information on specific error codes and messages for a particular AWS service, refer to the AWS documentation for that service.\n\n\n### SDK Release Notes\n\nRelease notes for the AWS SDK for JavaScript are available [link to release notes].  These notes document new features, bug fixes, breaking changes, and other important information in each SDK release.  It is crucial to review the release notes before upgrading to a newer version of the SDK.\n\n\n### Contribution Guidelines\n\nIf you wish to contribute to the AWS SDK for JavaScript, please refer to our [link to contribution guidelines].  These guidelines outline the process for submitting bug reports, feature requests, and code contributions.  They specify coding style, testing requirements, and other important details.\n\n\n### Support and Community Resources\n\n* **AWS Documentation:** The official AWS documentation provides comprehensive information on AWS services and the AWS SDK for JavaScript.  [link to AWS documentation]\n* **AWS Forums:** Participate in the AWS forums to ask questions, share your knowledge, and engage with other developers. [link to AWS forums]\n* **Stack Overflow:** Use Stack Overflow to find answers to common questions and ask for help from the community.  Tag your questions with `aws-sdk-javascript`. [link to Stack Overflow]\n* **GitHub Issues:** Report bugs and feature requests via GitHub Issues for the AWS SDK for JavaScript repository. [link to GitHub repository]\n\n\nThis appendix provides essential supplemental information for effectively using the AWS SDK for JavaScript. Remember to regularly consult the official AWS documentation for the most up-to-date information.\n\n","srcMarkdownNoYaml":"\n## Introduction\n\n### What is the AWS SDK for JavaScript?\n\nThe AWS SDK for JavaScript is a comprehensive software development kit (SDK) that allows developers to easily interact with various AWS services from their JavaScript applications. It provides a consistent, user-friendly interface for accessing a wide range of AWS services, including Amazon S3, Amazon EC2, Amazon DynamoDB, and many more.  The SDK handles the complexities of authentication, signing requests, and managing responses, allowing developers to focus on building their applications. It supports both browser-based and Node.js environments.\n\n### Key Features and Benefits\n\n* **Simplified API:** The SDK offers a consistent and easy-to-use API across multiple AWS services, reducing the learning curve and development time.\n* **Comprehensive Service Coverage:** It supports a vast number of AWS services, providing access to a wide range of functionalities.\n* **Modular Design:** The SDK is modular, allowing you to install only the services you need, keeping your application size optimized.\n* **Promise-based API:**  The SDK uses Promises, enabling asynchronous operations in a clean and efficient manner.\n* **Automatic Retries and Error Handling:** The SDK includes built-in retry mechanisms and error handling to enhance application resilience.\n* **Cross-Platform Support:** Works with both Node.js (server-side) and browsers (client-side).\n* **Active Community and Support:** Benefits from a large and active community providing ample support and resources.\n\n\n### Target Audience\n\nThis manual is intended for developers who are building applications using JavaScript and need to integrate with AWS services.  It targets both frontend developers working in browsers and backend developers working with Node.js.  A basic understanding of JavaScript programming and familiarity with AWS concepts is helpful, but not strictly required.\n\n### Setting up your Environment\n\nBefore you begin using the AWS SDK for JavaScript, ensure you have the following:\n\n* **Node.js and npm (or yarn):** The AWS SDK for JavaScript is primarily used with Node.js.  Make sure you have a compatible version of Node.js and npm (Node Package Manager) or yarn installed on your system. You can download Node.js from [https://nodejs.org/](https://nodejs.org/).\n\n* **AWS Credentials:**  You need AWS credentials to access your AWS resources.  These credentials can be obtained in several ways, including using IAM users, roles, or temporary security credentials. For more information on managing credentials, refer to the AWS documentation on [IAM](https://aws.amazon.com/iam/).\n\n* **Text Editor or IDE:**  Choose a suitable text editor or Integrated Development Environment (IDE) for writing and running your JavaScript code.  Popular options include Visual Studio Code, Sublime Text, Atom, and WebStorm.\n\n### Installing the SDK\n\nThe AWS SDK for JavaScript uses npm (or yarn) for package management.  To install the SDK, open your terminal or command prompt and navigate to your project directory. Then, use the following command:\n\n\n```bash\nnpm install aws-sdk\n```\n\nor, if using yarn:\n\n```bash\nyarn add aws-sdk\n```\n\nThis command installs the core AWS SDK package.  You can then install individual service packages as needed.  For instance, to install only the S3 service, you could use:\n\n```bash\nnpm install aws-sdk/clients/s3\n```\n\nRemember to replace `s3` with the desired service name if you only need a specific AWS service.  Consult the AWS SDK for JavaScript API reference for a complete list of available services and their respective package names.\n\n\n## Getting Started\n\n### Creating your first AWS project\n\nTo create your first AWS project using the JavaScript SDK, follow these steps:\n\n1. **Create a new project directory:** Use your terminal or command prompt to create a new directory for your project.  For example: `mkdir my-aws-project` and then navigate into it using `cd my-aws-project`.\n\n2. **Initialize your project:** Initialize a Node.js project by running `npm init -y` (or `yarn init -y` if using yarn). This creates a `package.json` file.\n\n3. **Install the AWS SDK:** Install the AWS SDK for JavaScript as described in the previous section using `npm install aws-sdk` or `yarn add aws-sdk`.\n\n4. **Create a JavaScript file:** Create a new JavaScript file (e.g., `index.js`) within your project directory.  This is where you'll write your code.\n\n5. **Write your code:**  Start by importing the necessary AWS service client and then make your first API call (as described in the next sections).\n\n6. **Run your code:** Execute your code using `node index.js`.\n\n\n### Configuring AWS Credentials\n\nThe AWS SDK for JavaScript needs to know how to authenticate your requests to AWS.  You can configure your credentials in several ways:\n\n* **Environment Variables:** Set the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environment variables.  This is generally the least secure method but convenient for development.\n\n* **Shared Credentials File:** Create a credentials file (`~/.aws/credentials` on Linux/macOS, `%USERPROFILE%\\.aws\\credentials` on Windows) with your access key ID and secret access key. The format should be:\n\n```ini\n[default]\naws_access_key_id = YOUR_ACCESS_KEY_ID\naws_secret_access_key = YOUR_SECRET_ACCESS_KEY\n```\n\n* **IAM Roles (EC2):** If running on an EC2 instance, use an IAM role assigned to the instance. This is the most secure method for production environments.\n\n* **Programmatic Configuration:**  Pass the credentials directly to the AWS service client constructor.  This is less common but useful in certain scenarios.  See the SDK documentation for details.\n\n\n**Important Security Note:** Never hardcode your AWS credentials directly into your code.  Use environment variables or a shared credentials file, but prefer IAM roles for production systems.\n\n\n### Choosing a region\n\nAWS services are available in multiple regions around the world. You need to specify the region your application will interact with. You can set the region in several ways:\n\n* **Environment Variable:** Set the `AWS_REGION` environment variable.\n\n* **Shared Credentials File:** Add a `region` parameter within the `[default]` profile in your credentials file:\n\n```ini\n[default]\naws_access_key_id = YOUR_ACCESS_KEY_ID\naws_secret_access_key = YOUR_SECRET_ACCESS_KEY\nregion = us-west-2\n```\n\n* **Client Configuration:**  Pass the `region` parameter to the AWS service client constructor.\n\n\nFor example, if you want to use the `us-east-1` region, you would set `AWS_REGION=us-east-1`.  Choose a region close to your users for lower latency.\n\n\n### Making your first API call\n\nThis example demonstrates a simple S3 API call to list buckets:\n\n\n```javascript\nconst { S3 } = require('aws-sdk');\n\nconst s3 = new S3();\n\ns3.listBuckets((err, data) => {\n  if (err) {\n    console.error(\"Error:\", err);\n  } else {\n    console.log(\"Buckets:\", data.Buckets);\n  }\n});\n```\n\nThis code first imports the `S3` client from the AWS SDK. It then creates an `S3` object and calls the `listBuckets` method. The callback function handles both success and error cases. Remember to install the `aws-sdk` package as mentioned in previous sections.\n\n\n### Handling errors and exceptions\n\nThe AWS SDK for JavaScript uses callbacks or promises to handle asynchronous operations. Error handling is crucial to ensure robust applications.  In the callback example above, the `err` parameter in the callback function contains the error object if something goes wrong.  You can inspect the error object for details to understand the cause of the failure.\n\nFor promise-based calls, use `.then()` to handle successful responses and `.catch()` to handle errors:\n\n```javascript\nconst { S3 } = require('aws-sdk');\n\nconst s3 = new S3();\n\ns3.listBuckets()\n  .promise()\n  .then(data => {\n    console.log(\"Buckets:\", data.Buckets);\n  })\n  .catch(err => {\n    console.error(\"Error:\", err);\n  });\n\n```\n\nAlways include comprehensive error handling in your code to gracefully manage potential issues and provide informative error messages to users or log files.  Examine the error object's properties (like `code` and `message`) to determine the specific problem.  Consider implementing retry logic for transient errors.\n\n\n## Core Concepts\n\n### Clients and Commands\n\nThe AWS SDK for JavaScript is built around the concept of *clients* and *commands*.  A *client* represents a specific AWS service (e.g., S3, EC2, DynamoDB).  Each client exposes methods, often called *commands*, that correspond to the API operations available for that service.  These commands are used to interact with the AWS service.\n\nFor example, the `S3` client provides commands like `putObject` (to upload an object), `getObject` (to download an object), `listBuckets` (to list S3 buckets), and many others.  Each command takes input parameters specific to the API operation and returns a response (or an error).\n\n\n### Requests and Responses\n\nWhen you make an API call using a client command, the SDK constructs a request. This request includes the necessary parameters, authentication information, and other details required by the AWS service. The SDK handles the complexities of signing the request and sending it over the network.\n\nThe AWS service processes the request and returns a response. The response contains data specific to the command invoked.  The SDK parses this response and makes it available to your application. The structure of the response is documented for each specific command in the AWS service's API reference.\n\n\n### Pagination\n\nMany AWS service operations return large datasets. To prevent overwhelming your application with a single massive response, the SDK supports *pagination*.  Instead of returning all data at once, the service returns results in smaller pages.  The SDK provides mechanisms to efficiently handle this pagination and retrieve all the data.  Typically, this involves making multiple API calls, each requesting the next \"page\" of results using tokens provided in the previous response.  The SDK often abstracts away the complexities of pagination, making it easy to iterate through all results.\n\n\n### Promises and Async/Await\n\nThe AWS SDK for JavaScript utilizes promises extensively.  Each command returns a promise, which represents the eventual result of the asynchronous operation.  This allows developers to use the familiar promise-based patterns for asynchronous programming in JavaScript.  This makes asynchronous operations more manageable and avoids callback hell.\n\n`async/await` is a modern JavaScript feature that improves the readability and maintainability of asynchronous code that uses promises.  It allows you to write asynchronous code that looks and behaves a bit like synchronous code. The AWS SDK strongly encourages the use of `async/await` for cleaner error handling and improved code structure.\n\n\n### Error Handling\n\nRobust error handling is crucial when interacting with AWS services. The SDK provides various mechanisms for handling errors:\n\n* **Callbacks:**  Many methods use callbacks to handle both successful responses and errors.  The callback function typically receives an `error` object as its first argument; if `error` is null, the operation was successful.\n\n* **Promises:**  Using promises, you can use `.then()` to handle successful responses and `.catch()` to handle errors.  The `.catch()` block receives the error object.\n\n* **Error Objects:**  Error objects returned by the SDK usually contain helpful information such as the error code (`code`), message (`message`), and potentially other details depending on the error.  Examine these properties to determine the cause and type of error.\n\n* **Retry Mechanisms:** The SDK includes built-in retry logic for certain transient errors, automatically attempting the request again after a delay. You can configure retry behavior through client settings.\n\nEffective error handling involves:\n\n1. **Checking for errors:** Always check for errors after making API calls.\n2. **Handling specific errors:**  Handle specific error types appropriately, perhaps implementing different strategies based on the error code.\n3. **Logging errors:** Log errors for debugging and monitoring purposes.\n4. **Graceful degradation:** Implement mechanisms to gracefully handle failures, preventing application crashes and providing informative messages to users.\n\n\nRemember to always consult the AWS service API documentation and the SDK's API reference for details on the specific errors a given operation might return.\n\n\n## Services\n\nThis section provides a high-level overview of how to interact with several popular AWS services using the AWS SDK for JavaScript.  For detailed information on each service and its API operations, refer to the official AWS documentation for that service and the AWS SDK for JavaScript API reference.\n\n### Amazon S3 (Simple Storage Service)\n\nThe S3 client allows you to manage objects (files) stored in Amazon S3 buckets.  Common operations include:\n\n* **Uploading objects:** `putObject()`\n* **Downloading objects:** `getObject()`\n* **Listing objects:** `listObjectsV2()`\n* **Creating buckets:** `createBucket()`\n* **Deleting objects and buckets:** `deleteObject()`, `deleteBucket()`\n\n\nExample (Uploading an object):\n\n```javascript\nconst { S3 } = require('aws-sdk');\nconst fs = require('node:fs');\n\nconst s3 = new S3();\n\nconst params = {\n  Bucket: 'your-bucket-name',\n  Key: 'my-file.txt',\n  Body: fs.createReadStream('path/to/my-file.txt')\n};\n\ns3.upload(params, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(`File uploaded successfully: ${data.Location}`);\n  }\n});\n```\n\nRemember to replace `\"your-bucket-name\"` and `\"path/to/my-file.txt\"` with your actual bucket name and file path.\n\n\n### Amazon EC2 (Elastic Compute Cloud)\n\nThe EC2 client provides functionalities for managing EC2 instances, including:\n\n* **Launching instances:** `runInstances()`\n* **Stopping and starting instances:** `stopInstances()`, `startInstances()`\n* **Terminating instances:** `terminateInstances()`\n* **Describing instances:** `describeInstances()`\n* **Managing security groups:**  Various methods for creating, modifying, and deleting security groups.\n\n\n### Amazon DynamoDB\n\nThe DynamoDB client enables interaction with NoSQL databases.  Key operations include:\n\n* **Creating tables:** `createTable()`\n* **Putting items:** `putItem()`\n* **Getting items:** `getItem()`\n* **Querying and scanning:** `query()`, `scan()`\n* **Updating items:** `updateItem()`\n* **Deleting items:** `deleteItem()`\n\n\n### Amazon Lambda\n\nThe Lambda client allows you to manage Lambda functions, such as:\n\n* **Creating functions:** `createFunction()`\n* **Updating functions:** `updateFunctionConfiguration()`\n* **Invoking functions:** `invoke()`\n* **Getting function details:** `getFunction()`\n* **Listing functions:** `listFunctions()`\n\n\n### Amazon API Gateway\n\nThe API Gateway client lets you manage RESTful APIs:\n\n* **Creating APIs:** `createRestApi()`\n* **Deploying APIs:** `createDeployment()`\n* **Managing resources and methods:**  Various methods for configuring API resources and their HTTP methods.\n\n\n### Amazon SNS (Simple Notification Service)\n\nThe SNS client handles publishing and subscribing to messages:\n\n* **Publishing messages:** `publish()`\n* **Creating topics:** `createTopic()`\n* **Subscribing to topics:** `subscribe()`\n* **Listing subscriptions:** `listSubscriptions()`\n\n\n### Amazon SQS (Simple Queue Service)\n\nThe SQS client manages message queues:\n\n* **Sending messages:** `sendMessage()`\n* **Receiving messages:** `receiveMessage()`\n* **Deleting messages:** `deleteMessage()`\n* **Creating queues:** `createQueue()`\n\n\n### Amazon RDS (Relational Database Service)\n\nThe RDS client allows for managing relational databases:\n\n* **Creating DB instances:** `createDBInstance()`\n* **Describing DB instances:** `describeDBInstances()`\n* **Starting and stopping DB instances:** `startDBInstance()`, `stopDBInstance()`\n\n\n### Amazon ECS (Elastic Container Service)\n\nThe ECS client enables managing containerized applications:\n\n* **Running tasks:** `runTask()`\n* **Listing tasks:** `listTasks()`\n* **Creating and managing clusters:**  Methods to create, update, and delete ECS clusters.\n\n\n### Amazon EKS (Elastic Kubernetes Service)\n\nThe EKS client allows you to manage Kubernetes clusters on AWS:\n\n* **Creating clusters:** `createCluster()`\n* **Updating clusters:** `updateClusterVersion()`\n* **Describing clusters:** `describeCluster()`\n\n\n### Other AWS Services\n\nThe AWS SDK for JavaScript provides clients for a vast number of other AWS services, including but not limited to:\n\n* **Amazon CloudWatch:** Monitoring and logging.\n* **Amazon Cognito:** User authentication and authorization.\n* **Amazon Kinesis:** Real-time data streaming.\n* **Amazon CloudFormation:** Infrastructure as code.\n* **Amazon IAM (Identity and Access Management):** User and resource management.\n\n\nConsult the AWS SDK for JavaScript API reference for a complete list of supported services and their corresponding clients and commands.  Each service's API has its own nuances, so always refer to the relevant AWS documentation for best practices and detailed information.\n\n\n## Advanced Topics\n\nThis section covers advanced concepts and techniques for working with the AWS SDK for JavaScript.\n\n### Working with multiple accounts and profiles\n\nThe AWS SDK supports managing multiple AWS accounts and profiles using the AWS shared credentials file (~/.aws/credentials) and the AWS shared config file (~/.aws/config).  Each profile in the credentials file specifies an access key ID, secret access key, and optionally a region. The config file allows you to specify additional parameters for each profile.\n\nTo use a specific profile, set the `AWS_PROFILE` environment variable to the name of your profile, or explicitly specify it in the client constructor:\n\n\n```javascript\nconst { S3 } = require('aws-sdk');\n\n// Using environment variable\nprocess.env.AWS_PROFILE = 'my-profile';\nconst s3 = new S3();\n\n// Or explicitly specifying the profile in the constructor\nconst s3 = new S3({ profile: 'my-profile' });\n\n// ... your S3 code ...\n```\n\n\n### Implementing IAM roles for security\n\nUsing IAM roles for EC2 instances or other AWS services is a significantly more secure approach than using access keys directly in your code.  IAM roles eliminate the need to manage and securely store access keys.  When running on an EC2 instance with an IAM role attached, the SDK automatically retrieves the temporary credentials associated with that role.  This is the recommended approach for production environments.\n\n\n### Using middleware\n\nMiddleware allows you to add custom logic to the request/response cycle of the SDK. This is useful for tasks such as:\n\n* **Logging:**  Log requests and responses for debugging or auditing.\n* **Customizing requests:** Add headers, modify parameters before a request is sent.\n* **Handling responses:** Process responses before they reach your application.\n\nThe SDK provides mechanisms for adding middleware using `addMiddleware` method on a client object.\n\n\n### Building custom clients\n\nIn some cases, you might need to create custom clients to interact with AWS services that are not directly supported by the SDK or to customize the behavior of existing clients beyond what middleware allows. The SDK's modular design enables this by allowing you to construct clients using the underlying `AWS.Service` class.\n\n\n### Integrating with other JavaScript frameworks\n\nThe AWS SDK for JavaScript is designed to be compatible with various JavaScript frameworks such as React, Angular, Vue.js, and others.  The integration is usually straightforward.  You'll typically use the SDK within your application's component structure.  Remember to handle asynchronous operations appropriately within the framework's context.\n\n\n### Testing your code\n\nThorough testing is crucial for robust applications.  Use testing frameworks like Jest, Mocha, or Jasmine to create unit tests and integration tests for your code.  Mock AWS service responses to avoid dependencies on real AWS resources during testing.\n\n\n### Debugging tips\n\n* **Enable logging:** Use the `AWS_SDK_CONSOLE_LOGGING=true` environment variable to enable detailed logging of requests and responses.\n* **Inspect error objects:**  Carefully examine error objects to identify the source and cause of errors.\n* **Use debugging tools:** Utilize browser developer tools (for browser-based applications) or Node.js debuggers to step through your code.\n* **Check AWS console:**  Consult the AWS Management Console to examine the state of your resources and identify potential problems.\n\n\n### Performance optimization\n\n* **Use appropriate SDK methods:** Choose efficient SDK methods optimized for your needs.\n* **Batch operations:** Use batch operations where available to reduce the number of API calls.\n* **Caching:** Implement caching mechanisms for frequently accessed data to reduce the load on AWS services.\n* **Optimize data transfer:** Use efficient data compression and transfer techniques.\n* **Asynchronous operations:** Utilize asynchronous operations to prevent blocking your application's main thread.\n\n\n### Security best practices\n\n* **Use IAM roles:**  Prioritize IAM roles over access keys whenever possible.\n* **Principle of least privilege:** Grant only the necessary permissions to your IAM users and roles.\n* **Regular security audits:** Perform regular security audits of your code and AWS configurations.\n* **Keep dependencies updated:** Keep your SDK and other dependencies up-to-date to benefit from security patches.\n* **Securely store credentials:** Never hardcode credentials directly into your code. Use environment variables or a secure secrets management service.\n* **Input validation:** Always validate user inputs to prevent injection attacks.\n* **HTTPS:** Ensure that all communication with AWS services is over HTTPS.\n\n\n\n## Appendix\n\n### Glossary of Terms\n\n* **AWS:** Amazon Web Services – a suite of cloud computing services offered by Amazon.\n* **SDK:** Software Development Kit – a collection of software development tools.\n* **Client:**  In the context of the AWS SDK, a client represents a specific AWS service (e.g., S3 Client, EC2 Client).\n* **Command:** A method exposed by a client that corresponds to an API operation on an AWS service.\n* **Request:** A message sent by the SDK to an AWS service.\n* **Response:** A message received from an AWS service in response to a request.\n* **Promise:** An object representing the eventual completion (or failure) of an asynchronous operation.\n* **Middleware:** Custom functions that can intercept and modify requests or responses.\n* **IAM:** Identity and Access Management – a web service that helps you securely control access to AWS resources.\n* **IAM Role:**  An IAM entity that allows you to grant permissions to an AWS service or resource (e.g., an EC2 instance) without managing individual user credentials.\n* **Region:**  A geographical location where AWS services are deployed.\n* **Bucket:** In Amazon S3, a container for storing objects (files).\n* **Object:** In Amazon S3, a file stored within a bucket.\n* **Pagination:** A mechanism to retrieve large datasets in smaller chunks.\n\n\n### Error Codes and Messages\n\nThe AWS SDK for JavaScript returns error objects when API calls fail.  These objects typically contain a `code` property indicating the type of error and a `message` property providing a description.  The specific error codes and messages vary depending on the AWS service and the API operation. Refer to the documentation for each AWS service for a complete list of possible error codes and their meanings.  Common error codes include:\n\n* `AccessDeniedException`: Indicates insufficient permissions.\n* `ResourceNotFoundException`: The requested resource was not found.\n* `ThrottlingException`: Too many requests were made in a short period.\n* `RequestLimitExceeded`:  The request exceeded a service limit.\n* `InvalidParameterException`:  Invalid parameters were passed to the API call.\n\n\nFor detailed information on specific error codes and messages for a particular AWS service, refer to the AWS documentation for that service.\n\n\n### SDK Release Notes\n\nRelease notes for the AWS SDK for JavaScript are available [link to release notes].  These notes document new features, bug fixes, breaking changes, and other important information in each SDK release.  It is crucial to review the release notes before upgrading to a newer version of the SDK.\n\n\n### Contribution Guidelines\n\nIf you wish to contribute to the AWS SDK for JavaScript, please refer to our [link to contribution guidelines].  These guidelines outline the process for submitting bug reports, feature requests, and code contributions.  They specify coding style, testing requirements, and other important details.\n\n\n### Support and Community Resources\n\n* **AWS Documentation:** The official AWS documentation provides comprehensive information on AWS services and the AWS SDK for JavaScript.  [link to AWS documentation]\n* **AWS Forums:** Participate in the AWS forums to ask questions, share your knowledge, and engage with other developers. [link to AWS forums]\n* **Stack Overflow:** Use Stack Overflow to find answers to common questions and ask for help from the community.  Tag your questions with `aws-sdk-javascript`. [link to Stack Overflow]\n* **GitHub Issues:** Report bugs and feature requests via GitHub Issues for the AWS SDK for JavaScript repository. [link to GitHub repository]\n\n\nThis appendix provides essential supplemental information for effectively using the AWS SDK for JavaScript. Remember to regularly consult the official AWS documentation for the most up-to-date information.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"aws-sdk-for-javascript.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"AWS SDK for JavaScript - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}