{"title":"Chart.js - Documentation","markdown":{"yaml":{"title":"Chart.js - Documentation","categories":["JavaScript Libraries and Functions"]},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\n### Installation\n\nChart.js can be integrated into your project using several methods:\n\n* **CDN:** The easiest way to get started is by including Chart.js via a CDN. Add the following `<script>` tag to your HTML file's `<head>` or before the closing `</body>` tag:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n```\n\n* **NPM:** For projects using npm (Node Package Manager), install Chart.js using:\n\n```bash\nnpm install chart.js\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n```\n\n\n* **Yarn:** If you're using Yarn, use:\n\n```bash\nyarn add chart.js\n```\n\n  And then import similarly to the npm example.\n\n* **Download:** You can also download the Chart.js library directly from the [GitHub releases](https://github.com/chartjs/Chart.js/releases) page.  Extract the contents and include the `chart.min.js` or `chart.js` file in your project.\n\n\n### Basic Chart Example\n\nThis example demonstrates creating a simple bar chart:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Chart.js Example</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script> </head>\n<body>\n  <canvas id=\"myChart\"></canvas>\n  <script>\n    const ctx = document.getElementById('myChart').getContext('2d');\n    const myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n          label: '# of Votes',\n          data: [12, 19, 3, 5, 2, 3],\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.2)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(255, 206, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)',\n            'rgba(255, 159, 64, 0.2)'\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)'\n          ],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  </script>\n</body>\n</html>\n```\n\n### Including Chart.js in your project\n\nAfter installing Chart.js (using one of the methods described above), you need to include it in your project.  For CDN inclusion, the `<script>` tag is sufficient. For npm or yarn installations, you'll need to import it into your Javascript file as shown in the Installation section.  Ensure that the script tag (for CDN) or the import statement (for npm/yarn) is placed *after* the `<canvas>` element in your HTML, or ensure proper asynchronous loading mechanisms are implemented.\n\n\n### First steps with Chart.js\n\nOnce included, creating a chart involves these basic steps:\n\n1. **Get the canvas element:** Obtain a reference to the `<canvas>` element where the chart will be rendered using `document.getElementById('yourCanvasId').getContext('2d');`.  Replace `yourCanvasId` with the actual ID of your canvas.\n\n2. **Create a new Chart instance:** Instantiate a new Chart object, providing the canvas context and a configuration object. The configuration includes the chart type (`'bar'`, `'line'`, `'pie'`, etc.), data (labels and datasets), and options (like title, legend, scales, etc.).\n\n3. **Customize (optional):** Explore the extensive options available to customize the chart's appearance, behavior, and data representation.  The Chart.js documentation provides comprehensive details on chart types and customization options.\n\n\nRemember to replace placeholders like  `'yourCanvasId'` with your actual element IDs.  Consult the Chart.js documentation for detailed information on data structures, configuration options, and available chart types.\n\n\n## Chart Types\n\n### Line Charts\n\nLine charts are used to display data as a series of points connected by straight lines.  They're ideal for showing trends over time or other continuous variables.  Key configuration options include:\n\n* **`data.datasets`:**  Each dataset contains an array of `data` points (y-axis values) corresponding to the `data.labels` (x-axis values).\n* **`options.scales`:**  Customize the x and y axes, including labels, ticks, and scaling.  You can use logarithmic or time scales for specific data types.\n* **`options.elements.line`:** Configure the line's appearance, including tension (curve smoothness), border width, and color.\n* **`options.plugins.tooltip`:**  Control the appearance and behavior of the tooltips displayed when hovering over data points.\n\n\n### Bar Charts\n\nBar charts represent data as rectangular bars, making comparisons between categories easy.  They can be vertical or horizontal.  Key configuration options include:\n\n* **`data.datasets`:** Each dataset contains an array of `data` values representing the height (or width for horizontal bars) of the bars.  `data.labels` define the categories on the x (or y) axis.\n* **`options.indexAxis`:** Set to 'x' for vertical bars (default) or 'y' for horizontal bars.\n* **`options.scales`:** Customize the axes, including labels, ticks, and scaling (e.g., setting a minimum value).\n* **`options.plugins.legend`:**  Control the display and positioning of the legend.\n* **`options.elements.bar`:** Configure bar appearance, like border width and color.\n\n\n### Pie and Doughnut Charts\n\nPie and doughnut charts display proportions of a whole.  A doughnut chart leaves a hole in the center.  Key configuration options include:\n\n* **`data.datasets`:** Each dataset provides an array of `data` values representing the slice sizes.  `data.labels` identify each slice.\n* **`options.cutout`:** (Doughnut charts only) Controls the size of the central hole.  A value of 0 results in a pie chart.\n* **`options.rotation`:** Rotates the chart starting from the 0 degree position.\n* **`options.circumference`:** Sets the chart's circumference; useful to create half-circle charts.\n* **`options.plugins.legend`:** Controls the legend's display and position.\n* **`options.elements.arc`:** Configure the appearance of the chart segments including border width and color.\n\n\n### Scatter Charts\n\nScatter charts display data as individual points, useful for showing relationships between two variables.  Key configuration options include:\n\n* **`data.datasets`:** Each dataset has an array of objects, each object representing a point with `x` and `y` properties.\n* **`options.scales`:**  Configure the x and y axes, including scales and labels.\n* **`options.elements.point`:**  Customize the appearance of the data points (size, color, border).\n\n\n### Bubble Charts\n\nBubble charts are an extension of scatter charts where the size of each point represents a third variable.  Configuration is similar to scatter charts, with the addition of:\n\n* **`data.datasets`:** Each dataset point object will include an additional `r` property to define the radius of the bubble.\n\n\n### Radar Charts\n\nRadar charts (also known as star charts) display data as a series of points connected by lines, forming a polygon.  Useful for comparing multiple variables against a central point. Key configuration options include:\n\n* **`data.labels`:** Define the labels for each axis.\n* **`data.datasets`:** Each dataset represents a series of values for the axes.\n* **`options.scale`:** Configure the scale of the radar chart.\n* **`options.elements`:** Customize the appearance of the lines and points.\n\n\n### Polar Area Charts\n\nPolar area charts are similar to radar charts, but the area enclosed by the lines is filled with color.  The area of each segment is proportional to its value. Key configuration options are similar to radar charts, focusing on data representation and visual styling.  Remember that the area, not just the length of the lines, represents the data values.\n\n\n## Chart Configuration\n\n### Data Structure\n\nChart.js uses a consistent data structure across all chart types. The core components are:\n\n* **`data.labels`:** An array of strings providing labels for the data points (e.g., categories, time stamps).  These labels are used for the x-axis in most chart types.\n\n* **`data.datasets`:** An array of objects, each representing a dataset.  Each dataset object typically contains:\n\n    * **`label`:**  A string providing a name or label for the dataset (used in the legend).\n    * **`data`:** An array of numerical values representing the data points for this dataset.  The length of this array should match the length of `data.labels`.\n    * **`backgroundColor`:** (Optional) An array of colors for the background of each data point (bars, pie slices, etc.).\n    * **`borderColor`:** (Optional) An array of colors for the borders of each data point.\n    * **`borderWidth`:** (Optional)  The width of the border around each data point.\n    * **`pointStyle`, `tension`, `borderDash`, etc.:** Other properties specific to the chart type (e.g., `tension` for line charts).\n\n\nThe structure is flexible and adapts to the chart type.  For example, scatter charts use x and y coordinates within the `data` array, and bubble charts also include a radius value.\n\n\n### Chart Options\n\nChart options provide extensive control over the chart's appearance and behavior.  These options are passed as a single object to the Chart constructor.  Key option categories include:\n\n* **`responsive`:** (Boolean) Enables responsive resizing of the chart to fit its container.  Defaults to `true`.\n* **`maintainAspectRatio`:** (Boolean)  Maintains the chart's aspect ratio when resizing.  Defaults to `true`.\n* **`animation`:**  Configures chart animation (see the Animations section below).\n* **`plugins`:**  Configures chart plugins (see the Plugins section below).\n* **`events`:** An array of events the chart will listen to (e.g., `'click'`, `'mousemove'`).\n\n\n### Scales (Axes)\n\nScales define the axes of the chart.  Options are specified within the `options.scales` object.  You can configure separate options for x and y axes (and even additional axes for certain chart types). Common options include:\n\n* **`type`:** The type of scale (e.g., `'linear'`, `'logarithmic'`, `'time'`, `'category'`).\n* **`position`:** The position of the scale ('top', 'bottom', 'left', 'right').\n* **`title`:**  An object to configure the title of the axis.\n* **`ticks`:** An object with options to customize the ticks (labels) on the axis (e.g., `min`, `max`, `stepSize`, `callback` for custom formatting).\n* **`grid`:**  An object with options to customize grid lines.\n\n\n### Legends\n\nLegends display labels for each dataset in the chart. They can be customized through:\n\n* **`options.plugins.legend.display`:** Enable or disable the legend.\n* **`options.plugins.legend.position`:** Set the legend's position ('top', 'bottom', 'left', 'right').\n* **`options.plugins.legend.labels`:**  Customize the appearance of legend labels (font, color, etc.).\n\n\n### Titles\n\nChart titles are configured using:\n\n* **`options.plugins.title.display`:** Enable or disable the title.\n* **`options.plugins.title.text`:** The title text.\n* **`options.plugins.title.position`:** The title's position ('top', 'bottom', 'left', 'right').\n* **`options.plugins.title.font`:** Font settings for the title.\n\n\n### Tooltips\n\nTooltips provide interactive information when hovering over data points.  They are customized through:\n\n* **`options.plugins.tooltip.enabled`:** Enable or disable tooltips.\n* **`options.plugins.tooltip.mode`:** Controls which data points are included in tooltips (e.g., 'nearest', 'index').\n* **`options.plugins.tooltip.callbacks`:** Allows customization of tooltip labels and other content.\n* **`options.plugins.tooltip.position`:**  Controls tooltip positioning.\n\n\n### Plugins\n\nPlugins extend Chart.js's functionality.  They're registered using `Chart.register(plugin)`, and configured within `options.plugins`.  Plugins add features like annotations, zoom/pan, data export, and more. Refer to the plugin's specific documentation for configuration details.\n\n\n### Responsive Design\n\nChart.js is responsive by default (`responsive: true`).  The chart automatically adjusts its size to fit its container.  You can control aspect ratio using `maintainAspectRatio`.\n\n\n### Animations\n\nChart animations can be customized using the `options.animation` object.  Key options include:\n\n* **`duration`:** The animation duration in milliseconds.\n* **`easing`:** The easing function used for animation.\n* **`onComplete`:** A callback function executed when the animation completes.\n*  Individual animation options for different chart elements (e.g., `animateScale`, `animateRotate`).  Setting `animation: false` disables all animations.\n\n\n\n## Data Handling\n\n### Working with datasets\n\nDatasets are the core of your chart data. They're managed within the `data.datasets` array. Each dataset is an object, and you can add, remove, or modify datasets to dynamically update the chart.\n\n* **Adding datasets:** Push a new dataset object to the `data.datasets` array.  Ensure that the new dataset's `data` array has the same length as `data.labels` if applicable to the chart type.\n\n* **Removing datasets:** Use array methods like `splice` to remove datasets from `data.datasets`. You'll need to update the chart afterward (see \"Updating Charts\").\n\n* **Modifying datasets:**  Directly modify properties of existing dataset objects (e.g., changing `data` values, `backgroundColor`, etc.).  Again, update the chart afterward.\n\n* **Data Structure Consistency:** Maintain consistent data structures within `data.datasets`.  Mismatched data lengths or inconsistent data types can lead to errors.\n\n\n### Updating Charts\n\nAfter modifying the chart's data or configuration, you must update the chart to reflect the changes.  This is done using the `chart.update()` method.  For example:\n\n```javascript\n// ... chart creation code ...\n\n// Modify data\nmyChart.data.datasets[0].data = [10, 20, 30, 40];\n\n// Update the chart\nmyChart.update();\n```\n\nThe `update()` method redraws the chart with the new data.  You can optionally pass a configuration object to `update()` to control the animation during the update process.\n\n\n### Data labels and formatting\n\nData labels are usually handled automatically by Chart.js based on the chart type.  However, you can significantly customize them.\n\n* **`options.plugins.tooltip.callbacks`:** For tooltips, customize the content using callback functions.  You can format numbers, dates, and other data types within these callbacks.\n\n* **`options.scales.x.ticks.callback` and `options.scales.y.ticks.callback`:** For axis labels, use callback functions to format the tick labels.\n\n* **Plugins:**  Several plugins are available to add data labels directly onto the chart elements.  These plugins often provide detailed customization options.\n\n\n### Handling large datasets\n\nChart.js handles large datasets relatively efficiently, but performance can degrade for extremely large datasets (thousands or tens of thousands of data points).  Optimization strategies include:\n\n* **Data reduction:**  If possible, reduce the amount of data displayed without losing essential information (e.g., averaging or downsampling data).\n\n* **Plugins:** Explore plugins designed to efficiently handle large datasets.  Some plugins offer advanced techniques like rendering only visible data points or using canvas optimization strategies.\n\n* **Chunking data:**  Consider breaking large datasets into smaller chunks and rendering them dynamically.\n\n\n### Real-time data updates\n\nUpdating charts with real-time data requires continuous updates using `chart.update()`.  Common approaches include:\n\n* **`setInterval` or `requestAnimationFrame`:** Use these functions to periodically fetch and update data.  `requestAnimationFrame` is preferred for smoother animations tied to the browser's refresh rate.\n\n* **WebSockets:** For high-frequency data updates, WebSockets provide a more efficient communication channel between the server and the client.\n\n* **Efficient Updates:** Minimize chart updates by only updating the necessary data points instead of redrawing the entire chart each time.  Techniques like data diffing can help.\n\n\nRemember that frequent updates can significantly impact performance.  Choose your approach carefully based on the data frequency and the desired performance level.\n\n\n## Advanced Techniques\n\n### Customizing Charts\n\nBeyond the standard configuration options, Chart.js offers powerful customization capabilities:\n\n* **Custom Chart Types:** While Chart.js provides built-in chart types, you can create entirely new chart types extending the core Chart class.  This requires a deeper understanding of Chart.js's internal workings and the use of its API.\n\n* **Custom Drawing:** You can directly draw on the chart's canvas using the chart's context (`chart.ctx`) to add custom elements or annotations.  This provides maximum flexibility, but requires careful coordination with Chart.js's rendering process.\n\n* **Extending Chart Elements:** Customize the rendering of existing chart elements (bars, lines, points, etc.) by creating custom element classes that extend the default classes.  This allows for modification of how elements are drawn and styled.\n\n* **Data Transformations:** Pre-process data before feeding it to the chart.  This enables tasks like data normalization, aggregation, or applying custom transformations to tailor the chart to specific needs.\n\n\n### Creating reusable chart components\n\nFor complex applications or when creating many similar charts, creating reusable components improves code organization and maintainability. This can be done using various techniques:\n\n* **JavaScript Classes:** Create a class encapsulating the chart configuration and data handling logic.  This allows for easy instantiation of multiple charts with consistent configurations.\n\n* **React, Vue, Angular, etc.:** If using a framework, leverage its component model to create reusable chart components. These components encapsulate the chart instantiation and configuration logic, simplifying their integration into your application.\n\n* **Functions:**  Create functions to generate chart configuration objects, thereby promoting code reuse and reducing repetition.\n\n* **Shared Configuration:** Define a base configuration object and extend it for specific chart instances, minimizing duplicated settings.\n\n\n### Chart Interactions\n\nChart.js provides built-in interaction capabilities (tooltips, hover effects).  More advanced interactions can be implemented:\n\n* **Event Handling:** Use Chart.js events (see \"Working with Events\") to respond to user actions (clicks, hovers) and trigger custom actions.\n\n* **Custom Controls:** Create custom controls outside the chart canvas to manipulate the chart's data or configuration (e.g., zooming, panning, filtering).\n\n* **Drag-and-drop:**  Plugins or custom implementations can add drag-and-drop functionality to manipulate chart data points or elements.\n\n\n### Working with Events\n\nChart.js emits various events during its lifecycle and in response to user interactions.  You can listen for these events and trigger custom actions.\n\n* **Chart lifecycle events:** Events such as `beforeInit`, `afterInit`, `beforeUpdate`, `afterUpdate`, etc., allow you to execute code at different stages of the chart's lifecycle.\n\n* **User interaction events:** Events such as `click`, `mousemove`, `mouseout` allow you to respond to user actions on the chart.\n\n  To listen to events, use the `chart.addEventListener` method:\n\n```javascript\nmyChart.addEventListener('click', function(event, array){\n    // Handle click event\n    console.log(event, array);\n});\n```\n\nThe event object provides context about the interaction, and `array` contains information about the chart elements involved (if any).\n\n\n\n### Integrating with other libraries\n\nChart.js integrates well with other JavaScript libraries:\n\n* **Data Manipulation Libraries:** Libraries such as D3.js or Lodash can be used to preprocess and transform chart data before feeding it to Chart.js.\n\n* **UI Frameworks:**  Integrate Chart.js into frameworks like React, Vue, or Angular using their component models for seamless integration into your application architecture.\n\n* **Data Visualization Libraries:** Other libraries might provide complementary functionalities; for example, a library focusing on map integration could be combined with Chart.js for visualizing geographical data.\n\n* **Plugins:** Many third-party plugins extend Chart.js's capabilities by providing features such as advanced annotations, zooming, or exporting chart data in various formats.  These plugins typically simplify the integration process.\n\n\nRemember to check the documentation of both libraries to ensure compatibility and understand how to correctly handle data exchange and event communication.\n\n\n## Scales and Axes\n\nChart.js offers a variety of built-in scale types to represent data on the axes.  The choice of scale depends on the nature of your data and how you want to visualize it.  Each scale type has specific options for customization.  These options are generally accessed through the `options.scales` object in the chart configuration.\n\n### Linear Scale\n\nThe linear scale is the most common scale type, representing data linearly.  It is suitable for numerical data that is evenly spaced.  Key options include:\n\n* **`min` and `max`:** Explicitly set the minimum and maximum values for the scale.  If not set, Chart.js automatically determines these based on your data.\n* **`beginAtZero`:** Sets whether the scale should begin at zero.\n* **`stepSize`:** Defines the interval between ticks on the axis.\n* **`ticks.callback`:** Allows custom formatting of tick labels.  This is particularly useful for adding units or applying specific formatting to the numerical values.\n\n\n### Logarithmic Scale\n\nThe logarithmic scale is used when data spans several orders of magnitude.  It represents data on a logarithmic scale, compressing large ranges of values into a more manageable display.  It's suitable for data with exponential growth or decay.  Options similar to linear scales apply, but with some logarithmic-specific additions such as:\n\n* **`base`:** The base of the logarithm (e.g., 10 for a base-10 logarithmic scale).\n\n\n### Time Scale\n\nThe time scale is designed for time-series data.  It automatically handles various time units (seconds, minutes, hours, days, etc.) and formats the axis labels accordingly.  It's crucial for effectively representing time-dependent data.  Key options include:\n\n* **`unit`:** Sets the time unit for the scale (e.g., 'second', 'minute', 'hour', 'day', 'month', 'year').  Chart.js automatically selects an appropriate unit if not explicitly specified.\n* **`parser`:** A custom function to parse time data if it's not in a standard format.\n* **`tooltipFormat`:**  A format string for displaying time data in tooltips (using moment.js or Luxon formatting).\n\n\n### Category Scale\n\nThe category scale is used for categorical data, where data points are associated with distinct categories rather than numerical values. The labels for each category are taken from `data.labels`. This scale is commonly used with bar charts, pie charts, and other charts displaying discrete categories.  Key options:\n\n* **`labels`:**  While generally taken from `data.labels`, you can override them here.\n* **`categoryPercentage` and `barPercentage`:**  (Specifically for bar charts) control the spacing between bars within a category and between different categories.\n\n\n### Radial Linear Scale\n\nThe radial linear scale is used in radar and polar area charts. It represents data as a series of points radiating from a central point.  Options allow control over the number of points, angles, and labels. Key options include:\n\n* **`angleLines`:** Configures the appearance of lines radiating from the center.\n* **`pointLabels`:** Configures the appearance and positioning of labels for each point.\n* **`beginAtZero`:**  Similar to linear scales, determines if the scale starts at zero.\n\n\n\n### Custom Scales\n\nFor highly specialized data or visualization needs, you can create custom scales.  This involves extending Chart.js's scale classes and implementing custom methods for determining tick positions, formatting labels, and drawing the scale.  This is an advanced technique requiring a thorough understanding of Chart.js's internal architecture.  Refer to Chart.js's documentation for detailed information on creating custom scales. This generally involves creating a class that extends one of Chart.js's scale classes and implementing the necessary methods for generating ticks, determining tick positions, and formatting labels.\n\n\n## Plugins and Extensions\n\nChart.js's plugin architecture allows for extending its functionality without modifying its core code.  Plugins add features like annotations, zooming, data exporting, and much more.\n\n\n### Plugin Architecture\n\nA Chart.js plugin is a JavaScript object with specific methods that hook into different stages of the chart's lifecycle. The core methods are:\n\n* **`id`:** A unique identifier for the plugin.\n* **`beforeInit`:** Executed before the chart is initialized.\n* **`afterInit`:** Executed after the chart is initialized.\n* **`beforeUpdate`:** Executed before the chart is updated.\n* **`afterUpdate`:** Executed after the chart is updated.\n* **`beforeLayout`:** Executed before the chart layout is calculated.\n* **`afterLayout`:** Executed after the chart layout is calculated.\n* **`beforeDraw`:** Executed before the chart is drawn.\n* **`afterDraw`:** Executed after the chart is drawn.\n* **`beforeDatasetsDraw`:** Executed before datasets are drawn.\n* **`afterDatasetsDraw`:** Executed after datasets are drawn.\n* **`beforeDatasetDraw`:** Executed before each dataset is drawn.\n* **`afterDatasetDraw`:** Executed after each dataset is drawn.\n* **`beforeRender`:** Executed before rendering.\n* **`afterRender`:** Executed after rendering.\n* **`beforeElements`:** Executed before elements are drawn.\n* **`afterElements`:** Executed after elements are drawn.\n* **`destroy`:** Executed when the chart is destroyed.\n\n\nThese methods allow plugins to interact with the chart at various stages of its creation and update process.  For example, a plugin could add annotations in `afterDraw` or handle user interactions in `afterEvent`.\n\n\n### Creating Custom Plugins\n\nTo create a custom plugin, define a JavaScript object with the `id` and the hook methods you need.  For instance, a plugin to add a title could look like this:\n\n```javascript\nconst myPlugin = {\n  id: 'myPlugin',\n  beforeDraw: (chart) => {\n    const ctx = chart.ctx;\n    ctx.fillStyle = 'blue';\n    ctx.font = 'bold 16px sans-serif';\n    ctx.fillText('My Custom Title', 10, 20);\n  }\n};\n\nChart.register(myPlugin);\n```\n\nRegister your plugin using `Chart.register(myPlugin)` before creating your chart instance.\n\n\n### Using Pre-built Plugins\n\nMany pre-built plugins are available on the internet and via npm.  These plugins typically provide ready-to-use features. To use a pre-built plugin:\n\n1. **Install:** Install the plugin using npm (or yarn).\n2. **Import:** Import the plugin into your JavaScript file.\n3. **Register:** Register the plugin with Chart.js using `Chart.register(plugin)`.\n4. **Configure:** Configure the plugin's options within the chart's `options.plugins` object.  The specific configuration will vary depending on the plugin.\n\n\n### Common Plugins\n\nSome common categories of plugins include:\n\n* **Data annotations:**  Plugins to add labels, boxes, or other annotations to the chart.\n\n* **Zoom and pan:** Plugins that allow users to zoom and pan the chart.\n\n* **Chart export:** Plugins to export the chart as an image (PNG, JPG, SVG) or data (CSV, JSON).\n\n* **Data labeling:** Plugins to add data labels directly onto chart elements.\n\n* **Legend customization:** Plugins to enhance or customize the chart's legend.\n\n* **Interactions:** Plugins to add or customize chart interactivity (e.g., advanced hover effects, drag-and-drop).\n\n\nBefore using any third-party plugin, carefully review its documentation to understand its usage, configuration options, and any potential dependencies.\n\n\n## Accessibility\n\nChart.js itself doesn't inherently provide robust accessibility features.  Building accessible charts requires careful consideration and often involves supplemental techniques beyond the core library.  While Chart.js doesn't directly support all aspects of accessibility, developers can implement best practices to improve the experience for users with disabilities.\n\n### ARIA Attributes\n\nARIA (Accessible Rich Internet Applications) attributes can be added to the chart's elements to provide assistive technologies (screen readers) with additional information.  This requires interacting with the chart's underlying DOM elements, which is often challenging because Chart.js generates these dynamically.\n\n* **`role` attribute:**  Assigning appropriate roles (e.g., `'img'` for charts that are primarily visual, or more specific roles if the chart has interactive elements) can provide context to screen readers.\n\n* **`aria-label` or `aria-labelledby` attributes:**  Provide descriptive labels for the chart and its elements. These attributes are crucial for communicating the chart's content and meaning to users who cannot see it.\n\n* **`aria-describedby` attribute:**  Reference elements providing additional descriptions or context.  For example, this could link to a separate element containing a detailed description of the chart's data and purpose.\n\nAdding ARIA attributes generally requires custom code or plugins that interact with the generated DOM elements after the chart has been rendered.\n\n\n### Keyboard Navigation\n\nChart.js doesn't provide built-in keyboard navigation.  To enable keyboard navigation, you'll need to implement custom functionality. This typically involves adding event listeners for keyboard events (e.g., arrow keys, tab) and updating the chart's state or focus accordingly.  This would likely require a custom plugin or significant code additions to handle the keyboard interactions and focus management.\n\n\n### Screen Reader Compatibility\n\nScreen reader compatibility is significantly improved by using ARIA attributes.  However, even with appropriate ARIA attributes, screen readers may not always perfectly interpret complex charts.\n\n* **Descriptive Labels:** Concise yet informative labels are essential.  Describe the type of chart, the data it represents, and any key insights it conveys.\n\n* **Data Table Alternative:**  For complex charts, consider providing an alternative data representation, such as a data table, alongside the chart.  This allows screen reader users to access the data in a structured format.\n\n* **Simplified Charts:** For users with severe visual impairments, simpler chart types (e.g., bar charts, line charts) may be more accessible than complex charts (e.g., radar charts).\n\n* **Plugin Support:**  Explore plugins designed to improve accessibility for Chart.js charts.  These plugins may automate some of the ARIA attribute handling and other accessibility features.\n\n\nCreating truly accessible charts with Chart.js requires a multi-faceted approach combining ARIA attributes, appropriate labels, alternative data representations, and consideration for screen reader usage.  There's no single solution, and a thorough understanding of accessibility best practices is needed for successful implementation.\n\n\n## Troubleshooting\n\nThis section covers common issues encountered when working with Chart.js and provides strategies for resolving them.\n\n### Common Errors\n\n* **`Cannot read properties of undefined (reading '...')`:** This often indicates a problem with your data structure or configuration. Double-check that your `data.datasets` and `data.labels` arrays are correctly defined and that their lengths are consistent. Ensure that you are referencing dataset properties correctly.\n\n* **Chart not rendering:** Verify that the `<canvas>` element exists in your HTML and that you've correctly specified its ID when creating the chart instance. Also, ensure that Chart.js is properly included in your project and that there are no JavaScript errors preventing the chart from being drawn. Check your browser's developer console for error messages.\n\n* **Incorrect data display:**  Inspect your data to ensure it's in the expected format (numbers for numerical scales, dates for time scales, etc.).  Review your scales' configurations (`options.scales`) to ensure they are appropriately set for your data.  Incorrect axis ranges or formatting can lead to misinterpretations.\n\n* **Animation issues:**  If animations are not working correctly, check the `options.animation` settings to ensure they're properly configured.  A `duration` of 0 disables animation.  Also, ensure that there are no JavaScript errors that might interrupt the animation process.\n\n* **Plugin Errors:** When using plugins, refer to the plugin's documentation to ensure you've correctly registered and configured the plugin. Plugin conflicts can also cause issues. Try disabling plugins one by one to isolate any problems.\n\n\n### Debugging Tips\n\n* **Browser Developer Console:** The browser's developer console (usually opened by pressing F12) is your primary debugging tool.  It shows JavaScript errors, warnings, and other messages that can pinpoint the source of problems.\n\n* **Console Logging:** Use `console.log()` to inspect the values of variables and data structures at various points in your code.  This helps track down unexpected values or data inconsistencies.\n\n* **Simplify Your Code:**  If you encounter complex issues, try simplifying your chart configuration and data to isolate the problem. Create a minimal reproducible example to pinpoint the source of the error.\n\n* **Check the Chart.js Documentation:** The official Chart.js documentation is an invaluable resource.  Thoroughly review the documentation for your chart type and configuration options.  It often contains examples and troubleshooting tips.\n\n* **Search for Existing Issues:** Search online forums and GitHub issues to see if others have encountered similar problems.\n\n\n### Performance Optimization\n\n* **Data Reduction:** For large datasets, consider reducing the amount of data displayed.  Techniques like data aggregation or downsampling can significantly improve performance.\n\n* **Efficient Updates:** Instead of fully redrawing the chart on every data update, use `chart.update()` judiciously and consider using techniques like data diffing to only update necessary elements.\n\n* **Animation Optimization:**  Disable or minimize animations (`options.animation.duration`) if performance is critical, especially with large datasets.\n\n* **Canvas Optimization:** Explore plugins or techniques designed to optimize canvas rendering, especially for very complex charts or large datasets.\n\n* **Avoid Unnecessary Redraws:**  Minimize calls to `chart.update()`.  Only update the chart when necessary and ensure that changes are made efficiently.\n\n\n\n### Browser Compatibility\n\nChart.js generally supports modern browsers. However, older browsers or those with limited JavaScript support might exhibit issues.  Refer to Chart.js's official documentation for its stated browser compatibility.\n\n* **Polyfills:** For older browsers lacking support for certain features, consider using polyfills to provide backward compatibility.\n\n* **Testing:** Test your charts across different browsers and devices to ensure consistent rendering and performance.  Using automated browser testing tools can help in this process.\n\n\nRemember to always consult the official Chart.js documentation and online resources for the most up-to-date information on troubleshooting and best practices.\n\n\n## API Reference\n\nThis section provides a high-level overview of the Chart.js API.  For complete and detailed information, refer to the official Chart.js documentation.\n\n\n### Chart Class\n\nThe `Chart` class is the central object representing a chart instance.  It's created by passing the canvas context and configuration options.  Key methods and properties include:\n\n* **`Chart(ctx, config)`:** The constructor, creating a new chart instance. `ctx` is the 2D rendering context of the canvas, and `config` is the chart configuration object.\n\n* **`config`:**  Provides access to the chart's configuration object.  Modifying this object and calling `chart.update()` allows dynamic updates to the chart.\n\n* **`data`:** Accesses and modifies the chart's data (labels and datasets).  Changing the data and calling `chart.update()` updates the chart's visual representation.\n\n* **`options`:** Accesses and modifies the chart's options (scales, animation, plugins, etc.).  Changes require a call to `chart.update()`.\n\n* **`canvas`:** Provides access to the underlying `<canvas>` element.\n\n* **`ctx`:** The 2D rendering context of the canvas.  Directly accessing and manipulating this is generally discouraged, as it bypasses Chart.js's rendering mechanisms.\n\n* **`destroy()`:** Destroys the chart instance, removing it from the canvas and freeing up resources.\n\n* **`update()`:** Redraws the chart based on the current data and configuration.  This is crucial after modifying `data` or `options`.\n\n* **`resize()`:**  Redraws the chart after a resize event.\n\n* **`getDatasetMeta(datasetIndex)`:** Retrieves metadata about a specific dataset.\n\n* **`getElementsAtEvent(e)`:**  Retrieves chart elements at a specific event (e.g., mouse click or hover).\n\n\n### Controller Methods\n\nControllers manage the rendering and update logic for specific chart types (bar, line, pie, etc.).  They are not directly accessed by developers but are essential to Chart.js's internal workings.  Understanding their functionalities, however, helps in understanding how charts behave. Key responsibilities include:\n\n* **Data processing:** Transforming the raw data into a format suitable for rendering.\n* **Scale management:**  Interacting with and managing the scales (axes) of the chart.\n* **Element creation:** Generating the visual elements (bars, lines, points, etc.) representing the data.\n* **Drawing:** Rendering the elements onto the canvas.\n* **Animation:** Handling the chart's animations.\n* **Event handling:** Responding to user interactions (hover, clicks, etc.).\n\n\n\n### Plugin API\n\nThe plugin API is used to extend Chart.js's functionality.  A plugin is an object with methods that hook into the chart's lifecycle.  Key methods were discussed in the Plugins and Extensions section.  The `options.plugins` section in the chart configuration allows controlling plugin options.\n\n\n### Scale API\n\nThe scale API provides methods to interact with the chart's axes (scales).  This is done indirectly through the `options.scales` object.  Each scale type (linear, logarithmic, time, etc.) has its own set of configuration options,  but common properties include:\n\n* **`type`:** Specifies the scale type.\n* **`position`:** Specifies the position of the scale (top, bottom, left, right).\n* **`min` and `max`:**  Specify the minimum and maximum values for numerical scales.\n* **`ticks`:**  An object to customize the ticks (labels) on the scale.\n* **`grid`:** An object to configure the grid lines.\n\nDirect access to scale objects is generally through Chart.js internal methods and not typically needed for common customizations.\n\n\n### Element API\n\nChart.js elements represent the visual components of the chart (bars, points, arcs, etc.). You don't directly instantiate elements but access them through the Chart instance.  Methods like `chart.getElementsAtEvent(e)` can help retrieve elements at a specific location on the chart.  The properties and methods of elements depend on the specific chart type, and direct manipulation is generally not recommended unless you're creating highly custom chart extensions.\n\n\nThis API reference provides a high-level summary. Always consult the official Chart.js documentation for the most current and detailed API information.  The documentation includes detailed explanations of each method, property, and configuration option.\n\n","srcMarkdownNoYaml":"\n## Getting Started\n\n### Installation\n\nChart.js can be integrated into your project using several methods:\n\n* **CDN:** The easiest way to get started is by including Chart.js via a CDN. Add the following `<script>` tag to your HTML file's `<head>` or before the closing `</body>` tag:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n```\n\n* **NPM:** For projects using npm (Node Package Manager), install Chart.js using:\n\n```bash\nnpm install chart.js\n```\n\nThen, import it into your JavaScript file:\n\n```javascript\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n```\n\n\n* **Yarn:** If you're using Yarn, use:\n\n```bash\nyarn add chart.js\n```\n\n  And then import similarly to the npm example.\n\n* **Download:** You can also download the Chart.js library directly from the [GitHub releases](https://github.com/chartjs/Chart.js/releases) page.  Extract the contents and include the `chart.min.js` or `chart.js` file in your project.\n\n\n### Basic Chart Example\n\nThis example demonstrates creating a simple bar chart:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Chart.js Example</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script> </head>\n<body>\n  <canvas id=\"myChart\"></canvas>\n  <script>\n    const ctx = document.getElementById('myChart').getContext('2d');\n    const myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n          label: '# of Votes',\n          data: [12, 19, 3, 5, 2, 3],\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.2)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(255, 206, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)',\n            'rgba(255, 159, 64, 0.2)'\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)'\n          ],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  </script>\n</body>\n</html>\n```\n\n### Including Chart.js in your project\n\nAfter installing Chart.js (using one of the methods described above), you need to include it in your project.  For CDN inclusion, the `<script>` tag is sufficient. For npm or yarn installations, you'll need to import it into your Javascript file as shown in the Installation section.  Ensure that the script tag (for CDN) or the import statement (for npm/yarn) is placed *after* the `<canvas>` element in your HTML, or ensure proper asynchronous loading mechanisms are implemented.\n\n\n### First steps with Chart.js\n\nOnce included, creating a chart involves these basic steps:\n\n1. **Get the canvas element:** Obtain a reference to the `<canvas>` element where the chart will be rendered using `document.getElementById('yourCanvasId').getContext('2d');`.  Replace `yourCanvasId` with the actual ID of your canvas.\n\n2. **Create a new Chart instance:** Instantiate a new Chart object, providing the canvas context and a configuration object. The configuration includes the chart type (`'bar'`, `'line'`, `'pie'`, etc.), data (labels and datasets), and options (like title, legend, scales, etc.).\n\n3. **Customize (optional):** Explore the extensive options available to customize the chart's appearance, behavior, and data representation.  The Chart.js documentation provides comprehensive details on chart types and customization options.\n\n\nRemember to replace placeholders like  `'yourCanvasId'` with your actual element IDs.  Consult the Chart.js documentation for detailed information on data structures, configuration options, and available chart types.\n\n\n## Chart Types\n\n### Line Charts\n\nLine charts are used to display data as a series of points connected by straight lines.  They're ideal for showing trends over time or other continuous variables.  Key configuration options include:\n\n* **`data.datasets`:**  Each dataset contains an array of `data` points (y-axis values) corresponding to the `data.labels` (x-axis values).\n* **`options.scales`:**  Customize the x and y axes, including labels, ticks, and scaling.  You can use logarithmic or time scales for specific data types.\n* **`options.elements.line`:** Configure the line's appearance, including tension (curve smoothness), border width, and color.\n* **`options.plugins.tooltip`:**  Control the appearance and behavior of the tooltips displayed when hovering over data points.\n\n\n### Bar Charts\n\nBar charts represent data as rectangular bars, making comparisons between categories easy.  They can be vertical or horizontal.  Key configuration options include:\n\n* **`data.datasets`:** Each dataset contains an array of `data` values representing the height (or width for horizontal bars) of the bars.  `data.labels` define the categories on the x (or y) axis.\n* **`options.indexAxis`:** Set to 'x' for vertical bars (default) or 'y' for horizontal bars.\n* **`options.scales`:** Customize the axes, including labels, ticks, and scaling (e.g., setting a minimum value).\n* **`options.plugins.legend`:**  Control the display and positioning of the legend.\n* **`options.elements.bar`:** Configure bar appearance, like border width and color.\n\n\n### Pie and Doughnut Charts\n\nPie and doughnut charts display proportions of a whole.  A doughnut chart leaves a hole in the center.  Key configuration options include:\n\n* **`data.datasets`:** Each dataset provides an array of `data` values representing the slice sizes.  `data.labels` identify each slice.\n* **`options.cutout`:** (Doughnut charts only) Controls the size of the central hole.  A value of 0 results in a pie chart.\n* **`options.rotation`:** Rotates the chart starting from the 0 degree position.\n* **`options.circumference`:** Sets the chart's circumference; useful to create half-circle charts.\n* **`options.plugins.legend`:** Controls the legend's display and position.\n* **`options.elements.arc`:** Configure the appearance of the chart segments including border width and color.\n\n\n### Scatter Charts\n\nScatter charts display data as individual points, useful for showing relationships between two variables.  Key configuration options include:\n\n* **`data.datasets`:** Each dataset has an array of objects, each object representing a point with `x` and `y` properties.\n* **`options.scales`:**  Configure the x and y axes, including scales and labels.\n* **`options.elements.point`:**  Customize the appearance of the data points (size, color, border).\n\n\n### Bubble Charts\n\nBubble charts are an extension of scatter charts where the size of each point represents a third variable.  Configuration is similar to scatter charts, with the addition of:\n\n* **`data.datasets`:** Each dataset point object will include an additional `r` property to define the radius of the bubble.\n\n\n### Radar Charts\n\nRadar charts (also known as star charts) display data as a series of points connected by lines, forming a polygon.  Useful for comparing multiple variables against a central point. Key configuration options include:\n\n* **`data.labels`:** Define the labels for each axis.\n* **`data.datasets`:** Each dataset represents a series of values for the axes.\n* **`options.scale`:** Configure the scale of the radar chart.\n* **`options.elements`:** Customize the appearance of the lines and points.\n\n\n### Polar Area Charts\n\nPolar area charts are similar to radar charts, but the area enclosed by the lines is filled with color.  The area of each segment is proportional to its value. Key configuration options are similar to radar charts, focusing on data representation and visual styling.  Remember that the area, not just the length of the lines, represents the data values.\n\n\n## Chart Configuration\n\n### Data Structure\n\nChart.js uses a consistent data structure across all chart types. The core components are:\n\n* **`data.labels`:** An array of strings providing labels for the data points (e.g., categories, time stamps).  These labels are used for the x-axis in most chart types.\n\n* **`data.datasets`:** An array of objects, each representing a dataset.  Each dataset object typically contains:\n\n    * **`label`:**  A string providing a name or label for the dataset (used in the legend).\n    * **`data`:** An array of numerical values representing the data points for this dataset.  The length of this array should match the length of `data.labels`.\n    * **`backgroundColor`:** (Optional) An array of colors for the background of each data point (bars, pie slices, etc.).\n    * **`borderColor`:** (Optional) An array of colors for the borders of each data point.\n    * **`borderWidth`:** (Optional)  The width of the border around each data point.\n    * **`pointStyle`, `tension`, `borderDash`, etc.:** Other properties specific to the chart type (e.g., `tension` for line charts).\n\n\nThe structure is flexible and adapts to the chart type.  For example, scatter charts use x and y coordinates within the `data` array, and bubble charts also include a radius value.\n\n\n### Chart Options\n\nChart options provide extensive control over the chart's appearance and behavior.  These options are passed as a single object to the Chart constructor.  Key option categories include:\n\n* **`responsive`:** (Boolean) Enables responsive resizing of the chart to fit its container.  Defaults to `true`.\n* **`maintainAspectRatio`:** (Boolean)  Maintains the chart's aspect ratio when resizing.  Defaults to `true`.\n* **`animation`:**  Configures chart animation (see the Animations section below).\n* **`plugins`:**  Configures chart plugins (see the Plugins section below).\n* **`events`:** An array of events the chart will listen to (e.g., `'click'`, `'mousemove'`).\n\n\n### Scales (Axes)\n\nScales define the axes of the chart.  Options are specified within the `options.scales` object.  You can configure separate options for x and y axes (and even additional axes for certain chart types). Common options include:\n\n* **`type`:** The type of scale (e.g., `'linear'`, `'logarithmic'`, `'time'`, `'category'`).\n* **`position`:** The position of the scale ('top', 'bottom', 'left', 'right').\n* **`title`:**  An object to configure the title of the axis.\n* **`ticks`:** An object with options to customize the ticks (labels) on the axis (e.g., `min`, `max`, `stepSize`, `callback` for custom formatting).\n* **`grid`:**  An object with options to customize grid lines.\n\n\n### Legends\n\nLegends display labels for each dataset in the chart. They can be customized through:\n\n* **`options.plugins.legend.display`:** Enable or disable the legend.\n* **`options.plugins.legend.position`:** Set the legend's position ('top', 'bottom', 'left', 'right').\n* **`options.plugins.legend.labels`:**  Customize the appearance of legend labels (font, color, etc.).\n\n\n### Titles\n\nChart titles are configured using:\n\n* **`options.plugins.title.display`:** Enable or disable the title.\n* **`options.plugins.title.text`:** The title text.\n* **`options.plugins.title.position`:** The title's position ('top', 'bottom', 'left', 'right').\n* **`options.plugins.title.font`:** Font settings for the title.\n\n\n### Tooltips\n\nTooltips provide interactive information when hovering over data points.  They are customized through:\n\n* **`options.plugins.tooltip.enabled`:** Enable or disable tooltips.\n* **`options.plugins.tooltip.mode`:** Controls which data points are included in tooltips (e.g., 'nearest', 'index').\n* **`options.plugins.tooltip.callbacks`:** Allows customization of tooltip labels and other content.\n* **`options.plugins.tooltip.position`:**  Controls tooltip positioning.\n\n\n### Plugins\n\nPlugins extend Chart.js's functionality.  They're registered using `Chart.register(plugin)`, and configured within `options.plugins`.  Plugins add features like annotations, zoom/pan, data export, and more. Refer to the plugin's specific documentation for configuration details.\n\n\n### Responsive Design\n\nChart.js is responsive by default (`responsive: true`).  The chart automatically adjusts its size to fit its container.  You can control aspect ratio using `maintainAspectRatio`.\n\n\n### Animations\n\nChart animations can be customized using the `options.animation` object.  Key options include:\n\n* **`duration`:** The animation duration in milliseconds.\n* **`easing`:** The easing function used for animation.\n* **`onComplete`:** A callback function executed when the animation completes.\n*  Individual animation options for different chart elements (e.g., `animateScale`, `animateRotate`).  Setting `animation: false` disables all animations.\n\n\n\n## Data Handling\n\n### Working with datasets\n\nDatasets are the core of your chart data. They're managed within the `data.datasets` array. Each dataset is an object, and you can add, remove, or modify datasets to dynamically update the chart.\n\n* **Adding datasets:** Push a new dataset object to the `data.datasets` array.  Ensure that the new dataset's `data` array has the same length as `data.labels` if applicable to the chart type.\n\n* **Removing datasets:** Use array methods like `splice` to remove datasets from `data.datasets`. You'll need to update the chart afterward (see \"Updating Charts\").\n\n* **Modifying datasets:**  Directly modify properties of existing dataset objects (e.g., changing `data` values, `backgroundColor`, etc.).  Again, update the chart afterward.\n\n* **Data Structure Consistency:** Maintain consistent data structures within `data.datasets`.  Mismatched data lengths or inconsistent data types can lead to errors.\n\n\n### Updating Charts\n\nAfter modifying the chart's data or configuration, you must update the chart to reflect the changes.  This is done using the `chart.update()` method.  For example:\n\n```javascript\n// ... chart creation code ...\n\n// Modify data\nmyChart.data.datasets[0].data = [10, 20, 30, 40];\n\n// Update the chart\nmyChart.update();\n```\n\nThe `update()` method redraws the chart with the new data.  You can optionally pass a configuration object to `update()` to control the animation during the update process.\n\n\n### Data labels and formatting\n\nData labels are usually handled automatically by Chart.js based on the chart type.  However, you can significantly customize them.\n\n* **`options.plugins.tooltip.callbacks`:** For tooltips, customize the content using callback functions.  You can format numbers, dates, and other data types within these callbacks.\n\n* **`options.scales.x.ticks.callback` and `options.scales.y.ticks.callback`:** For axis labels, use callback functions to format the tick labels.\n\n* **Plugins:**  Several plugins are available to add data labels directly onto the chart elements.  These plugins often provide detailed customization options.\n\n\n### Handling large datasets\n\nChart.js handles large datasets relatively efficiently, but performance can degrade for extremely large datasets (thousands or tens of thousands of data points).  Optimization strategies include:\n\n* **Data reduction:**  If possible, reduce the amount of data displayed without losing essential information (e.g., averaging or downsampling data).\n\n* **Plugins:** Explore plugins designed to efficiently handle large datasets.  Some plugins offer advanced techniques like rendering only visible data points or using canvas optimization strategies.\n\n* **Chunking data:**  Consider breaking large datasets into smaller chunks and rendering them dynamically.\n\n\n### Real-time data updates\n\nUpdating charts with real-time data requires continuous updates using `chart.update()`.  Common approaches include:\n\n* **`setInterval` or `requestAnimationFrame`:** Use these functions to periodically fetch and update data.  `requestAnimationFrame` is preferred for smoother animations tied to the browser's refresh rate.\n\n* **WebSockets:** For high-frequency data updates, WebSockets provide a more efficient communication channel between the server and the client.\n\n* **Efficient Updates:** Minimize chart updates by only updating the necessary data points instead of redrawing the entire chart each time.  Techniques like data diffing can help.\n\n\nRemember that frequent updates can significantly impact performance.  Choose your approach carefully based on the data frequency and the desired performance level.\n\n\n## Advanced Techniques\n\n### Customizing Charts\n\nBeyond the standard configuration options, Chart.js offers powerful customization capabilities:\n\n* **Custom Chart Types:** While Chart.js provides built-in chart types, you can create entirely new chart types extending the core Chart class.  This requires a deeper understanding of Chart.js's internal workings and the use of its API.\n\n* **Custom Drawing:** You can directly draw on the chart's canvas using the chart's context (`chart.ctx`) to add custom elements or annotations.  This provides maximum flexibility, but requires careful coordination with Chart.js's rendering process.\n\n* **Extending Chart Elements:** Customize the rendering of existing chart elements (bars, lines, points, etc.) by creating custom element classes that extend the default classes.  This allows for modification of how elements are drawn and styled.\n\n* **Data Transformations:** Pre-process data before feeding it to the chart.  This enables tasks like data normalization, aggregation, or applying custom transformations to tailor the chart to specific needs.\n\n\n### Creating reusable chart components\n\nFor complex applications or when creating many similar charts, creating reusable components improves code organization and maintainability. This can be done using various techniques:\n\n* **JavaScript Classes:** Create a class encapsulating the chart configuration and data handling logic.  This allows for easy instantiation of multiple charts with consistent configurations.\n\n* **React, Vue, Angular, etc.:** If using a framework, leverage its component model to create reusable chart components. These components encapsulate the chart instantiation and configuration logic, simplifying their integration into your application.\n\n* **Functions:**  Create functions to generate chart configuration objects, thereby promoting code reuse and reducing repetition.\n\n* **Shared Configuration:** Define a base configuration object and extend it for specific chart instances, minimizing duplicated settings.\n\n\n### Chart Interactions\n\nChart.js provides built-in interaction capabilities (tooltips, hover effects).  More advanced interactions can be implemented:\n\n* **Event Handling:** Use Chart.js events (see \"Working with Events\") to respond to user actions (clicks, hovers) and trigger custom actions.\n\n* **Custom Controls:** Create custom controls outside the chart canvas to manipulate the chart's data or configuration (e.g., zooming, panning, filtering).\n\n* **Drag-and-drop:**  Plugins or custom implementations can add drag-and-drop functionality to manipulate chart data points or elements.\n\n\n### Working with Events\n\nChart.js emits various events during its lifecycle and in response to user interactions.  You can listen for these events and trigger custom actions.\n\n* **Chart lifecycle events:** Events such as `beforeInit`, `afterInit`, `beforeUpdate`, `afterUpdate`, etc., allow you to execute code at different stages of the chart's lifecycle.\n\n* **User interaction events:** Events such as `click`, `mousemove`, `mouseout` allow you to respond to user actions on the chart.\n\n  To listen to events, use the `chart.addEventListener` method:\n\n```javascript\nmyChart.addEventListener('click', function(event, array){\n    // Handle click event\n    console.log(event, array);\n});\n```\n\nThe event object provides context about the interaction, and `array` contains information about the chart elements involved (if any).\n\n\n\n### Integrating with other libraries\n\nChart.js integrates well with other JavaScript libraries:\n\n* **Data Manipulation Libraries:** Libraries such as D3.js or Lodash can be used to preprocess and transform chart data before feeding it to Chart.js.\n\n* **UI Frameworks:**  Integrate Chart.js into frameworks like React, Vue, or Angular using their component models for seamless integration into your application architecture.\n\n* **Data Visualization Libraries:** Other libraries might provide complementary functionalities; for example, a library focusing on map integration could be combined with Chart.js for visualizing geographical data.\n\n* **Plugins:** Many third-party plugins extend Chart.js's capabilities by providing features such as advanced annotations, zooming, or exporting chart data in various formats.  These plugins typically simplify the integration process.\n\n\nRemember to check the documentation of both libraries to ensure compatibility and understand how to correctly handle data exchange and event communication.\n\n\n## Scales and Axes\n\nChart.js offers a variety of built-in scale types to represent data on the axes.  The choice of scale depends on the nature of your data and how you want to visualize it.  Each scale type has specific options for customization.  These options are generally accessed through the `options.scales` object in the chart configuration.\n\n### Linear Scale\n\nThe linear scale is the most common scale type, representing data linearly.  It is suitable for numerical data that is evenly spaced.  Key options include:\n\n* **`min` and `max`:** Explicitly set the minimum and maximum values for the scale.  If not set, Chart.js automatically determines these based on your data.\n* **`beginAtZero`:** Sets whether the scale should begin at zero.\n* **`stepSize`:** Defines the interval between ticks on the axis.\n* **`ticks.callback`:** Allows custom formatting of tick labels.  This is particularly useful for adding units or applying specific formatting to the numerical values.\n\n\n### Logarithmic Scale\n\nThe logarithmic scale is used when data spans several orders of magnitude.  It represents data on a logarithmic scale, compressing large ranges of values into a more manageable display.  It's suitable for data with exponential growth or decay.  Options similar to linear scales apply, but with some logarithmic-specific additions such as:\n\n* **`base`:** The base of the logarithm (e.g., 10 for a base-10 logarithmic scale).\n\n\n### Time Scale\n\nThe time scale is designed for time-series data.  It automatically handles various time units (seconds, minutes, hours, days, etc.) and formats the axis labels accordingly.  It's crucial for effectively representing time-dependent data.  Key options include:\n\n* **`unit`:** Sets the time unit for the scale (e.g., 'second', 'minute', 'hour', 'day', 'month', 'year').  Chart.js automatically selects an appropriate unit if not explicitly specified.\n* **`parser`:** A custom function to parse time data if it's not in a standard format.\n* **`tooltipFormat`:**  A format string for displaying time data in tooltips (using moment.js or Luxon formatting).\n\n\n### Category Scale\n\nThe category scale is used for categorical data, where data points are associated with distinct categories rather than numerical values. The labels for each category are taken from `data.labels`. This scale is commonly used with bar charts, pie charts, and other charts displaying discrete categories.  Key options:\n\n* **`labels`:**  While generally taken from `data.labels`, you can override them here.\n* **`categoryPercentage` and `barPercentage`:**  (Specifically for bar charts) control the spacing between bars within a category and between different categories.\n\n\n### Radial Linear Scale\n\nThe radial linear scale is used in radar and polar area charts. It represents data as a series of points radiating from a central point.  Options allow control over the number of points, angles, and labels. Key options include:\n\n* **`angleLines`:** Configures the appearance of lines radiating from the center.\n* **`pointLabels`:** Configures the appearance and positioning of labels for each point.\n* **`beginAtZero`:**  Similar to linear scales, determines if the scale starts at zero.\n\n\n\n### Custom Scales\n\nFor highly specialized data or visualization needs, you can create custom scales.  This involves extending Chart.js's scale classes and implementing custom methods for determining tick positions, formatting labels, and drawing the scale.  This is an advanced technique requiring a thorough understanding of Chart.js's internal architecture.  Refer to Chart.js's documentation for detailed information on creating custom scales. This generally involves creating a class that extends one of Chart.js's scale classes and implementing the necessary methods for generating ticks, determining tick positions, and formatting labels.\n\n\n## Plugins and Extensions\n\nChart.js's plugin architecture allows for extending its functionality without modifying its core code.  Plugins add features like annotations, zooming, data exporting, and much more.\n\n\n### Plugin Architecture\n\nA Chart.js plugin is a JavaScript object with specific methods that hook into different stages of the chart's lifecycle. The core methods are:\n\n* **`id`:** A unique identifier for the plugin.\n* **`beforeInit`:** Executed before the chart is initialized.\n* **`afterInit`:** Executed after the chart is initialized.\n* **`beforeUpdate`:** Executed before the chart is updated.\n* **`afterUpdate`:** Executed after the chart is updated.\n* **`beforeLayout`:** Executed before the chart layout is calculated.\n* **`afterLayout`:** Executed after the chart layout is calculated.\n* **`beforeDraw`:** Executed before the chart is drawn.\n* **`afterDraw`:** Executed after the chart is drawn.\n* **`beforeDatasetsDraw`:** Executed before datasets are drawn.\n* **`afterDatasetsDraw`:** Executed after datasets are drawn.\n* **`beforeDatasetDraw`:** Executed before each dataset is drawn.\n* **`afterDatasetDraw`:** Executed after each dataset is drawn.\n* **`beforeRender`:** Executed before rendering.\n* **`afterRender`:** Executed after rendering.\n* **`beforeElements`:** Executed before elements are drawn.\n* **`afterElements`:** Executed after elements are drawn.\n* **`destroy`:** Executed when the chart is destroyed.\n\n\nThese methods allow plugins to interact with the chart at various stages of its creation and update process.  For example, a plugin could add annotations in `afterDraw` or handle user interactions in `afterEvent`.\n\n\n### Creating Custom Plugins\n\nTo create a custom plugin, define a JavaScript object with the `id` and the hook methods you need.  For instance, a plugin to add a title could look like this:\n\n```javascript\nconst myPlugin = {\n  id: 'myPlugin',\n  beforeDraw: (chart) => {\n    const ctx = chart.ctx;\n    ctx.fillStyle = 'blue';\n    ctx.font = 'bold 16px sans-serif';\n    ctx.fillText('My Custom Title', 10, 20);\n  }\n};\n\nChart.register(myPlugin);\n```\n\nRegister your plugin using `Chart.register(myPlugin)` before creating your chart instance.\n\n\n### Using Pre-built Plugins\n\nMany pre-built plugins are available on the internet and via npm.  These plugins typically provide ready-to-use features. To use a pre-built plugin:\n\n1. **Install:** Install the plugin using npm (or yarn).\n2. **Import:** Import the plugin into your JavaScript file.\n3. **Register:** Register the plugin with Chart.js using `Chart.register(plugin)`.\n4. **Configure:** Configure the plugin's options within the chart's `options.plugins` object.  The specific configuration will vary depending on the plugin.\n\n\n### Common Plugins\n\nSome common categories of plugins include:\n\n* **Data annotations:**  Plugins to add labels, boxes, or other annotations to the chart.\n\n* **Zoom and pan:** Plugins that allow users to zoom and pan the chart.\n\n* **Chart export:** Plugins to export the chart as an image (PNG, JPG, SVG) or data (CSV, JSON).\n\n* **Data labeling:** Plugins to add data labels directly onto chart elements.\n\n* **Legend customization:** Plugins to enhance or customize the chart's legend.\n\n* **Interactions:** Plugins to add or customize chart interactivity (e.g., advanced hover effects, drag-and-drop).\n\n\nBefore using any third-party plugin, carefully review its documentation to understand its usage, configuration options, and any potential dependencies.\n\n\n## Accessibility\n\nChart.js itself doesn't inherently provide robust accessibility features.  Building accessible charts requires careful consideration and often involves supplemental techniques beyond the core library.  While Chart.js doesn't directly support all aspects of accessibility, developers can implement best practices to improve the experience for users with disabilities.\n\n### ARIA Attributes\n\nARIA (Accessible Rich Internet Applications) attributes can be added to the chart's elements to provide assistive technologies (screen readers) with additional information.  This requires interacting with the chart's underlying DOM elements, which is often challenging because Chart.js generates these dynamically.\n\n* **`role` attribute:**  Assigning appropriate roles (e.g., `'img'` for charts that are primarily visual, or more specific roles if the chart has interactive elements) can provide context to screen readers.\n\n* **`aria-label` or `aria-labelledby` attributes:**  Provide descriptive labels for the chart and its elements. These attributes are crucial for communicating the chart's content and meaning to users who cannot see it.\n\n* **`aria-describedby` attribute:**  Reference elements providing additional descriptions or context.  For example, this could link to a separate element containing a detailed description of the chart's data and purpose.\n\nAdding ARIA attributes generally requires custom code or plugins that interact with the generated DOM elements after the chart has been rendered.\n\n\n### Keyboard Navigation\n\nChart.js doesn't provide built-in keyboard navigation.  To enable keyboard navigation, you'll need to implement custom functionality. This typically involves adding event listeners for keyboard events (e.g., arrow keys, tab) and updating the chart's state or focus accordingly.  This would likely require a custom plugin or significant code additions to handle the keyboard interactions and focus management.\n\n\n### Screen Reader Compatibility\n\nScreen reader compatibility is significantly improved by using ARIA attributes.  However, even with appropriate ARIA attributes, screen readers may not always perfectly interpret complex charts.\n\n* **Descriptive Labels:** Concise yet informative labels are essential.  Describe the type of chart, the data it represents, and any key insights it conveys.\n\n* **Data Table Alternative:**  For complex charts, consider providing an alternative data representation, such as a data table, alongside the chart.  This allows screen reader users to access the data in a structured format.\n\n* **Simplified Charts:** For users with severe visual impairments, simpler chart types (e.g., bar charts, line charts) may be more accessible than complex charts (e.g., radar charts).\n\n* **Plugin Support:**  Explore plugins designed to improve accessibility for Chart.js charts.  These plugins may automate some of the ARIA attribute handling and other accessibility features.\n\n\nCreating truly accessible charts with Chart.js requires a multi-faceted approach combining ARIA attributes, appropriate labels, alternative data representations, and consideration for screen reader usage.  There's no single solution, and a thorough understanding of accessibility best practices is needed for successful implementation.\n\n\n## Troubleshooting\n\nThis section covers common issues encountered when working with Chart.js and provides strategies for resolving them.\n\n### Common Errors\n\n* **`Cannot read properties of undefined (reading '...')`:** This often indicates a problem with your data structure or configuration. Double-check that your `data.datasets` and `data.labels` arrays are correctly defined and that their lengths are consistent. Ensure that you are referencing dataset properties correctly.\n\n* **Chart not rendering:** Verify that the `<canvas>` element exists in your HTML and that you've correctly specified its ID when creating the chart instance. Also, ensure that Chart.js is properly included in your project and that there are no JavaScript errors preventing the chart from being drawn. Check your browser's developer console for error messages.\n\n* **Incorrect data display:**  Inspect your data to ensure it's in the expected format (numbers for numerical scales, dates for time scales, etc.).  Review your scales' configurations (`options.scales`) to ensure they are appropriately set for your data.  Incorrect axis ranges or formatting can lead to misinterpretations.\n\n* **Animation issues:**  If animations are not working correctly, check the `options.animation` settings to ensure they're properly configured.  A `duration` of 0 disables animation.  Also, ensure that there are no JavaScript errors that might interrupt the animation process.\n\n* **Plugin Errors:** When using plugins, refer to the plugin's documentation to ensure you've correctly registered and configured the plugin. Plugin conflicts can also cause issues. Try disabling plugins one by one to isolate any problems.\n\n\n### Debugging Tips\n\n* **Browser Developer Console:** The browser's developer console (usually opened by pressing F12) is your primary debugging tool.  It shows JavaScript errors, warnings, and other messages that can pinpoint the source of problems.\n\n* **Console Logging:** Use `console.log()` to inspect the values of variables and data structures at various points in your code.  This helps track down unexpected values or data inconsistencies.\n\n* **Simplify Your Code:**  If you encounter complex issues, try simplifying your chart configuration and data to isolate the problem. Create a minimal reproducible example to pinpoint the source of the error.\n\n* **Check the Chart.js Documentation:** The official Chart.js documentation is an invaluable resource.  Thoroughly review the documentation for your chart type and configuration options.  It often contains examples and troubleshooting tips.\n\n* **Search for Existing Issues:** Search online forums and GitHub issues to see if others have encountered similar problems.\n\n\n### Performance Optimization\n\n* **Data Reduction:** For large datasets, consider reducing the amount of data displayed.  Techniques like data aggregation or downsampling can significantly improve performance.\n\n* **Efficient Updates:** Instead of fully redrawing the chart on every data update, use `chart.update()` judiciously and consider using techniques like data diffing to only update necessary elements.\n\n* **Animation Optimization:**  Disable or minimize animations (`options.animation.duration`) if performance is critical, especially with large datasets.\n\n* **Canvas Optimization:** Explore plugins or techniques designed to optimize canvas rendering, especially for very complex charts or large datasets.\n\n* **Avoid Unnecessary Redraws:**  Minimize calls to `chart.update()`.  Only update the chart when necessary and ensure that changes are made efficiently.\n\n\n\n### Browser Compatibility\n\nChart.js generally supports modern browsers. However, older browsers or those with limited JavaScript support might exhibit issues.  Refer to Chart.js's official documentation for its stated browser compatibility.\n\n* **Polyfills:** For older browsers lacking support for certain features, consider using polyfills to provide backward compatibility.\n\n* **Testing:** Test your charts across different browsers and devices to ensure consistent rendering and performance.  Using automated browser testing tools can help in this process.\n\n\nRemember to always consult the official Chart.js documentation and online resources for the most up-to-date information on troubleshooting and best practices.\n\n\n## API Reference\n\nThis section provides a high-level overview of the Chart.js API.  For complete and detailed information, refer to the official Chart.js documentation.\n\n\n### Chart Class\n\nThe `Chart` class is the central object representing a chart instance.  It's created by passing the canvas context and configuration options.  Key methods and properties include:\n\n* **`Chart(ctx, config)`:** The constructor, creating a new chart instance. `ctx` is the 2D rendering context of the canvas, and `config` is the chart configuration object.\n\n* **`config`:**  Provides access to the chart's configuration object.  Modifying this object and calling `chart.update()` allows dynamic updates to the chart.\n\n* **`data`:** Accesses and modifies the chart's data (labels and datasets).  Changing the data and calling `chart.update()` updates the chart's visual representation.\n\n* **`options`:** Accesses and modifies the chart's options (scales, animation, plugins, etc.).  Changes require a call to `chart.update()`.\n\n* **`canvas`:** Provides access to the underlying `<canvas>` element.\n\n* **`ctx`:** The 2D rendering context of the canvas.  Directly accessing and manipulating this is generally discouraged, as it bypasses Chart.js's rendering mechanisms.\n\n* **`destroy()`:** Destroys the chart instance, removing it from the canvas and freeing up resources.\n\n* **`update()`:** Redraws the chart based on the current data and configuration.  This is crucial after modifying `data` or `options`.\n\n* **`resize()`:**  Redraws the chart after a resize event.\n\n* **`getDatasetMeta(datasetIndex)`:** Retrieves metadata about a specific dataset.\n\n* **`getElementsAtEvent(e)`:**  Retrieves chart elements at a specific event (e.g., mouse click or hover).\n\n\n### Controller Methods\n\nControllers manage the rendering and update logic for specific chart types (bar, line, pie, etc.).  They are not directly accessed by developers but are essential to Chart.js's internal workings.  Understanding their functionalities, however, helps in understanding how charts behave. Key responsibilities include:\n\n* **Data processing:** Transforming the raw data into a format suitable for rendering.\n* **Scale management:**  Interacting with and managing the scales (axes) of the chart.\n* **Element creation:** Generating the visual elements (bars, lines, points, etc.) representing the data.\n* **Drawing:** Rendering the elements onto the canvas.\n* **Animation:** Handling the chart's animations.\n* **Event handling:** Responding to user interactions (hover, clicks, etc.).\n\n\n\n### Plugin API\n\nThe plugin API is used to extend Chart.js's functionality.  A plugin is an object with methods that hook into the chart's lifecycle.  Key methods were discussed in the Plugins and Extensions section.  The `options.plugins` section in the chart configuration allows controlling plugin options.\n\n\n### Scale API\n\nThe scale API provides methods to interact with the chart's axes (scales).  This is done indirectly through the `options.scales` object.  Each scale type (linear, logarithmic, time, etc.) has its own set of configuration options,  but common properties include:\n\n* **`type`:** Specifies the scale type.\n* **`position`:** Specifies the position of the scale (top, bottom, left, right).\n* **`min` and `max`:**  Specify the minimum and maximum values for numerical scales.\n* **`ticks`:**  An object to customize the ticks (labels) on the scale.\n* **`grid`:** An object to configure the grid lines.\n\nDirect access to scale objects is generally through Chart.js internal methods and not typically needed for common customizations.\n\n\n### Element API\n\nChart.js elements represent the visual components of the chart (bars, points, arcs, etc.). You don't directly instantiate elements but access them through the Chart instance.  Methods like `chart.getElementsAtEvent(e)` can help retrieve elements at a specific location on the chart.  The properties and methods of elements depend on the specific chart type, and direct manipulation is generally not recommended unless you're creating highly custom chart extensions.\n\n\nThis API reference provides a high-level summary. Always consult the official Chart.js documentation for the most current and detailed API information.  The documentation includes detailed explanations of each method, property, and configuration option.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"},"include-in-header":["../../favicon.html","../../header.html"],"include-after-body":[{"text":"<script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3609399560636561\" crossorigin=\"anonymous\"></script>\n"},"../../footer.html"],"output-file":"chartjs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.39","theme":"pandoc","mermaid":{"theme":"neutral"},"minimal":true,"title-block-banner":true,"page-navigation":true,"license":"MIT","author-meta":"Muthukrishnan","title":"Chart.js - Documentation","categories":["JavaScript Libraries and Functions"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}