---
title: "DataTables - Documentation"
categories: [ "JavaScript Libraries and Functions" ]
---
## Introduction

### What is DataTables?

DataTables is a powerful Javascript library that provides plug-and-play functionality to enhance HTML tables with advanced features such as sorting, pagination, filtering, and more. It transforms basic HTML tables into interactive data grids, significantly improving the user experience when dealing with large or complex datasets.  DataTables is highly customizable, allowing developers to tailor its appearance and functionality to match specific application requirements.  It's built for speed and efficiency, handling thousands of rows of data smoothly even on less powerful hardware.

### Key Features

DataTables boasts a comprehensive set of features, including but not limited to:

* **Sorting:**  Easily sort table data by any column in ascending or descending order.
* **Pagination:** Display large datasets in manageable chunks across multiple pages.
* **Filtering:** Quickly search and filter data based on specific keywords or criteria.
* **Advanced Filtering:** Implement complex filtering logic using regular expressions and multiple criteria.
* **Column Reordering:** Allow users to interactively rearrange table columns.
* **Column Visibility:**  Show or hide specific columns to customize the displayed information.
* **Row Selection:** Enable users to select individual rows or ranges of rows.
* **Data Editing:** Integrate inline or form-based editing capabilities directly within the table.
* **Server-Side Processing:** Efficiently handle massive datasets by fetching and processing data on the server.
* **Extensibility:** Easily extend DataTables functionality through its extensive API and numerous plug-ins.
* **Responsive Design:** Adapt to various screen sizes and devices seamlessly.
* **Themes and Styling:** Customize the appearance of DataTables using built-in themes or custom CSS.


### Getting Started

To effectively utilize DataTables, familiarity with basic HTML, CSS, and JavaScript is recommended.  The library is designed with a simple yet powerful API that allows for quick integration and customization. This manual will guide you through the process of incorporating DataTables into your projects, explaining its core functionality and advanced features.  We'll cover common use cases and provide examples to illustrate how to implement various options and configurations.


### Installation

DataTables can be integrated into your project in several ways:

* **CDN (Content Delivery Network):** The easiest method is using a CDN link within your HTML `<head>` section. This avoids the need for local file management. Include the necessary CSS and JavaScript files.  Refer to the DataTables website for the most up-to-date CDN links.

* **Download:** Download the DataTables library from the official website. This provides more control over the files and allows for offline usage.  Extract the downloaded files and include the CSS and JavaScript files in your project structure, linking them appropriately in your HTML.

* **npm (Node Package Manager):** For projects using npm, install DataTables using the following command:  `npm install datatables.net` This method is particularly beneficial for larger projects using a package manager.  You will then need to configure the appropriate webpack or similar build process to include DataTables in your application bundle.  Note that some plugins may require separate installation via npm.


## Basic Usage

### Initializing DataTables

The core of using DataTables involves initializing the library on an HTML table element.  This is typically done using JavaScript after the table and DataTables script have been included in your HTML.  The simplest initialization involves selecting the table element using its ID and calling the `DataTable()` function.

For example, given an HTML table with the ID "example":

```html
<table id="example">
    <thead>
        <tr>
            <th>Column 1</th>
            <th>Column 2</th>
            <th>Column 3</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Data 1</td>
            <td>Data 2</td>
            <td>Data 3</td>
        </tr>
        <tr>
            <td>Data 4</td>
            <td>Data 5</td>
            <td>Data 6</td>
        </tr>
    </tbody>
</table>
```

The JavaScript to initialize DataTables would be:

```javascript
$(document).ready( function () {
    $('#example').DataTable();
} );
```

This single line of code automatically adds sorting, pagination, and filtering to the table.  Remember to include the jQuery library before the DataTables script, as DataTables relies on jQuery.


### Data Sources

DataTables can handle data from various sources:

* **HTML Table:**  As shown in the previous example, DataTables can directly process data present within an HTML table element.  This is the simplest approach for smaller datasets.

* **JSON (JavaScript Object Notation):** For larger or dynamically generated datasets, JSON is the preferred method.  DataTables can be configured to fetch data from a JSON array or a JSON object returned from a server-side script.  This is specified using the `ajax` option. Example:

```javascript
$('#example').DataTable( {
    "ajax": "data.json" // Path to your JSON data file
} );
```

* **Server-Side Processing:**  For extremely large datasets, it's crucial to use server-side processing. This involves sending requests to a server to retrieve only the necessary data for a specific page.  This significantly improves performance and scalability.  DataTables provides extensive options for configuring server-side processing.


### Basic Table Styling

DataTables includes a default CSS stylesheet that provides a clean and functional look.  However, you can easily customize the appearance using your own CSS or by selecting from various available themes.  To use a custom CSS, simply include your stylesheet after the DataTables stylesheet in your HTML `<head>`.  You can target specific elements using the classes provided by DataTables for granular control over the styling of various table components (e.g., table header, pagination buttons, etc.).


### Default Functionality

By default, DataTables provides the following functionality:

* **Sorting:** Clicking on a column header will sort the table data in ascending or descending order based on the values in that column.

* **Pagination:**  The table will be paginated, displaying a specified number of rows per page (default is 10).  Pagination controls (first, previous, next, last) will be automatically generated.

* **Filtering:**  A search box will appear above the table, allowing users to filter the data by typing keywords.  The filtering is case-insensitive and searches across all columns.

These default features offer immediate improvements to the usability of your HTML tables, providing a basic but powerful interactive data grid.  Further customization and extension of these functionalities are described in subsequent sections.


## Data Manipulation

### Adding Data

DataTables offers several ways to add new data:

* **Directly to the DOM:**  For small, infrequent additions, you can directly manipulate the HTML table's DOM using JavaScript.  After adding the new row to the table, call `$('#example').DataTable().row.add(newRow).draw();` to reflect changes in DataTables.  Replace `newRow` with the jQuery object representing the new row.

* **Using the API:**  The DataTables API provides a more robust method for adding rows.  Use `table.row.add(data).draw();`, where `table` is your DataTables instance and `data` is an array representing the data for the new row.  This method handles updates to pagination and filtering automatically.  For example:

```javascript
var table = $('#example').DataTable();
table.row.add( [ 'New data 1', 'New data 2', 'New data 3' ] ).draw();
```

* **Server-Side Addition:**  For large-scale data management, add new data on the server and then refresh the DataTables instance by re-initiating it, or using the `ajax.reload()` method if using server-side processing.


### Deleting Data

Data can be removed using DataTables' row manipulation capabilities.  Again, there are several approaches:

* **Direct DOM Manipulation:**  Remove the row from the DOM and then redraw DataTables. This is less preferred for larger tables due to performance considerations.

* **Using the API:**  The recommended approach is to use the DataTables API's `row().remove().draw()` method.  This identifies the row to delete and efficiently updates the table's view. You can identify the row using a node object, row index, or a selector. Example:

```javascript
var table = $('#example').DataTable();
table.row(0).remove().draw(); //Removes the first row
```

* **Server-Side Deletion:**  For server-side processing, delete the data on the server and then refresh the DataTables instance using `ajax.reload()` to reflect the changes in the client-side view.


### Updating Data

Similar to adding and deleting, data updates can be done directly in the DOM or using the DataTables API.  The API offers a cleaner and more efficient approach:

* **Using the API:**  Use the `row().data()` method to modify the data associated with a specific row. The `draw()` method updates the table's display. Example:


```javascript
var table = $('#example').DataTable();
table.row( 1 ).data( [ 'Updated data 1', 'Updated data 2', 'Updated data 3' ] ).draw(); //Updates the second row
```

* **Server-Side Updates:** For server-side processing, update the data on the server and use `ajax.reload()` to refresh the DataTable on the client side.


### Filtering Data

DataTables' built-in filtering allows users to filter data based on text entered into the search box.  You can further customize this using the API:

* **Column-Specific Filtering:**  Use `column().search()` to filter individual columns.

* **Regular Expressions:** Employ regular expressions for advanced filtering capabilities.

* **Multiple Filters:**  Combine multiple search criteria using the appropriate API methods.


### Searching Data

Searching functionality is closely tied to filtering.  The default search box performs a simple string search across all columns.  Advanced searching capabilities provided through the API enable more granular control:

* **Case-sensitive/insensitive searches:** Configure the search to be case-sensitive or insensitive.

* **Regex Searches:**  Utilize regular expressions for complex search patterns.

* **Searching specific columns:** Focus the search on particular columns instead of the entire table.

Remember to use the `draw()` method after making any changes to reflect them in the DataTables display.  For server-side processing, ensure that all data manipulation happens on the server, and that the client-side DataTable is refreshed using `ajax.reload()` to ensure consistency.


## Table Features

### Pagination

DataTables' pagination feature allows users to view large datasets in manageable chunks.  By default, DataTables displays 10 rows per page, but this is easily configurable.  The pagination controls (first, previous, next, last) are automatically generated, and the user can select the number of entries to display per page via the length menu (see below).  The pagination type can also be customized.  Options include:

* **`simple`:** A simple set of previous and next buttons.
* **`full`:**  Includes first, previous, next, and last buttons, along with page number display.
* **`full_numbers`:**  Similar to `full`, but also shows page numbers.
* **`numbers`:** Only shows page numbers.


You control pagination settings through the `paging` and `pagingType` options in the DataTables initialization:

```javascript
$('#example').DataTable( {
    "paging": true, // Enable/disable pagination
    "pagingType": "full_numbers" // Set pagination type
} );
```

Server-side processing significantly enhances pagination performance for very large datasets.


### Sorting

DataTables provides automatic column sorting.  Clicking on a column header will sort the table data in ascending or descending order based on the values in that column.  This sorting functionality is enabled by default.  You can customize sorting behavior:

* **Disable sorting:** Set `columnDefs` to disable sorting on specific columns:

```javascript
$('#example').DataTable( {
    "columnDefs": [ {
        "targets": 0, // Target the first column (index 0)
        "orderable": false // Disable sorting for this column
    } ]
} );
```

* **Define Sorting Order:** Specify default sorting order using `order` option in the initialization:

```javascript
$('#example').DataTable( {
    "order": [[ 1, "desc" ]] // Sort the second column (index 1) in descending order
} );
```

* **Custom Sorting:**  Implement custom sorting logic for non-standard data types using the `order` option and `fnSortData` option (for more advanced cases).


### Column Ordering

DataTables allows for reordering columns using the `columnDefs` option to specify a different column order.  The `columns` option can be used to specify column settings, including their order.

```javascript
$('#example').DataTable({
  "columns": [
    { "data": "column3" },
    { "data": "column1" },
    { "data": "column2" }
  ]
});
```

Interactive column reordering by users is typically handled with a separate plugin.


### Scrolling

For tables that exceed the available screen height, scrolling options enhance usability. DataTables offers:

* **`scrollY`:** Enables vertical scrolling, setting a fixed height for the table.

* **`scrollX`:** Enables horizontal scrolling, particularly useful for tables with many columns.

* **`scrollCollapse`:** Collapses the table height if the content is less than the specified `scrollY` height.

Example:

```javascript
$('#example').DataTable( {
    "scrollY": "200px",
    "scrollX": true,
    "scrollCollapse": true
} );
```

This combination creates a scrollable table with a fixed height of 200px and horizontal scrolling if needed, collapsing if the content is shorter.


### Length Menu

The length menu allows users to select the number of rows displayed per page.  It's customizable:

* **Default:** DataTables offers a default length menu.

* **Customization:** You can customize the displayed options using the `lengthMenu` option:

```javascript
$('#example').DataTable( {
    "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]] // Options and labels
} );
```

This example provides options of 10, 25, 50, and "All" rows per page.


### DOM Manipulation

While DataTables manages much of the table's DOM, you can still interact with it.  However, be mindful of DataTables' internal workings.  Directly manipulating the table's DOM might disrupt DataTables' functionality. It's generally best to use the DataTables API for adding, removing, and updating data and structure.  If you *must* directly manipulate the DOM, ensure you call `table.draw()` afterwards to update DataTables' internal state and refresh the display.  Avoid directly modifying the table's structure during DataTables' initialization or rendering processes.


## Advanced Features

### Plugins

DataTables' extensibility is a key strength.  Numerous community-created plugins extend its functionality.  These plugins add features like:

* **Enhanced row selection:**  Provide more sophisticated row selection methods (e.g., checkboxes, multiple selection).
* **Data editing:**  Integrate inline or form-based editing directly into the table.
* **Exporting data:**  Export table data to various formats (CSV, Excel, PDF).
* **Charts and graphs:**  Visualize table data using charts.
* **Advanced filtering and searching:**  Provide more refined search and filter options.

To use a plugin, include its JavaScript and CSS files (if any) in your project, and then initialize DataTables as usual.  Consult the plugin's documentation for specific integration instructions.


### Customization

Beyond the basic configuration options, DataTables allows extensive customization:

* **CSS Styling:** Use CSS to modify the table's appearance, overriding DataTables' default styles.
* **JavaScript Configuration:**  A wide array of options are available in the `DataTable()` initialization to configure numerous aspects of the table's behavior.
* **Language Files:**  Translate DataTables' interface into different languages using language files.
* **Custom Rendering:** Implement custom rendering logic for individual cells to display data in specific formats.


### API Methods

DataTables' extensive API offers granular control over the table.  Key methods include:

* **`row().add()`:** Add a new row.
* **`row().remove()`:** Remove a row.
* **`row().data()`:** Get or set the data of a row.
* **`column().search()`:** Apply a search filter to a specific column.
* **`order()`:** Set the sorting order.
* **`draw()`:** Redraw the table after modifications.
* **`ajax.reload()`:** Reload data from the server (for server-side processing).

These methods provide a programmatic interface for manipulating and interacting with the table's data and presentation.


### Events

DataTables triggers various events throughout its lifecycle.  These events allow you to respond to user interactions (sorting, filtering, pagination) and table state changes.  You can bind event handlers using jQuery's `.on()` method.  Example:

```javascript
$('#example').on( 'draw.dt', function () {
    console.log('Table redrawn');
} );
```

This code logs a message to the console whenever the table is redrawn.


### Callbacks

Callbacks are functions executed at specific points during DataTables' operation.  They provide hooks for customizing behavior.  Common callbacks include `createdRow`, `drawCallback`, `initComplete`, etc.  These are specified during DataTables initialization.  Example:

```javascript
$('#example').DataTable( {
    "createdRow": function ( row, data, index ) {
        // Custom processing for each row
    }
} );
```

This adds custom processing to each row as it's created.


### Server-Side Processing

For large datasets, server-side processing is essential for performance.  This involves fetching only the necessary data from the server for each page, significantly improving responsiveness.  DataTables needs to be configured to communicate with a server-side script that handles data requests, filtering, sorting, and pagination.  The `ajax` option is crucial here, specifying the URL of your server-side script and data processing details.


### AJAX Integration

AJAX (Asynchronous JavaScript and XML) is used heavily with DataTables, especially with server-side processing.  The `ajax` option in the DataTables configuration specifies the URL of the server-side script that will handle data requests.  This script typically receives parameters for pagination, sorting, and filtering, and returns the processed data in a JSON format that DataTables understands.  The interaction with the server is asynchronous, so the user interface remains responsive while data is fetched.  Error handling and loading indicators are important considerations when working with AJAX in DataTables.


## Styling and Theming

### CSS Classes

DataTables uses a consistent set of CSS classes to style its various components.  Understanding these classes is crucial for customizing the table's appearance.  Key classes include:

* **`dataTables_wrapper`:** The main container for the DataTables instance.
* **`dataTables_length`:** Container for the length changing select option.
* **`dataTables_filter`:** Container for the search input.
* **`dataTables_info`:** Container for the information summary (e.g., "Showing 1 to 10 of 50 entries").
* **`dataTables_paginate`:** Container for the pagination controls.
* **`paginate_button`:** Individual pagination buttons.
* **`sorting`, `sorting_asc`, `sorting_desc`:** Classes applied to sortable column headers indicating their sorting state.
* **`odd`, `even`:** Classes applied to table rows for alternating row styling.


By targeting these classes with your custom CSS, you can modify various aspects of the table's visual presentation.


### Custom Styling

Custom styling is achieved through CSS.  Include your custom CSS file after the DataTables CSS file to override default styles.  Use the DataTables CSS classes as selectors to target specific elements. For example, to change the background color of even rows:

```css
.even {
    background-color: #f2f2f2;
}
```

You can also target more specific elements within the table structure (e.g., table headers, pagination buttons) for detailed customization.  Remember to use browser developer tools to inspect the HTML structure and identify the appropriate classes to target.


### Themes

Several DataTables themes are available, offering pre-designed styles.  These themes often provide a consistent look and feel, saving time and effort.  Many themes are available from third-party sources or through community contributions.  Integrating a theme usually involves including its CSS file in your project and potentially adjusting your existing CSS to avoid conflicts. Refer to the theme's documentation for specific instructions.


### Responsive Design

DataTables itself doesn't inherently provide responsive design features; rather, it's designed to work well within responsive layouts.  To ensure DataTables renders correctly on different screen sizes, use CSS media queries and consider techniques like:

* **`columnDefs` with `responsivePriority`:** Control the order in which columns are hidden on smaller screens, prioritizing essential columns. This setting is part of the DataTables Responsive extension.

* **External Responsive Libraries:** Integrate with other responsive design libraries or frameworks to handle layout adjustments across devices.

* **Mobile-Specific CSS:** Create separate CSS rules targeting smaller screen sizes (using media queries) to adjust styling and column visibility for optimal mobile viewing.

* **DataTables Responsive Extension:** This official extension provides features for automatically adjusting the table layout to various screen sizes. This extension is often the most efficient way to achieve responsive behavior with DataTables.  It offers features such as column hiding, stacking columns, and other adaptive rendering options.  Consult the official documentation for its usage.

Remember that effective responsive design is a combination of DataTables configuration and thoughtful CSS that adapts to various screen sizes.


## Accessibility

DataTables is designed with accessibility in mind, but proper implementation requires careful attention to detail.  While DataTables provides a foundation, developers must take further steps to ensure full accessibility for users with disabilities.

### ARIA Attributes

DataTables automatically adds several ARIA (Accessible Rich Internet Applications) attributes to enhance accessibility for screen reader users.  These attributes provide contextual information about the table's structure and interactive elements.  However,  it's vital to ensure that your custom CSS or JavaScript modifications don't unintentionally remove or conflict with these attributes.  Key ARIA attributes added by DataTables include:

* **`role="grid"`:** Identifies the table as a data grid.
* **`role="columnheader"`:** Applied to sortable column headers.
* **`aria-sort="ascending"` or `aria-sort="descending"`:** Indicates the current sorting direction of a column.
* **`aria-labelledby`:**  Connects table cells to their corresponding header cells.
* **`aria-describedby`:** Links to descriptions or instructions about the table's functionality.
* **`aria-controls`:**  Links pagination controls to the table they affect.


Ensure these attributes remain intact after any customizations.  If you're making significant structural changes, verify that ARIA attributes are correctly applied and reflect the table's actual state.

### Keyboard Navigation

DataTables supports keyboard navigation, allowing users to interact with the table using only the keyboard.  Users can typically navigate through rows and columns using arrow keys, sort columns using designated keys (often the spacebar or enter key), and use the tab key to move between interactive elements. However, verifying keyboard navigation is crucial, especially after customization.  Test thoroughly to ensure consistent and predictable keyboard interactions across all features, including:

* **Navigation:**  Easy and intuitive movement through rows and columns.
* **Sorting:**  Clear keyboard shortcuts to sort columns.
* **Filtering:**  Ability to access and use the filter input efficiently with the keyboard.
* **Pagination:**  Clear keyboard shortcuts for page navigation.


### Screen Reader Compatibility

Effective screen reader compatibility requires proper ARIA attributes and semantic HTML. While DataTables adds ARIA attributes, you need to ensure your modifications don't break this compatibility.  Testing with various screen readers is essential to identify any accessibility issues.  Consider the following:

* **Clear Header Labels:**  Ensure that column headers are clearly defined and associated with the correct data cells using ARIA attributes.
* **Meaningful Row and Cell IDs:**  Use consistent and meaningful IDs for rows and cells to help screen readers navigate and interpret the data.
* **Concise and Informative Descriptions:**  Provide concise and informative descriptions of the table's content and functionality using ARIA attributes, aiding understanding for screen reader users.
* **Comprehensive Testing:**  Test thoroughly with different screen readers (JAWS, NVDA, VoiceOver) to identify and address any accessibility issues specific to each reader.


Remember that accessibility is an ongoing process, and regular testing is crucial to maintain compatibility as your application evolves.  Thorough testing across different assistive technologies is the best way to ensure your DataTables implementation is truly accessible.


## Troubleshooting

### Common Issues

Several common issues arise when working with DataTables:

* **DataTables not initializing:** This often stems from incorrect inclusion of JavaScript files (jQuery, DataTables), incorrect table ID selectors, or conflicts with other JavaScript libraries.  Ensure all necessary files are included in the correct order and that there are no JavaScript errors in your console.  Double-check your table's ID and the selector used in the `DataTable()` call.

* **No data displayed:**  Verify that your data source is correctly specified (HTML table, JSON, AJAX).  Inspect the browser's developer console for network errors or data-related issues.  If using AJAX, check your server-side script for correct data formatting and response.

* **Incorrect sorting or filtering:** Double-check your data types and ensure they're compatible with DataTables' sorting and filtering mechanisms.  If you've customized sorting or filtering, verify that your custom logic is correct.

* **Styling issues:**  Conflicts between DataTables' default CSS and your custom CSS can cause styling problems.  Check your CSS for overriding rules and ensure that your custom CSS is correctly included after the DataTables CSS file.  Use your browser's developer tools to inspect the table's HTML and CSS to identify style conflicts.

* **Performance problems:**  For large datasets, server-side processing is essential.  Without it, DataTables might become slow or unresponsive.  If using AJAX, optimize your server-side script for efficient data retrieval.  Consider using techniques such as data virtualization for extremely large tables.


### Debugging Tips

Effective debugging strategies are essential for resolving DataTables issues:

* **Browser Developer Tools:** Utilize your browser's developer tools (usually accessed by pressing F12) to inspect the console for JavaScript errors, network requests, and HTML/CSS rendering issues.  The console provides invaluable information for identifying and resolving many problems.

* **Simplify:**  If you're encountering a complex issue, try simplifying your code to isolate the problem.  Start with a minimal DataTables setup and progressively add features until you pinpoint the source of the error.

* **Check Data Source:** Verify that your data source (HTML table, JSON, AJAX) is correct and accessible.  Inspect the data being received by DataTables using the console or debugging tools.

* **Check for Conflicts:** Ensure that DataTables isn't conflicting with other JavaScript libraries on your page.  Try disabling other scripts temporarily to see if the issue is resolved.

* **Consult Documentation and Community Resources:**  Refer to the official DataTables documentation, API reference, and community forums for solutions to common problems and helpful examples.  Searching for similar issues online can often provide solutions or workarounds.


### Error Messages

DataTables usually doesn't produce verbose error messages.  Most errors manifest as unexpected behavior (e.g., no data displayed, incorrect sorting, styling issues).  The browser's JavaScript console is your primary source of information for identifying problems.  Pay close attention to:

* **`Uncaught TypeError` or `Uncaught ReferenceError`:**  These errors often indicate problems with including JavaScript files or using incorrect variable names.

* **Network Errors:**  If using AJAX, inspect network requests in the developer tools to identify any server-side issues or data transfer problems.  Check HTTP status codes (e.g., 404 Not Found, 500 Internal Server Error) to diagnose server-side problems.

* **`DataTables warning`:** These warnings (not errors) may highlight potential issues, such as missing plugins or configuration inconsistencies.  While not always critical, they're worth investigating to optimize performance and prevent potential problems.


Careful inspection of the browser console and systematic debugging are crucial for resolving DataTables issues.  The process often involves eliminating potential causes one by one until the problem is identified.


## Examples

These examples demonstrate various DataTables implementations.  Remember to include the necessary jQuery and DataTables files in your HTML before running these examples.  Consult the DataTables documentation for the most up-to-date CDN links.

### Basic Example

This example showcases basic DataTables initialization on a simple HTML table:

```html
<!DOCTYPE html>
<html>
<head>
<title>DataTables Basic Example</title>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<script type="text/javascript" src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
</head>
<body>

<table id="example">
    <thead>
        <tr>
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Tiger Nixon</td>
            <td>System Architect</td>
            <td>Edinburgh</td>
        </tr>
        <tr>
            <td>Garrett Winters</td>
            <td>Accountant</td>
            <td>Tokyo</td>
        </tr>
        <tr>
            <td>Ashton Cox</td>
            <td>Junior Technical Author</td>
            <td>San Francisco</td>
        </tr>
    </tbody>
</table>

<script>
$(document).ready( function () {
    $('#example').DataTable();
} );
</script>

</body>
</html>
```

This code creates a sortable and paginated table with minimal configuration.


### Advanced Example

This example demonstrates more advanced features, including custom column ordering, specific column sorting, and disabling sorting on a column:

```javascript
$(document).ready( function () {
    $('#example').DataTable( {
        "columns": [
            { "data": "name" },
            { "data": "position" },
            { "data": "office" }
        ],
        "order": [[ 1, "desc" ]], //Sort the second column in descending order
        "columnDefs": [
            {
                "targets": 2, //Target the third column (index 2)
                "orderable": false //Disable sorting for this column
            }
        ]
    } );
} );
```

This requires a JSON data source (replace `"data": "..."` with your JSON data).  The data structure needs to match the column definitions (`name`, `position`, `office`).



### Server-Side Example

This example requires a server-side script (e.g., in PHP, Python, Node.js) to handle data requests.  The client-side code would look like this:

```javascript
$(document).ready( function () {
    $('#example').DataTable( {
        "processing": true,
        "serverSide": true,
        "ajax": "server_processing_script.php" //Replace with your server script URL
    } );
} );
```

You'll need to create `server_processing_script.php` (or equivalent in your chosen language) to handle the requests from DataTables and return data in the expected JSON format.  See the DataTables documentation for details on the required JSON structure for server-side processing.


### Plugin Examples

Plugin examples require including the specific plugin's JavaScript and CSS files.  The exact implementation depends on the plugin. Refer to the chosen plugin's documentation for instructions.  For instance, using a button to export data to Excel would involve including the Buttons extension, configuring it appropriately, and adding buttons to the table.  The DataTables website provides extensive examples and documentation for various extensions.  Remember to always consult the relevant plugin's documentation for specifics on integration and usage.


## API Reference

This section provides a high-level overview of the DataTables API.  For detailed information and specific options, refer to the complete API documentation on the official DataTables website.

### DataTables Object

The core of the DataTables API revolves around the `DataTable` object.  This object is created when you initialize DataTables on a table element using `$('#myTable').DataTable()`.  This object provides access to methods, properties, and events related to the table instance.  It’s the central point for manipulating and interacting with the table programmatically.  Many API methods are chained, allowing for concise and readable code.

### Methods

The DataTables API offers numerous methods for manipulating and interacting with the table.  Key method categories include:

* **Data manipulation:**  Methods for adding (`row().add()`), deleting (`row().remove()`), and updating (`row().data()`) rows; managing data sources.
* **Table display:** Methods for redrawing (`draw()`), refreshing (`ajax.reload()`), and controlling pagination.
* **Filtering and searching:** Methods for applying and managing search filters (`search()`, `column().search()`).
* **Sorting:** Methods for setting and managing the sorting order (`order()`).
* **Row selection:** Methods for selecting and deselecting rows.
* **Column management:** Methods to control column visibility, ordering, and other column-specific settings.
* **Configuration:** Methods to adjust settings after initialization.


Each method has specific parameters and return values, detailed in the complete API documentation.  Many methods are chainable, allowing multiple operations in a single line of code.  For example: `table.row(0).data(['New Name', 'New Position']).draw()`.


### Events

DataTables triggers various events during its operation.  These events allow you to respond to user actions (like sorting or filtering) and table state changes.  These events are typically handled using jQuery's `.on()` method.  Common events include:

* **`init.dt`:** Triggered when the DataTables instance is initialized.
* **`draw.dt`:** Triggered after each table redraw.
* **`search.dt`:** Triggered after a search is performed.
* **`order.dt`:** Triggered after sorting is applied.
* **`page.dt`:** Triggered after the page changes.
* **`select.dt`:** Triggered after a row is selected (if row selection is enabled).
* **`length.dt`:** Triggered when the number of rows displayed per page is changed.


By listening for these events, you can customize DataTables' behavior based on user actions or table state changes. The names of events often follow a convention of  `eventName.dt`.


### Properties

DataTables exposes various properties that allow you to access and modify settings.  These are generally accessed via the `settings()` method.  However, direct access to properties is generally discouraged, as it can bypass DataTables' internal mechanisms and lead to unpredictable behavior. Instead use the appropriate API methods.  Examples of properties include:

* **`aoColumns`:** Array of column settings.
* **`aaData`:**  The table's data array (accessing this directly is usually avoided; use API methods instead).
* **`oLanguage`:** Language settings.
* **`iDisplayLength`:**  Number of rows displayed per page.
* **`aaSorting`:** The initial sort order.


Modifying properties directly can lead to inconsistencies; prefer using API methods whenever possible to manipulate DataTables' internal state. The settings are usually accessed via `table.settings()[0]` and should be handled with care.  Direct manipulation is generally not recommended unless you have a very specific need and a thorough understanding of DataTables' internal structure.  Using API methods is always the preferred and more reliable approach.

Remember to consult the official DataTables API documentation for the most complete and up-to-date information on available methods, events, and properties.

