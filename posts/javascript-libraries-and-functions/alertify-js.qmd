---
title: "Alertify JS - Documentation"
categories: [ "JavaScript Libraries and Functions" ]
---


### What is AlertifyJS?

AlertifyJS is a JavaScript library designed to provide a simple yet elegant way to display notifications, alerts, and dialog boxes in web applications.  It offers a clean, customizable interface that integrates seamlessly with various JavaScript frameworks and projects.  Unlike browser's default alert boxes, AlertifyJS provides more visually appealing and user-friendly alternatives, improving the overall user experience. It allows developers to easily create different types of alerts (success, error, warning, message) with various options for customization.

### Key Features and Benefits

* **Clean and Customizable Design:** AlertifyJS boasts a modern and customizable design, allowing developers to easily tailor the appearance of alerts to match their application's theme.
* **Multiple Alert Types:** Supports various alert types such as success, error, warning, and message, each with distinct visual cues.
* **Dialog Boxes:** Provides functionality for creating customizable dialog boxes for user interaction beyond simple notifications.
* **Easy Integration:** Integrates easily into existing projects, with minimal code required for implementation.
* **Lightweight:**  The library is lightweight and efficient, minimizing the impact on page load times.
* **Accessibility:**  Designed with accessibility in mind, ensuring usability for users with disabilities.
* **Extensibility:**  Offers extensibility options for developers who need advanced customization beyond the basic configurations.

### Setting up AlertifyJS: Installation and Setup

AlertifyJS can be included in your project using various methods:


**1. Using a CDN:** The simplest method is to include AlertifyJS via a CDN link in your HTML file:

```html
<script src="https://cdnjs.cloudflare.com/ajax/libs/alertifyjs/1.13.1/alertify.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/alertifyjs/1.13.1/css/alertify.min.css"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/alertifyjs/1.13.1/css/themes/default.min.css"/>
```
Remember to replace `1.13.1` with the latest version number if needed.  You can also choose different themes.


**2. Using npm (for Node.js projects):**

If you're using npm, you can install AlertifyJS using the following command:

```bash
npm install alertifyjs
```

Then, import it into your JavaScript file:

```javascript
import alertify from 'alertifyjs';
```

**3. Downloading and including locally:** Download the AlertifyJS files from the official website and include them in your project's directory.  Then, reference the CSS and JS files in your HTML as shown in the CDN example.

After including AlertifyJS, you're ready to start using its features.


### Basic Usage Examples

Here are some basic examples demonstrating how to use AlertifyJS to display different types of alerts:

**1. Simple Alert:**

```javascript
alertify.alert('This is a simple alert message.');
```

**2.  Success Alert:**

```javascript
alertify.success('Operation completed successfully!');
```

**3. Error Alert:**

```javascript
alertify.error('An error has occurred.');
```

**4. Warning Alert:**

```javascript
alertify.warning('Please be careful!');
```

**5. Confirm Dialog:**

```javascript
alertify.confirm('Are you sure?', function(e) {
  if (e) {
    alertify.success('Confirmed!');
  } else {
    alertify.error('Cancelled!');
  }
});
```

These examples showcase the basic functionality of AlertifyJS. Refer to the complete documentation for advanced usage and customization options. Remember to consult the official documentation for the latest version and more detailed information on available options and methods.


## Core Notification Methods

### Displaying Messages: success, error, warning, log

AlertifyJS provides four core methods for displaying notifications, each conveying a different level of urgency or information:

* **`alertify.success(message, [title], [callback])`**: Displays a success message, typically indicating a successful operation.  The message is the required parameter, `title` is optional, and `callback` is an optional function executed after the notification closes.

* **`alertify.error(message, [title], [callback])`**: Displays an error message, indicating a problem or failure.  Like `success`,  `message` is required, while `title` and `callback` are optional.

* **`alertify.warning(message, [title], [callback])`**: Displays a warning message, alerting the user to a potential issue or requiring attention. `message` is required, `title` and `callback` are optional.

* **`alertify.log(message, [title], [callback])`**: Displays a general log message. This is suitable for informational messages that don't require a specific success/error/warning categorization. `message` is required, `title` and `callback` are optional.

All methods accept a message string as the first argument.  The optional `title` argument allows adding a title to the notification. The optional `callback` function is executed after the notification is closed (or dismissed by the user).

Example:

```javascript
alertify.success('File uploaded successfully!');
alertify.error('Failed to connect to the server.');
alertify.warning('Your session is about to expire.');
alertify.log('User logged in.');
```


### Customizing Notifications: title, message, delay, position

Beyond the basic message display, AlertifyJS offers several options to customize notifications:

* **`title`:** As mentioned above, you can add a title to your notifications using the second argument in the core methods. This helps categorize or further clarify the message.

* **`message`:** This is the main content of the notification.  You can use HTML tags (though sanitization is recommended for security) for formatting within the message.

* **`delay`:**  Control the auto-close delay (in milliseconds) of the notification using `alertify.set('delay', milliseconds);`.  A value of 0 disables auto-close.  This setting affects all subsequent notifications until changed again.

* **`position`:**  Define the notification's position on the screen using `alertify.set('position', 'top-right' | 'top-center' | 'top-left' | 'bottom-right' | 'bottom-center' | 'bottom-left');`.  This sets the position for all future notifications.


Example:

```javascript
alertify.set('delay', 5000); // Set delay to 5 seconds
alertify.set('position', 'top-right'); // Set position to top-right

alertify.success('Data saved!', 'Success!');

alertify.error('Error: ' + error_message, 'Error', function(){
    //code executed after closing the alert
});
```


### Notification Themes and Styling

AlertifyJS provides several built-in themes, and you can customize the styling further.  The default theme is usually sufficient, but you can easily switch to another by including a different theme CSS file (see installation section).  For deeper customization, you'll likely need to modify the provided CSS file directly,  or create your own custom CSS to override default styles.

To include a theme, simply link the corresponding CSS file in your HTML.  For instance, for the "default" theme (which is usually included by default)  you might have something like: `<link rel="stylesheet" href="alertify.min.css">` and `<link rel="stylesheet" href="themes/default.min.css">`.  Consult the AlertifyJS documentation for available theme files.

### Using Icons in Notifications

AlertifyJS doesn't inherently include icons in its core notification methods.  To add icons, you'll need to include an icon library (like Font Awesome) and then incorporate the icon classes into the notification's `message` string using HTML.


Example (using Font Awesome):

```html
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<script>
alertify.success('<i class="fas fa-check-circle"></i> File uploaded successfully!');
alertify.error('<i class="fas fa-exclamation-triangle"></i> An error occurred!');
</script>
```

Remember to replace `"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"` with the correct path to your icon library's CSS file.  Ensure the icon class names are accurate for the library you use.


## Dialog Boxes and Prompts

### Creating Confirmation Dialogs

AlertifyJS provides a simple way to create confirmation dialogs using the `alertify.confirm()` method. This method displays a dialog box with a message and two buttons: "OK" and "Cancel".  The callback function receives a boolean value indicating whether the user clicked "OK" (true) or "Cancel" (false).

```javascript
alertify.confirm('Are you sure you want to delete this item?', function (e) {
  if (e) {
    // User clicked 'OK'
    alertify.success('Item deleted successfully!');
    // Perform delete operation here
  } else {
    // User clicked 'Cancel'
    alertify.log('Deletion cancelled.');
  }
});
```

You can customize the text of the buttons using the `labels` option (see Customizing Dialog Appearance and Behavior).


### Creating Prompt Dialogs: Input Fields and Validation

AlertifyJS also allows creating prompt dialogs that include an input field for user input. This is achieved using the `alertify.prompt()` method.  The first argument is the prompt message, the second is a callback function that receives the user's input (or null if canceled).

```javascript
alertify.prompt('Please enter your username:', function (e, str) {
  if (e) {
    // User clicked 'OK'
    if (str.length > 0) {
        alertify.success('Username: ' + str);
        // Process username
    } else {
        alertify.error('Username cannot be empty.');
    }
  } else {
    // User clicked 'Cancel'
    alertify.log('Prompt cancelled.');
  }
});
```

You can perform client-side validation on the input within the callback function before processing it.  For more robust validation, server-side validation is recommended.


### Customizing Dialog Appearance and Behavior

You can customize the appearance and behavior of dialog boxes using various options:

* **`title`:** Set a title for the dialog box (optional).
* **`message`:** The main message to be displayed in the dialog box.  HTML tags can be used for formatting.
* **`labels`:** An object containing custom labels for the buttons.  For example: `{ok: 'Yes', cancel: 'No'}`.
* **`onok` & `oncancel`:**  Callback functions to be executed when the respective buttons are clicked (can be used as alternatives to the main callback).
* **`defaultAnswer`:** Sets the default value of the text input in prompt dialogs.

Example:

```javascript
alertify.confirm('Overwrite file?', {
  title: 'Confirmation',
  labels: { ok: 'Yes', cancel: 'No' },
  onok: function(){
    //Action on ok
  },
  oncancel: function(){
    //Action on cancel
  }
}, function (e) {
  // Callback for both ok and cancel
});

alertify.prompt('Enter your name', 'Default Name', function (e, str) {
    //Callback
});
```


### Handling Dialog Results and Events

The callback function provided to `alertify.confirm()` and `alertify.prompt()` receives the result of the user's interaction. For `alertify.confirm()`, it's a boolean (true for "OK", false for "Cancel"). For `alertify.prompt()`, it's the user's input string (or null if canceled).  You can use this information to perform actions based on the user's choice.  The `onok` and `oncancel` options provide alternative ways to handle button clicks without relying solely on the main callback.

Additionally, you might want to listen to other AlertifyJS events.  Check the AlertifyJS documentation for a comprehensive list of available events and how to use them.  These events might allow you to add more sophisticated handling of dialog interactions and notifications.  However, using the callback functions within the dialog functions are the most common and simplest approaches.


## Advanced Usage and Customization

### Creating Custom Notification Types

While AlertifyJS provides built-in notification types (success, error, warning, log), you can extend its functionality to create custom notification types that match your application's specific needs.  This involves creating a new function that leverages AlertifyJS's internal mechanisms to display a notification with a unique appearance and behavior.  This often requires directly manipulating the AlertifyJS DOM elements or using its internal APIs, which can be complex and requires a thorough understanding of the library's structure.  Direct manipulation of internal elements may break with future updates.  A safer approach might be to create a wrapper function that calls existing AlertifyJS methods, adding custom styling using CSS.

Example (Illustrative - Requires understanding AlertifyJS internals; use with caution):

```javascript
alertify.custom = function(message, options) {
  // Create a new notification element with custom styles based on options
  // ... (Complex DOM manipulation using AlertifyJS internals) ...
};

alertify.custom('This is a custom notification!', { type: 'info', icon: 'info-icon' });
```


### Extending AlertifyJS Functionality

You can extend AlertifyJS's core functionality by adding new methods or modifying existing ones. This typically involves creating your own JavaScript file and adding to the AlertifyJS namespace. This is highly dependent on the specific version of AlertifyJS used.  Check the library's documentation for guidance on its internal API, which may not always be explicitly documented and might change between versions.


Example (Illustrative – check AlertifyJS API for specific method names and structure):

```javascript
//In your custom JavaScript file:
alertify.myCustomMethod = function(message){
  //Your custom logic here that uses alertify's existing methods
  alertify.log("Custom Method called: " + message);
}

//In your main js file:
alertify.myCustomMethod("This is a test message");

```

This approach requires careful consideration to avoid conflicts with existing methods or breaking changes in future AlertifyJS updates.


### Integrating with Other JavaScript Frameworks

AlertifyJS is designed to be compatible with various JavaScript frameworks (like React, Angular, Vue.js, etc.). The integration process often involves incorporating AlertifyJS into your framework's component structure or using its APIs within your framework's context. For example, in a React application, you might import AlertifyJS and call its methods within component functions.  In Angular, you might inject it as a service.  The specifics depend on the chosen framework and its integration patterns.  Be aware that changes in the AlertifyJS library may affect compatibility, requiring updates to the integration code.


### Accessibility Considerations and Best Practices

To ensure your AlertifyJS notifications and dialogs are accessible to users with disabilities, consider the following:

* **Semantic HTML:** Use appropriate HTML elements (e.g., `<button>`, `<p>`, `<h1>`) to convey meaning.
* **ARIA attributes:**  Employ ARIA attributes (e.g., `aria-label`, `aria-describedby`) to provide additional information for assistive technologies (screen readers).
* **Keyboard accessibility:** Make sure all interactive elements (buttons, dialogs) are accessible via the keyboard.  Proper tab order and focus management is crucial.
* **Color contrast:** Ensure adequate color contrast between text and background colors to improve readability for users with low vision.
* **Screen reader compatibility:**  Test your implementation with screen readers to verify that notifications and dialogs are correctly announced and interpreted.
* **Sufficient time:** Provide enough time for users to read notifications, and avoid using excessively short display times. Consider using the `delay` option judiciously and be mindful of users who might require more time.


By following these accessibility guidelines, you can create AlertifyJS notifications and dialogs that are usable and inclusive for everyone. Remember to test your implementation thoroughly with different assistive technologies.


## API Reference

The following documentation assumes you have included AlertifyJS in your project (refer to the Installation section if needed).  Note that argument names in square brackets `[]` are optional.  Specific return values are described where relevant.  The behaviour of AlertifyJS might change with new versions; always refer to the official documentation for the latest and most accurate information.


### alertify.success(message[, title][, callback])

Displays a success notification.

* **message (string):** The notification message.  Required.
* **title (string, optional):**  A title for the notification.
* **callback (function, optional):** A function to be executed after the notification is closed.  Receives no arguments.

**Returns:**  `undefined`


### alertify.error(message[, title][, callback])

Displays an error notification.

* **message (string):** The notification message.  Required.
* **title (string, optional):** A title for the notification.
* **callback (function, optional):** A function to be executed after the notification is closed.  Receives no arguments.

**Returns:** `undefined`


### alertify.warning(message[, title][, callback])

Displays a warning notification.

* **message (string):** The notification message.  Required.
* **title (string, optional):** A title for the notification.
* **callback (function, optional):** A function to be executed after the notification is closed.  Receives no arguments.

**Returns:** `undefined`


### alertify.log(message[, title][, callback])

Displays a log message notification.

* **message (string):** The notification message.  Required.
* **title (string, optional):** A title for the notification.
* **callback (function, optional):** A function to be executed after the notification is closed. Receives no arguments.

**Returns:** `undefined`


### alertify.confirm(message[, options][, callback])

Displays a confirmation dialog.

* **message (string):** The confirmation message. Required.
* **options (object, optional):** An object containing customization options (e.g., `title`, `labels`, `onok`, `oncancel`). See the Customizing Dialog Appearance and Behavior section for details.
* **callback (function, optional):** A function executed after the user clicks a button. Receives a boolean argument (`true` for "OK", `false` for "Cancel").  If `onok` and `oncancel` options are used in `options`, this callback will not be executed.


**Returns:** `undefined`


### alertify.prompt(message[, defaultValue][, callback])

Displays a prompt dialog with an input field.

* **message (string):** The prompt message. Required.
* **defaultValue (string, optional):**  The default value in the input field.
* **callback (function):** A function executed after the user clicks a button. Receives two arguments: a boolean (`true` for "OK", `false` for "Cancel") and the user's input string (or `null` if canceled).


**Returns:** `undefined`


### alertify.set(key, value)

Sets a global setting for AlertifyJS.  This affects all subsequent notifications and dialogs.  Check the documentation for a list of available settings (e.g., `delay`, `position`, `buttonReverse`).

* **key (string):** The setting to modify.
* **value (various):** The new value for the setting.  The type depends on the specific setting.

**Returns:** `undefined`


### alertify.reset()

Resets all AlertifyJS settings to their default values.

**Returns:** `undefined`


### alertify.close([instance])

Closes a specific AlertifyJS notification or dialog.  If no `instance` is provided, it attempts to close the most recently opened one. The `instance` usually comes from the return value of other AlertifyJS methods, although this is not consistent across versions.  Consult the AlertifyJS documentation for more information on the return values of the methods.

* **instance (object, optional):** The instance of the notification or dialog to close.

**Returns:** `undefined`


### alertify.removeAll()

Closes all currently open AlertifyJS notifications and dialogs.

**Returns:** `undefined`



## Troubleshooting and Common Issues

### Debugging Tips

When encountering issues with AlertifyJS, these debugging techniques can be helpful:

* **Check the Console:** Open your browser's developer console (usually by pressing F12).  Look for JavaScript errors related to AlertifyJS.  These errors often pinpoint the source of the problem.

* **Inspect the DOM:** Use your browser's developer tools to inspect the HTML structure generated by AlertifyJS.  This can help identify inconsistencies in styling or unexpected behavior.

* **Simplify Your Code:** Isolate the problematic code by creating a minimal example that reproduces the issue. This makes it easier to pinpoint the cause.

* **Version Compatibility:** Make sure you are using compatible versions of AlertifyJS and other JavaScript libraries in your project.  Conflicts between libraries can cause unexpected problems.

* **Check the Documentation:** Review the official AlertifyJS documentation carefully.  The solution might be already documented there.

* **Search for Similar Issues:** Search online forums and issue trackers for reports of similar problems. Someone might have encountered and solved the same issue before.

* **Examine the AlertifyJS Source Code:** If you are comfortable with JavaScript and have access to the AlertifyJS source code (available on the project's repository), you can step through the code using your browser's debugger to understand what's happening internally.  This is generally for advanced users.


### Common Errors and Solutions

* **"Uncaught ReferenceError: alertify is not defined":** This means AlertifyJS hasn't been correctly included in your HTML file.  Double-check the `<script>` tag and ensure the correct path to the AlertifyJS library is specified.

* **Styling Issues:** If notifications or dialogs don't appear as expected, check your CSS for conflicts.  Inspect the element with your browser's developer tools to see if your custom styles are overriding AlertifyJS's styles unintentionally.  Try temporarily disabling your custom CSS to see if that solves the problem.

* **Functionality Problems:** If notifications don't appear, dialogs don't open, or buttons don't work, ensure you are using the AlertifyJS methods correctly.  Review the API reference to confirm the usage.  Consider if another JavaScript library is interfering with the functionality.

* **Unexpected Behavior After Update:** After updating AlertifyJS, inconsistencies might occur due to API changes.  Consult the release notes or changelog for the updated version to see if there are any breaking changes or adjustments required in your code.

* **Callback Issues:** If callback functions within `alertify.confirm()` or `alertify.prompt()` are not executing, check that the functions are correctly defined and the syntax is correct within the `alertify` methods.


### Browser Compatibility

AlertifyJS generally supports modern browsers.  However, very old or outdated browsers might have compatibility issues.  For best results, target browsers that have good JavaScript support and a relatively recent rendering engine.  Thoroughly testing your application across different browsers is always recommended.


### Known Limitations

* **Complex Customization:** While AlertifyJS provides options for customization, highly specific visual designs might require significant CSS modification or might not be easily achievable without direct manipulation of the internal DOM structures, which is generally discouraged due to the risk of breaking with future versions.

* **Limited Accessibility Features Out-of-the-Box:** Although AlertifyJS aims for accessibility, you might need to add ARIA attributes and handle keyboard navigation explicitly for full accessibility compliance, especially for complex dialogs.

* **Potential for Conflicts:**  Conflicts might occur if other JavaScript libraries manipulate the DOM in ways that interfere with AlertifyJS’s functionality.  Careful consideration is needed when integrating AlertifyJS with other JavaScript libraries.

* **Dependency on jQuery (Older Versions):** Some older versions of AlertifyJS might depend on the jQuery library. Newer versions are independent of jQuery and should be preferred.  Refer to the AlertifyJS documentation to know which version you are using and its dependencies.

Remember to always consult the official AlertifyJS documentation for the most up-to-date information on troubleshooting, compatibility, and known limitations.

