---
title: "Flot - Documentation"
categories: [ "JavaScript Libraries and Functions" ]
---


### What is Flot?

Flot is a pure JavaScript plotting library for jQuery, designed for producing simple yet elegant line, bar, and pie charts within web applications.  It's lightweight, easy to use, and highly customizable, making it a popular choice for quickly integrating interactive data visualization into web projects. Flot focuses on providing a clean and straightforward API, minimizing the learning curve for developers.  Its reliance on jQuery simplifies integration into existing jQuery-based projects.


### Key Features and Benefits

* **Simplicity and Ease of Use:** Flot boasts a concise API, making it straightforward to learn and implement, even for developers with limited JavaScript experience.
* **Lightweight:**  It's a small library with a minimal footprint, ensuring fast loading times and optimal performance.
* **Customization:**  Flot offers extensive customization options, allowing you to tailor charts to match your application's specific design and requirements.  This includes options for colors, labels, axes, gridlines, and more.
* **Multiple Chart Types:**  Supports creating various chart types, including line charts, bar charts, and pie charts, covering a wide range of data visualization needs.
* **Interactive Features:**  Provides interactive elements like tooltips, zooming, and panning, enhancing user engagement and data exploration.
* **jQuery Integration:**  Seamlessly integrates with jQuery, leveraging its strengths for DOM manipulation and event handling.


### Setting up Flot: Installation and Dependencies

Flot requires jQuery.  You can download both libraries from their respective websites or use a package manager like npm or yarn.

**Using a CDN:** The easiest way to include Flot is through a Content Delivery Network (CDN).  Include the jQuery library first, followed by the Flot library:

```html
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flot/jquery.flot.min.js"></script> 
```

**Using npm:** If you are using npm, install Flot and jQuery:

```bash
npm install jquery flot
```

Then, in your JavaScript file, require them appropriately (the specific syntax will depend on your module bundler):


```javascript
// Example using a module bundler like Webpack
const $ = require('jquery');
require('flot');
```


### Basic Usage Example

This example creates a simple line chart:

```html
<!DOCTYPE html>
<html>
<head>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flot/jquery.flot.min.js"></script>
</head>
<body>
<div id="placeholder" style="width:600px;height:300px;"></div>

<script>
$(function () {
    var data = [
        [0, 10],
        [1, 20],
        [2, 15],
        [3, 25]
    ];
    $.plot($("#placeholder"), [data]);
});
</script>
</body>
</html>
```

This code snippet includes jQuery and Flot via CDN, then uses `$.plot()` to create a chart within the div with the ID "placeholder". The `data` array provides the x and y coordinates for the line.  Remember to adjust paths to your library files if not using CDNs.


## Basic Plotting

### Creating a Simple Line Chart

Creating a line chart with Flot is straightforward.  You provide the plotting data as an array of points, and Flot handles the rendering.

```javascript
$(function () {
    var data = [
        [0, 10], [1, 20], [2, 15], [3, 25], [4, 30]
    ];

    $.plot("#placeholder", [data]);
});
```

This code creates a line chart with the given data points.  Replace `"#placeholder"` with the ID of your target div element. The data is an array of `[x, y]` coordinate pairs.


### Creating a Bar Chart

To create a bar chart, you use the same `$.plot()` function, but you need to specify the `series.bars` option within the options object:

```javascript
$(function () {
    var data = [
        [0, 10], [1, 20], [2, 15], [3, 25], [4, 30]
    ];

    $.plot("#placeholder", [data], {
        series: {
            bars: {
                show: true,
                barWidth: 0.6 // Adjust bar width as needed
            }
        }
    });
});
```

This adds bars to the chart.  `barWidth` controls the width of the bars (0.6 is a common value). Other options within `series.bars` allow further customization (e.g., `align`, `fill`).


### Creating a Pie Chart

Pie charts require a slightly different data structure. Each data point should be an object with a `label` and a `data` value:

```javascript
$(function () {
    var data = [
        { label: "Series A", data: 10 },
        { label: "Series B", data: 20 },
        { label: "Series C", data: 15 }
    ];

    $.plot("#placeholder", data, {
        series: {
            pie: {
                show: true
            }
        }
    });
});
```

This creates a pie chart. The `label` property is used for the slice labels, and `data` represents the value.


### Data Format and Structure

Flot accepts data in different formats, depending on the chart type:

* **Line and Bar Charts:**  An array of arrays, where each inner array represents a data point `[x, y]`. Multiple datasets are represented as an array of these arrays.

* **Pie Charts:** An array of objects, where each object has a `label` (string) and `data` (number) property.

For more complex scenarios (e.g., multiple datasets, time series),  the data structure can be more elaborate; refer to the Flot documentation for advanced options.


### Axis Configuration: Labels, Ranges, and Tick Formatting

You can customize the axes using the `xaxis` and `yaxis` options within the `$.plot()` options object:

```javascript
$(function () {
    var data = [[0, 10], [1, 20], [2, 15], [3, 25]];

    $.plot("#placeholder", [data], {
        xaxis: {
            ticks: [[0, "Jan"], [1, "Feb"], [2, "Mar"], [3, "Apr"]], //Custom ticks
            min: 0, //Set minimum value
            max: 3 //Set maximum value
        },
        yaxis: {
            min: 0,
            max: 30,
            tickFormatter: function (val, axis) {
                return val + "Â°C"; //Custom tick formatting
            }
        }
    });
});
```

This example customizes x-axis ticks with month labels, sets axis ranges, and adds a degree Celsius suffix to the y-axis ticks using a custom `tickFormatter`.


### Legends and Titles

Legends and titles enhance chart readability.  You can enable legends automatically, or customize their placement and appearance.  Titles require a bit more manual work using HTML elements:

```javascript
$(function () {
  // ... your plot data and options ...

  $.plot("#placeholder", [data], options);  //options as defined above

  // Add title manually (Flot doesn't directly support titles)
  $("#placeholder").before("<div style='font-size:1.2em; font-weight:bold;'>My Chart Title</div>");

});
```

This adds a title above the chart.  For legends, simply include `legend: { show: true }` within your options object to enable Flot's automatic legend generation.  Further legend options allow controlling position, background, and more.


## Advanced Plotting Techniques

### Multiple Axes and Plots

Flot allows you to create plots with multiple axes (e.g., a secondary y-axis) and combine multiple plots within a single container.  For multiple axes, you specify `yaxis` and `y2axis` options (and corresponding data series linked to each axis):

```javascript
$(function () {
    var data1 = [[0, 10], [1, 20], [2, 15]];
    var data2 = [[0, 50], [1, 60], [2, 55]];

    $.plot("#placeholder", [
        { data: data1, yaxis: 1 },
        { data: data2, yaxis: 2 }
    ], {
        yaxes: [{}, {
            position: 'right',
            alignTicksWithAxis: 1
        }]
    });
});
```

This creates a plot with two y-axes; `data1` uses the primary y-axis (yaxis: 1, default), and `data2` uses the secondary (yaxis: 2).  Note the `yaxes` configuration for positioning and alignment.  Multiple plots in one container require careful management of the plot's dimensions and data series.


### Interactive Zooming and Panning

Flot supports interactive zooming and panning using the `zoom` and `pan` options.  Enabling these requires specifying appropriate options and handling the `plotselected` event:

```javascript
$(function () {
    var options = {
        zoom: { interactive: true },
        pan: { interactive: true },
        selection: { mode: "xy" }
    };

    var plot = $.plot("#placeholder", [data], options);  //data is your data array

    $("#placeholder").bind("plotselected", function (event, ranges) {
        plot.setSelection(ranges);
    });
});
```

This enables interactive zooming and panning. The `plotselected` event fires when the user selects a region (through zooming/panning), allowing you to update the plot accordingly.  The `selection` option defines the selection mode ("xy" for both axes).


### Highlighting Data Points

Highlighting data points on mouseover requires handling the `plothover` event:

```javascript
$(function () {
    var plot = $.plot("#placeholder", [data]); // data is your data array

    $("#placeholder").bind("plothover", function (event, pos, item) {
        if (item) {
            $("#tooltip").html(item.datapoint[1]) //Show y-value in tooltip
                .css({ top: item.pageY + 5, left: item.pageX + 5 })
                .fadeIn(200);
        } else {
            $("#tooltip").hide();
        }
    });
});
```

This example shows a simple tooltip containing the y-value on hover. You'll need a `<div id="tooltip"></div>` element in your HTML for this to work.  More sophisticated highlighting can involve changing point colors or sizes.


### Customizing Tooltips

Building upon the highlighting example, you can customize tooltips to display any relevant information from your data:

```javascript
// ... inside plothover event handler ...
$("#tooltip").html("X: " + item.datapoint[0] + "<br>Y: " + item.datapoint[1] + "<br>Series: " + item.series.label)
// ...
```

This displays x-value, y-value, and series label in the tooltip.  You can add any other data associated with the data point.


### Working with Time Series Data

Flot handles time series data effectively.  You need to use JavaScript's `Date` object for the x-values:

```javascript
$(function () {
    var data = [
        [new Date(2024, 0, 1), 10],
        [new Date(2024, 0, 8), 20],
        // ... more data points
    ];

    $.plot("#placeholder", [data], {
        xaxis: {
            mode: "time",
            timeformat: "%m/%d" // Customize time format
        }
    });
});
```

The `mode: "time"` option in `xaxis` is crucial.  `timeformat` controls how time values are displayed on the x-axis.


### Using Different Chart Types in One Plot

You can combine different chart types in a single plot by creating an array of series with different options:

```javascript
$(function () {
    var data1 = [ ...line chart data...];
    var data2 = [ ...bar chart data...];

    $.plot("#placeholder", [
        { data: data1, lines: { show: true } },
        { data: data2, bars: { show: true } }
    ]);
});
```

This combines line and bar charts.  Each series object specifies its own chart type options.


### Plotting Large Datasets: Performance Optimization

Plotting very large datasets can impact performance.  Flot provides options to optimize:

* **`series.downsample`:** This option allows you to reduce the number of data points plotted, improving performance for very large datasets.
* **`points.show: false`:** Avoid showing individual points if not strictly necessary; lines or bars often suffice.
* **Use a smaller canvas:** Reduce the canvas size to improve rendering speed if possible, balancing visual clarity with performance.
* **Consider alternatives:** For extremely large datasets, explore other specialized visualization libraries or techniques.

Remember that optimizing for large datasets involves finding the right balance between visual representation and performance based on your specific data and hardware capabilities.


## Customization and Styling

### Series Options: Colors, Lines, Markers, and Fillings

Flot offers extensive options to customize the appearance of individual data series.  These options are specified within the `series` object in the `$.plot()` options.

```javascript
$(function () {
    var data = [ ... your data ... ];

    $.plot("#placeholder", [data], {
        series: {
            color: "#007bff", // Set a specific color
            lines: { show: true, lineWidth: 2, fill: 0.2 }, // Customize lines
            points: { show: true, radius: 3, fillColor: "#ffffff" }, // Customize points
            bars: { show: false } // disable bars if needed
        }
    });
});

```
This example shows how to set series color, line width, filling, point radius and point color. You can adjust `fill` (0-1) for the line fill opacity.  Many other options exist within `lines`, `points`, and `bars` to control appearance.  For multiple datasets, you can specify these options for each series individually within the data array.


### Grid Customization: Background, Lines, and Markings

The plot's grid can be customized extensively.  Options are defined within the `grid` option.

```javascript
$(function () {
    var data = [ ... your data ... ];

    $.plot("#placeholder", [data], {
        grid: {
            backgroundColor: { colors: ["#fff", "#eee"] }, // Two-color gradient background
            borderColor: "#ccc", // Border color
            borderWidth: 1,
            hoverable: true, // Enable hover effects
            clickable: true,  // Enable click effects
            autoHighlight: true, // Highlight on hover automatically
            markings: [ // Add markings to the grid
                { xaxis: { from: 1, to: 2 }, color: "#faa" },
            ]
        }
    });
});
```

This example shows how to set a gradient background, border, enables hover and click effects, and adds a highlighted marking to a section of the grid. `markings` allows creating horizontal or vertical highlighted regions.


### Axis Customization: Tick Placement, Labels, and Rotation

Axis appearance is customizable via `xaxis` and `yaxis` options.

```javascript
$(function () {
    var data = [ ... your data ... ];

    $.plot("#placeholder", [data], {
        xaxis: {
            ticks: [ [0,"Zero"], [1,"One"], [2,"Two"] ], // Custom ticks and labels
            tickColor: "#999", // Tick color
            tickLength: 5, // Tick length
            tickFormatter: function (val, axis) { return val * 10; }, // custom formatting function
            rotateTicks: 45 // Rotate x-axis labels by 45 degrees.
        },
        yaxis: {
            min: 0,
            max: 100,
            tickDecimals: 2 // Two decimal places on y-axis ticks
        }
    });
});
```

This example demonstrates setting custom ticks and labels,  tick color, length, and custom formatting function.  `rotateTicks` rotates labels for improved readability (particularly useful for long labels on x-axis).


### Theme and Styling Options

Flot itself doesn't directly support themes, but you can achieve themed appearances through CSS and by consistently applying the options described above across your charts.  Creating a JavaScript object containing common plot options and applying this to multiple chart initializations will make it easier to maintain a consistent style across your application.


### Using CSS for Styling

While many aspects are controlled via Flot's options, you can enhance styling using CSS.  Target elements like the plot container (`#placeholder`), axes, and legend elements.  For instance:

```css
#placeholder {
    font-family: sans-serif; /* Customize font */
}

.flot-xaxis-label {
    font-weight: bold;  /* Customize x-axis label style */
}
```

CSS offers granular control over fonts, colors, and overall presentation. Note the class names used for axis labels, which are subject to potential changes, so consult the Flot documentation for the most up-to-date class names.


### Creating Custom Plugins

Flot's extensibility is achieved through plugins.  Creating a plugin involves writing a JavaScript function that adds new functionality or options to Flot.  This often involves adding new methods to the `$.plot` function or modifying existing ones.  A comprehensive guide on plugin development would require a separate, detailed section beyond the scope of this manual's introduction.  Consult the official Flot documentation and examples for detailed information about plugin creation.


## Plugins and Extensions

### Overview of Available Plugins

Flot's core functionality can be extended significantly through plugins. While Flot's core is relatively lean, a vibrant community has developed several plugins to add features not included in the base library.  These plugins often provide capabilities like:

* **Additional Chart Types:** Plugins extending Flot's chart types beyond the basic line, bar, and pie charts.  This might include candlestick charts, scatter plots, or specialized chart variations.
* **Enhanced Interactivity:** Plugins that add more sophisticated interactive features such as data point selection, drag-and-drop reordering of data points, or advanced zoom/pan controls.
* **Data Handling and Processing:** Plugins that aid in pre-processing or manipulating data before it's passed to Flot for plotting, perhaps handling large datasets more efficiently or performing data transformations.
* **Aesthetic Enhancements:**  Plugins offering extra styling options or themes to customize the look and feel of the charts.
* **Exporting and Printing:** Plugins for exporting charts to image formats (PNG, JPG, SVG) or enabling printing directly from the browser.


Finding available plugins often involves searching online repositories like GitHub.  The official Flot website may also list or link to some popular plugins.  Be sure to check the plugin's compatibility with your Flot version.


### Integrating and Using Plugins

Plugin integration usually involves including the plugin's JavaScript file in your HTML after including the Flot library and jQuery:

```html
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flot/jquery.flot.min.js"></script>
<script src="path/to/your/plugin.js"></script>  <!-- Path to your plugin -->
```

After including the plugin, its functionality should be automatically available.  The specific usage will depend on the plugin's documentation.  Many plugins add new options to the `$.plot()` function's options object or introduce entirely new functions. Consult the plugin's documentation for specific instructions on how to use its features.


### Developing Custom Plugins

Creating a custom Flot plugin involves extending Flot's functionality to add new features.  This is generally done by registering a new plugin with Flot, adding new options, and potentially modifying the internal plotting behavior.  While the specifics depend on the plugin's complexity, the fundamental steps often include:

1. **Create a JavaScript file:** This file will contain your plugin's code.

2. **Define the plugin function:** This function will typically register the plugin with Flot and define its options and functionality.  It might add new options to the `$.plot` options object, or modify how data is processed or rendered.

3. **Register the plugin:**  Use Flot's plugin registration mechanism (usually a call to `$.plot.plugins.push()`) to register your plugin with Flot.

4. **Add new functionality:** This might involve creating new methods within the `$.plot` object or extending existing methods.

5. **Handle options:** Properly handle the plugin's options within your plugin function.

6. **Testing:** Thoroughly test your plugin to ensure it works correctly and integrates seamlessly with Flot.


Developing plugins requires a good understanding of Flot's internal workings and JavaScript object-oriented programming. The official Flot documentation (if available) may provide more advanced information about plugin development.  Referencing existing plugins and examining their code can provide valuable insight into plugin architecture and implementation details.  Creating a robust plugin requires good testing and documentation practices.


## API Reference

This section provides a concise overview of Flot's core API.  For complete details and a comprehensive list of options, refer to the full Flot documentation (if available).  Note that specific option names and functionalities may vary slightly depending on the Flot version.


### $.plot Function

The core function for creating a plot is `$.plot()`.  It takes three primary arguments:

* **`placeholder`:** A jQuery object representing the DOM element where the plot will be rendered (usually a `<div>`).
* **`data`:**  An array of datasets. Each dataset can be an array of `[x, y]` points (for line and bar charts) or an array of objects with `label` and `data` properties (for pie charts). The structure varies depending on the chart type.
* **`options`:**  An object containing options to customize the plot's appearance and behavior.  This is where you configure axes, grids, legends, series styles, and more.

```javascript
$.plot(placeholder, data, options);
```

The `$.plot` function returns a `plot` object that can be used to interact with the plot after it has been rendered (e.g., for zooming, panning, or accessing data).


### Options Object

The `options` object is a key part of customizing Flot plots.  It contains numerous properties grouped into categories like `series`, `xaxis`, `yaxis`, `grid`, `legend`, etc.   Some commonly used options include:

* **`series`:**  An object containing options that apply to all series or individual series (see "Series Options" below).
* **`xaxis` and `yaxis`:** Objects with options to customize the x and y axes (see "Axis Options" below).
* **`grid`:** An object for configuring the grid's appearance (see "Grid Options" below).
* **`legend`:** Options for controlling the legend (see "Legend Options" below).
* **`zoom` and `pan`:** Options to enable and control interactive zooming and panning.
* **`selection`:** Options to configure selection behavior when zooming or panning.


### Series Options

Series-specific options determine how each dataset is rendered. They are often specified within the `series` option.

* **`color`:** Specifies the color of the series.
* **`lines`:**  Options for line charts (e.g., `show`, `lineWidth`, `fill`).
* **`points`:** Options for points (e.g., `show`, `radius`, `symbol`).
* **`bars`:** Options for bar charts (e.g., `show`, `barWidth`, `align`).
* **`pie`:** Options for pie charts (e.g., `show`, `radius`, `label`).
* **`label`:** A label for the series to be used in the legend.

These options are frequently used to adjust line styles, point sizes, bar widths, and other visual aspects of individual datasets. They can be defined globally in the series option or individually for each dataset within the `data` array.


### Axis Options

Axis options control the appearance and behavior of the x and y axes (`xaxis` and `yaxis`).

* **`min` and `max`:**  Set minimum and maximum values for the axis.
* **`ticks`:**  Control tick placement and labels (can be an array of values or a function).
* **`tickSize`:** Sets spacing between ticks.
* **`tickFormatter`:** A function to format tick labels.
* **`label`:** A label for the axis.
* **`mode`:**  For time series data, set to `"time"`.
* **`timeformat`:**  Specifies the time format for time series axes.


### Grid Options

Grid options control the background and lines of the plot area.

* **`show`:** Enable or disable the grid.
* **`backgroundColor`:** Sets the background color or gradient.
* **`borderColor`:** Sets the color of the grid lines.
* **`borderWidth`:** Sets the width of the grid lines.
* **`hoverable`:** Enable hover events.
* **`clickable`:** Enable click events.
* **`markings`:**  Allows adding highlighted regions to the grid.


### Legend Options

Legend options control the display of the legend.

* **`show`:** Enable or disable the legend.
* **`position`:**  Specifies the legend's position (e.g., "nw", "se").
* **`container`:** Specifies a custom container for the legend.
* **`noColumns`:** Specifies the number of columns in the legend.


### Events and Callbacks

Flot supports several events that you can listen for using jQuery's `.bind()` method (or the more modern `.on()`). Key events include:

* **`plothover`:** Fired when the mouse hovers over the plot area.
* **`plotclick`:** Fired when the plot area is clicked.
* **`plotselected`:** Fired when a region is selected (usually after zooming/panning).
* **`plotunselected`:** Fired when the selection is cleared.

These events typically pass information about the event's location and data point (if applicable) to the callback function.  Using these events allows you to implement interactive features such as tooltips, zooming, and data point highlighting.  Consult the full Flot documentation for specific details on the arguments passed to each callback.


Remember that this is a simplified overview.  Consult the complete Flot API documentation for detailed descriptions of all options, methods, and events.  The specifics may differ depending on the Flot version.


## Troubleshooting and FAQs

### Common Errors and Solutions

This section addresses some common issues encountered when using Flot.

* **"Uncaught ReferenceError: $ is not defined"**: This error indicates jQuery isn't correctly included in your HTML file before Flot. Ensure that the jQuery library is loaded *before* the Flot library.

* **Incorrect Data Format**: Flot requires specific data formats for different chart types.  Double-check that your data array matches the expected structure (arrays of `[x, y]` pairs for line/bar charts, arrays of objects with `label` and `data` for pie charts).  Inspect your console for errors related to data parsing.

* **Missing or Incorrect Options**: Typos or incorrect settings in the `options` object can lead to unexpected behavior.  Carefully review your options for any errors.  Start with a minimal, working example and gradually add options to isolate the source of the problem.

* **Version Compatibility Issues**: Ensure your Flot version is compatible with your jQuery version and any plugins you are using.  Older Flot versions may not support all features or options found in newer releases.

* **Canvas Rendering Issues**: If the chart isn't rendering correctly, check if the `<div>` element where the plot is being created has the correct dimensions (width and height explicitly set, not just inherited). Ensure that you're not accidentally clearing the canvas using JavaScript.

* **Plugin Conflicts**: If you're using plugins, conflicts can occur if plugins aren't properly loaded or have compatibility issues. Make sure plugins are loaded correctly and are compatible with your Flot and jQuery versions.


### Debugging Tips

* **Use your browser's developer tools**: The browser's developer console (usually accessed by pressing F12) is invaluable for debugging.  Check for JavaScript errors, warnings, and examine network requests to ensure that Flot's JavaScript files load successfully.

* **Simplify your code**: If you encounter a problem in complex code, try creating a minimal, reproducible example.  This will help to isolate the problematic code segment and make it easier to identify the issue.

* **Inspect the DOM**: Use your browser's developer tools to inspect the DOM (Document Object Model) and check that the plot's container element exists and has the necessary attributes.

* **Check the console for warnings**: The console may show warnings that don't necessarily cause errors but might point to potential issues or inefficiencies.

* **Step-by-step debugging**: Use your browser's debugging capabilities (breakpoints) to step through your code line by line and observe variable values at each step.


### Frequently Asked Questions

* **How do I add tooltips?**: Tooltips are not included in the Flot core.  You'll need to handle the `plothover` event and create a tooltip element dynamically using JavaScript.  See the documentation for advanced examples on customizing tooltips.

* **How do I handle large datasets?**:  For large datasets, consider using the `downsample` option in Flot to reduce the number of data points plotted.  Also, avoid showing individual points if it's not necessary for readability; lines or bars are often sufficient.  In cases of exceptionally large datasets, you might consider using alternative visualization libraries more optimized for such data.

* **How do I change the chart's colors?**:  Chart colors are controlled using the `color` property within the `series` options. You can also provide colors for individual data series using an array of colors or by setting colors for each data object.

* **How do I add a title?**:  Flot itself doesn't provide direct support for adding titles. You'll typically need to add a title element (e.g., an `<h1>` or `<div>`) to your HTML above or alongside the plot container.

* **How can I save/export my chart?**:  Exporting capabilities are often provided by plugins.  There is no built-in export functionality within the core Flot library. You'll need to search for and integrate a suitable plugin that can generate PNG, JPG, SVG, or other formats from your Flot chart.


This FAQ section is not exhaustive, and new questions may arise depending on the specific application and the Flot version used.  Refer to the online Flot documentation and community forums for more detailed answers and further assistance.

